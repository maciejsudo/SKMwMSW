
uart_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08009750  08009750  00019750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800982c  0800982c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800982c  0800982c  0001982c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009834  08009834  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009834  08009834  00019834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009838  08009838  00019838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800983c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  20000090  080098cc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000990  080098cc  00020990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4c3  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f28  00000000  00000000  0003f583  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018b0  00000000  00000000  000434b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001710  00000000  00000000  00044d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000257cc  00000000  00000000  00046470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015b69  00000000  00000000  0006bc3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4ec3  00000000  00000000  000817a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00156668  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c64  00000000  00000000  001566e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009738 	.word	0x08009738

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009738 	.word	0x08009738

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_TIM_PeriodElapsedCallback>:
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){ // Jeżeli przerwanie pochodzi od timera 10
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a05      	ldr	r2, [pc, #20]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d102      	bne.n	8000588 <HAL_TIM_PeriodElapsedCallback+0x18>
		timer_state=1;
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40014400 	.word	0x40014400
 8000598:	200000ac 	.word	0x200000ac

0800059c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]


	receive_flag=1;
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <HAL_UART_RxCpltCallback+0x1c>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]

}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	200000ad 	.word	0x200000ad

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fdf1 	bl	80011a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f931 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fa95 	bl	8000af8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ce:	f000 f9af 	bl	8000930 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005d2:	f000 f9db 	bl	800098c <MX_I2S3_Init>
  MX_SPI1_Init();
 80005d6:	f000 fa09 	bl	80009ec <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005da:	f008 f95d 	bl	8008898 <MX_USB_HOST_Init>
  MX_TIM10_Init();
 80005de:	f000 fa3b 	bl	8000a58 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 fa5f 	bl	8000aa4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim10);
 80005e6:	487f      	ldr	r0, [pc, #508]	; (80007e4 <main+0x228>)
 80005e8:	f004 fa6d 	bl	8004ac6 <HAL_TIM_Base_Start_IT>

HAL_UART_Receive_IT(&huart2, &Received, 1);
 80005ec:	2201      	movs	r2, #1
 80005ee:	497e      	ldr	r1, [pc, #504]	; (80007e8 <main+0x22c>)
 80005f0:	487e      	ldr	r0, [pc, #504]	; (80007ec <main+0x230>)
 80005f2:	f004 fd03 	bl	8004ffc <HAL_UART_Receive_IT>
  while (1)
  {



	  if(timer_state==1)
 80005f6:	4b7e      	ldr	r3, [pc, #504]	; (80007f0 <main+0x234>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d118      	bne.n	8000630 <main+0x74>
	  {
			 ++cnt; // Zwiekszenie licznika wyslanych wiadomosci.
 80005fe:	4b7d      	ldr	r3, [pc, #500]	; (80007f4 <main+0x238>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	b29a      	uxth	r2, r3
 8000606:	4b7b      	ldr	r3, [pc, #492]	; (80007f4 <main+0x238>)
 8000608:	801a      	strh	r2, [r3, #0]
			 size = sprintf(data, "									message nr: %d.\n\r", cnt); // Stworzenie wiadomosci do wyslania oraz przypisanie ilosci wysylanych znakow do zmiennej size.
 800060a:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <main+0x238>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	4979      	ldr	r1, [pc, #484]	; (80007f8 <main+0x23c>)
 8000612:	487a      	ldr	r0, [pc, #488]	; (80007fc <main+0x240>)
 8000614:	f008 fd42 	bl	800909c <siprintf>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	4b78      	ldr	r3, [pc, #480]	; (8000800 <main+0x244>)
 800061e:	801a      	strh	r2, [r3, #0]
			 //HAL_UART_Transmit_IT(&huart2, data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
			 HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin); // Zmiana stanu pinu na diodzie LED
 8000620:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000624:	4877      	ldr	r0, [pc, #476]	; (8000804 <main+0x248>)
 8000626:	f001 f93a 	bl	800189e <HAL_GPIO_TogglePin>
			 timer_state=0;
 800062a:	4b71      	ldr	r3, [pc, #452]	; (80007f0 <main+0x234>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
	  }

	  if(receive_flag==1)
 8000630:	4b75      	ldr	r3, [pc, #468]	; (8000808 <main+0x24c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	f040 80d2 	bne.w	80007de <main+0x222>
	  {

		    static uint8_t i=0;
		  	uint16_t size = 0; // Rozmiar wysylanej wiadomosci
 800063a:	2300      	movs	r3, #0
 800063c:	80fb      	strh	r3, [r7, #6]



			//size = sprintf(receive_data, "%s",Received);
			if (Received[0] == 13 || Received[0]== 10)
 800063e:	4b6a      	ldr	r3, [pc, #424]	; (80007e8 <main+0x22c>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b0d      	cmp	r3, #13
 8000644:	d004      	beq.n	8000650 <main+0x94>
 8000646:	4b68      	ldr	r3, [pc, #416]	; (80007e8 <main+0x22c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b0a      	cmp	r3, #10
 800064c:	f040 809c 	bne.w	8000788 <main+0x1cc>
			{
			size = sprintf(receive_data, "\n\r");
 8000650:	4b6e      	ldr	r3, [pc, #440]	; (800080c <main+0x250>)
 8000652:	4a6f      	ldr	r2, [pc, #444]	; (8000810 <main+0x254>)
 8000654:	8811      	ldrh	r1, [r2, #0]
 8000656:	7892      	ldrb	r2, [r2, #2]
 8000658:	8019      	strh	r1, [r3, #0]
 800065a:	709a      	strb	r2, [r3, #2]
 800065c:	2302      	movs	r3, #2
 800065e:	80fb      	strh	r3, [r7, #6]
			i=0;
 8000660:	4b6c      	ldr	r3, [pc, #432]	; (8000814 <main+0x258>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]

			//RLON/RLOFF
			//HELP
				if(data_buffer[0]=='h' && data_buffer[1]=='e' && data_buffer[2]=='l' && data_buffer[3]=='p')
 8000666:	4b6c      	ldr	r3, [pc, #432]	; (8000818 <main+0x25c>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b68      	cmp	r3, #104	; 0x68
 800066c:	d12c      	bne.n	80006c8 <main+0x10c>
 800066e:	4b6a      	ldr	r3, [pc, #424]	; (8000818 <main+0x25c>)
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	2b65      	cmp	r3, #101	; 0x65
 8000674:	d128      	bne.n	80006c8 <main+0x10c>
 8000676:	4b68      	ldr	r3, [pc, #416]	; (8000818 <main+0x25c>)
 8000678:	789b      	ldrb	r3, [r3, #2]
 800067a:	2b6c      	cmp	r3, #108	; 0x6c
 800067c:	d124      	bne.n	80006c8 <main+0x10c>
 800067e:	4b66      	ldr	r3, [pc, #408]	; (8000818 <main+0x25c>)
 8000680:	78db      	ldrb	r3, [r3, #3]
 8000682:	2b70      	cmp	r3, #112	; 0x70
 8000684:	d120      	bne.n	80006c8 <main+0x10c>
				{
					size = sprintf(data,"\r\nrlon - turns red led on\r\nrloff turns led red off\r\n");
 8000686:	4b5d      	ldr	r3, [pc, #372]	; (80007fc <main+0x240>)
 8000688:	4a64      	ldr	r2, [pc, #400]	; (800081c <main+0x260>)
 800068a:	4614      	mov	r4, r2
 800068c:	469c      	mov	ip, r3
 800068e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000692:	4665      	mov	r5, ip
 8000694:	4626      	mov	r6, r4
 8000696:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000698:	6028      	str	r0, [r5, #0]
 800069a:	6069      	str	r1, [r5, #4]
 800069c:	60aa      	str	r2, [r5, #8]
 800069e:	60eb      	str	r3, [r5, #12]
 80006a0:	3410      	adds	r4, #16
 80006a2:	f10c 0c10 	add.w	ip, ip, #16
 80006a6:	4574      	cmp	r4, lr
 80006a8:	d1f3      	bne.n	8000692 <main+0xd6>
 80006aa:	4663      	mov	r3, ip
 80006ac:	4622      	mov	r2, r4
 80006ae:	6810      	ldr	r0, [r2, #0]
 80006b0:	6018      	str	r0, [r3, #0]
 80006b2:	7912      	ldrb	r2, [r2, #4]
 80006b4:	711a      	strb	r2, [r3, #4]
 80006b6:	2334      	movs	r3, #52	; 0x34
 80006b8:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	461a      	mov	r2, r3
 80006be:	494f      	ldr	r1, [pc, #316]	; (80007fc <main+0x240>)
 80006c0:	484a      	ldr	r0, [pc, #296]	; (80007ec <main+0x230>)
 80006c2:	f004 fc56 	bl	8004f72 <HAL_UART_Transmit_IT>
 80006c6:	e05e      	b.n	8000786 <main+0x1ca>
				}

				else if(data_buffer[0]=='r' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='n')
 80006c8:	4b53      	ldr	r3, [pc, #332]	; (8000818 <main+0x25c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b72      	cmp	r3, #114	; 0x72
 80006ce:	d127      	bne.n	8000720 <main+0x164>
 80006d0:	4b51      	ldr	r3, [pc, #324]	; (8000818 <main+0x25c>)
 80006d2:	785b      	ldrb	r3, [r3, #1]
 80006d4:	2b6c      	cmp	r3, #108	; 0x6c
 80006d6:	d123      	bne.n	8000720 <main+0x164>
 80006d8:	4b4f      	ldr	r3, [pc, #316]	; (8000818 <main+0x25c>)
 80006da:	789b      	ldrb	r3, [r3, #2]
 80006dc:	2b6f      	cmp	r3, #111	; 0x6f
 80006de:	d11f      	bne.n	8000720 <main+0x164>
 80006e0:	4b4d      	ldr	r3, [pc, #308]	; (8000818 <main+0x25c>)
 80006e2:	78db      	ldrb	r3, [r3, #3]
 80006e4:	2b6e      	cmp	r3, #110	; 0x6e
 80006e6:	d11b      	bne.n	8000720 <main+0x164>
				{
					HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ee:	4845      	ldr	r0, [pc, #276]	; (8000804 <main+0x248>)
 80006f0:	f001 f8bc 	bl	800186c <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\nred led turned ON\r\n");
 80006f4:	4a41      	ldr	r2, [pc, #260]	; (80007fc <main+0x240>)
 80006f6:	4b4a      	ldr	r3, [pc, #296]	; (8000820 <main+0x264>)
 80006f8:	4615      	mov	r5, r2
 80006fa:	461c      	mov	r4, r3
 80006fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fe:	6028      	str	r0, [r5, #0]
 8000700:	6069      	str	r1, [r5, #4]
 8000702:	60aa      	str	r2, [r5, #8]
 8000704:	60eb      	str	r3, [r5, #12]
 8000706:	6820      	ldr	r0, [r4, #0]
 8000708:	6128      	str	r0, [r5, #16]
 800070a:	88a3      	ldrh	r3, [r4, #4]
 800070c:	82ab      	strh	r3, [r5, #20]
 800070e:	2315      	movs	r3, #21
 8000710:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	461a      	mov	r2, r3
 8000716:	4939      	ldr	r1, [pc, #228]	; (80007fc <main+0x240>)
 8000718:	4834      	ldr	r0, [pc, #208]	; (80007ec <main+0x230>)
 800071a:	f004 fc2a 	bl	8004f72 <HAL_UART_Transmit_IT>
 800071e:	e032      	b.n	8000786 <main+0x1ca>
				}

				else if(data_buffer[0]=='r' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='f' && data_buffer[4]=='f')
 8000720:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <main+0x25c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b72      	cmp	r3, #114	; 0x72
 8000726:	d14b      	bne.n	80007c0 <main+0x204>
 8000728:	4b3b      	ldr	r3, [pc, #236]	; (8000818 <main+0x25c>)
 800072a:	785b      	ldrb	r3, [r3, #1]
 800072c:	2b6c      	cmp	r3, #108	; 0x6c
 800072e:	d147      	bne.n	80007c0 <main+0x204>
 8000730:	4b39      	ldr	r3, [pc, #228]	; (8000818 <main+0x25c>)
 8000732:	789b      	ldrb	r3, [r3, #2]
 8000734:	2b6f      	cmp	r3, #111	; 0x6f
 8000736:	d143      	bne.n	80007c0 <main+0x204>
 8000738:	4b37      	ldr	r3, [pc, #220]	; (8000818 <main+0x25c>)
 800073a:	78db      	ldrb	r3, [r3, #3]
 800073c:	2b66      	cmp	r3, #102	; 0x66
 800073e:	d13f      	bne.n	80007c0 <main+0x204>
 8000740:	4b35      	ldr	r3, [pc, #212]	; (8000818 <main+0x25c>)
 8000742:	791b      	ldrb	r3, [r3, #4]
 8000744:	2b66      	cmp	r3, #102	; 0x66
 8000746:	d13b      	bne.n	80007c0 <main+0x204>
				{
					HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800074e:	482d      	ldr	r0, [pc, #180]	; (8000804 <main+0x248>)
 8000750:	f001 f88c 	bl	800186c <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\nred led turned OFF\r\n");
 8000754:	4a29      	ldr	r2, [pc, #164]	; (80007fc <main+0x240>)
 8000756:	4b33      	ldr	r3, [pc, #204]	; (8000824 <main+0x268>)
 8000758:	4614      	mov	r4, r2
 800075a:	461d      	mov	r5, r3
 800075c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800075e:	6020      	str	r0, [r4, #0]
 8000760:	6061      	str	r1, [r4, #4]
 8000762:	60a2      	str	r2, [r4, #8]
 8000764:	60e3      	str	r3, [r4, #12]
 8000766:	6828      	ldr	r0, [r5, #0]
 8000768:	6120      	str	r0, [r4, #16]
 800076a:	88ab      	ldrh	r3, [r5, #4]
 800076c:	79aa      	ldrb	r2, [r5, #6]
 800076e:	82a3      	strh	r3, [r4, #20]
 8000770:	4613      	mov	r3, r2
 8000772:	75a3      	strb	r3, [r4, #22]
 8000774:	2316      	movs	r3, #22
 8000776:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	461a      	mov	r2, r3
 800077c:	491f      	ldr	r1, [pc, #124]	; (80007fc <main+0x240>)
 800077e:	481b      	ldr	r0, [pc, #108]	; (80007ec <main+0x230>)
 8000780:	f004 fbf7 	bl	8004f72 <HAL_UART_Transmit_IT>
				if(data_buffer[0]=='h' && data_buffer[1]=='e' && data_buffer[2]=='l' && data_buffer[3]=='p')
 8000784:	e01c      	b.n	80007c0 <main+0x204>
 8000786:	e01b      	b.n	80007c0 <main+0x204>



			else
			{
			size = sprintf(receive_data, "%s",Received);
 8000788:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <main+0x22c>)
 800078a:	4927      	ldr	r1, [pc, #156]	; (8000828 <main+0x26c>)
 800078c:	481f      	ldr	r0, [pc, #124]	; (800080c <main+0x250>)
 800078e:	f008 fc85 	bl	800909c <siprintf>
 8000792:	4603      	mov	r3, r0
 8000794:	80fb      	strh	r3, [r7, #6]

			data_buffer[i]=receive_data[0];
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <main+0x258>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <main+0x250>)
 800079e:	7819      	ldrb	r1, [r3, #0]
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <main+0x25c>)
 80007a2:	5499      	strb	r1, [r3, r2]
			i++;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <main+0x258>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	3301      	adds	r3, #1
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <main+0x258>)
 80007ae:	701a      	strb	r2, [r3, #0]
			if(i==10)
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <main+0x258>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b0a      	cmp	r3, #10
 80007b6:	d104      	bne.n	80007c2 <main+0x206>
			{
			i=0;
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <main+0x258>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
 80007be:	e000      	b.n	80007c2 <main+0x206>
				if(data_buffer[0]=='h' && data_buffer[1]=='e' && data_buffer[2]=='l' && data_buffer[3]=='p')
 80007c0:	bf00      	nop
			}


			}

			HAL_UART_Transmit_IT(&huart2, receive_data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4911      	ldr	r1, [pc, #68]	; (800080c <main+0x250>)
 80007c8:	4808      	ldr	r0, [pc, #32]	; (80007ec <main+0x230>)
 80007ca:	f004 fbd2 	bl	8004f72 <HAL_UART_Transmit_IT>
			HAL_UART_Receive_IT(&huart2, &Received, 1); // Ponowne włączenie nasłuchiwania
 80007ce:	2201      	movs	r2, #1
 80007d0:	4905      	ldr	r1, [pc, #20]	; (80007e8 <main+0x22c>)
 80007d2:	4806      	ldr	r0, [pc, #24]	; (80007ec <main+0x230>)
 80007d4:	f004 fc12 	bl	8004ffc <HAL_UART_Receive_IT>



			receive_flag=0;
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <main+0x24c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]




    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80007de:	f008 f881 	bl	80088e4 <MX_USB_HOST_Process>
	  if(timer_state==1)
 80007e2:	e708      	b.n	80005f6 <main+0x3a>
 80007e4:	20000128 	.word	0x20000128
 80007e8:	200000c8 	.word	0x200000c8
 80007ec:	20000258 	.word	0x20000258
 80007f0:	200000ac 	.word	0x200000ac
 80007f4:	200000ae 	.word	0x200000ae
 80007f8:	08009750 	.word	0x08009750
 80007fc:	2000019c 	.word	0x2000019c
 8000800:	200000b0 	.word	0x200000b0
 8000804:	40020c00 	.word	0x40020c00
 8000808:	200000ad 	.word	0x200000ad
 800080c:	20000168 	.word	0x20000168
 8000810:	0800976c 	.word	0x0800976c
 8000814:	200000b2 	.word	0x200000b2
 8000818:	20000298 	.word	0x20000298
 800081c:	08009770 	.word	0x08009770
 8000820:	080097a8 	.word	0x080097a8
 8000824:	080097c0 	.word	0x080097c0
 8000828:	080097d8 	.word	0x080097d8

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b098      	sub	sp, #96	; 0x60
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000836:	2230      	movs	r2, #48	; 0x30
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f008 fb6e 	bl	8008f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b31      	ldr	r3, [pc, #196]	; (8000928 <SystemClock_Config+0xfc>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a30      	ldr	r2, [pc, #192]	; (8000928 <SystemClock_Config+0xfc>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <SystemClock_Config+0xfc>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b2b      	ldr	r3, [pc, #172]	; (800092c <SystemClock_Config+0x100>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a2a      	ldr	r2, [pc, #168]	; (800092c <SystemClock_Config+0x100>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <SystemClock_Config+0x100>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000896:	2301      	movs	r3, #1
 8000898:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800089a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a0:	2302      	movs	r3, #2
 80008a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008aa:	2308      	movs	r3, #8
 80008ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008ae:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008b2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008b8:	2307      	movs	r3, #7
 80008ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008c0:	4618      	mov	r0, r3
 80008c2:	f003 fad1 	bl	8003e68 <HAL_RCC_OscConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80008cc:	f000 fa12 	bl	8000cf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d0:	230f      	movs	r3, #15
 80008d2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	2105      	movs	r1, #5
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 fd2a 	bl	8004348 <HAL_RCC_ClockConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008fa:	f000 f9fb 	bl	8000cf4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008fe:	2301      	movs	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000902:	23c0      	movs	r3, #192	; 0xc0
 8000904:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000906:	2302      	movs	r3, #2
 8000908:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4618      	mov	r0, r3
 8000910:	f003 ff0c 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800091a:	f000 f9eb 	bl	8000cf4 <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	3760      	adds	r7, #96	; 0x60
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000

08000930 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_I2C1_Init+0x50>)
 8000936:	4a13      	ldr	r2, [pc, #76]	; (8000984 <MX_I2C1_Init+0x54>)
 8000938:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_I2C1_Init+0x50>)
 800093c:	4a12      	ldr	r2, [pc, #72]	; (8000988 <MX_I2C1_Init+0x58>)
 800093e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_I2C1_Init+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_I2C1_Init+0x50>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_I2C1_Init+0x50>)
 800094e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000952:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <MX_I2C1_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_I2C1_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MX_I2C1_Init+0x50>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_I2C1_Init+0x50>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_I2C1_Init+0x50>)
 800096e:	f002 fca3 	bl	80032b8 <HAL_I2C_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000978:	f000 f9bc 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200000d4 	.word	0x200000d4
 8000984:	40005400 	.word	0x40005400
 8000988:	000186a0 	.word	0x000186a0

0800098c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_I2S3_Init+0x54>)
 8000992:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <MX_I2S3_Init+0x58>)
 8000994:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_I2S3_Init+0x54>)
 8000998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800099c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_I2S3_Init+0x54>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_I2S3_Init+0x54>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MX_I2S3_Init+0x54>)
 80009ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_I2S3_Init+0x54>)
 80009b4:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <MX_I2S3_Init+0x5c>)
 80009b6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_I2S3_Init+0x54>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_I2S3_Init+0x54>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_I2S3_Init+0x54>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_I2S3_Init+0x54>)
 80009cc:	f002 fdac 	bl	8003528 <HAL_I2S_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80009d6:	f000 f98d 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200002a4 	.word	0x200002a4
 80009e4:	40003c00 	.word	0x40003c00
 80009e8:	00017700 	.word	0x00017700

080009ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_SPI1_Init+0x64>)
 80009f2:	4a18      	ldr	r2, [pc, #96]	; (8000a54 <MX_SPI1_Init+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_SPI1_Init+0x64>)
 80009f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a38:	220a      	movs	r2, #10
 8000a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a3e:	f003 ffb3 	bl	80049a8 <HAL_SPI_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a48:	f000 f954 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000200 	.word	0x20000200
 8000a54:	40013000 	.word	0x40013000

08000a58 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_TIM10_Init+0x44>)
 8000a5e:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <MX_TIM10_Init+0x48>)
 8000a60:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_TIM10_Init+0x44>)
 8000a64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a68:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_TIM10_Init+0x44>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <MX_TIM10_Init+0x44>)
 8000a72:	f248 323f 	movw	r2, #33599	; 0x833f
 8000a76:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_TIM10_Init+0x44>)
 8000a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a7e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_TIM10_Init+0x44>)
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_TIM10_Init+0x44>)
 8000a88:	f003 fff2 	bl	8004a70 <HAL_TIM_Base_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM10_Init+0x3e>
  {
    Error_Handler();
 8000a92:	f000 f92f 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000128 	.word	0x20000128
 8000aa0:	40014400 	.word	0x40014400

08000aa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <MX_USART2_UART_Init+0x50>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000adc:	f004 f9fc 	bl	8004ed8 <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ae6:	f000 f905 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000258 	.word	0x20000258
 8000af4:	40004400 	.word	0x40004400

08000af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	; 0x30
 8000afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
 8000b12:	4b71      	ldr	r3, [pc, #452]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a70      	ldr	r2, [pc, #448]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000b18:	f043 0310 	orr.w	r3, r3, #16
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b6e      	ldr	r3, [pc, #440]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0310 	and.w	r3, r3, #16
 8000b26:	61bb      	str	r3, [r7, #24]
 8000b28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	4b6a      	ldr	r3, [pc, #424]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a69      	ldr	r2, [pc, #420]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b67      	ldr	r3, [pc, #412]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b63      	ldr	r3, [pc, #396]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a62      	ldr	r2, [pc, #392]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b60      	ldr	r3, [pc, #384]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b5c      	ldr	r3, [pc, #368]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a5b      	ldr	r2, [pc, #364]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b59      	ldr	r3, [pc, #356]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	4b55      	ldr	r3, [pc, #340]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a54      	ldr	r2, [pc, #336]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b52      	ldr	r3, [pc, #328]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b4e      	ldr	r3, [pc, #312]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a4d      	ldr	r2, [pc, #308]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b4b      	ldr	r3, [pc, #300]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2108      	movs	r1, #8
 8000bba:	4848      	ldr	r0, [pc, #288]	; (8000cdc <MX_GPIO_Init+0x1e4>)
 8000bbc:	f000 fe56 	bl	800186c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4846      	ldr	r0, [pc, #280]	; (8000ce0 <MX_GPIO_Init+0x1e8>)
 8000bc6:	f000 fe51 	bl	800186c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000bd0:	4844      	ldr	r0, [pc, #272]	; (8000ce4 <MX_GPIO_Init+0x1ec>)
 8000bd2:	f000 fe4b 	bl	800186c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000bd6:	2308      	movs	r3, #8
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	483b      	ldr	r0, [pc, #236]	; (8000cdc <MX_GPIO_Init+0x1e4>)
 8000bee:	f000 fca3 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	4835      	ldr	r0, [pc, #212]	; (8000ce0 <MX_GPIO_Init+0x1e8>)
 8000c0a:	f000 fc95 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c0e:	2308      	movs	r3, #8
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c1e:	2305      	movs	r3, #5
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	482d      	ldr	r0, [pc, #180]	; (8000ce0 <MX_GPIO_Init+0x1e8>)
 8000c2a:	f000 fc85 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c32:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <MX_GPIO_Init+0x1f0>)
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	482a      	ldr	r0, [pc, #168]	; (8000cec <MX_GPIO_Init+0x1f4>)
 8000c42:	f000 fc79 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c46:	2304      	movs	r3, #4
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4619      	mov	r1, r3
 8000c58:	4825      	ldr	r0, [pc, #148]	; (8000cf0 <MX_GPIO_Init+0x1f8>)
 8000c5a:	f000 fc6d 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c70:	2305      	movs	r3, #5
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	481d      	ldr	r0, [pc, #116]	; (8000cf0 <MX_GPIO_Init+0x1f8>)
 8000c7c:	f000 fc5c 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Green_Pin LED_Orange_Pin LED_Red_Pin LED_Blue_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin
 8000c80:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c84:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4812      	ldr	r0, [pc, #72]	; (8000ce4 <MX_GPIO_Init+0x1ec>)
 8000c9a:	f000 fc4d 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c9e:	2320      	movs	r3, #32
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <MX_GPIO_Init+0x1ec>)
 8000cb2:	f000 fc41 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_GPIO_Init+0x1f0>)
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_GPIO_Init+0x1e4>)
 8000cca:	f000 fc35 	bl	8001538 <HAL_GPIO_Init>

}
 8000cce:	bf00      	nop
 8000cd0:	3730      	adds	r7, #48	; 0x30
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	40020c00 	.word	0x40020c00
 8000ce8:	10120000 	.word	0x10120000
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <Error_Handler+0x6>

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d10:	6453      	str	r3, [r2, #68]	; 0x44
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d3a:	2007      	movs	r0, #7
 8000d3c:	f000 fb98 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40023800 	.word	0x40023800

08000d4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <HAL_I2C_MspInit+0x84>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d12c      	bne.n	8000dc8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_I2C_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <HAL_I2C_MspInit+0x88>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_I2C_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d8a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d90:	2312      	movs	r3, #18
 8000d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <HAL_I2C_MspInit+0x8c>)
 8000da8:	f000 fbc6 	bl	8001538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HAL_I2C_MspInit+0x88>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <HAL_I2C_MspInit+0x88>)
 8000db6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dba:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_I2C_MspInit+0x88>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	; 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40005400 	.word	0x40005400
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020400 	.word	0x40020400

08000ddc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a28      	ldr	r2, [pc, #160]	; (8000e9c <HAL_I2S_MspInit+0xc0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d14a      	bne.n	8000e94 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <HAL_I2S_MspInit+0xc4>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a26      	ldr	r2, [pc, #152]	; (8000ea0 <HAL_I2S_MspInit+0xc4>)
 8000e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <HAL_I2S_MspInit+0xc4>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <HAL_I2S_MspInit+0xc4>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a1f      	ldr	r2, [pc, #124]	; (8000ea0 <HAL_I2S_MspInit+0xc4>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HAL_I2S_MspInit+0xc4>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <HAL_I2S_MspInit+0xc4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a18      	ldr	r2, [pc, #96]	; (8000ea0 <HAL_I2S_MspInit+0xc4>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <HAL_I2S_MspInit+0xc4>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e52:	2310      	movs	r3, #16
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e62:	2306      	movs	r3, #6
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <HAL_I2S_MspInit+0xc8>)
 8000e6e:	f000 fb63 	bl	8001538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e72:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e84:	2306      	movs	r3, #6
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <HAL_I2S_MspInit+0xcc>)
 8000e90:	f000 fb52 	bl	8001538 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	; 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40003c00 	.word	0x40003c00
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40020800 	.word	0x40020800

08000eac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <HAL_SPI_MspInit+0x84>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d12b      	bne.n	8000f26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ed8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_SPI_MspInit+0x88>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f06:	23e0      	movs	r3, #224	; 0xe0
 8000f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f16:	2305      	movs	r3, #5
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <HAL_SPI_MspInit+0x8c>)
 8000f22:	f000 fb09 	bl	8001538 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f26:	bf00      	nop
 8000f28:	3728      	adds	r7, #40	; 0x28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40013000 	.word	0x40013000
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020000 	.word	0x40020000

08000f3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <HAL_TIM_Base_MspInit+0x48>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d115      	bne.n	8000f7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <HAL_TIM_Base_MspInit+0x4c>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <HAL_TIM_Base_MspInit+0x4c>)
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_TIM_Base_MspInit+0x4c>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2019      	movs	r0, #25
 8000f70:	f000 fa89 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f74:	2019      	movs	r0, #25
 8000f76:	f000 faa2 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40014400 	.word	0x40014400
 8000f88:	40023800 	.word	0x40023800

08000f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a1d      	ldr	r2, [pc, #116]	; (8001020 <HAL_UART_MspInit+0x94>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d133      	bne.n	8001016 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <HAL_UART_MspInit+0x98>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	4a1b      	ldr	r2, [pc, #108]	; (8001024 <HAL_UART_MspInit+0x98>)
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_UART_MspInit+0x98>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_UART_MspInit+0x98>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a14      	ldr	r2, [pc, #80]	; (8001024 <HAL_UART_MspInit+0x98>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_UART_MspInit+0x98>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fe6:	230c      	movs	r3, #12
 8000fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	4809      	ldr	r0, [pc, #36]	; (8001028 <HAL_UART_MspInit+0x9c>)
 8001002:	f000 fa99 	bl	8001538 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	2026      	movs	r0, #38	; 0x26
 800100c:	f000 fa3b 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001010:	2026      	movs	r0, #38	; 0x26
 8001012:	f000 fa54 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	; 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40004400 	.word	0x40004400
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001078:	f000 f8e8 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001086:	f003 fd42 	bl	8004b0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000128 	.word	0x20000128

08001094 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <USART2_IRQHandler+0x10>)
 800109a:	f004 f805 	bl	80050a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000258 	.word	0x20000258

080010a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <OTG_FS_IRQHandler+0x10>)
 80010ae:	f000 fea1 	bl	8001df4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200006c8 	.word	0x200006c8

080010bc <_sbrk>:
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
 80010ec:	f007 fedc 	bl	8008ea8 <__errno>
 80010f0:	4602      	mov	r2, r0
 80010f2:	230c      	movs	r3, #12
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <_sbrk+0x64>)
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20020000 	.word	0x20020000
 800111c:	00000400 	.word	0x00000400
 8001120:	200000b4 	.word	0x200000b4
 8001124:	20000990 	.word	0x20000990

08001128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <SystemInit+0x28>)
 800112e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001132:	4a07      	ldr	r2, [pc, #28]	; (8001150 <SystemInit+0x28>)
 8001134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SystemInit+0x28>)
 800113e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001142:	609a      	str	r2, [r3, #8]
#endif
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800118c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001158:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800115a:	e003      	b.n	8001164 <LoopCopyDataInit>

0800115c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800115e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001160:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001162:	3104      	adds	r1, #4

08001164 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001168:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800116a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800116c:	d3f6      	bcc.n	800115c <CopyDataInit>
  ldr  r2, =_sbss
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001170:	e002      	b.n	8001178 <LoopFillZerobss>

08001172 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001172:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001174:	f842 3b04 	str.w	r3, [r2], #4

08001178 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800117a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800117c:	d3f9      	bcc.n	8001172 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800117e:	f7ff ffd3 	bl	8001128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001182:	f007 fe97 	bl	8008eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001186:	f7ff fa19 	bl	80005bc <main>
  bx  lr    
 800118a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800118c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001190:	0800983c 	.word	0x0800983c
  ldr  r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001198:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 800119c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80011a0:	20000990 	.word	0x20000990

080011a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC_IRQHandler>
	...

080011a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <HAL_Init+0x40>)
 80011b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_Init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_Init+0x40>)
 80011be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_Init+0x40>)
 80011ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 f94d 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f000 f808 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f7ff fd8e 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023c00 	.word	0x40023c00

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_InitTick+0x54>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x58>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f965 	bl	80014da <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00e      	b.n	8001238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d80a      	bhi.n	8001236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f000 f92d 	bl	8001486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <HAL_InitTick+0x5c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000000 	.word	0x20000000
 8001244:	20000008 	.word	0x20000008
 8001248:	20000004 	.word	0x20000004

0800124c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x20>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x24>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <HAL_IncTick+0x24>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000008 	.word	0x20000008
 8001270:	200002ec 	.word	0x200002ec

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <HAL_GetTick+0x14>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	200002ec 	.word	0x200002ec

0800128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff ffee 	bl	8001274 <HAL_GetTick>
 8001298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_Delay+0x40>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012b2:	bf00      	nop
 80012b4:	f7ff ffde 	bl	8001274 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000008 	.word	0x20000008

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	; (800136c <__NVIC_EnableIRQ+0x38>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f7ff ff8e 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff29 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff3e 	bl	8001318 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff8e 	bl	80013c4 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5d 	bl	8001370 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff31 	bl	8001334 <__NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffa2 	bl	800142c <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d004      	beq.n	8001510 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e00c      	b.n	800152a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2205      	movs	r2, #5
 8001514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	e16b      	b.n	800182c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001554:	2201      	movs	r2, #1
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	429a      	cmp	r2, r3
 800156e:	f040 815a 	bne.w	8001826 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d00b      	beq.n	8001592 <HAL_GPIO_Init+0x5a>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d007      	beq.n	8001592 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001586:	2b11      	cmp	r3, #17
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b12      	cmp	r3, #18
 8001590:	d130      	bne.n	80015f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	2203      	movs	r2, #3
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c8:	2201      	movs	r2, #1
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	f003 0201 	and.w	r2, r3, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0xfc>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b12      	cmp	r3, #18
 8001632:	d123      	bne.n	800167c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	08da      	lsrs	r2, r3, #3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3208      	adds	r2, #8
 800163c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	220f      	movs	r2, #15
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	691a      	ldr	r2, [r3, #16]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	08da      	lsrs	r2, r3, #3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3208      	adds	r2, #8
 8001676:	69b9      	ldr	r1, [r7, #24]
 8001678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0203 	and.w	r2, r3, #3
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80b4 	beq.w	8001826 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b5f      	ldr	r3, [pc, #380]	; (8001840 <HAL_GPIO_Init+0x308>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a5e      	ldr	r2, [pc, #376]	; (8001840 <HAL_GPIO_Init+0x308>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b5c      	ldr	r3, [pc, #368]	; (8001840 <HAL_GPIO_Init+0x308>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016da:	4a5a      	ldr	r2, [pc, #360]	; (8001844 <HAL_GPIO_Init+0x30c>)
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	220f      	movs	r2, #15
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a51      	ldr	r2, [pc, #324]	; (8001848 <HAL_GPIO_Init+0x310>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d02b      	beq.n	800175e <HAL_GPIO_Init+0x226>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a50      	ldr	r2, [pc, #320]	; (800184c <HAL_GPIO_Init+0x314>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d025      	beq.n	800175a <HAL_GPIO_Init+0x222>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4f      	ldr	r2, [pc, #316]	; (8001850 <HAL_GPIO_Init+0x318>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d01f      	beq.n	8001756 <HAL_GPIO_Init+0x21e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4e      	ldr	r2, [pc, #312]	; (8001854 <HAL_GPIO_Init+0x31c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d019      	beq.n	8001752 <HAL_GPIO_Init+0x21a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4d      	ldr	r2, [pc, #308]	; (8001858 <HAL_GPIO_Init+0x320>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d013      	beq.n	800174e <HAL_GPIO_Init+0x216>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4c      	ldr	r2, [pc, #304]	; (800185c <HAL_GPIO_Init+0x324>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d00d      	beq.n	800174a <HAL_GPIO_Init+0x212>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4b      	ldr	r2, [pc, #300]	; (8001860 <HAL_GPIO_Init+0x328>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d007      	beq.n	8001746 <HAL_GPIO_Init+0x20e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4a      	ldr	r2, [pc, #296]	; (8001864 <HAL_GPIO_Init+0x32c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d101      	bne.n	8001742 <HAL_GPIO_Init+0x20a>
 800173e:	2307      	movs	r3, #7
 8001740:	e00e      	b.n	8001760 <HAL_GPIO_Init+0x228>
 8001742:	2308      	movs	r3, #8
 8001744:	e00c      	b.n	8001760 <HAL_GPIO_Init+0x228>
 8001746:	2306      	movs	r3, #6
 8001748:	e00a      	b.n	8001760 <HAL_GPIO_Init+0x228>
 800174a:	2305      	movs	r3, #5
 800174c:	e008      	b.n	8001760 <HAL_GPIO_Init+0x228>
 800174e:	2304      	movs	r3, #4
 8001750:	e006      	b.n	8001760 <HAL_GPIO_Init+0x228>
 8001752:	2303      	movs	r3, #3
 8001754:	e004      	b.n	8001760 <HAL_GPIO_Init+0x228>
 8001756:	2302      	movs	r3, #2
 8001758:	e002      	b.n	8001760 <HAL_GPIO_Init+0x228>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <HAL_GPIO_Init+0x228>
 800175e:	2300      	movs	r3, #0
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	f002 0203 	and.w	r2, r2, #3
 8001766:	0092      	lsls	r2, r2, #2
 8001768:	4093      	lsls	r3, r2
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001770:	4934      	ldr	r1, [pc, #208]	; (8001844 <HAL_GPIO_Init+0x30c>)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	089b      	lsrs	r3, r3, #2
 8001776:	3302      	adds	r3, #2
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800177e:	4b3a      	ldr	r3, [pc, #232]	; (8001868 <HAL_GPIO_Init+0x330>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017a2:	4a31      	ldr	r2, [pc, #196]	; (8001868 <HAL_GPIO_Init+0x330>)
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017a8:	4b2f      	ldr	r3, [pc, #188]	; (8001868 <HAL_GPIO_Init+0x330>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017cc:	4a26      	ldr	r2, [pc, #152]	; (8001868 <HAL_GPIO_Init+0x330>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d2:	4b25      	ldr	r3, [pc, #148]	; (8001868 <HAL_GPIO_Init+0x330>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017f6:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <HAL_GPIO_Init+0x330>)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017fc:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <HAL_GPIO_Init+0x330>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001820:	4a11      	ldr	r2, [pc, #68]	; (8001868 <HAL_GPIO_Init+0x330>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3301      	adds	r3, #1
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	2b0f      	cmp	r3, #15
 8001830:	f67f ae90 	bls.w	8001554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001834:	bf00      	nop
 8001836:	3724      	adds	r7, #36	; 0x24
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	40023800 	.word	0x40023800
 8001844:	40013800 	.word	0x40013800
 8001848:	40020000 	.word	0x40020000
 800184c:	40020400 	.word	0x40020400
 8001850:	40020800 	.word	0x40020800
 8001854:	40020c00 	.word	0x40020c00
 8001858:	40021000 	.word	0x40021000
 800185c:	40021400 	.word	0x40021400
 8001860:	40021800 	.word	0x40021800
 8001864:	40021c00 	.word	0x40021c00
 8001868:	40013c00 	.word	0x40013c00

0800186c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]
 8001878:	4613      	mov	r3, r2
 800187a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800187c:	787b      	ldrb	r3, [r7, #1]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001882:	887a      	ldrh	r2, [r7, #2]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001888:	e003      	b.n	8001892 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800188a:	887b      	ldrh	r3, [r7, #2]
 800188c:	041a      	lsls	r2, r3, #16
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	619a      	str	r2, [r3, #24]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	460b      	mov	r3, r1
 80018a8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	401a      	ands	r2, r3
 80018b2:	887b      	ldrh	r3, [r7, #2]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d104      	bne.n	80018c2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80018b8:	887b      	ldrh	r3, [r7, #2]
 80018ba:	041a      	lsls	r2, r3, #16
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80018c0:	e002      	b.n	80018c8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80018c2:	887a      	ldrh	r2, [r7, #2]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	619a      	str	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d6:	b08f      	sub	sp, #60	; 0x3c
 80018d8:	af0a      	add	r7, sp, #40	; 0x28
 80018da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e054      	b.n	8001990 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d106      	bne.n	8001906 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f007 f827 	bl	8008954 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2203      	movs	r2, #3
 800190a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f004 f9e3 	bl	8005cf0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	687e      	ldr	r6, [r7, #4]
 8001932:	466d      	mov	r5, sp
 8001934:	f106 0410 	add.w	r4, r6, #16
 8001938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001940:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001944:	e885 0003 	stmia.w	r5, {r0, r1}
 8001948:	1d33      	adds	r3, r6, #4
 800194a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800194c:	6838      	ldr	r0, [r7, #0]
 800194e:	f004 f95d 	bl	8005c0c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2101      	movs	r1, #1
 8001958:	4618      	mov	r0, r3
 800195a:	f004 f9da 	bl	8005d12 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	687e      	ldr	r6, [r7, #4]
 8001966:	466d      	mov	r5, sp
 8001968:	f106 0410 	add.w	r4, r6, #16
 800196c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800196e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001974:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001978:	e885 0003 	stmia.w	r5, {r0, r1}
 800197c:	1d33      	adds	r3, r6, #4
 800197e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001980:	6838      	ldr	r0, [r7, #0]
 8001982:	f004 faed 	bl	8005f60 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001998 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af04      	add	r7, sp, #16
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	4608      	mov	r0, r1
 80019a2:	4611      	mov	r1, r2
 80019a4:	461a      	mov	r2, r3
 80019a6:	4603      	mov	r3, r0
 80019a8:	70fb      	strb	r3, [r7, #3]
 80019aa:	460b      	mov	r3, r1
 80019ac:	70bb      	strb	r3, [r7, #2]
 80019ae:	4613      	mov	r3, r2
 80019b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_HCD_HC_Init+0x28>
 80019bc:	2302      	movs	r3, #2
 80019be:	e07f      	b.n	8001ac0 <HAL_HCD_HC_Init+0x128>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80019c8:	78fa      	ldrb	r2, [r7, #3]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	440b      	add	r3, r1
 80019d6:	333d      	adds	r3, #61	; 0x3d
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019dc:	78fa      	ldrb	r2, [r7, #3]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	3338      	adds	r3, #56	; 0x38
 80019ec:	787a      	ldrb	r2, [r7, #1]
 80019ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	440b      	add	r3, r1
 80019fe:	3340      	adds	r3, #64	; 0x40
 8001a00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a02:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	440b      	add	r3, r1
 8001a12:	3339      	adds	r3, #57	; 0x39
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	333f      	adds	r3, #63	; 0x3f
 8001a28:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a2e:	78fa      	ldrb	r2, [r7, #3]
 8001a30:	78bb      	ldrb	r3, [r7, #2]
 8001a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a36:	b2d8      	uxtb	r0, r3
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	440b      	add	r3, r1
 8001a44:	333a      	adds	r3, #58	; 0x3a
 8001a46:	4602      	mov	r2, r0
 8001a48:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a4a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	da0a      	bge.n	8001a68 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a52:	78fa      	ldrb	r2, [r7, #3]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	440b      	add	r3, r1
 8001a60:	333b      	adds	r3, #59	; 0x3b
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	e009      	b.n	8001a7c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a68:	78fa      	ldrb	r2, [r7, #3]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	440b      	add	r3, r1
 8001a76:	333b      	adds	r3, #59	; 0x3b
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	440b      	add	r3, r1
 8001a8a:	333c      	adds	r3, #60	; 0x3c
 8001a8c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a90:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	787c      	ldrb	r4, [r7, #1]
 8001a98:	78ba      	ldrb	r2, [r7, #2]
 8001a9a:	78f9      	ldrb	r1, [r7, #3]
 8001a9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a9e:	9302      	str	r3, [sp, #8]
 8001aa0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	4623      	mov	r3, r4
 8001aae:	f004 fbd9 	bl	8006264 <USB_HC_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd90      	pop	{r4, r7, pc}

08001ac8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_HCD_HC_Halt+0x1e>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e00f      	b.n	8001b06 <HAL_HCD_HC_Halt+0x3e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	78fa      	ldrb	r2, [r7, #3]
 8001af4:	4611      	mov	r1, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f004 fe15 	bl	8006726 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	4608      	mov	r0, r1
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4603      	mov	r3, r0
 8001b20:	70fb      	strb	r3, [r7, #3]
 8001b22:	460b      	mov	r3, r1
 8001b24:	70bb      	strb	r3, [r7, #2]
 8001b26:	4613      	mov	r3, r2
 8001b28:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	440b      	add	r3, r1
 8001b38:	333b      	adds	r3, #59	; 0x3b
 8001b3a:	78ba      	ldrb	r2, [r7, #2]
 8001b3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	333f      	adds	r3, #63	; 0x3f
 8001b4e:	787a      	ldrb	r2, [r7, #1]
 8001b50:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b52:	7c3b      	ldrb	r3, [r7, #16]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d114      	bne.n	8001b82 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	440b      	add	r3, r1
 8001b66:	3342      	adds	r3, #66	; 0x42
 8001b68:	2203      	movs	r2, #3
 8001b6a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	440b      	add	r3, r1
 8001b7a:	333d      	adds	r3, #61	; 0x3d
 8001b7c:	7f3a      	ldrb	r2, [r7, #28]
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	e009      	b.n	8001b96 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b82:	78fa      	ldrb	r2, [r7, #3]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	440b      	add	r3, r1
 8001b90:	3342      	adds	r3, #66	; 0x42
 8001b92:	2202      	movs	r2, #2
 8001b94:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b96:	787b      	ldrb	r3, [r7, #1]
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	f200 80d6 	bhi.w	8001d4a <HAL_HCD_HC_SubmitRequest+0x23a>
 8001b9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001bb5 	.word	0x08001bb5
 8001ba8:	08001d35 	.word	0x08001d35
 8001bac:	08001c21 	.word	0x08001c21
 8001bb0:	08001cab 	.word	0x08001cab
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001bb4:	7c3b      	ldrb	r3, [r7, #16]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	f040 80c9 	bne.w	8001d4e <HAL_HCD_HC_SubmitRequest+0x23e>
 8001bbc:	78bb      	ldrb	r3, [r7, #2]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 80c5 	bne.w	8001d4e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001bc4:	8b3b      	ldrh	r3, [r7, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d109      	bne.n	8001bde <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	3351      	adds	r3, #81	; 0x51
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bde:	78fa      	ldrb	r2, [r7, #3]
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	3351      	adds	r3, #81	; 0x51
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10a      	bne.n	8001c0a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	3342      	adds	r3, #66	; 0x42
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c08:	e0a1      	b.n	8001d4e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c0a:	78fa      	ldrb	r2, [r7, #3]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	440b      	add	r3, r1
 8001c18:	3342      	adds	r3, #66	; 0x42
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	701a      	strb	r2, [r3, #0]
      break;
 8001c1e:	e096      	b.n	8001d4e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c20:	78bb      	ldrb	r3, [r7, #2]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d120      	bne.n	8001c68 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	3351      	adds	r3, #81	; 0x51
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10a      	bne.n	8001c52 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c3c:	78fa      	ldrb	r2, [r7, #3]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	3342      	adds	r3, #66	; 0x42
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c50:	e07e      	b.n	8001d50 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c52:	78fa      	ldrb	r2, [r7, #3]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	3342      	adds	r3, #66	; 0x42
 8001c62:	2202      	movs	r2, #2
 8001c64:	701a      	strb	r2, [r3, #0]
      break;
 8001c66:	e073      	b.n	8001d50 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c68:	78fa      	ldrb	r2, [r7, #3]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	440b      	add	r3, r1
 8001c76:	3350      	adds	r3, #80	; 0x50
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10a      	bne.n	8001c94 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c7e:	78fa      	ldrb	r2, [r7, #3]
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	3342      	adds	r3, #66	; 0x42
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
      break;
 8001c92:	e05d      	b.n	8001d50 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c94:	78fa      	ldrb	r2, [r7, #3]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	440b      	add	r3, r1
 8001ca2:	3342      	adds	r3, #66	; 0x42
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	701a      	strb	r2, [r3, #0]
      break;
 8001ca8:	e052      	b.n	8001d50 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001caa:	78bb      	ldrb	r3, [r7, #2]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d120      	bne.n	8001cf2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cb0:	78fa      	ldrb	r2, [r7, #3]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3351      	adds	r3, #81	; 0x51
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10a      	bne.n	8001cdc <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cc6:	78fa      	ldrb	r2, [r7, #3]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	3342      	adds	r3, #66	; 0x42
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cda:	e039      	b.n	8001d50 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	3342      	adds	r3, #66	; 0x42
 8001cec:	2202      	movs	r2, #2
 8001cee:	701a      	strb	r2, [r3, #0]
      break;
 8001cf0:	e02e      	b.n	8001d50 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cf2:	78fa      	ldrb	r2, [r7, #3]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	3350      	adds	r3, #80	; 0x50
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10a      	bne.n	8001d1e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d08:	78fa      	ldrb	r2, [r7, #3]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	440b      	add	r3, r1
 8001d16:	3342      	adds	r3, #66	; 0x42
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
      break;
 8001d1c:	e018      	b.n	8001d50 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d1e:	78fa      	ldrb	r2, [r7, #3]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3342      	adds	r3, #66	; 0x42
 8001d2e:	2202      	movs	r2, #2
 8001d30:	701a      	strb	r2, [r3, #0]
      break;
 8001d32:	e00d      	b.n	8001d50 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	3342      	adds	r3, #66	; 0x42
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
      break;
 8001d48:	e002      	b.n	8001d50 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001d4a:	bf00      	nop
 8001d4c:	e000      	b.n	8001d50 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001d4e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d50:	78fa      	ldrb	r2, [r7, #3]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3344      	adds	r3, #68	; 0x44
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d64:	78fa      	ldrb	r2, [r7, #3]
 8001d66:	8b39      	ldrh	r1, [r7, #24]
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4403      	add	r3, r0
 8001d74:	3348      	adds	r3, #72	; 0x48
 8001d76:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	335c      	adds	r3, #92	; 0x5c
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	440b      	add	r3, r1
 8001d9a:	334c      	adds	r3, #76	; 0x4c
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	440b      	add	r3, r1
 8001dae:	3339      	adds	r3, #57	; 0x39
 8001db0:	78fa      	ldrb	r2, [r7, #3]
 8001db2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	440b      	add	r3, r1
 8001dc2:	335d      	adds	r3, #93	; 0x5d
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	78fa      	ldrb	r2, [r7, #3]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	3338      	adds	r3, #56	; 0x38
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	18d1      	adds	r1, r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	f004 fb48 	bl	8006478 <USB_HC_StartXfer>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop

08001df4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f004 f865 	bl	8005eda <USB_GetMode>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	f040 80ef 	bne.w	8001ff6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f004 f849 	bl	8005eb4 <USB_ReadInterrupts>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80e5 	beq.w	8001ff4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f004 f840 	bl	8005eb4 <USB_ReadInterrupts>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e3e:	d104      	bne.n	8001e4a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f004 f830 	bl	8005eb4 <USB_ReadInterrupts>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e5e:	d104      	bne.n	8001e6a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f004 f820 	bl	8005eb4 <USB_ReadInterrupts>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e7e:	d104      	bne.n	8001e8a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f004 f810 	bl	8005eb4 <USB_ReadInterrupts>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d103      	bne.n	8001ea6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f004 f802 	bl	8005eb4 <USB_ReadInterrupts>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eba:	d115      	bne.n	8001ee8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ec4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d108      	bne.n	8001ee8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f006 fdba 	bl	8008a50 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f004 f8f8 	bl	80060d8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 ffe1 	bl	8005eb4 <USB_ReadInterrupts>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001efc:	d102      	bne.n	8001f04 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f001 f966 	bl	80031d0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 ffd3 	bl	8005eb4 <USB_ReadInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d106      	bne.n	8001f26 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f006 fd7d 	bl	8008a18 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2208      	movs	r2, #8
 8001f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 ffc2 	bl	8005eb4 <USB_ReadInterrupts>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f3a:	d138      	bne.n	8001fae <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f004 fbdf 	bl	8006704 <USB_HC_ReadInterrupt>
 8001f46:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	e025      	b.n	8001f9a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d018      	beq.n	8001f94 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f78:	d106      	bne.n	8001f88 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f8cf 	bl	8002124 <HCD_HC_IN_IRQHandler>
 8001f86:	e005      	b.n	8001f94 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fcfd 	bl	800298e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	3301      	adds	r3, #1
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d3d4      	bcc.n	8001f4e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f003 ff7e 	bl	8005eb4 <USB_ReadInterrupts>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b10      	cmp	r3, #16
 8001fc0:	d101      	bne.n	8001fc6 <HAL_HCD_IRQHandler+0x1d2>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <HAL_HCD_IRQHandler+0x1d4>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d014      	beq.n	8001ff6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0210 	bic.w	r2, r2, #16
 8001fda:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f001 f84b 	bl	8003078 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699a      	ldr	r2, [r3, #24]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0210 	orr.w	r2, r2, #16
 8001ff0:	619a      	str	r2, [r3, #24]
 8001ff2:	e000      	b.n	8001ff6 <HAL_HCD_IRQHandler+0x202>
      return;
 8001ff4:	bf00      	nop
    }
  }
}
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_HCD_Start+0x16>
 800200e:	2302      	movs	r3, #2
 8002010:	e013      	b.n	800203a <HAL_HCD_Start+0x3e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f003 fe55 	bl	8005cce <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2101      	movs	r1, #1
 800202a:	4618      	mov	r0, r3
 800202c:	f004 f8b8 	bl	80061a0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_HCD_Stop+0x16>
 8002054:	2302      	movs	r3, #2
 8002056:	e00d      	b.n	8002074 <HAL_HCD_Stop+0x32>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f004 fc99 	bl	800699c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f004 f85f 	bl	800614c <USB_ResetPort>
 800208e:	4603      	mov	r3, r0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	335c      	adds	r3, #92	; 0x5c
 80020b4:	781b      	ldrb	r3, [r3, #0]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	460b      	mov	r3, r1
 80020cc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80020ce:	78fa      	ldrb	r2, [r7, #3]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	334c      	adds	r3, #76	; 0x4c
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f004 f8a1 	bl	8006240 <USB_GetCurrentFrame>
 80020fe:	4603      	mov	r3, r0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f004 f87c 	bl	8006212 <USB_GetHostSpeed>
 800211a:	4603      	mov	r3, r0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b04      	cmp	r3, #4
 8002152:	d119      	bne.n	8002188 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002160:	461a      	mov	r2, r3
 8002162:	2304      	movs	r3, #4
 8002164:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4413      	add	r3, r2
 800216e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	0151      	lsls	r1, r2, #5
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	440a      	add	r2, r1
 800217c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	60d3      	str	r3, [r2, #12]
 8002186:	e0ce      	b.n	8002326 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800219e:	d12c      	bne.n	80021fa <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ac:	461a      	mov	r2, r3
 80021ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	335d      	adds	r3, #93	; 0x5d
 80021c4:	2207      	movs	r2, #7
 80021c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	0151      	lsls	r1, r2, #5
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	440a      	add	r2, r1
 80021de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021e2:	f043 0302 	orr.w	r3, r3, #2
 80021e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 fa97 	bl	8006726 <USB_HC_Halt>
 80021f8:	e095      	b.n	8002326 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4413      	add	r3, r2
 8002202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b20      	cmp	r3, #32
 800220e:	d109      	bne.n	8002224 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221c:	461a      	mov	r2, r3
 800221e:	2320      	movs	r3, #32
 8002220:	6093      	str	r3, [r2, #8]
 8002222:	e080      	b.n	8002326 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4413      	add	r3, r2
 800222c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b08      	cmp	r3, #8
 8002238:	d134      	bne.n	80022a4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4413      	add	r3, r2
 8002242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	0151      	lsls	r1, r2, #5
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	440a      	add	r2, r1
 8002250:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	335d      	adds	r3, #93	; 0x5d
 800226a:	2205      	movs	r2, #5
 800226c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227a:	461a      	mov	r2, r3
 800227c:	2310      	movs	r3, #16
 800227e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228c:	461a      	mov	r2, r3
 800228e:	2308      	movs	r3, #8
 8002290:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f004 fa42 	bl	8006726 <USB_HC_Halt>
 80022a2:	e040      	b.n	8002326 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ba:	d134      	bne.n	8002326 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	0151      	lsls	r1, r2, #5
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	440a      	add	r2, r1
 80022d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022d6:	f043 0302 	orr.w	r3, r3, #2
 80022da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f004 fa1d 	bl	8006726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f8:	461a      	mov	r2, r3
 80022fa:	2310      	movs	r3, #16
 80022fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	440b      	add	r3, r1
 800230c:	335d      	adds	r3, #93	; 0x5d
 800230e:	2208      	movs	r2, #8
 8002310:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231e:	461a      	mov	r2, r3
 8002320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002324:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4413      	add	r3, r2
 800232e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800233c:	d122      	bne.n	8002384 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	0151      	lsls	r1, r2, #5
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	440a      	add	r2, r1
 8002354:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f004 f9dc 	bl	8006726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4413      	add	r3, r2
 8002376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237a:	461a      	mov	r2, r3
 800237c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002380:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002382:	e300      	b.n	8002986 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4413      	add	r3, r2
 800238c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b01      	cmp	r3, #1
 8002398:	f040 80fd 	bne.w	8002596 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01b      	beq.n	80023dc <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	440b      	add	r3, r1
 80023b2:	3348      	adds	r3, #72	; 0x48
 80023b4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	0159      	lsls	r1, r3, #5
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	440b      	add	r3, r1
 80023be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80023c8:	1ad1      	subs	r1, r2, r3
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4403      	add	r3, r0
 80023d8:	334c      	adds	r3, #76	; 0x4c
 80023da:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	335d      	adds	r3, #93	; 0x5d
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	3358      	adds	r3, #88	; 0x58
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4413      	add	r3, r2
 800240c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002410:	461a      	mov	r2, r3
 8002412:	2301      	movs	r3, #1
 8002414:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	440b      	add	r3, r1
 8002424:	333f      	adds	r3, #63	; 0x3f
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	440b      	add	r3, r1
 800243a:	333f      	adds	r3, #63	; 0x3f
 800243c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800243e:	2b02      	cmp	r3, #2
 8002440:	d121      	bne.n	8002486 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	0151      	lsls	r1, r2, #5
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	440a      	add	r2, r1
 8002458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f004 f95a 	bl	8006726 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247e:	461a      	mov	r2, r3
 8002480:	2310      	movs	r3, #16
 8002482:	6093      	str	r3, [r2, #8]
 8002484:	e070      	b.n	8002568 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	440b      	add	r3, r1
 8002494:	333f      	adds	r3, #63	; 0x3f
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d12a      	bne.n	80024f2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	0151      	lsls	r1, r2, #5
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	440a      	add	r2, r1
 80024b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024ba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	440b      	add	r3, r1
 80024ca:	335c      	adds	r3, #92	; 0x5c
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	b2d8      	uxtb	r0, r3
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	335c      	adds	r3, #92	; 0x5c
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	4601      	mov	r1, r0
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f006 fabe 	bl	8008a6c <HAL_HCD_HC_NotifyURBChange_Callback>
 80024f0:	e03a      	b.n	8002568 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	440b      	add	r3, r1
 8002500:	333f      	adds	r3, #63	; 0x3f
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d12f      	bne.n	8002568 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	440b      	add	r3, r1
 8002516:	335c      	adds	r3, #92	; 0x5c
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	440b      	add	r3, r1
 800252a:	3350      	adds	r3, #80	; 0x50
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	f083 0301 	eor.w	r3, r3, #1
 8002532:	b2d8      	uxtb	r0, r3
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	440b      	add	r3, r1
 8002542:	3350      	adds	r3, #80	; 0x50
 8002544:	4602      	mov	r2, r0
 8002546:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	b2d8      	uxtb	r0, r3
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	440b      	add	r3, r1
 800255a:	335c      	adds	r3, #92	; 0x5c
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	4601      	mov	r1, r0
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f006 fa82 	bl	8008a6c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	440b      	add	r3, r1
 8002576:	3350      	adds	r3, #80	; 0x50
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	f083 0301 	eor.w	r3, r3, #1
 800257e:	b2d8      	uxtb	r0, r3
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	440b      	add	r3, r1
 800258e:	3350      	adds	r3, #80	; 0x50
 8002590:	4602      	mov	r2, r0
 8002592:	701a      	strb	r2, [r3, #0]
}
 8002594:	e1f7      	b.n	8002986 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4413      	add	r3, r2
 800259e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	f040 811a 	bne.w	80027e2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	0151      	lsls	r1, r2, #5
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	440a      	add	r2, r1
 80025c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c8:	f023 0302 	bic.w	r3, r3, #2
 80025cc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	440b      	add	r3, r1
 80025dc:	335d      	adds	r3, #93	; 0x5d
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d10a      	bne.n	80025fa <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	335c      	adds	r3, #92	; 0x5c
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	e0d9      	b.n	80027ae <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	440b      	add	r3, r1
 8002608:	335d      	adds	r3, #93	; 0x5d
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b05      	cmp	r3, #5
 800260e:	d10a      	bne.n	8002626 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	335c      	adds	r3, #92	; 0x5c
 8002620:	2205      	movs	r2, #5
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e0c3      	b.n	80027ae <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	440b      	add	r3, r1
 8002634:	335d      	adds	r3, #93	; 0x5d
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b06      	cmp	r3, #6
 800263a:	d00a      	beq.n	8002652 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	335d      	adds	r3, #93	; 0x5d
 800264c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800264e:	2b08      	cmp	r3, #8
 8002650:	d156      	bne.n	8002700 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	440b      	add	r3, r1
 8002660:	3358      	adds	r3, #88	; 0x58
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	1c59      	adds	r1, r3, #1
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4403      	add	r3, r0
 8002674:	3358      	adds	r3, #88	; 0x58
 8002676:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	3358      	adds	r3, #88	; 0x58
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b03      	cmp	r3, #3
 800268c:	d914      	bls.n	80026b8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	3358      	adds	r3, #88	; 0x58
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	335c      	adds	r3, #92	; 0x5c
 80026b2:	2204      	movs	r2, #4
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	e009      	b.n	80026cc <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	335c      	adds	r3, #92	; 0x5c
 80026c8:	2202      	movs	r2, #2
 80026ca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026e2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026ea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	461a      	mov	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e056      	b.n	80027ae <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	440b      	add	r3, r1
 800270e:	335d      	adds	r3, #93	; 0x5d
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b03      	cmp	r3, #3
 8002714:	d123      	bne.n	800275e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	440b      	add	r3, r1
 8002724:	335c      	adds	r3, #92	; 0x5c
 8002726:	2202      	movs	r2, #2
 8002728:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4413      	add	r3, r2
 8002732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002740:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002748:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	e027      	b.n	80027ae <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	440b      	add	r3, r1
 800276c:	335d      	adds	r3, #93	; 0x5d
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b07      	cmp	r3, #7
 8002772:	d11c      	bne.n	80027ae <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	440b      	add	r3, r1
 8002782:	3358      	adds	r3, #88	; 0x58
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	1c59      	adds	r1, r3, #1
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4403      	add	r3, r0
 8002796:	3358      	adds	r3, #88	; 0x58
 8002798:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	440b      	add	r3, r1
 80027a8:	335c      	adds	r3, #92	; 0x5c
 80027aa:	2204      	movs	r2, #4
 80027ac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ba:	461a      	mov	r2, r3
 80027bc:	2302      	movs	r3, #2
 80027be:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	b2d8      	uxtb	r0, r3
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	335c      	adds	r3, #92	; 0x5c
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	4601      	mov	r1, r0
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f006 f946 	bl	8008a6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80027e0:	e0d1      	b.n	8002986 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f4:	2b80      	cmp	r3, #128	; 0x80
 80027f6:	d13e      	bne.n	8002876 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	0151      	lsls	r1, r2, #5
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	440a      	add	r2, r1
 800280e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002812:	f043 0302 	orr.w	r3, r3, #2
 8002816:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	440b      	add	r3, r1
 8002826:	3358      	adds	r3, #88	; 0x58
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	1c59      	adds	r1, r3, #1
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4403      	add	r3, r0
 800283a:	3358      	adds	r3, #88	; 0x58
 800283c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	335d      	adds	r3, #93	; 0x5d
 800284e:	2206      	movs	r2, #6
 8002850:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f003 ff62 	bl	8006726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286e:	461a      	mov	r2, r3
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	6093      	str	r3, [r2, #8]
}
 8002874:	e087      	b.n	8002986 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4413      	add	r3, r2
 800287e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b10      	cmp	r3, #16
 800288a:	d17c      	bne.n	8002986 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	440b      	add	r3, r1
 800289a:	333f      	adds	r3, #63	; 0x3f
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d122      	bne.n	80028e8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	440b      	add	r3, r1
 80028b0:	3358      	adds	r3, #88	; 0x58
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	0151      	lsls	r1, r2, #5
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	440a      	add	r2, r1
 80028cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 ff20 	bl	8006726 <USB_HC_Halt>
 80028e6:	e045      	b.n	8002974 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	440b      	add	r3, r1
 80028f6:	333f      	adds	r3, #63	; 0x3f
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	333f      	adds	r3, #63	; 0x3f
 800290e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002910:	2b02      	cmp	r3, #2
 8002912:	d12f      	bne.n	8002974 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	440b      	add	r3, r1
 8002922:	3358      	adds	r3, #88	; 0x58
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d121      	bne.n	8002974 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	440b      	add	r3, r1
 800293e:	335d      	adds	r3, #93	; 0x5d
 8002940:	2203      	movs	r2, #3
 8002942:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	0151      	lsls	r1, r2, #5
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	440a      	add	r2, r1
 800295a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800295e:	f043 0302 	orr.w	r3, r3, #2
 8002962:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f003 fed9 	bl	8006726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002980:	461a      	mov	r2, r3
 8002982:	2310      	movs	r3, #16
 8002984:	6093      	str	r3, [r2, #8]
}
 8002986:	bf00      	nop
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b086      	sub	sp, #24
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	460b      	mov	r3, r1
 8002998:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d119      	bne.n	80029f2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ca:	461a      	mov	r2, r3
 80029cc:	2304      	movs	r3, #4
 80029ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	0151      	lsls	r1, r2, #5
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	440a      	add	r2, r1
 80029e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80029f0:	e33e      	b.n	8003070 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d141      	bne.n	8002a8c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	461a      	mov	r2, r3
 8002a16:	2320      	movs	r3, #32
 8002a18:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	440b      	add	r3, r1
 8002a28:	333d      	adds	r3, #61	; 0x3d
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	f040 831f 	bne.w	8003070 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	440b      	add	r3, r1
 8002a40:	333d      	adds	r3, #61	; 0x3d
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	440b      	add	r3, r1
 8002a54:	335c      	adds	r3, #92	; 0x5c
 8002a56:	2202      	movs	r2, #2
 8002a58:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	0151      	lsls	r1, r2, #5
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	440a      	add	r2, r1
 8002a70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f003 fe4e 	bl	8006726 <USB_HC_Halt>
}
 8002a8a:	e2f1      	b.n	8003070 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9e:	2b40      	cmp	r3, #64	; 0x40
 8002aa0:	d13f      	bne.n	8002b22 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	440b      	add	r3, r1
 8002ab0:	335d      	adds	r3, #93	; 0x5d
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	333d      	adds	r3, #61	; 0x3d
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3358      	adds	r3, #88	; 0x58
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	0151      	lsls	r1, r2, #5
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	440a      	add	r2, r1
 8002af4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f003 fe0c 	bl	8006726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2340      	movs	r3, #64	; 0x40
 8002b1e:	6093      	str	r3, [r2, #8]
}
 8002b20:	e2a6      	b.n	8003070 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b38:	d122      	bne.n	8002b80 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	0151      	lsls	r1, r2, #5
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	440a      	add	r2, r1
 8002b50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f003 fdde 	bl	8006726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b76:	461a      	mov	r2, r3
 8002b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b7c:	6093      	str	r3, [r2, #8]
}
 8002b7e:	e277      	b.n	8003070 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d135      	bne.n	8002c02 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3358      	adds	r3, #88	; 0x58
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	0151      	lsls	r1, r2, #5
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	440a      	add	r2, r1
 8002bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc4:	f043 0302 	orr.w	r3, r3, #2
 8002bc8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f003 fda6 	bl	8006726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be6:	461a      	mov	r2, r3
 8002be8:	2301      	movs	r3, #1
 8002bea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	440b      	add	r3, r1
 8002bfa:	335d      	adds	r3, #93	; 0x5d
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
}
 8002c00:	e236      	b.n	8003070 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d12b      	bne.n	8002c70 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	461a      	mov	r2, r3
 8002c26:	2308      	movs	r3, #8
 8002c28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	0151      	lsls	r1, r2, #5
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	440a      	add	r2, r1
 8002c40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f003 fd66 	bl	8006726 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	440b      	add	r3, r1
 8002c68:	335d      	adds	r3, #93	; 0x5d
 8002c6a:	2205      	movs	r2, #5
 8002c6c:	701a      	strb	r2, [r3, #0]
}
 8002c6e:	e1ff      	b.n	8003070 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	d155      	bne.n	8002d32 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	440b      	add	r3, r1
 8002c94:	3358      	adds	r3, #88	; 0x58
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	335d      	adds	r3, #93	; 0x5d
 8002caa:	2203      	movs	r2, #3
 8002cac:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	333d      	adds	r3, #61	; 0x3d
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d114      	bne.n	8002cee <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	333c      	adds	r3, #60	; 0x3c
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	333d      	adds	r3, #61	; 0x3d
 8002cea:	2201      	movs	r2, #1
 8002cec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	0151      	lsls	r1, r2, #5
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	440a      	add	r2, r1
 8002d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f003 fd04 	bl	8006726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	6093      	str	r3, [r2, #8]
}
 8002d30:	e19e      	b.n	8003070 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d44:	2b80      	cmp	r3, #128	; 0x80
 8002d46:	d12b      	bne.n	8002da0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	0151      	lsls	r1, r2, #5
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	440a      	add	r2, r1
 8002d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d62:	f043 0302 	orr.w	r3, r3, #2
 8002d66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f003 fcd7 	bl	8006726 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	440b      	add	r3, r1
 8002d86:	335d      	adds	r3, #93	; 0x5d
 8002d88:	2206      	movs	r2, #6
 8002d8a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	6093      	str	r3, [r2, #8]
}
 8002d9e:	e167      	b.n	8003070 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db6:	d135      	bne.n	8002e24 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	0151      	lsls	r1, r2, #5
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	440a      	add	r2, r1
 8002dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dd2:	f043 0302 	orr.w	r3, r3, #2
 8002dd6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f003 fc9f 	bl	8006726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df4:	461a      	mov	r2, r3
 8002df6:	2310      	movs	r3, #16
 8002df8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e06:	461a      	mov	r2, r3
 8002e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	440b      	add	r3, r1
 8002e1c:	335d      	adds	r3, #93	; 0x5d
 8002e1e:	2208      	movs	r2, #8
 8002e20:	701a      	strb	r2, [r3, #0]
}
 8002e22:	e125      	b.n	8003070 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	f040 811a 	bne.w	8003070 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	0151      	lsls	r1, r2, #5
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	440a      	add	r2, r1
 8002e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e56:	f023 0302 	bic.w	r3, r3, #2
 8002e5a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	440b      	add	r3, r1
 8002e6a:	335d      	adds	r3, #93	; 0x5d
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d137      	bne.n	8002ee2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	440b      	add	r3, r1
 8002e80:	335c      	adds	r3, #92	; 0x5c
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	333f      	adds	r3, #63	; 0x3f
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d00b      	beq.n	8002eb4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	333f      	adds	r3, #63	; 0x3f
 8002eac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	f040 80c5 	bne.w	800303e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3351      	adds	r3, #81	; 0x51
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	f083 0301 	eor.w	r3, r3, #1
 8002eca:	b2d8      	uxtb	r0, r3
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	440b      	add	r3, r1
 8002eda:	3351      	adds	r3, #81	; 0x51
 8002edc:	4602      	mov	r2, r0
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e0ad      	b.n	800303e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	440b      	add	r3, r1
 8002ef0:	335d      	adds	r3, #93	; 0x5d
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d10a      	bne.n	8002f0e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	440b      	add	r3, r1
 8002f06:	335c      	adds	r3, #92	; 0x5c
 8002f08:	2202      	movs	r2, #2
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	e097      	b.n	800303e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	335d      	adds	r3, #93	; 0x5d
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d10a      	bne.n	8002f3a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	440b      	add	r3, r1
 8002f32:	335c      	adds	r3, #92	; 0x5c
 8002f34:	2202      	movs	r2, #2
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	e081      	b.n	800303e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	440b      	add	r3, r1
 8002f48:	335d      	adds	r3, #93	; 0x5d
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d10a      	bne.n	8002f66 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	440b      	add	r3, r1
 8002f5e:	335c      	adds	r3, #92	; 0x5c
 8002f60:	2205      	movs	r2, #5
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	e06b      	b.n	800303e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	440b      	add	r3, r1
 8002f74:	335d      	adds	r3, #93	; 0x5d
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d00a      	beq.n	8002f92 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	440b      	add	r3, r1
 8002f8a:	335d      	adds	r3, #93	; 0x5d
 8002f8c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d155      	bne.n	800303e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3358      	adds	r3, #88	; 0x58
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	1c59      	adds	r1, r3, #1
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4403      	add	r3, r0
 8002fb4:	3358      	adds	r3, #88	; 0x58
 8002fb6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	440b      	add	r3, r1
 8002fc6:	3358      	adds	r3, #88	; 0x58
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d914      	bls.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	440b      	add	r3, r1
 8002fdc:	3358      	adds	r3, #88	; 0x58
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	440b      	add	r3, r1
 8002ff0:	335c      	adds	r3, #92	; 0x5c
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	701a      	strb	r2, [r3, #0]
 8002ff6:	e009      	b.n	800300c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	440b      	add	r3, r1
 8003006:	335c      	adds	r3, #92	; 0x5c
 8003008:	2202      	movs	r2, #2
 800300a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003022:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800302a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4413      	add	r3, r2
 8003034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003038:	461a      	mov	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304a:	461a      	mov	r2, r3
 800304c:	2302      	movs	r3, #2
 800304e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	b2d8      	uxtb	r0, r3
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	335c      	adds	r3, #92	; 0x5c
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	4601      	mov	r1, r0
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f005 fcfe 	bl	8008a6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003070:	bf00      	nop
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	; 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	0c5b      	lsrs	r3, r3, #17
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ac:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d003      	beq.n	80030bc <HCD_RXQLVL_IRQHandler+0x44>
 80030b4:	2b05      	cmp	r3, #5
 80030b6:	f000 8082 	beq.w	80031be <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80030ba:	e083      	b.n	80031c4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d07f      	beq.n	80031c2 <HCD_RXQLVL_IRQHandler+0x14a>
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	440b      	add	r3, r1
 80030d0:	3344      	adds	r3, #68	; 0x44
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d074      	beq.n	80031c2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	440b      	add	r3, r1
 80030ea:	3344      	adds	r3, #68	; 0x44
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	b292      	uxth	r2, r2
 80030f2:	4619      	mov	r1, r3
 80030f4:	f002 feb5 	bl	8005e62 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	3344      	adds	r3, #68	; 0x44
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	18d1      	adds	r1, r2, r3
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4403      	add	r3, r0
 800311c:	3344      	adds	r3, #68	; 0x44
 800311e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	334c      	adds	r3, #76	; 0x4c
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	18d1      	adds	r1, r2, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4403      	add	r3, r0
 8003144:	334c      	adds	r3, #76	; 0x4c
 8003146:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <HCD_RXQLVL_IRQHandler+0x154>)
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d031      	beq.n	80031c2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003174:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800317c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	4413      	add	r3, r2
 8003186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318a:	461a      	mov	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	440b      	add	r3, r1
 800319e:	3350      	adds	r3, #80	; 0x50
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	f083 0301 	eor.w	r3, r3, #1
 80031a6:	b2d8      	uxtb	r0, r3
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	440b      	add	r3, r1
 80031b6:	3350      	adds	r3, #80	; 0x50
 80031b8:	4602      	mov	r2, r0
 80031ba:	701a      	strb	r2, [r3, #0]
      break;
 80031bc:	e001      	b.n	80031c2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80031be:	bf00      	nop
 80031c0:	e000      	b.n	80031c4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80031c2:	bf00      	nop
  }
}
 80031c4:	bf00      	nop
 80031c6:	3728      	adds	r7, #40	; 0x28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	1ff80000 	.word	0x1ff80000

080031d0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80031fc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b02      	cmp	r3, #2
 8003206:	d10b      	bne.n	8003220 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d102      	bne.n	8003218 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f005 fc0e 	bl	8008a34 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f043 0302 	orr.w	r3, r3, #2
 800321e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b08      	cmp	r3, #8
 8003228:	d132      	bne.n	8003290 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f043 0308 	orr.w	r3, r3, #8
 8003230:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b04      	cmp	r3, #4
 800323a:	d126      	bne.n	800328a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d113      	bne.n	800326c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800324a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800324e:	d106      	bne.n	800325e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2102      	movs	r1, #2
 8003256:	4618      	mov	r0, r3
 8003258:	f002 ff3e 	bl	80060d8 <USB_InitFSLSPClkSel>
 800325c:	e011      	b.n	8003282 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2101      	movs	r1, #1
 8003264:	4618      	mov	r0, r3
 8003266:	f002 ff37 	bl	80060d8 <USB_InitFSLSPClkSel>
 800326a:	e00a      	b.n	8003282 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d106      	bne.n	8003282 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800327a:	461a      	mov	r2, r3
 800327c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003280:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f005 fc00 	bl	8008a88 <HAL_HCD_PortEnabled_Callback>
 8003288:	e002      	b.n	8003290 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f005 fc0a 	bl	8008aa4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b20      	cmp	r3, #32
 8003298:	d103      	bne.n	80032a2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f043 0320 	orr.w	r3, r3, #32
 80032a0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032a8:	461a      	mov	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	6013      	str	r3, [r2, #0]
}
 80032ae:	bf00      	nop
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e11f      	b.n	800350a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fd fd34 	bl	8000d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2224      	movs	r2, #36	; 0x24
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800330a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800331a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800331c:	f001 f9de 	bl	80046dc <HAL_RCC_GetPCLK1Freq>
 8003320:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4a7b      	ldr	r2, [pc, #492]	; (8003514 <HAL_I2C_Init+0x25c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d807      	bhi.n	800333c <HAL_I2C_Init+0x84>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4a7a      	ldr	r2, [pc, #488]	; (8003518 <HAL_I2C_Init+0x260>)
 8003330:	4293      	cmp	r3, r2
 8003332:	bf94      	ite	ls
 8003334:	2301      	movls	r3, #1
 8003336:	2300      	movhi	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	e006      	b.n	800334a <HAL_I2C_Init+0x92>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4a77      	ldr	r2, [pc, #476]	; (800351c <HAL_I2C_Init+0x264>)
 8003340:	4293      	cmp	r3, r2
 8003342:	bf94      	ite	ls
 8003344:	2301      	movls	r3, #1
 8003346:	2300      	movhi	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0db      	b.n	800350a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4a72      	ldr	r2, [pc, #456]	; (8003520 <HAL_I2C_Init+0x268>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	0c9b      	lsrs	r3, r3, #18
 800335c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4a64      	ldr	r2, [pc, #400]	; (8003514 <HAL_I2C_Init+0x25c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d802      	bhi.n	800338c <HAL_I2C_Init+0xd4>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	3301      	adds	r3, #1
 800338a:	e009      	b.n	80033a0 <HAL_I2C_Init+0xe8>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	4a63      	ldr	r2, [pc, #396]	; (8003524 <HAL_I2C_Init+0x26c>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	099b      	lsrs	r3, r3, #6
 800339e:	3301      	adds	r3, #1
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4956      	ldr	r1, [pc, #344]	; (8003514 <HAL_I2C_Init+0x25c>)
 80033bc:	428b      	cmp	r3, r1
 80033be:	d80d      	bhi.n	80033dc <HAL_I2C_Init+0x124>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	1e59      	subs	r1, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ce:	3301      	adds	r3, #1
 80033d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	bf38      	it	cc
 80033d8:	2304      	movcc	r3, #4
 80033da:	e04f      	b.n	800347c <HAL_I2C_Init+0x1c4>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d111      	bne.n	8003408 <HAL_I2C_Init+0x150>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1e58      	subs	r0, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6859      	ldr	r1, [r3, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	440b      	add	r3, r1
 80033f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f6:	3301      	adds	r3, #1
 80033f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	e012      	b.n	800342e <HAL_I2C_Init+0x176>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1e58      	subs	r0, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	0099      	lsls	r1, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	fbb0 f3f3 	udiv	r3, r0, r3
 800341e:	3301      	adds	r3, #1
 8003420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_I2C_Init+0x17e>
 8003432:	2301      	movs	r3, #1
 8003434:	e022      	b.n	800347c <HAL_I2C_Init+0x1c4>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10e      	bne.n	800345c <HAL_I2C_Init+0x1a4>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1e58      	subs	r0, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	460b      	mov	r3, r1
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	440b      	add	r3, r1
 800344c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003450:	3301      	adds	r3, #1
 8003452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800345a:	e00f      	b.n	800347c <HAL_I2C_Init+0x1c4>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1e58      	subs	r0, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	0099      	lsls	r1, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003472:	3301      	adds	r3, #1
 8003474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	6809      	ldr	r1, [r1, #0]
 8003480:	4313      	orrs	r3, r2
 8003482:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69da      	ldr	r2, [r3, #28]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6911      	ldr	r1, [r2, #16]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68d2      	ldr	r2, [r2, #12]
 80034b6:	4311      	orrs	r1, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	430b      	orrs	r3, r1
 80034be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	000186a0 	.word	0x000186a0
 8003518:	001e847f 	.word	0x001e847f
 800351c:	003d08ff 	.word	0x003d08ff
 8003520:	431bde83 	.word	0x431bde83
 8003524:	10624dd3 	.word	0x10624dd3

08003528 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e128      	b.n	800378c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a90      	ldr	r2, [pc, #576]	; (8003794 <HAL_I2S_Init+0x26c>)
 8003552:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7fd fc41 	bl	8000ddc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003570:	f023 030f 	bic.w	r3, r3, #15
 8003574:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2202      	movs	r2, #2
 800357c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d060      	beq.n	8003648 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800358e:	2310      	movs	r3, #16
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	e001      	b.n	8003598 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003594:	2320      	movs	r3, #32
 8003596:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b20      	cmp	r3, #32
 800359e:	d802      	bhi.n	80035a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80035a6:	2001      	movs	r0, #1
 80035a8:	f001 f9a2 	bl	80048f0 <HAL_RCCEx_GetPeriphCLKFreq>
 80035ac:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b6:	d125      	bne.n	8003604 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d010      	beq.n	80035e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	461a      	mov	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035dc:	3305      	adds	r3, #5
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	e01f      	b.n	8003622 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	461a      	mov	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fe:	3305      	adds	r3, #5
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	e00e      	b.n	8003622 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	fbb2 f2f3 	udiv	r2, r2, r3
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	461a      	mov	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	fbb2 f3f3 	udiv	r3, r2, r3
 800361e:	3305      	adds	r3, #5
 8003620:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4a5c      	ldr	r2, [pc, #368]	; (8003798 <HAL_I2S_Init+0x270>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	08db      	lsrs	r3, r3, #3
 800362c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	021b      	lsls	r3, r3, #8
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	e003      	b.n	8003650 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003648:	2302      	movs	r3, #2
 800364a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d902      	bls.n	800365c <HAL_I2S_Init+0x134>
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	2bff      	cmp	r3, #255	; 0xff
 800365a:	d907      	bls.n	800366c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003660:	f043 0210 	orr.w	r2, r3, #16
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e08f      	b.n	800378c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	ea42 0103 	orr.w	r1, r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	430a      	orrs	r2, r1
 800367e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800368a:	f023 030f 	bic.w	r3, r3, #15
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6851      	ldr	r1, [r2, #4]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6892      	ldr	r2, [r2, #8]
 8003696:	4311      	orrs	r1, r2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68d2      	ldr	r2, [r2, #12]
 800369c:	4311      	orrs	r1, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6992      	ldr	r2, [r2, #24]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d161      	bne.n	800377c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a38      	ldr	r2, [pc, #224]	; (800379c <HAL_I2S_Init+0x274>)
 80036bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a37      	ldr	r2, [pc, #220]	; (80037a0 <HAL_I2S_Init+0x278>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d101      	bne.n	80036cc <HAL_I2S_Init+0x1a4>
 80036c8:	4b36      	ldr	r3, [pc, #216]	; (80037a4 <HAL_I2S_Init+0x27c>)
 80036ca:	e001      	b.n	80036d0 <HAL_I2S_Init+0x1a8>
 80036cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	4932      	ldr	r1, [pc, #200]	; (80037a0 <HAL_I2S_Init+0x278>)
 80036d8:	428a      	cmp	r2, r1
 80036da:	d101      	bne.n	80036e0 <HAL_I2S_Init+0x1b8>
 80036dc:	4a31      	ldr	r2, [pc, #196]	; (80037a4 <HAL_I2S_Init+0x27c>)
 80036de:	e001      	b.n	80036e4 <HAL_I2S_Init+0x1bc>
 80036e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80036e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036e8:	f023 030f 	bic.w	r3, r3, #15
 80036ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a2b      	ldr	r2, [pc, #172]	; (80037a0 <HAL_I2S_Init+0x278>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d101      	bne.n	80036fc <HAL_I2S_Init+0x1d4>
 80036f8:	4b2a      	ldr	r3, [pc, #168]	; (80037a4 <HAL_I2S_Init+0x27c>)
 80036fa:	e001      	b.n	8003700 <HAL_I2S_Init+0x1d8>
 80036fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003700:	2202      	movs	r2, #2
 8003702:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a25      	ldr	r2, [pc, #148]	; (80037a0 <HAL_I2S_Init+0x278>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d101      	bne.n	8003712 <HAL_I2S_Init+0x1ea>
 800370e:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <HAL_I2S_Init+0x27c>)
 8003710:	e001      	b.n	8003716 <HAL_I2S_Init+0x1ee>
 8003712:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003722:	d003      	beq.n	800372c <HAL_I2S_Init+0x204>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d103      	bne.n	8003734 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800372c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	e001      	b.n	8003738 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003734:	2300      	movs	r3, #0
 8003736:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	b299      	uxth	r1, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800374e:	4303      	orrs	r3, r0
 8003750:	b29b      	uxth	r3, r3
 8003752:	430b      	orrs	r3, r1
 8003754:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003756:	4313      	orrs	r3, r2
 8003758:	b29a      	uxth	r2, r3
 800375a:	897b      	ldrh	r3, [r7, #10]
 800375c:	4313      	orrs	r3, r2
 800375e:	b29b      	uxth	r3, r3
 8003760:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003764:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a0d      	ldr	r2, [pc, #52]	; (80037a0 <HAL_I2S_Init+0x278>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d101      	bne.n	8003774 <HAL_I2S_Init+0x24c>
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <HAL_I2S_Init+0x27c>)
 8003772:	e001      	b.n	8003778 <HAL_I2S_Init+0x250>
 8003774:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003778:	897a      	ldrh	r2, [r7, #10]
 800377a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	0800389f 	.word	0x0800389f
 8003798:	cccccccd 	.word	0xcccccccd
 800379c:	080039b5 	.word	0x080039b5
 80037a0:	40003800 	.word	0x40003800
 80037a4:	40003400 	.word	0x40003400

080037a8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	881a      	ldrh	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	1c9a      	adds	r2, r3, #2
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10e      	bne.n	8003838 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003828:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff ffb8 	bl	80037a8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	b292      	uxth	r2, r2
 8003854:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	1c9a      	adds	r2, r3, #2
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10e      	bne.n	8003896 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003886:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff93 	bl	80037bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b086      	sub	sp, #24
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d13a      	bne.n	8003930 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d109      	bne.n	80038d8 <I2S_IRQHandler+0x3a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d102      	bne.n	80038d8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff ffb4 	bl	8003840 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038de:	2b40      	cmp	r3, #64	; 0x40
 80038e0:	d126      	bne.n	8003930 <I2S_IRQHandler+0x92>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d11f      	bne.n	8003930 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003900:	2300      	movs	r3, #0
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f043 0202 	orr.w	r2, r3, #2
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff ff50 	bl	80037d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b03      	cmp	r3, #3
 800393a:	d136      	bne.n	80039aa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b02      	cmp	r3, #2
 8003944:	d109      	bne.n	800395a <I2S_IRQHandler+0xbc>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003950:	2b80      	cmp	r3, #128	; 0x80
 8003952:	d102      	bne.n	800395a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ff45 	bl	80037e4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b08      	cmp	r3, #8
 8003962:	d122      	bne.n	80039aa <I2S_IRQHandler+0x10c>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b20      	cmp	r3, #32
 8003970:	d11b      	bne.n	80039aa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003980:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399c:	f043 0204 	orr.w	r2, r3, #4
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff ff13 	bl	80037d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039aa:	bf00      	nop
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4aa2      	ldr	r2, [pc, #648]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d101      	bne.n	80039d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80039ce:	4ba2      	ldr	r3, [pc, #648]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039d0:	e001      	b.n	80039d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80039d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a9b      	ldr	r2, [pc, #620]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d101      	bne.n	80039f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80039ec:	4b9a      	ldr	r3, [pc, #616]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039ee:	e001      	b.n	80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80039f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a00:	d004      	beq.n	8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f040 8099 	bne.w	8003b3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d107      	bne.n	8003a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f925 	bl	8003c70 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d107      	bne.n	8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f9c8 	bl	8003dd0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b40      	cmp	r3, #64	; 0x40
 8003a48:	d13a      	bne.n	8003ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d035      	beq.n	8003ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a7e      	ldr	r2, [pc, #504]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d101      	bne.n	8003a62 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003a5e:	4b7e      	ldr	r3, [pc, #504]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a60:	e001      	b.n	8003a66 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003a62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4979      	ldr	r1, [pc, #484]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a6e:	428b      	cmp	r3, r1
 8003a70:	d101      	bne.n	8003a76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003a72:	4b79      	ldr	r3, [pc, #484]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a74:	e001      	b.n	8003a7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003a76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a7e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	f043 0202 	orr.w	r2, r3, #2
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff fe88 	bl	80037d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	f040 80be 	bne.w	8003c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 80b8 	beq.w	8003c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ae6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a59      	ldr	r2, [pc, #356]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d101      	bne.n	8003af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003af2:	4b59      	ldr	r3, [pc, #356]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003af4:	e001      	b.n	8003afa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003af6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4954      	ldr	r1, [pc, #336]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b02:	428b      	cmp	r3, r1
 8003b04:	d101      	bne.n	8003b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003b06:	4b54      	ldr	r3, [pc, #336]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b08:	e001      	b.n	8003b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003b0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b12:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b14:	2300      	movs	r3, #0
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	60bb      	str	r3, [r7, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	f043 0204 	orr.w	r2, r3, #4
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff fe4a 	bl	80037d0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b3c:	e084      	b.n	8003c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d107      	bne.n	8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f8be 	bl	8003cd4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d107      	bne.n	8003b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f8fd 	bl	8003d6c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d12f      	bne.n	8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f003 0320 	and.w	r3, r3, #32
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d02a      	beq.n	8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b94:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2e      	ldr	r2, [pc, #184]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d101      	bne.n	8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ba0:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ba2:	e001      	b.n	8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ba4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4929      	ldr	r1, [pc, #164]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bb0:	428b      	cmp	r3, r1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003bb4:	4b28      	ldr	r3, [pc, #160]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bb6:	e001      	b.n	8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003bb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bc0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	f043 0202 	orr.w	r2, r3, #2
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff fdfa 	bl	80037d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d131      	bne.n	8003c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d02c      	beq.n	8003c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d101      	bne.n	8003bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003bfa:	4b17      	ldr	r3, [pc, #92]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bfc:	e001      	b.n	8003c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003bfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4912      	ldr	r1, [pc, #72]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c0a:	428b      	cmp	r3, r1
 8003c0c:	d101      	bne.n	8003c12 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003c0e:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c10:	e001      	b.n	8003c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003c12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c1a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c2a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c38:	f043 0204 	orr.w	r2, r3, #4
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff fdc5 	bl	80037d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c46:	e000      	b.n	8003c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c48:	bf00      	nop
}
 8003c4a:	bf00      	nop
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40003800 	.word	0x40003800
 8003c58:	40003400 	.word	0x40003400

08003c5c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	1c99      	adds	r1, r3, #2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6251      	str	r1, [r2, #36]	; 0x24
 8003c82:	881a      	ldrh	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d113      	bne.n	8003cca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cb0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d106      	bne.n	8003cca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff ffc9 	bl	8003c5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	1c99      	adds	r1, r3, #2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6251      	str	r1, [r2, #36]	; 0x24
 8003ce6:	8819      	ldrh	r1, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <I2SEx_TxISR_I2SExt+0x90>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d101      	bne.n	8003cf6 <I2SEx_TxISR_I2SExt+0x22>
 8003cf2:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <I2SEx_TxISR_I2SExt+0x94>)
 8003cf4:	e001      	b.n	8003cfa <I2SEx_TxISR_I2SExt+0x26>
 8003cf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cfa:	460a      	mov	r2, r1
 8003cfc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d121      	bne.n	8003d5a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a12      	ldr	r2, [pc, #72]	; (8003d64 <I2SEx_TxISR_I2SExt+0x90>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d101      	bne.n	8003d24 <I2SEx_TxISR_I2SExt+0x50>
 8003d20:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <I2SEx_TxISR_I2SExt+0x94>)
 8003d22:	e001      	b.n	8003d28 <I2SEx_TxISR_I2SExt+0x54>
 8003d24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	490d      	ldr	r1, [pc, #52]	; (8003d64 <I2SEx_TxISR_I2SExt+0x90>)
 8003d30:	428b      	cmp	r3, r1
 8003d32:	d101      	bne.n	8003d38 <I2SEx_TxISR_I2SExt+0x64>
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <I2SEx_TxISR_I2SExt+0x94>)
 8003d36:	e001      	b.n	8003d3c <I2SEx_TxISR_I2SExt+0x68>
 8003d38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ff81 	bl	8003c5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40003800 	.word	0x40003800
 8003d68:	40003400 	.word	0x40003400

08003d6c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68d8      	ldr	r0, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	1c99      	adds	r1, r3, #2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d84:	b282      	uxth	r2, r0
 8003d86:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d113      	bne.n	8003dc8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff ff4a 	bl	8003c5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a20      	ldr	r2, [pc, #128]	; (8003e60 <I2SEx_RxISR_I2SExt+0x90>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d101      	bne.n	8003de6 <I2SEx_RxISR_I2SExt+0x16>
 8003de2:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <I2SEx_RxISR_I2SExt+0x94>)
 8003de4:	e001      	b.n	8003dea <I2SEx_RxISR_I2SExt+0x1a>
 8003de6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dea:	68d8      	ldr	r0, [r3, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	1c99      	adds	r1, r3, #2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003df6:	b282      	uxth	r2, r0
 8003df8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d121      	bne.n	8003e56 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <I2SEx_RxISR_I2SExt+0x90>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d101      	bne.n	8003e20 <I2SEx_RxISR_I2SExt+0x50>
 8003e1c:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <I2SEx_RxISR_I2SExt+0x94>)
 8003e1e:	e001      	b.n	8003e24 <I2SEx_RxISR_I2SExt+0x54>
 8003e20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	490d      	ldr	r1, [pc, #52]	; (8003e60 <I2SEx_RxISR_I2SExt+0x90>)
 8003e2c:	428b      	cmp	r3, r1
 8003e2e:	d101      	bne.n	8003e34 <I2SEx_RxISR_I2SExt+0x64>
 8003e30:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <I2SEx_RxISR_I2SExt+0x94>)
 8003e32:	e001      	b.n	8003e38 <I2SEx_RxISR_I2SExt+0x68>
 8003e34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e3c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d106      	bne.n	8003e56 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff ff03 	bl	8003c5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40003800 	.word	0x40003800
 8003e64:	40003400 	.word	0x40003400

08003e68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e25b      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d075      	beq.n	8003f72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e86:	4ba3      	ldr	r3, [pc, #652]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d00c      	beq.n	8003eac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e92:	4ba0      	ldr	r3, [pc, #640]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d112      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e9e:	4b9d      	ldr	r3, [pc, #628]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eaa:	d10b      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eac:	4b99      	ldr	r3, [pc, #612]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d05b      	beq.n	8003f70 <HAL_RCC_OscConfig+0x108>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d157      	bne.n	8003f70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e236      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ecc:	d106      	bne.n	8003edc <HAL_RCC_OscConfig+0x74>
 8003ece:	4b91      	ldr	r3, [pc, #580]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a90      	ldr	r2, [pc, #576]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	e01d      	b.n	8003f18 <HAL_RCC_OscConfig+0xb0>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCC_OscConfig+0x98>
 8003ee6:	4b8b      	ldr	r3, [pc, #556]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a8a      	ldr	r2, [pc, #552]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	4b88      	ldr	r3, [pc, #544]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a87      	ldr	r2, [pc, #540]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	e00b      	b.n	8003f18 <HAL_RCC_OscConfig+0xb0>
 8003f00:	4b84      	ldr	r3, [pc, #528]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a83      	ldr	r2, [pc, #524]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	4b81      	ldr	r3, [pc, #516]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a80      	ldr	r2, [pc, #512]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d013      	beq.n	8003f48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f20:	f7fd f9a8 	bl	8001274 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f28:	f7fd f9a4 	bl	8001274 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	; 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e1fb      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3a:	4b76      	ldr	r3, [pc, #472]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0xc0>
 8003f46:	e014      	b.n	8003f72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7fd f994 	bl	8001274 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f50:	f7fd f990 	bl	8001274 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b64      	cmp	r3, #100	; 0x64
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e1e7      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f62:	4b6c      	ldr	r3, [pc, #432]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0xe8>
 8003f6e:	e000      	b.n	8003f72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d063      	beq.n	8004046 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f7e:	4b65      	ldr	r3, [pc, #404]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00b      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f8a:	4b62      	ldr	r3, [pc, #392]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d11c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f96:	4b5f      	ldr	r3, [pc, #380]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d116      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fa2:	4b5c      	ldr	r3, [pc, #368]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d005      	beq.n	8003fba <HAL_RCC_OscConfig+0x152>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d001      	beq.n	8003fba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e1bb      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fba:	4b56      	ldr	r3, [pc, #344]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4952      	ldr	r1, [pc, #328]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fce:	e03a      	b.n	8004046 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d020      	beq.n	800401a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd8:	4b4f      	ldr	r3, [pc, #316]	; (8004118 <HAL_RCC_OscConfig+0x2b0>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fde:	f7fd f949 	bl	8001274 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fe6:	f7fd f945 	bl	8001274 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e19c      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff8:	4b46      	ldr	r3, [pc, #280]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004004:	4b43      	ldr	r3, [pc, #268]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4940      	ldr	r1, [pc, #256]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8004014:	4313      	orrs	r3, r2
 8004016:	600b      	str	r3, [r1, #0]
 8004018:	e015      	b.n	8004046 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800401a:	4b3f      	ldr	r3, [pc, #252]	; (8004118 <HAL_RCC_OscConfig+0x2b0>)
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7fd f928 	bl	8001274 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004028:	f7fd f924 	bl	8001274 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e17b      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800403a:	4b36      	ldr	r3, [pc, #216]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d030      	beq.n	80040b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d016      	beq.n	8004088 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800405a:	4b30      	ldr	r3, [pc, #192]	; (800411c <HAL_RCC_OscConfig+0x2b4>)
 800405c:	2201      	movs	r2, #1
 800405e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004060:	f7fd f908 	bl	8001274 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004068:	f7fd f904 	bl	8001274 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e15b      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800407a:	4b26      	ldr	r3, [pc, #152]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 800407c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f0      	beq.n	8004068 <HAL_RCC_OscConfig+0x200>
 8004086:	e015      	b.n	80040b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004088:	4b24      	ldr	r3, [pc, #144]	; (800411c <HAL_RCC_OscConfig+0x2b4>)
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408e:	f7fd f8f1 	bl	8001274 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004096:	f7fd f8ed 	bl	8001274 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e144      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a8:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 80040aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f0      	bne.n	8004096 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80a0 	beq.w	8004202 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c2:	2300      	movs	r3, #0
 80040c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040c6:	4b13      	ldr	r3, [pc, #76]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10f      	bne.n	80040f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	4a0e      	ldr	r2, [pc, #56]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e0:	6413      	str	r3, [r2, #64]	; 0x40
 80040e2:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ee:	2301      	movs	r3, #1
 80040f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f2:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <HAL_RCC_OscConfig+0x2b8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d121      	bne.n	8004142 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040fe:	4b08      	ldr	r3, [pc, #32]	; (8004120 <HAL_RCC_OscConfig+0x2b8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a07      	ldr	r2, [pc, #28]	; (8004120 <HAL_RCC_OscConfig+0x2b8>)
 8004104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410a:	f7fd f8b3 	bl	8001274 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004110:	e011      	b.n	8004136 <HAL_RCC_OscConfig+0x2ce>
 8004112:	bf00      	nop
 8004114:	40023800 	.word	0x40023800
 8004118:	42470000 	.word	0x42470000
 800411c:	42470e80 	.word	0x42470e80
 8004120:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004124:	f7fd f8a6 	bl	8001274 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e0fd      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004136:	4b81      	ldr	r3, [pc, #516]	; (800433c <HAL_RCC_OscConfig+0x4d4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d106      	bne.n	8004158 <HAL_RCC_OscConfig+0x2f0>
 800414a:	4b7d      	ldr	r3, [pc, #500]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 800414c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414e:	4a7c      	ldr	r2, [pc, #496]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	6713      	str	r3, [r2, #112]	; 0x70
 8004156:	e01c      	b.n	8004192 <HAL_RCC_OscConfig+0x32a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b05      	cmp	r3, #5
 800415e:	d10c      	bne.n	800417a <HAL_RCC_OscConfig+0x312>
 8004160:	4b77      	ldr	r3, [pc, #476]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004164:	4a76      	ldr	r2, [pc, #472]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004166:	f043 0304 	orr.w	r3, r3, #4
 800416a:	6713      	str	r3, [r2, #112]	; 0x70
 800416c:	4b74      	ldr	r3, [pc, #464]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004170:	4a73      	ldr	r2, [pc, #460]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	6713      	str	r3, [r2, #112]	; 0x70
 8004178:	e00b      	b.n	8004192 <HAL_RCC_OscConfig+0x32a>
 800417a:	4b71      	ldr	r3, [pc, #452]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	4a70      	ldr	r2, [pc, #448]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	6713      	str	r3, [r2, #112]	; 0x70
 8004186:	4b6e      	ldr	r3, [pc, #440]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	4a6d      	ldr	r2, [pc, #436]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 800418c:	f023 0304 	bic.w	r3, r3, #4
 8004190:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d015      	beq.n	80041c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419a:	f7fd f86b 	bl	8001274 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a0:	e00a      	b.n	80041b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a2:	f7fd f867 	bl	8001274 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e0bc      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b8:	4b61      	ldr	r3, [pc, #388]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0ee      	beq.n	80041a2 <HAL_RCC_OscConfig+0x33a>
 80041c4:	e014      	b.n	80041f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c6:	f7fd f855 	bl	8001274 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041cc:	e00a      	b.n	80041e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ce:	f7fd f851 	bl	8001274 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041dc:	4293      	cmp	r3, r2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e0a6      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e4:	4b56      	ldr	r3, [pc, #344]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ee      	bne.n	80041ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d105      	bne.n	8004202 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f6:	4b52      	ldr	r3, [pc, #328]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	4a51      	ldr	r2, [pc, #324]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 80041fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004200:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8092 	beq.w	8004330 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800420c:	4b4c      	ldr	r3, [pc, #304]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 030c 	and.w	r3, r3, #12
 8004214:	2b08      	cmp	r3, #8
 8004216:	d05c      	beq.n	80042d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d141      	bne.n	80042a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004220:	4b48      	ldr	r3, [pc, #288]	; (8004344 <HAL_RCC_OscConfig+0x4dc>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004226:	f7fd f825 	bl	8001274 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800422e:	f7fd f821 	bl	8001274 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e078      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004240:	4b3f      	ldr	r3, [pc, #252]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f0      	bne.n	800422e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	019b      	lsls	r3, r3, #6
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	085b      	lsrs	r3, r3, #1
 8004264:	3b01      	subs	r3, #1
 8004266:	041b      	lsls	r3, r3, #16
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	061b      	lsls	r3, r3, #24
 8004270:	4933      	ldr	r1, [pc, #204]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004272:	4313      	orrs	r3, r2
 8004274:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004276:	4b33      	ldr	r3, [pc, #204]	; (8004344 <HAL_RCC_OscConfig+0x4dc>)
 8004278:	2201      	movs	r2, #1
 800427a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fc fffa 	bl	8001274 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004284:	f7fc fff6 	bl	8001274 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e04d      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004296:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0x41c>
 80042a2:	e045      	b.n	8004330 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a4:	4b27      	ldr	r3, [pc, #156]	; (8004344 <HAL_RCC_OscConfig+0x4dc>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042aa:	f7fc ffe3 	bl	8001274 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b2:	f7fc ffdf 	bl	8001274 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e036      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c4:	4b1e      	ldr	r3, [pc, #120]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f0      	bne.n	80042b2 <HAL_RCC_OscConfig+0x44a>
 80042d0:	e02e      	b.n	8004330 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e029      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042de:	4b18      	ldr	r3, [pc, #96]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d11c      	bne.n	800432c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d115      	bne.n	800432c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004306:	4013      	ands	r3, r2
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800430c:	4293      	cmp	r3, r2
 800430e:	d10d      	bne.n	800432c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800431a:	429a      	cmp	r2, r3
 800431c:	d106      	bne.n	800432c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40007000 	.word	0x40007000
 8004340:	40023800 	.word	0x40023800
 8004344:	42470060 	.word	0x42470060

08004348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0cc      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800435c:	4b68      	ldr	r3, [pc, #416]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d90c      	bls.n	8004384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436a:	4b65      	ldr	r3, [pc, #404]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004372:	4b63      	ldr	r3, [pc, #396]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d001      	beq.n	8004384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0b8      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d020      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800439c:	4b59      	ldr	r3, [pc, #356]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4a58      	ldr	r2, [pc, #352]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043b4:	4b53      	ldr	r3, [pc, #332]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	4a52      	ldr	r2, [pc, #328]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c0:	4b50      	ldr	r3, [pc, #320]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	494d      	ldr	r1, [pc, #308]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d044      	beq.n	8004468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d107      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	4b47      	ldr	r3, [pc, #284]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d119      	bne.n	8004426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e07f      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d003      	beq.n	8004406 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004402:	2b03      	cmp	r3, #3
 8004404:	d107      	bne.n	8004416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004406:	4b3f      	ldr	r3, [pc, #252]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e06f      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004416:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e067      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004426:	4b37      	ldr	r3, [pc, #220]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f023 0203 	bic.w	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	4934      	ldr	r1, [pc, #208]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	4313      	orrs	r3, r2
 8004436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004438:	f7fc ff1c 	bl	8001274 <HAL_GetTick>
 800443c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443e:	e00a      	b.n	8004456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004440:	f7fc ff18 	bl	8001274 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	f241 3288 	movw	r2, #5000	; 0x1388
 800444e:	4293      	cmp	r3, r2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e04f      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004456:	4b2b      	ldr	r3, [pc, #172]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 020c 	and.w	r2, r3, #12
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	429a      	cmp	r2, r3
 8004466:	d1eb      	bne.n	8004440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004468:	4b25      	ldr	r3, [pc, #148]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d20c      	bcs.n	8004490 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004476:	4b22      	ldr	r3, [pc, #136]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b20      	ldr	r3, [pc, #128]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e032      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800449c:	4b19      	ldr	r3, [pc, #100]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4916      	ldr	r1, [pc, #88]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ba:	4b12      	ldr	r3, [pc, #72]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	490e      	ldr	r1, [pc, #56]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ce:	f000 f821 	bl	8004514 <HAL_RCC_GetSysClockFreq>
 80044d2:	4601      	mov	r1, r0
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	091b      	lsrs	r3, r3, #4
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <HAL_RCC_ClockConfig+0x1c0>)
 80044e0:	5cd3      	ldrb	r3, [r2, r3]
 80044e2:	fa21 f303 	lsr.w	r3, r1, r3
 80044e6:	4a09      	ldr	r2, [pc, #36]	; (800450c <HAL_RCC_ClockConfig+0x1c4>)
 80044e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044ea:	4b09      	ldr	r3, [pc, #36]	; (8004510 <HAL_RCC_ClockConfig+0x1c8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fc fe7c 	bl	80011ec <HAL_InitTick>

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40023c00 	.word	0x40023c00
 8004504:	40023800 	.word	0x40023800
 8004508:	080097e0 	.word	0x080097e0
 800450c:	20000000 	.word	0x20000000
 8004510:	20000004 	.word	0x20000004

08004514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	607b      	str	r3, [r7, #4]
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	2300      	movs	r3, #0
 8004524:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800452a:	4b63      	ldr	r3, [pc, #396]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	2b04      	cmp	r3, #4
 8004534:	d007      	beq.n	8004546 <HAL_RCC_GetSysClockFreq+0x32>
 8004536:	2b08      	cmp	r3, #8
 8004538:	d008      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0x38>
 800453a:	2b00      	cmp	r3, #0
 800453c:	f040 80b4 	bne.w	80046a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004540:	4b5e      	ldr	r3, [pc, #376]	; (80046bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004542:	60bb      	str	r3, [r7, #8]
       break;
 8004544:	e0b3      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004546:	4b5e      	ldr	r3, [pc, #376]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004548:	60bb      	str	r3, [r7, #8]
      break;
 800454a:	e0b0      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800454c:	4b5a      	ldr	r3, [pc, #360]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004554:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004556:	4b58      	ldr	r3, [pc, #352]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d04a      	beq.n	80045f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004562:	4b55      	ldr	r3, [pc, #340]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	f04f 0400 	mov.w	r4, #0
 800456c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	ea03 0501 	and.w	r5, r3, r1
 8004578:	ea04 0602 	and.w	r6, r4, r2
 800457c:	4629      	mov	r1, r5
 800457e:	4632      	mov	r2, r6
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	f04f 0400 	mov.w	r4, #0
 8004588:	0154      	lsls	r4, r2, #5
 800458a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800458e:	014b      	lsls	r3, r1, #5
 8004590:	4619      	mov	r1, r3
 8004592:	4622      	mov	r2, r4
 8004594:	1b49      	subs	r1, r1, r5
 8004596:	eb62 0206 	sbc.w	r2, r2, r6
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	f04f 0400 	mov.w	r4, #0
 80045a2:	0194      	lsls	r4, r2, #6
 80045a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80045a8:	018b      	lsls	r3, r1, #6
 80045aa:	1a5b      	subs	r3, r3, r1
 80045ac:	eb64 0402 	sbc.w	r4, r4, r2
 80045b0:	f04f 0100 	mov.w	r1, #0
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	00e2      	lsls	r2, r4, #3
 80045ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045be:	00d9      	lsls	r1, r3, #3
 80045c0:	460b      	mov	r3, r1
 80045c2:	4614      	mov	r4, r2
 80045c4:	195b      	adds	r3, r3, r5
 80045c6:	eb44 0406 	adc.w	r4, r4, r6
 80045ca:	f04f 0100 	mov.w	r1, #0
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	0262      	lsls	r2, r4, #9
 80045d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80045d8:	0259      	lsls	r1, r3, #9
 80045da:	460b      	mov	r3, r1
 80045dc:	4614      	mov	r4, r2
 80045de:	4618      	mov	r0, r3
 80045e0:	4621      	mov	r1, r4
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f04f 0400 	mov.w	r4, #0
 80045e8:	461a      	mov	r2, r3
 80045ea:	4623      	mov	r3, r4
 80045ec:	f7fb fe40 	bl	8000270 <__aeabi_uldivmod>
 80045f0:	4603      	mov	r3, r0
 80045f2:	460c      	mov	r4, r1
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	e049      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f8:	4b2f      	ldr	r3, [pc, #188]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	099b      	lsrs	r3, r3, #6
 80045fe:	f04f 0400 	mov.w	r4, #0
 8004602:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	ea03 0501 	and.w	r5, r3, r1
 800460e:	ea04 0602 	and.w	r6, r4, r2
 8004612:	4629      	mov	r1, r5
 8004614:	4632      	mov	r2, r6
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	f04f 0400 	mov.w	r4, #0
 800461e:	0154      	lsls	r4, r2, #5
 8004620:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004624:	014b      	lsls	r3, r1, #5
 8004626:	4619      	mov	r1, r3
 8004628:	4622      	mov	r2, r4
 800462a:	1b49      	subs	r1, r1, r5
 800462c:	eb62 0206 	sbc.w	r2, r2, r6
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	f04f 0400 	mov.w	r4, #0
 8004638:	0194      	lsls	r4, r2, #6
 800463a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800463e:	018b      	lsls	r3, r1, #6
 8004640:	1a5b      	subs	r3, r3, r1
 8004642:	eb64 0402 	sbc.w	r4, r4, r2
 8004646:	f04f 0100 	mov.w	r1, #0
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	00e2      	lsls	r2, r4, #3
 8004650:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004654:	00d9      	lsls	r1, r3, #3
 8004656:	460b      	mov	r3, r1
 8004658:	4614      	mov	r4, r2
 800465a:	195b      	adds	r3, r3, r5
 800465c:	eb44 0406 	adc.w	r4, r4, r6
 8004660:	f04f 0100 	mov.w	r1, #0
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	02a2      	lsls	r2, r4, #10
 800466a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800466e:	0299      	lsls	r1, r3, #10
 8004670:	460b      	mov	r3, r1
 8004672:	4614      	mov	r4, r2
 8004674:	4618      	mov	r0, r3
 8004676:	4621      	mov	r1, r4
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f04f 0400 	mov.w	r4, #0
 800467e:	461a      	mov	r2, r3
 8004680:	4623      	mov	r3, r4
 8004682:	f7fb fdf5 	bl	8000270 <__aeabi_uldivmod>
 8004686:	4603      	mov	r3, r0
 8004688:	460c      	mov	r4, r1
 800468a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	3301      	adds	r3, #1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	60bb      	str	r3, [r7, #8]
      break;
 80046a6:	e002      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a8:	4b04      	ldr	r3, [pc, #16]	; (80046bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80046aa:	60bb      	str	r3, [r7, #8]
      break;
 80046ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ae:	68bb      	ldr	r3, [r7, #8]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046b8:	40023800 	.word	0x40023800
 80046bc:	00f42400 	.word	0x00f42400
 80046c0:	007a1200 	.word	0x007a1200

080046c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046c8:	4b03      	ldr	r3, [pc, #12]	; (80046d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046ca:	681b      	ldr	r3, [r3, #0]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20000000 	.word	0x20000000

080046dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046e0:	f7ff fff0 	bl	80046c4 <HAL_RCC_GetHCLKFreq>
 80046e4:	4601      	mov	r1, r0
 80046e6:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	0a9b      	lsrs	r3, r3, #10
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	4a03      	ldr	r2, [pc, #12]	; (8004700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f2:	5cd3      	ldrb	r3, [r2, r3]
 80046f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40023800 	.word	0x40023800
 8004700:	080097f0 	.word	0x080097f0

08004704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004708:	f7ff ffdc 	bl	80046c4 <HAL_RCC_GetHCLKFreq>
 800470c:	4601      	mov	r1, r0
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	0b5b      	lsrs	r3, r3, #13
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	4a03      	ldr	r2, [pc, #12]	; (8004728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800471a:	5cd3      	ldrb	r3, [r2, r3]
 800471c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40023800 	.word	0x40023800
 8004728:	080097f0 	.word	0x080097f0

0800472c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d105      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004750:	2b00      	cmp	r3, #0
 8004752:	d035      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004754:	4b62      	ldr	r3, [pc, #392]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800475a:	f7fc fd8b 	bl	8001274 <HAL_GetTick>
 800475e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004760:	e008      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004762:	f7fc fd87 	bl	8001274 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e0b0      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004774:	4b5b      	ldr	r3, [pc, #364]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f0      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	019a      	lsls	r2, r3, #6
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	071b      	lsls	r3, r3, #28
 800478c:	4955      	ldr	r1, [pc, #340]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004794:	4b52      	ldr	r3, [pc, #328]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004796:	2201      	movs	r2, #1
 8004798:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800479a:	f7fc fd6b 	bl	8001274 <HAL_GetTick>
 800479e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047a0:	e008      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047a2:	f7fc fd67 	bl	8001274 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e090      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047b4:	4b4b      	ldr	r3, [pc, #300]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f0      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8083 	beq.w	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	4b44      	ldr	r3, [pc, #272]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	4a43      	ldr	r2, [pc, #268]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047dc:	6413      	str	r3, [r2, #64]	; 0x40
 80047de:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047ea:	4b3f      	ldr	r3, [pc, #252]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a3e      	ldr	r2, [pc, #248]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047f6:	f7fc fd3d 	bl	8001274 <HAL_GetTick>
 80047fa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047fc:	e008      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047fe:	f7fc fd39 	bl	8001274 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e062      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004810:	4b35      	ldr	r3, [pc, #212]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0f0      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800481c:	4b31      	ldr	r3, [pc, #196]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004824:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d02f      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	429a      	cmp	r2, r3
 8004838:	d028      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800483a:	4b2a      	ldr	r3, [pc, #168]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800483c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004842:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004844:	4b29      	ldr	r3, [pc, #164]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004846:	2201      	movs	r2, #1
 8004848:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800484a:	4b28      	ldr	r3, [pc, #160]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004850:	4a24      	ldr	r2, [pc, #144]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004856:	4b23      	ldr	r3, [pc, #140]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b01      	cmp	r3, #1
 8004860:	d114      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004862:	f7fc fd07 	bl	8001274 <HAL_GetTick>
 8004866:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004868:	e00a      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800486a:	f7fc fd03 	bl	8001274 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f241 3288 	movw	r2, #5000	; 0x1388
 8004878:	4293      	cmp	r3, r2
 800487a:	d901      	bls.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e02a      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004880:	4b18      	ldr	r3, [pc, #96]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0ee      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004894:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004898:	d10d      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800489a:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80048aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ae:	490d      	ldr	r1, [pc, #52]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	608b      	str	r3, [r1, #8]
 80048b4:	e005      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80048b6:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	4a0a      	ldr	r2, [pc, #40]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048bc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048c0:	6093      	str	r3, [r2, #8]
 80048c2:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ce:	4905      	ldr	r1, [pc, #20]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	42470068 	.word	0x42470068
 80048e4:	40023800 	.word	0x40023800
 80048e8:	40007000 	.word	0x40007000
 80048ec:	42470e40 	.word	0x42470e40

080048f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d13d      	bne.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800490e:	4b22      	ldr	r3, [pc, #136]	; (8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004916:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d004      	beq.n	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800491e:	2b01      	cmp	r3, #1
 8004920:	d12f      	bne.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004922:	4b1e      	ldr	r3, [pc, #120]	; (800499c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004924:	617b      	str	r3, [r7, #20]
          break;
 8004926:	e02f      	b.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004928:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004934:	d108      	bne.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004936:	4b18      	ldr	r3, [pc, #96]	; (8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800493e:	4a18      	ldr	r2, [pc, #96]	; (80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004940:	fbb2 f3f3 	udiv	r3, r2, r3
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	e007      	b.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004948:	4b13      	ldr	r3, [pc, #76]	; (8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004950:	4a14      	ldr	r2, [pc, #80]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004952:	fbb2 f3f3 	udiv	r3, r2, r3
 8004956:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004958:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800495a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800495e:	099b      	lsrs	r3, r3, #6
 8004960:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	fb02 f303 	mul.w	r3, r2, r3
 800496a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800496c:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800496e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004972:	0f1b      	lsrs	r3, r3, #28
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	fbb2 f3f3 	udiv	r3, r2, r3
 800497e:	617b      	str	r3, [r7, #20]
          break;
 8004980:	e002      	b.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
          break;
 8004986:	bf00      	nop
        }
      }
      break;
 8004988:	bf00      	nop
    }
  }
  return frequency;
 800498a:	697b      	ldr	r3, [r7, #20]
}
 800498c:	4618      	mov	r0, r3
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	40023800 	.word	0x40023800
 800499c:	00bb8000 	.word	0x00bb8000
 80049a0:	007a1200 	.word	0x007a1200
 80049a4:	00f42400 	.word	0x00f42400

080049a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e056      	b.n	8004a68 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d106      	bne.n	80049da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7fc fa69 	bl	8000eac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2202      	movs	r2, #2
 80049de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	ea42 0103 	orr.w	r1, r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	0c1b      	lsrs	r3, r3, #16
 8004a38:	f003 0104 	and.w	r1, r3, #4
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69da      	ldr	r2, [r3, #28]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e01d      	b.n	8004abe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fc fa50 	bl	8000f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	4619      	mov	r1, r3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	f000 f95e 	bl	8004d70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b085      	sub	sp, #20
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0201 	orr.w	r2, r2, #1
 8004adc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b06      	cmp	r3, #6
 8004aee:	d007      	beq.n	8004b00 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d122      	bne.n	8004b6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d11b      	bne.n	8004b6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f06f 0202 	mvn.w	r2, #2
 8004b3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	f003 0303 	and.w	r3, r3, #3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f8ee 	bl	8004d32 <HAL_TIM_IC_CaptureCallback>
 8004b56:	e005      	b.n	8004b64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f8e0 	bl	8004d1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f8f1 	bl	8004d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d122      	bne.n	8004bbe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d11b      	bne.n	8004bbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f06f 0204 	mvn.w	r2, #4
 8004b8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f8c4 	bl	8004d32 <HAL_TIM_IC_CaptureCallback>
 8004baa:	e005      	b.n	8004bb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f8b6 	bl	8004d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f8c7 	bl	8004d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d122      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d11b      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f06f 0208 	mvn.w	r2, #8
 8004be2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2204      	movs	r2, #4
 8004be8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	f003 0303 	and.w	r3, r3, #3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f89a 	bl	8004d32 <HAL_TIM_IC_CaptureCallback>
 8004bfe:	e005      	b.n	8004c0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f88c 	bl	8004d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f89d 	bl	8004d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d122      	bne.n	8004c66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d11b      	bne.n	8004c66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f06f 0210 	mvn.w	r2, #16
 8004c36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2208      	movs	r2, #8
 8004c3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f870 	bl	8004d32 <HAL_TIM_IC_CaptureCallback>
 8004c52:	e005      	b.n	8004c60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f862 	bl	8004d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f873 	bl	8004d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d10e      	bne.n	8004c92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d107      	bne.n	8004c92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f06f 0201 	mvn.w	r2, #1
 8004c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7fb fc6f 	bl	8000570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9c:	2b80      	cmp	r3, #128	; 0x80
 8004c9e:	d10e      	bne.n	8004cbe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004caa:	2b80      	cmp	r3, #128	; 0x80
 8004cac:	d107      	bne.n	8004cbe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f903 	bl	8004ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	d10e      	bne.n	8004cea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd6:	2b40      	cmp	r3, #64	; 0x40
 8004cd8:	d107      	bne.n	8004cea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f838 	bl	8004d5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d10e      	bne.n	8004d16 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	d107      	bne.n	8004d16 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f06f 0220 	mvn.w	r2, #32
 8004d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f8cd 	bl	8004eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a40      	ldr	r2, [pc, #256]	; (8004e84 <TIM_Base_SetConfig+0x114>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d013      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8e:	d00f      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a3d      	ldr	r2, [pc, #244]	; (8004e88 <TIM_Base_SetConfig+0x118>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00b      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a3c      	ldr	r2, [pc, #240]	; (8004e8c <TIM_Base_SetConfig+0x11c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d007      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a3b      	ldr	r2, [pc, #236]	; (8004e90 <TIM_Base_SetConfig+0x120>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d003      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a3a      	ldr	r2, [pc, #232]	; (8004e94 <TIM_Base_SetConfig+0x124>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d108      	bne.n	8004dc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2f      	ldr	r2, [pc, #188]	; (8004e84 <TIM_Base_SetConfig+0x114>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d02b      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd0:	d027      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a2c      	ldr	r2, [pc, #176]	; (8004e88 <TIM_Base_SetConfig+0x118>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d023      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a2b      	ldr	r2, [pc, #172]	; (8004e8c <TIM_Base_SetConfig+0x11c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d01f      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a2a      	ldr	r2, [pc, #168]	; (8004e90 <TIM_Base_SetConfig+0x120>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d01b      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a29      	ldr	r2, [pc, #164]	; (8004e94 <TIM_Base_SetConfig+0x124>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d017      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a28      	ldr	r2, [pc, #160]	; (8004e98 <TIM_Base_SetConfig+0x128>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d013      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a27      	ldr	r2, [pc, #156]	; (8004e9c <TIM_Base_SetConfig+0x12c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d00f      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a26      	ldr	r2, [pc, #152]	; (8004ea0 <TIM_Base_SetConfig+0x130>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00b      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a25      	ldr	r2, [pc, #148]	; (8004ea4 <TIM_Base_SetConfig+0x134>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d007      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a24      	ldr	r2, [pc, #144]	; (8004ea8 <TIM_Base_SetConfig+0x138>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d003      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a23      	ldr	r2, [pc, #140]	; (8004eac <TIM_Base_SetConfig+0x13c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d108      	bne.n	8004e34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a0a      	ldr	r2, [pc, #40]	; (8004e84 <TIM_Base_SetConfig+0x114>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_Base_SetConfig+0xf8>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a0c      	ldr	r2, [pc, #48]	; (8004e94 <TIM_Base_SetConfig+0x124>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d103      	bne.n	8004e70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	615a      	str	r2, [r3, #20]
}
 8004e76:	bf00      	nop
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40010000 	.word	0x40010000
 8004e88:	40000400 	.word	0x40000400
 8004e8c:	40000800 	.word	0x40000800
 8004e90:	40000c00 	.word	0x40000c00
 8004e94:	40010400 	.word	0x40010400
 8004e98:	40014000 	.word	0x40014000
 8004e9c:	40014400 	.word	0x40014400
 8004ea0:	40014800 	.word	0x40014800
 8004ea4:	40001800 	.word	0x40001800
 8004ea8:	40001c00 	.word	0x40001c00
 8004eac:	40002000 	.word	0x40002000

08004eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e03f      	b.n	8004f6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fc f844 	bl	8000f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2224      	movs	r2, #36	; 0x24
 8004f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 faf9 	bl	8005514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695a      	ldr	r2, [r3, #20]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b085      	sub	sp, #20
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d130      	bne.n	8004fee <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <HAL_UART_Transmit_IT+0x26>
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e029      	b.n	8004ff0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d101      	bne.n	8004faa <HAL_UART_Transmit_IT+0x38>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	e022      	b.n	8004ff0 <HAL_UART_Transmit_IT+0x7e>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	88fa      	ldrh	r2, [r7, #6]
 8004fbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	88fa      	ldrh	r2, [r7, #6]
 8004fc2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2221      	movs	r2, #33	; 0x21
 8004fce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fe8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	e000      	b.n	8004ff0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004fee:	2302      	movs	r3, #2
  }
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	4613      	mov	r3, r2
 8005008:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b20      	cmp	r3, #32
 8005014:	d140      	bne.n	8005098 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <HAL_UART_Receive_IT+0x26>
 800501c:	88fb      	ldrh	r3, [r7, #6]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e039      	b.n	800509a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_UART_Receive_IT+0x38>
 8005030:	2302      	movs	r3, #2
 8005032:	e032      	b.n	800509a <HAL_UART_Receive_IT+0x9e>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	88fa      	ldrh	r2, [r7, #6]
 8005046:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2222      	movs	r2, #34	; 0x22
 8005058:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005072:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695a      	ldr	r2, [r3, #20]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0201 	orr.w	r2, r2, #1
 8005082:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0220 	orr.w	r2, r2, #32
 8005092:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005094:	2300      	movs	r3, #0
 8005096:	e000      	b.n	800509a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005098:	2302      	movs	r3, #2
  }
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
	...

080050a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10d      	bne.n	80050fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <HAL_UART_IRQHandler+0x52>
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f98c 	bl	8005410 <UART_Receive_IT>
      return;
 80050f8:	e0d1      	b.n	800529e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 80b0 	beq.w	8005262 <HAL_UART_IRQHandler+0x1ba>
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d105      	bne.n	8005118 <HAL_UART_IRQHandler+0x70>
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 80a5 	beq.w	8005262 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <HAL_UART_IRQHandler+0x90>
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005130:	f043 0201 	orr.w	r2, r3, #1
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f003 0304 	and.w	r3, r3, #4
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <HAL_UART_IRQHandler+0xb0>
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d005      	beq.n	8005158 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005150:	f043 0202 	orr.w	r2, r3, #2
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <HAL_UART_IRQHandler+0xd0>
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005170:	f043 0204 	orr.w	r2, r3, #4
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00f      	beq.n	80051a2 <HAL_UART_IRQHandler+0xfa>
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <HAL_UART_IRQHandler+0xee>
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	f043 0208 	orr.w	r2, r3, #8
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d078      	beq.n	800529c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d007      	beq.n	80051c4 <HAL_UART_IRQHandler+0x11c>
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f926 	bl	8005410 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	bf0c      	ite	eq
 80051d2:	2301      	moveq	r3, #1
 80051d4:	2300      	movne	r3, #0
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d102      	bne.n	80051ec <HAL_UART_IRQHandler+0x144>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d031      	beq.n	8005250 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f86f 	bl	80052d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fc:	2b40      	cmp	r3, #64	; 0x40
 80051fe:	d123      	bne.n	8005248 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695a      	ldr	r2, [r3, #20]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800520e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005214:	2b00      	cmp	r3, #0
 8005216:	d013      	beq.n	8005240 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521c:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <HAL_UART_IRQHandler+0x1fc>)
 800521e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005224:	4618      	mov	r0, r3
 8005226:	f7fc f964 	bl	80014f2 <HAL_DMA_Abort_IT>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d016      	beq.n	800525e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800523a:	4610      	mov	r0, r2
 800523c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523e:	e00e      	b.n	800525e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f83b 	bl	80052bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005246:	e00a      	b.n	800525e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f837 	bl	80052bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800524e:	e006      	b.n	800525e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f833 	bl	80052bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800525c:	e01e      	b.n	800529c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800525e:	bf00      	nop
    return;
 8005260:	e01c      	b.n	800529c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <HAL_UART_IRQHandler+0x1d6>
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f85c 	bl	8005334 <UART_Transmit_IT>
    return;
 800527c:	e00f      	b.n	800529e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <HAL_UART_IRQHandler+0x1f6>
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	d005      	beq.n	800529e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f8a4 	bl	80053e0 <UART_EndTransmit_IT>
    return;
 8005298:	bf00      	nop
 800529a:	e000      	b.n	800529e <HAL_UART_IRQHandler+0x1f6>
    return;
 800529c:	bf00      	nop
  }
}
 800529e:	3720      	adds	r7, #32
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	0800530d 	.word	0x0800530d

080052a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0201 	bic.w	r2, r2, #1
 80052f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005318:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f7ff ffc8 	bl	80052bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b21      	cmp	r3, #33	; 0x21
 8005346:	d144      	bne.n	80053d2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005350:	d11a      	bne.n	8005388 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005366:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d105      	bne.n	800537c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	1c9a      	adds	r2, r3, #2
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	621a      	str	r2, [r3, #32]
 800537a:	e00e      	b.n	800539a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	621a      	str	r2, [r3, #32]
 8005386:	e008      	b.n	800539a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	1c59      	adds	r1, r3, #1
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6211      	str	r1, [r2, #32]
 8005392:	781a      	ldrb	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	4619      	mov	r1, r3
 80053a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10f      	bne.n	80053ce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	e000      	b.n	80053d4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80053d2:	2302      	movs	r3, #2
  }
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7ff ff51 	bl	80052a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b22      	cmp	r3, #34	; 0x22
 8005422:	d171      	bne.n	8005508 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542c:	d123      	bne.n	8005476 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10e      	bne.n	800545a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	b29b      	uxth	r3, r3
 8005444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005448:	b29a      	uxth	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005452:	1c9a      	adds	r2, r3, #2
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	629a      	str	r2, [r3, #40]	; 0x28
 8005458:	e029      	b.n	80054ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	b29b      	uxth	r3, r3
 8005462:	b2db      	uxtb	r3, r3
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	629a      	str	r2, [r3, #40]	; 0x28
 8005474:	e01b      	b.n	80054ae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10a      	bne.n	8005494 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6858      	ldr	r0, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005488:	1c59      	adds	r1, r3, #1
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6291      	str	r1, [r2, #40]	; 0x28
 800548e:	b2c2      	uxtb	r2, r0
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	e00c      	b.n	80054ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	b2da      	uxtb	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	1c58      	adds	r0, r3, #1
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	6288      	str	r0, [r1, #40]	; 0x28
 80054a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	4619      	mov	r1, r3
 80054bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d120      	bne.n	8005504 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0220 	bic.w	r2, r2, #32
 80054d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695a      	ldr	r2, [r3, #20]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0201 	bic.w	r2, r2, #1
 80054f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fb f84e 	bl	800059c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	e002      	b.n	800550a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	e000      	b.n	800550a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005508:	2302      	movs	r3, #2
  }
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
	...

08005514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	4313      	orrs	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005556:	f023 030c 	bic.w	r3, r3, #12
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6812      	ldr	r2, [r2, #0]
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	430b      	orrs	r3, r1
 8005562:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699a      	ldr	r2, [r3, #24]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005582:	f040 818b 	bne.w	800589c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4ac1      	ldr	r2, [pc, #772]	; (8005890 <UART_SetConfig+0x37c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d005      	beq.n	800559c <UART_SetConfig+0x88>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4abf      	ldr	r2, [pc, #764]	; (8005894 <UART_SetConfig+0x380>)
 8005596:	4293      	cmp	r3, r2
 8005598:	f040 80bd 	bne.w	8005716 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800559c:	f7ff f8b2 	bl	8004704 <HAL_RCC_GetPCLK2Freq>
 80055a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	461d      	mov	r5, r3
 80055a6:	f04f 0600 	mov.w	r6, #0
 80055aa:	46a8      	mov	r8, r5
 80055ac:	46b1      	mov	r9, r6
 80055ae:	eb18 0308 	adds.w	r3, r8, r8
 80055b2:	eb49 0409 	adc.w	r4, r9, r9
 80055b6:	4698      	mov	r8, r3
 80055b8:	46a1      	mov	r9, r4
 80055ba:	eb18 0805 	adds.w	r8, r8, r5
 80055be:	eb49 0906 	adc.w	r9, r9, r6
 80055c2:	f04f 0100 	mov.w	r1, #0
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80055ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80055d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80055d6:	4688      	mov	r8, r1
 80055d8:	4691      	mov	r9, r2
 80055da:	eb18 0005 	adds.w	r0, r8, r5
 80055de:	eb49 0106 	adc.w	r1, r9, r6
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	461d      	mov	r5, r3
 80055e8:	f04f 0600 	mov.w	r6, #0
 80055ec:	196b      	adds	r3, r5, r5
 80055ee:	eb46 0406 	adc.w	r4, r6, r6
 80055f2:	461a      	mov	r2, r3
 80055f4:	4623      	mov	r3, r4
 80055f6:	f7fa fe3b 	bl	8000270 <__aeabi_uldivmod>
 80055fa:	4603      	mov	r3, r0
 80055fc:	460c      	mov	r4, r1
 80055fe:	461a      	mov	r2, r3
 8005600:	4ba5      	ldr	r3, [pc, #660]	; (8005898 <UART_SetConfig+0x384>)
 8005602:	fba3 2302 	umull	r2, r3, r3, r2
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	461d      	mov	r5, r3
 8005610:	f04f 0600 	mov.w	r6, #0
 8005614:	46a9      	mov	r9, r5
 8005616:	46b2      	mov	sl, r6
 8005618:	eb19 0309 	adds.w	r3, r9, r9
 800561c:	eb4a 040a 	adc.w	r4, sl, sl
 8005620:	4699      	mov	r9, r3
 8005622:	46a2      	mov	sl, r4
 8005624:	eb19 0905 	adds.w	r9, r9, r5
 8005628:	eb4a 0a06 	adc.w	sl, sl, r6
 800562c:	f04f 0100 	mov.w	r1, #0
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005638:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800563c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005640:	4689      	mov	r9, r1
 8005642:	4692      	mov	sl, r2
 8005644:	eb19 0005 	adds.w	r0, r9, r5
 8005648:	eb4a 0106 	adc.w	r1, sl, r6
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	461d      	mov	r5, r3
 8005652:	f04f 0600 	mov.w	r6, #0
 8005656:	196b      	adds	r3, r5, r5
 8005658:	eb46 0406 	adc.w	r4, r6, r6
 800565c:	461a      	mov	r2, r3
 800565e:	4623      	mov	r3, r4
 8005660:	f7fa fe06 	bl	8000270 <__aeabi_uldivmod>
 8005664:	4603      	mov	r3, r0
 8005666:	460c      	mov	r4, r1
 8005668:	461a      	mov	r2, r3
 800566a:	4b8b      	ldr	r3, [pc, #556]	; (8005898 <UART_SetConfig+0x384>)
 800566c:	fba3 1302 	umull	r1, r3, r3, r2
 8005670:	095b      	lsrs	r3, r3, #5
 8005672:	2164      	movs	r1, #100	; 0x64
 8005674:	fb01 f303 	mul.w	r3, r1, r3
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	3332      	adds	r3, #50	; 0x32
 800567e:	4a86      	ldr	r2, [pc, #536]	; (8005898 <UART_SetConfig+0x384>)
 8005680:	fba2 2303 	umull	r2, r3, r2, r3
 8005684:	095b      	lsrs	r3, r3, #5
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800568c:	4498      	add	r8, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	461d      	mov	r5, r3
 8005692:	f04f 0600 	mov.w	r6, #0
 8005696:	46a9      	mov	r9, r5
 8005698:	46b2      	mov	sl, r6
 800569a:	eb19 0309 	adds.w	r3, r9, r9
 800569e:	eb4a 040a 	adc.w	r4, sl, sl
 80056a2:	4699      	mov	r9, r3
 80056a4:	46a2      	mov	sl, r4
 80056a6:	eb19 0905 	adds.w	r9, r9, r5
 80056aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80056ae:	f04f 0100 	mov.w	r1, #0
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056c2:	4689      	mov	r9, r1
 80056c4:	4692      	mov	sl, r2
 80056c6:	eb19 0005 	adds.w	r0, r9, r5
 80056ca:	eb4a 0106 	adc.w	r1, sl, r6
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	461d      	mov	r5, r3
 80056d4:	f04f 0600 	mov.w	r6, #0
 80056d8:	196b      	adds	r3, r5, r5
 80056da:	eb46 0406 	adc.w	r4, r6, r6
 80056de:	461a      	mov	r2, r3
 80056e0:	4623      	mov	r3, r4
 80056e2:	f7fa fdc5 	bl	8000270 <__aeabi_uldivmod>
 80056e6:	4603      	mov	r3, r0
 80056e8:	460c      	mov	r4, r1
 80056ea:	461a      	mov	r2, r3
 80056ec:	4b6a      	ldr	r3, [pc, #424]	; (8005898 <UART_SetConfig+0x384>)
 80056ee:	fba3 1302 	umull	r1, r3, r3, r2
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	2164      	movs	r1, #100	; 0x64
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	3332      	adds	r3, #50	; 0x32
 8005700:	4a65      	ldr	r2, [pc, #404]	; (8005898 <UART_SetConfig+0x384>)
 8005702:	fba2 2303 	umull	r2, r3, r2, r3
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	f003 0207 	and.w	r2, r3, #7
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4442      	add	r2, r8
 8005712:	609a      	str	r2, [r3, #8]
 8005714:	e26f      	b.n	8005bf6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005716:	f7fe ffe1 	bl	80046dc <HAL_RCC_GetPCLK1Freq>
 800571a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	461d      	mov	r5, r3
 8005720:	f04f 0600 	mov.w	r6, #0
 8005724:	46a8      	mov	r8, r5
 8005726:	46b1      	mov	r9, r6
 8005728:	eb18 0308 	adds.w	r3, r8, r8
 800572c:	eb49 0409 	adc.w	r4, r9, r9
 8005730:	4698      	mov	r8, r3
 8005732:	46a1      	mov	r9, r4
 8005734:	eb18 0805 	adds.w	r8, r8, r5
 8005738:	eb49 0906 	adc.w	r9, r9, r6
 800573c:	f04f 0100 	mov.w	r1, #0
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005748:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800574c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005750:	4688      	mov	r8, r1
 8005752:	4691      	mov	r9, r2
 8005754:	eb18 0005 	adds.w	r0, r8, r5
 8005758:	eb49 0106 	adc.w	r1, r9, r6
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	461d      	mov	r5, r3
 8005762:	f04f 0600 	mov.w	r6, #0
 8005766:	196b      	adds	r3, r5, r5
 8005768:	eb46 0406 	adc.w	r4, r6, r6
 800576c:	461a      	mov	r2, r3
 800576e:	4623      	mov	r3, r4
 8005770:	f7fa fd7e 	bl	8000270 <__aeabi_uldivmod>
 8005774:	4603      	mov	r3, r0
 8005776:	460c      	mov	r4, r1
 8005778:	461a      	mov	r2, r3
 800577a:	4b47      	ldr	r3, [pc, #284]	; (8005898 <UART_SetConfig+0x384>)
 800577c:	fba3 2302 	umull	r2, r3, r3, r2
 8005780:	095b      	lsrs	r3, r3, #5
 8005782:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	461d      	mov	r5, r3
 800578a:	f04f 0600 	mov.w	r6, #0
 800578e:	46a9      	mov	r9, r5
 8005790:	46b2      	mov	sl, r6
 8005792:	eb19 0309 	adds.w	r3, r9, r9
 8005796:	eb4a 040a 	adc.w	r4, sl, sl
 800579a:	4699      	mov	r9, r3
 800579c:	46a2      	mov	sl, r4
 800579e:	eb19 0905 	adds.w	r9, r9, r5
 80057a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80057a6:	f04f 0100 	mov.w	r1, #0
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057ba:	4689      	mov	r9, r1
 80057bc:	4692      	mov	sl, r2
 80057be:	eb19 0005 	adds.w	r0, r9, r5
 80057c2:	eb4a 0106 	adc.w	r1, sl, r6
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	461d      	mov	r5, r3
 80057cc:	f04f 0600 	mov.w	r6, #0
 80057d0:	196b      	adds	r3, r5, r5
 80057d2:	eb46 0406 	adc.w	r4, r6, r6
 80057d6:	461a      	mov	r2, r3
 80057d8:	4623      	mov	r3, r4
 80057da:	f7fa fd49 	bl	8000270 <__aeabi_uldivmod>
 80057de:	4603      	mov	r3, r0
 80057e0:	460c      	mov	r4, r1
 80057e2:	461a      	mov	r2, r3
 80057e4:	4b2c      	ldr	r3, [pc, #176]	; (8005898 <UART_SetConfig+0x384>)
 80057e6:	fba3 1302 	umull	r1, r3, r3, r2
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	2164      	movs	r1, #100	; 0x64
 80057ee:	fb01 f303 	mul.w	r3, r1, r3
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	3332      	adds	r3, #50	; 0x32
 80057f8:	4a27      	ldr	r2, [pc, #156]	; (8005898 <UART_SetConfig+0x384>)
 80057fa:	fba2 2303 	umull	r2, r3, r2, r3
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005806:	4498      	add	r8, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	461d      	mov	r5, r3
 800580c:	f04f 0600 	mov.w	r6, #0
 8005810:	46a9      	mov	r9, r5
 8005812:	46b2      	mov	sl, r6
 8005814:	eb19 0309 	adds.w	r3, r9, r9
 8005818:	eb4a 040a 	adc.w	r4, sl, sl
 800581c:	4699      	mov	r9, r3
 800581e:	46a2      	mov	sl, r4
 8005820:	eb19 0905 	adds.w	r9, r9, r5
 8005824:	eb4a 0a06 	adc.w	sl, sl, r6
 8005828:	f04f 0100 	mov.w	r1, #0
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005834:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005838:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800583c:	4689      	mov	r9, r1
 800583e:	4692      	mov	sl, r2
 8005840:	eb19 0005 	adds.w	r0, r9, r5
 8005844:	eb4a 0106 	adc.w	r1, sl, r6
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	461d      	mov	r5, r3
 800584e:	f04f 0600 	mov.w	r6, #0
 8005852:	196b      	adds	r3, r5, r5
 8005854:	eb46 0406 	adc.w	r4, r6, r6
 8005858:	461a      	mov	r2, r3
 800585a:	4623      	mov	r3, r4
 800585c:	f7fa fd08 	bl	8000270 <__aeabi_uldivmod>
 8005860:	4603      	mov	r3, r0
 8005862:	460c      	mov	r4, r1
 8005864:	461a      	mov	r2, r3
 8005866:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <UART_SetConfig+0x384>)
 8005868:	fba3 1302 	umull	r1, r3, r3, r2
 800586c:	095b      	lsrs	r3, r3, #5
 800586e:	2164      	movs	r1, #100	; 0x64
 8005870:	fb01 f303 	mul.w	r3, r1, r3
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	3332      	adds	r3, #50	; 0x32
 800587a:	4a07      	ldr	r2, [pc, #28]	; (8005898 <UART_SetConfig+0x384>)
 800587c:	fba2 2303 	umull	r2, r3, r2, r3
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	f003 0207 	and.w	r2, r3, #7
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4442      	add	r2, r8
 800588c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800588e:	e1b2      	b.n	8005bf6 <UART_SetConfig+0x6e2>
 8005890:	40011000 	.word	0x40011000
 8005894:	40011400 	.word	0x40011400
 8005898:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4ad7      	ldr	r2, [pc, #860]	; (8005c00 <UART_SetConfig+0x6ec>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d005      	beq.n	80058b2 <UART_SetConfig+0x39e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4ad6      	ldr	r2, [pc, #856]	; (8005c04 <UART_SetConfig+0x6f0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	f040 80d1 	bne.w	8005a54 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80058b2:	f7fe ff27 	bl	8004704 <HAL_RCC_GetPCLK2Freq>
 80058b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	469a      	mov	sl, r3
 80058bc:	f04f 0b00 	mov.w	fp, #0
 80058c0:	46d0      	mov	r8, sl
 80058c2:	46d9      	mov	r9, fp
 80058c4:	eb18 0308 	adds.w	r3, r8, r8
 80058c8:	eb49 0409 	adc.w	r4, r9, r9
 80058cc:	4698      	mov	r8, r3
 80058ce:	46a1      	mov	r9, r4
 80058d0:	eb18 080a 	adds.w	r8, r8, sl
 80058d4:	eb49 090b 	adc.w	r9, r9, fp
 80058d8:	f04f 0100 	mov.w	r1, #0
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058ec:	4688      	mov	r8, r1
 80058ee:	4691      	mov	r9, r2
 80058f0:	eb1a 0508 	adds.w	r5, sl, r8
 80058f4:	eb4b 0609 	adc.w	r6, fp, r9
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4619      	mov	r1, r3
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	f04f 0400 	mov.w	r4, #0
 800590a:	0094      	lsls	r4, r2, #2
 800590c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005910:	008b      	lsls	r3, r1, #2
 8005912:	461a      	mov	r2, r3
 8005914:	4623      	mov	r3, r4
 8005916:	4628      	mov	r0, r5
 8005918:	4631      	mov	r1, r6
 800591a:	f7fa fca9 	bl	8000270 <__aeabi_uldivmod>
 800591e:	4603      	mov	r3, r0
 8005920:	460c      	mov	r4, r1
 8005922:	461a      	mov	r2, r3
 8005924:	4bb8      	ldr	r3, [pc, #736]	; (8005c08 <UART_SetConfig+0x6f4>)
 8005926:	fba3 2302 	umull	r2, r3, r3, r2
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	469b      	mov	fp, r3
 8005934:	f04f 0c00 	mov.w	ip, #0
 8005938:	46d9      	mov	r9, fp
 800593a:	46e2      	mov	sl, ip
 800593c:	eb19 0309 	adds.w	r3, r9, r9
 8005940:	eb4a 040a 	adc.w	r4, sl, sl
 8005944:	4699      	mov	r9, r3
 8005946:	46a2      	mov	sl, r4
 8005948:	eb19 090b 	adds.w	r9, r9, fp
 800594c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005950:	f04f 0100 	mov.w	r1, #0
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800595c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005960:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005964:	4689      	mov	r9, r1
 8005966:	4692      	mov	sl, r2
 8005968:	eb1b 0509 	adds.w	r5, fp, r9
 800596c:	eb4c 060a 	adc.w	r6, ip, sl
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	4619      	mov	r1, r3
 8005976:	f04f 0200 	mov.w	r2, #0
 800597a:	f04f 0300 	mov.w	r3, #0
 800597e:	f04f 0400 	mov.w	r4, #0
 8005982:	0094      	lsls	r4, r2, #2
 8005984:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005988:	008b      	lsls	r3, r1, #2
 800598a:	461a      	mov	r2, r3
 800598c:	4623      	mov	r3, r4
 800598e:	4628      	mov	r0, r5
 8005990:	4631      	mov	r1, r6
 8005992:	f7fa fc6d 	bl	8000270 <__aeabi_uldivmod>
 8005996:	4603      	mov	r3, r0
 8005998:	460c      	mov	r4, r1
 800599a:	461a      	mov	r2, r3
 800599c:	4b9a      	ldr	r3, [pc, #616]	; (8005c08 <UART_SetConfig+0x6f4>)
 800599e:	fba3 1302 	umull	r1, r3, r3, r2
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	2164      	movs	r1, #100	; 0x64
 80059a6:	fb01 f303 	mul.w	r3, r1, r3
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	3332      	adds	r3, #50	; 0x32
 80059b0:	4a95      	ldr	r2, [pc, #596]	; (8005c08 <UART_SetConfig+0x6f4>)
 80059b2:	fba2 2303 	umull	r2, r3, r2, r3
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059bc:	4498      	add	r8, r3
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	469b      	mov	fp, r3
 80059c2:	f04f 0c00 	mov.w	ip, #0
 80059c6:	46d9      	mov	r9, fp
 80059c8:	46e2      	mov	sl, ip
 80059ca:	eb19 0309 	adds.w	r3, r9, r9
 80059ce:	eb4a 040a 	adc.w	r4, sl, sl
 80059d2:	4699      	mov	r9, r3
 80059d4:	46a2      	mov	sl, r4
 80059d6:	eb19 090b 	adds.w	r9, r9, fp
 80059da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059de:	f04f 0100 	mov.w	r1, #0
 80059e2:	f04f 0200 	mov.w	r2, #0
 80059e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059f2:	4689      	mov	r9, r1
 80059f4:	4692      	mov	sl, r2
 80059f6:	eb1b 0509 	adds.w	r5, fp, r9
 80059fa:	eb4c 060a 	adc.w	r6, ip, sl
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	4619      	mov	r1, r3
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	f04f 0400 	mov.w	r4, #0
 8005a10:	0094      	lsls	r4, r2, #2
 8005a12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a16:	008b      	lsls	r3, r1, #2
 8005a18:	461a      	mov	r2, r3
 8005a1a:	4623      	mov	r3, r4
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	4631      	mov	r1, r6
 8005a20:	f7fa fc26 	bl	8000270 <__aeabi_uldivmod>
 8005a24:	4603      	mov	r3, r0
 8005a26:	460c      	mov	r4, r1
 8005a28:	461a      	mov	r2, r3
 8005a2a:	4b77      	ldr	r3, [pc, #476]	; (8005c08 <UART_SetConfig+0x6f4>)
 8005a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	2164      	movs	r1, #100	; 0x64
 8005a34:	fb01 f303 	mul.w	r3, r1, r3
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	3332      	adds	r3, #50	; 0x32
 8005a3e:	4a72      	ldr	r2, [pc, #456]	; (8005c08 <UART_SetConfig+0x6f4>)
 8005a40:	fba2 2303 	umull	r2, r3, r2, r3
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	f003 020f 	and.w	r2, r3, #15
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4442      	add	r2, r8
 8005a50:	609a      	str	r2, [r3, #8]
 8005a52:	e0d0      	b.n	8005bf6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a54:	f7fe fe42 	bl	80046dc <HAL_RCC_GetPCLK1Freq>
 8005a58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	469a      	mov	sl, r3
 8005a5e:	f04f 0b00 	mov.w	fp, #0
 8005a62:	46d0      	mov	r8, sl
 8005a64:	46d9      	mov	r9, fp
 8005a66:	eb18 0308 	adds.w	r3, r8, r8
 8005a6a:	eb49 0409 	adc.w	r4, r9, r9
 8005a6e:	4698      	mov	r8, r3
 8005a70:	46a1      	mov	r9, r4
 8005a72:	eb18 080a 	adds.w	r8, r8, sl
 8005a76:	eb49 090b 	adc.w	r9, r9, fp
 8005a7a:	f04f 0100 	mov.w	r1, #0
 8005a7e:	f04f 0200 	mov.w	r2, #0
 8005a82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a8e:	4688      	mov	r8, r1
 8005a90:	4691      	mov	r9, r2
 8005a92:	eb1a 0508 	adds.w	r5, sl, r8
 8005a96:	eb4b 0609 	adc.w	r6, fp, r9
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	f04f 0400 	mov.w	r4, #0
 8005aac:	0094      	lsls	r4, r2, #2
 8005aae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ab2:	008b      	lsls	r3, r1, #2
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	4628      	mov	r0, r5
 8005aba:	4631      	mov	r1, r6
 8005abc:	f7fa fbd8 	bl	8000270 <__aeabi_uldivmod>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4b50      	ldr	r3, [pc, #320]	; (8005c08 <UART_SetConfig+0x6f4>)
 8005ac8:	fba3 2302 	umull	r2, r3, r3, r2
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	469b      	mov	fp, r3
 8005ad6:	f04f 0c00 	mov.w	ip, #0
 8005ada:	46d9      	mov	r9, fp
 8005adc:	46e2      	mov	sl, ip
 8005ade:	eb19 0309 	adds.w	r3, r9, r9
 8005ae2:	eb4a 040a 	adc.w	r4, sl, sl
 8005ae6:	4699      	mov	r9, r3
 8005ae8:	46a2      	mov	sl, r4
 8005aea:	eb19 090b 	adds.w	r9, r9, fp
 8005aee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005af2:	f04f 0100 	mov.w	r1, #0
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005afe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b06:	4689      	mov	r9, r1
 8005b08:	4692      	mov	sl, r2
 8005b0a:	eb1b 0509 	adds.w	r5, fp, r9
 8005b0e:	eb4c 060a 	adc.w	r6, ip, sl
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	4619      	mov	r1, r3
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	f04f 0300 	mov.w	r3, #0
 8005b20:	f04f 0400 	mov.w	r4, #0
 8005b24:	0094      	lsls	r4, r2, #2
 8005b26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b2a:	008b      	lsls	r3, r1, #2
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4623      	mov	r3, r4
 8005b30:	4628      	mov	r0, r5
 8005b32:	4631      	mov	r1, r6
 8005b34:	f7fa fb9c 	bl	8000270 <__aeabi_uldivmod>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4b32      	ldr	r3, [pc, #200]	; (8005c08 <UART_SetConfig+0x6f4>)
 8005b40:	fba3 1302 	umull	r1, r3, r3, r2
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	2164      	movs	r1, #100	; 0x64
 8005b48:	fb01 f303 	mul.w	r3, r1, r3
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	3332      	adds	r3, #50	; 0x32
 8005b52:	4a2d      	ldr	r2, [pc, #180]	; (8005c08 <UART_SetConfig+0x6f4>)
 8005b54:	fba2 2303 	umull	r2, r3, r2, r3
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b5e:	4498      	add	r8, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	469b      	mov	fp, r3
 8005b64:	f04f 0c00 	mov.w	ip, #0
 8005b68:	46d9      	mov	r9, fp
 8005b6a:	46e2      	mov	sl, ip
 8005b6c:	eb19 0309 	adds.w	r3, r9, r9
 8005b70:	eb4a 040a 	adc.w	r4, sl, sl
 8005b74:	4699      	mov	r9, r3
 8005b76:	46a2      	mov	sl, r4
 8005b78:	eb19 090b 	adds.w	r9, r9, fp
 8005b7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b80:	f04f 0100 	mov.w	r1, #0
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b94:	4689      	mov	r9, r1
 8005b96:	4692      	mov	sl, r2
 8005b98:	eb1b 0509 	adds.w	r5, fp, r9
 8005b9c:	eb4c 060a 	adc.w	r6, ip, sl
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	f04f 0400 	mov.w	r4, #0
 8005bb2:	0094      	lsls	r4, r2, #2
 8005bb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bb8:	008b      	lsls	r3, r1, #2
 8005bba:	461a      	mov	r2, r3
 8005bbc:	4623      	mov	r3, r4
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	4631      	mov	r1, r6
 8005bc2:	f7fa fb55 	bl	8000270 <__aeabi_uldivmod>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	460c      	mov	r4, r1
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <UART_SetConfig+0x6f4>)
 8005bce:	fba3 1302 	umull	r1, r3, r3, r2
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	2164      	movs	r1, #100	; 0x64
 8005bd6:	fb01 f303 	mul.w	r3, r1, r3
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	3332      	adds	r3, #50	; 0x32
 8005be0:	4a09      	ldr	r2, [pc, #36]	; (8005c08 <UART_SetConfig+0x6f4>)
 8005be2:	fba2 2303 	umull	r2, r3, r2, r3
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	f003 020f 	and.w	r2, r3, #15
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4442      	add	r2, r8
 8005bf2:	609a      	str	r2, [r3, #8]
}
 8005bf4:	e7ff      	b.n	8005bf6 <UART_SetConfig+0x6e2>
 8005bf6:	bf00      	nop
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c00:	40011000 	.word	0x40011000
 8005c04:	40011400 	.word	0x40011400
 8005c08:	51eb851f 	.word	0x51eb851f

08005c0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	f107 001c 	add.w	r0, r7, #28
 8005c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d122      	bne.n	8005c6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d105      	bne.n	8005c5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f94a 	bl	8005ef8 <USB_CoreReset>
 8005c64:	4603      	mov	r3, r0
 8005c66:	73fb      	strb	r3, [r7, #15]
 8005c68:	e01a      	b.n	8005ca0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f93e 	bl	8005ef8 <USB_CoreReset>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	639a      	str	r2, [r3, #56]	; 0x38
 8005c92:	e005      	b.n	8005ca0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d10b      	bne.n	8005cbe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f043 0206 	orr.w	r2, r3, #6
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f043 0220 	orr.w	r2, r3, #32
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cca:	b004      	add	sp, #16
 8005ccc:	4770      	bx	lr

08005cce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f043 0201 	orr.w	r2, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f023 0201 	bic.w	r2, r3, #1
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d106      	bne.n	8005d3e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	60da      	str	r2, [r3, #12]
 8005d3c:	e00b      	b.n	8005d56 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	60da      	str	r2, [r3, #12]
 8005d50:	e001      	b.n	8005d56 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e003      	b.n	8005d5e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005d56:	2032      	movs	r0, #50	; 0x32
 8005d58:	f7fb fa98 	bl	800128c <HAL_Delay>

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
	...

08005d68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	019b      	lsls	r3, r3, #6
 8005d7a:	f043 0220 	orr.w	r2, r3, #32
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3301      	adds	r3, #1
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4a09      	ldr	r2, [pc, #36]	; (8005db0 <USB_FlushTxFifo+0x48>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d901      	bls.n	8005d94 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e006      	b.n	8005da2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f003 0320 	and.w	r3, r3, #32
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	d0f0      	beq.n	8005d82 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	00030d40 	.word	0x00030d40

08005db4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2210      	movs	r2, #16
 8005dc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4a09      	ldr	r2, [pc, #36]	; (8005df4 <USB_FlushRxFifo+0x40>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d901      	bls.n	8005dd8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e006      	b.n	8005de6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	2b10      	cmp	r3, #16
 8005de2:	d0f0      	beq.n	8005dc6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	00030d40 	.word	0x00030d40

08005df8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b089      	sub	sp, #36	; 0x24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	4611      	mov	r1, r2
 8005e04:	461a      	mov	r2, r3
 8005e06:	460b      	mov	r3, r1
 8005e08:	71fb      	strb	r3, [r7, #7]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005e16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d11a      	bne.n	8005e54 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e1e:	88bb      	ldrh	r3, [r7, #4]
 8005e20:	3303      	adds	r3, #3
 8005e22:	089b      	lsrs	r3, r3, #2
 8005e24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e26:	2300      	movs	r3, #0
 8005e28:	61bb      	str	r3, [r7, #24]
 8005e2a:	e00f      	b.n	8005e4c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e2c:	79fb      	ldrb	r3, [r7, #7]
 8005e2e:	031a      	lsls	r2, r3, #12
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e38:	461a      	mov	r2, r3
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	3304      	adds	r3, #4
 8005e44:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	61bb      	str	r3, [r7, #24]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d3eb      	bcc.n	8005e2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3724      	adds	r7, #36	; 0x24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b089      	sub	sp, #36	; 0x24
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005e78:	88fb      	ldrh	r3, [r7, #6]
 8005e7a:	3303      	adds	r3, #3
 8005e7c:	089b      	lsrs	r3, r3, #2
 8005e7e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005e80:	2300      	movs	r3, #0
 8005e82:	61bb      	str	r3, [r7, #24]
 8005e84:	e00b      	b.n	8005e9e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	3304      	adds	r3, #4
 8005e96:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d3ef      	bcc.n	8005e86 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005ea6:	69fb      	ldr	r3, [r7, #28]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3724      	adds	r7, #36	; 0x24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
	...

08005ef8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3301      	adds	r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4a13      	ldr	r2, [pc, #76]	; (8005f5c <USB_CoreReset+0x64>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d901      	bls.n	8005f16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e01b      	b.n	8005f4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	daf2      	bge.n	8005f04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f043 0201 	orr.w	r2, r3, #1
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3301      	adds	r3, #1
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4a09      	ldr	r2, [pc, #36]	; (8005f5c <USB_CoreReset+0x64>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d901      	bls.n	8005f40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e006      	b.n	8005f4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d0f0      	beq.n	8005f2e <USB_CoreReset+0x36>

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	00030d40 	.word	0x00030d40

08005f60 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f60:	b084      	sub	sp, #16
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	f107 001c 	add.w	r0, r7, #28
 8005f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	2300      	movs	r3, #0
 8005f80:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d018      	beq.n	8005fe4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d10a      	bne.n	8005fce <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fc6:	f043 0304 	orr.w	r3, r3, #4
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	e014      	b.n	8005ff8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fdc:	f023 0304 	bic.w	r3, r3, #4
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e009      	b.n	8005ff8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ff2:	f023 0304 	bic.w	r3, r3, #4
 8005ff6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005ff8:	2110      	movs	r1, #16
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff feb4 	bl	8005d68 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff fed7 	bl	8005db4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	e015      	b.n	8006038 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4413      	add	r3, r2
 8006014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006018:	461a      	mov	r2, r3
 800601a:	f04f 33ff 	mov.w	r3, #4294967295
 800601e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	4413      	add	r3, r2
 8006028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602c:	461a      	mov	r2, r3
 800602e:	2300      	movs	r3, #0
 8006030:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	3301      	adds	r3, #1
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	429a      	cmp	r2, r3
 800603e:	d3e5      	bcc.n	800600c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006040:	2101      	movs	r1, #1
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f8ac 	bl	80061a0 <USB_DriveVbus>

  HAL_Delay(200U);
 8006048:	20c8      	movs	r0, #200	; 0xc8
 800604a:	f7fb f91f 	bl	800128c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f04f 32ff 	mov.w	r2, #4294967295
 800605a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00b      	beq.n	8006080 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800606e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a14      	ldr	r2, [pc, #80]	; (80060c4 <USB_HostInit+0x164>)
 8006074:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a13      	ldr	r2, [pc, #76]	; (80060c8 <USB_HostInit+0x168>)
 800607a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800607e:	e009      	b.n	8006094 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2280      	movs	r2, #128	; 0x80
 8006084:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a10      	ldr	r2, [pc, #64]	; (80060cc <USB_HostInit+0x16c>)
 800608a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a10      	ldr	r2, [pc, #64]	; (80060d0 <USB_HostInit+0x170>)
 8006090:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	2b00      	cmp	r3, #0
 8006098:	d105      	bne.n	80060a6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	f043 0210 	orr.w	r2, r3, #16
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699a      	ldr	r2, [r3, #24]
 80060aa:	4b0a      	ldr	r3, [pc, #40]	; (80060d4 <USB_HostInit+0x174>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060be:	b004      	add	sp, #16
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	01000200 	.word	0x01000200
 80060c8:	00e00300 	.word	0x00e00300
 80060cc:	00600080 	.word	0x00600080
 80060d0:	004000e0 	.word	0x004000e0
 80060d4:	a3200008 	.word	0xa3200008

080060d8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060f6:	f023 0303 	bic.w	r3, r3, #3
 80060fa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	78fb      	ldrb	r3, [r7, #3]
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	68f9      	ldr	r1, [r7, #12]
 800610c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006110:	4313      	orrs	r3, r2
 8006112:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d107      	bne.n	800612a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006120:	461a      	mov	r2, r3
 8006122:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006126:	6053      	str	r3, [r2, #4]
 8006128:	e009      	b.n	800613e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800612a:	78fb      	ldrb	r3, [r7, #3]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d106      	bne.n	800613e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006136:	461a      	mov	r2, r3
 8006138:	f241 7370 	movw	r3, #6000	; 0x1770
 800613c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800616c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800617a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800617c:	2064      	movs	r0, #100	; 0x64
 800617e:	f7fb f885 	bl	800128c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800618a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800618e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006190:	200a      	movs	r0, #10
 8006192:	f7fb f87b 	bl	800128c <HAL_Delay>

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80061c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d109      	bne.n	80061e4 <USB_DriveVbus+0x44>
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d106      	bne.n	80061e4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061e2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ee:	d109      	bne.n	8006204 <USB_DriveVbus+0x64>
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d106      	bne.n	8006204 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006202:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006212:	b480      	push	{r7}
 8006214:	b085      	sub	sp, #20
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	0c5b      	lsrs	r3, r3, #17
 8006230:	f003 0303 	and.w	r3, r3, #3
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	b29b      	uxth	r3, r3
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
	...

08006264 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	4608      	mov	r0, r1
 800626e:	4611      	mov	r1, r2
 8006270:	461a      	mov	r2, r3
 8006272:	4603      	mov	r3, r0
 8006274:	70fb      	strb	r3, [r7, #3]
 8006276:	460b      	mov	r3, r1
 8006278:	70bb      	strb	r3, [r7, #2]
 800627a:	4613      	mov	r3, r2
 800627c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	4413      	add	r3, r2
 800628e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006292:	461a      	mov	r2, r3
 8006294:	f04f 33ff 	mov.w	r3, #4294967295
 8006298:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800629a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d87e      	bhi.n	80063a0 <USB_HC_Init+0x13c>
 80062a2:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <USB_HC_Init+0x44>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062b9 	.word	0x080062b9
 80062ac:	08006363 	.word	0x08006363
 80062b0:	080062b9 	.word	0x080062b9
 80062b4:	08006325 	.word	0x08006325
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c4:	461a      	mov	r2, r3
 80062c6:	f240 439d 	movw	r3, #1181	; 0x49d
 80062ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80062cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	da10      	bge.n	80062f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	78fa      	ldrb	r2, [r7, #3]
 80062e4:	0151      	lsls	r1, r2, #5
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	440a      	add	r2, r1
 80062ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80062f4:	e057      	b.n	80063a6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d051      	beq.n	80063a6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006302:	78fb      	ldrb	r3, [r7, #3]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4413      	add	r3, r2
 800630a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	78fa      	ldrb	r2, [r7, #3]
 8006312:	0151      	lsls	r1, r2, #5
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	440a      	add	r2, r1
 8006318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800631c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006320:	60d3      	str	r3, [r2, #12]
      break;
 8006322:	e040      	b.n	80063a6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4413      	add	r3, r2
 800632c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006330:	461a      	mov	r2, r3
 8006332:	f240 639d 	movw	r3, #1693	; 0x69d
 8006336:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006338:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800633c:	2b00      	cmp	r3, #0
 800633e:	da34      	bge.n	80063aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4413      	add	r3, r2
 8006348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	78fa      	ldrb	r2, [r7, #3]
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	440a      	add	r2, r1
 8006356:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800635a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800635e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006360:	e023      	b.n	80063aa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006362:	78fb      	ldrb	r3, [r7, #3]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	4413      	add	r3, r2
 800636a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636e:	461a      	mov	r2, r3
 8006370:	f240 2325 	movw	r3, #549	; 0x225
 8006374:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006376:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800637a:	2b00      	cmp	r3, #0
 800637c:	da17      	bge.n	80063ae <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	4413      	add	r3, r2
 8006386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	78fa      	ldrb	r2, [r7, #3]
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	440a      	add	r2, r1
 8006394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006398:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800639c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800639e:	e006      	b.n	80063ae <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	75fb      	strb	r3, [r7, #23]
      break;
 80063a4:	e004      	b.n	80063b0 <USB_HC_Init+0x14c>
      break;
 80063a6:	bf00      	nop
 80063a8:	e002      	b.n	80063b0 <USB_HC_Init+0x14c>
      break;
 80063aa:	bf00      	nop
 80063ac:	e000      	b.n	80063b0 <USB_HC_Init+0x14c>
      break;
 80063ae:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063b6:	699a      	ldr	r2, [r3, #24]
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	2101      	movs	r1, #1
 80063c0:	fa01 f303 	lsl.w	r3, r1, r3
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063ca:	4313      	orrs	r3, r2
 80063cc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80063da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	da03      	bge.n	80063ea <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80063e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063e6:	613b      	str	r3, [r7, #16]
 80063e8:	e001      	b.n	80063ee <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80063ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d103      	bne.n	80063fe <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80063f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	e001      	b.n	8006402 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006402:	787b      	ldrb	r3, [r7, #1]
 8006404:	059b      	lsls	r3, r3, #22
 8006406:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800640a:	78bb      	ldrb	r3, [r7, #2]
 800640c:	02db      	lsls	r3, r3, #11
 800640e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006412:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006414:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006418:	049b      	lsls	r3, r3, #18
 800641a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800641e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006420:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006422:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006426:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800642c:	78fb      	ldrb	r3, [r7, #3]
 800642e:	0159      	lsls	r1, r3, #5
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	440b      	add	r3, r1
 8006434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006438:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800643e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006440:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006444:	2b03      	cmp	r3, #3
 8006446:	d10f      	bne.n	8006468 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006448:	78fb      	ldrb	r3, [r7, #3]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4413      	add	r3, r2
 8006450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	78fa      	ldrb	r2, [r7, #3]
 8006458:	0151      	lsls	r1, r2, #5
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	440a      	add	r2, r1
 800645e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006462:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006466:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006468:	7dfb      	ldrb	r3, [r7, #23]
}
 800646a:	4618      	mov	r0, r3
 800646c:	371c      	adds	r7, #28
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop

08006478 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08c      	sub	sp, #48	; 0x30
 800647c:	af02      	add	r7, sp, #8
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	785b      	ldrb	r3, [r3, #1]
 800648e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006494:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d028      	beq.n	80064f4 <USB_HC_StartXfer+0x7c>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	791b      	ldrb	r3, [r3, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d124      	bne.n	80064f4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80064aa:	79fb      	ldrb	r3, [r7, #7]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10b      	bne.n	80064c8 <USB_HC_StartXfer+0x50>
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	795b      	ldrb	r3, [r3, #5]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d107      	bne.n	80064c8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	785b      	ldrb	r3, [r3, #1]
 80064bc:	4619      	mov	r1, r3
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 fa30 	bl	8006924 <USB_DoPing>
      return HAL_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	e114      	b.n	80066f2 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 80064c8:	79fb      	ldrb	r3, [r7, #7]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d112      	bne.n	80064f4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	6a3a      	ldr	r2, [r7, #32]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80064ec:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2200      	movs	r2, #0
 80064f2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d018      	beq.n	800652e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	8912      	ldrh	r2, [r2, #8]
 8006504:	4413      	add	r3, r2
 8006506:	3b01      	subs	r3, #1
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	8912      	ldrh	r2, [r2, #8]
 800650c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006510:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006512:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006514:	8b7b      	ldrh	r3, [r7, #26]
 8006516:	429a      	cmp	r2, r3
 8006518:	d90b      	bls.n	8006532 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800651a:	8b7b      	ldrh	r3, [r7, #26]
 800651c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800651e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	8912      	ldrh	r2, [r2, #8]
 8006524:	fb02 f203 	mul.w	r2, r2, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	611a      	str	r2, [r3, #16]
 800652c:	e001      	b.n	8006532 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800652e:	2301      	movs	r3, #1
 8006530:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	78db      	ldrb	r3, [r3, #3]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d006      	beq.n	8006548 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800653a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	8912      	ldrh	r2, [r2, #8]
 8006540:	fb02 f203 	mul.w	r2, r2, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006550:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006552:	04d9      	lsls	r1, r3, #19
 8006554:	4b69      	ldr	r3, [pc, #420]	; (80066fc <USB_HC_StartXfer+0x284>)
 8006556:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006558:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	7a9b      	ldrb	r3, [r3, #10]
 800655e:	075b      	lsls	r3, r3, #29
 8006560:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006564:	69f9      	ldr	r1, [r7, #28]
 8006566:	0148      	lsls	r0, r1, #5
 8006568:	6a39      	ldr	r1, [r7, #32]
 800656a:	4401      	add	r1, r0
 800656c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006570:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006572:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d009      	beq.n	800658e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	68d9      	ldr	r1, [r3, #12]
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	4413      	add	r3, r2
 8006586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658a:	460a      	mov	r2, r1
 800658c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	bf0c      	ite	eq
 800659e:	2301      	moveq	r3, #1
 80065a0:	2300      	movne	r3, #0
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	69fa      	ldr	r2, [r7, #28]
 80065b6:	0151      	lsls	r1, r2, #5
 80065b8:	6a3a      	ldr	r2, [r7, #32]
 80065ba:	440a      	add	r2, r1
 80065bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	7e7b      	ldrb	r3, [r7, #25]
 80065d6:	075b      	lsls	r3, r3, #29
 80065d8:	69f9      	ldr	r1, [r7, #28]
 80065da:	0148      	lsls	r0, r1, #5
 80065dc:	6a39      	ldr	r1, [r7, #32]
 80065de:	4401      	add	r1, r0
 80065e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80065e4:	4313      	orrs	r3, r2
 80065e6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a42      	ldr	r2, [pc, #264]	; (8006700 <USB_HC_StartXfer+0x288>)
 80065f8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065fa:	4b41      	ldr	r3, [pc, #260]	; (8006700 <USB_HC_StartXfer+0x288>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006602:	4a3f      	ldr	r2, [pc, #252]	; (8006700 <USB_HC_StartXfer+0x288>)
 8006604:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	78db      	ldrb	r3, [r3, #3]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d006      	beq.n	800661c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800660e:	4b3c      	ldr	r3, [pc, #240]	; (8006700 <USB_HC_StartXfer+0x288>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006616:	4a3a      	ldr	r2, [pc, #232]	; (8006700 <USB_HC_StartXfer+0x288>)
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	e005      	b.n	8006628 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800661c:	4b38      	ldr	r3, [pc, #224]	; (8006700 <USB_HC_StartXfer+0x288>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006624:	4a36      	ldr	r2, [pc, #216]	; (8006700 <USB_HC_StartXfer+0x288>)
 8006626:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006628:	4b35      	ldr	r3, [pc, #212]	; (8006700 <USB_HC_StartXfer+0x288>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006630:	4a33      	ldr	r2, [pc, #204]	; (8006700 <USB_HC_StartXfer+0x288>)
 8006632:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	4413      	add	r3, r2
 800663c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006640:	461a      	mov	r2, r3
 8006642:	4b2f      	ldr	r3, [pc, #188]	; (8006700 <USB_HC_StartXfer+0x288>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	e04f      	b.n	80066f2 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	78db      	ldrb	r3, [r3, #3]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d14a      	bne.n	80066f0 <USB_HC_StartXfer+0x278>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d046      	beq.n	80066f0 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	79db      	ldrb	r3, [r3, #7]
 8006666:	2b03      	cmp	r3, #3
 8006668:	d830      	bhi.n	80066cc <USB_HC_StartXfer+0x254>
 800666a:	a201      	add	r2, pc, #4	; (adr r2, 8006670 <USB_HC_StartXfer+0x1f8>)
 800666c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006670:	08006681 	.word	0x08006681
 8006674:	080066a5 	.word	0x080066a5
 8006678:	08006681 	.word	0x08006681
 800667c:	080066a5 	.word	0x080066a5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	3303      	adds	r3, #3
 8006686:	089b      	lsrs	r3, r3, #2
 8006688:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800668a:	8afa      	ldrh	r2, [r7, #22]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	b29b      	uxth	r3, r3
 8006692:	429a      	cmp	r2, r3
 8006694:	d91c      	bls.n	80066d0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	f043 0220 	orr.w	r2, r3, #32
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80066a2:	e015      	b.n	80066d0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	3303      	adds	r3, #3
 80066aa:	089b      	lsrs	r3, r3, #2
 80066ac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80066ae:	8afa      	ldrh	r2, [r7, #22]
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d90a      	bls.n	80066d4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80066ca:	e003      	b.n	80066d4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80066cc:	bf00      	nop
 80066ce:	e002      	b.n	80066d6 <USB_HC_StartXfer+0x25e>
        break;
 80066d0:	bf00      	nop
 80066d2:	e000      	b.n	80066d6 <USB_HC_StartXfer+0x25e>
        break;
 80066d4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	68d9      	ldr	r1, [r3, #12]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	785a      	ldrb	r2, [r3, #1]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	b298      	uxth	r0, r3
 80066e4:	2300      	movs	r3, #0
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	4603      	mov	r3, r0
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7ff fb84 	bl	8005df8 <USB_WritePacket>
  }

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3728      	adds	r7, #40	; 0x28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	1ff80000 	.word	0x1ff80000
 8006700:	200000b8 	.word	0x200000b8

08006704 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	b29b      	uxth	r3, r3
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006726:	b480      	push	{r7}
 8006728:	b087      	sub	sp, #28
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	460b      	mov	r3, r1
 8006730:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006736:	78fb      	ldrb	r3, [r7, #3]
 8006738:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	4413      	add	r3, r2
 8006746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	0c9b      	lsrs	r3, r3, #18
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <USB_HC_Halt+0x3a>
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d16c      	bne.n	800683a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4413      	add	r3, r2
 8006768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	0151      	lsls	r1, r2, #5
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	440a      	add	r2, r1
 8006776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800677a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800677e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d143      	bne.n	8006814 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	4413      	add	r3, r2
 8006794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	0151      	lsls	r1, r2, #5
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	440a      	add	r2, r1
 80067a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	0151      	lsls	r1, r2, #5
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	440a      	add	r2, r1
 80067c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	0151      	lsls	r1, r2, #5
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	440a      	add	r2, r1
 80067e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067ea:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	3301      	adds	r3, #1
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067f8:	d81d      	bhi.n	8006836 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	4413      	add	r3, r2
 8006802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800680c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006810:	d0ec      	beq.n	80067ec <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006812:	e080      	b.n	8006916 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	4413      	add	r3, r2
 800681c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	0151      	lsls	r1, r2, #5
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	440a      	add	r2, r1
 800682a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800682e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006832:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006834:	e06f      	b.n	8006916 <USB_HC_Halt+0x1f0>
          break;
 8006836:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006838:	e06d      	b.n	8006916 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	4413      	add	r3, r2
 8006842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	0151      	lsls	r1, r2, #5
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	440a      	add	r2, r1
 8006850:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006854:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006858:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d143      	bne.n	80068f2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	4413      	add	r3, r2
 8006872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	0151      	lsls	r1, r2, #5
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	440a      	add	r2, r1
 8006880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006888:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	4413      	add	r3, r2
 8006892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	0151      	lsls	r1, r2, #5
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	440a      	add	r2, r1
 80068a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068a8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	0151      	lsls	r1, r2, #5
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	440a      	add	r2, r1
 80068c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068c8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	3301      	adds	r3, #1
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068d6:	d81d      	bhi.n	8006914 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068ee:	d0ec      	beq.n	80068ca <USB_HC_Halt+0x1a4>
 80068f0:	e011      	b.n	8006916 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	440a      	add	r2, r1
 8006908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800690c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	e000      	b.n	8006916 <USB_HC_Halt+0x1f0>
          break;
 8006914:	bf00      	nop
    }
  }

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	371c      	adds	r7, #28
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006938:	2301      	movs	r3, #1
 800693a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	04da      	lsls	r2, r3, #19
 8006940:	4b15      	ldr	r3, [pc, #84]	; (8006998 <USB_DoPing+0x74>)
 8006942:	4013      	ands	r3, r2
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	0151      	lsls	r1, r2, #5
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	440a      	add	r2, r1
 800694c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006950:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006954:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	4413      	add	r3, r2
 800695e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800696c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006974:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	4413      	add	r3, r2
 800697e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006982:	461a      	mov	r2, r3
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	1ff80000 	.word	0x1ff80000

0800699c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff f99f 	bl	8005cf0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80069b2:	2110      	movs	r1, #16
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff f9d7 	bl	8005d68 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff f9fa 	bl	8005db4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80069c0:	2300      	movs	r3, #0
 80069c2:	613b      	str	r3, [r7, #16]
 80069c4:	e01f      	b.n	8006a06 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069fa:	461a      	mov	r2, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	3301      	adds	r3, #1
 8006a04:	613b      	str	r3, [r7, #16]
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	2b0f      	cmp	r3, #15
 8006a0a:	d9dc      	bls.n	80069c6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	613b      	str	r3, [r7, #16]
 8006a10:	e034      	b.n	8006a7c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a28:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a30:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a38:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a46:	461a      	mov	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a58:	d80c      	bhi.n	8006a74 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a70:	d0ec      	beq.n	8006a4c <USB_StopHost+0xb0>
 8006a72:	e000      	b.n	8006a76 <USB_StopHost+0xda>
        break;
 8006a74:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	613b      	str	r3, [r7, #16]
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	2b0f      	cmp	r3, #15
 8006a80:	d9c7      	bls.n	8006a12 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f04f 32ff 	mov.w	r2, #4294967295
 8006a96:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff f918 	bl	8005cce <USB_EnableGlobalInt>

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006aa8:	b590      	push	{r4, r7, lr}
 8006aaa:	b089      	sub	sp, #36	; 0x24
 8006aac:	af04      	add	r7, sp, #16
 8006aae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	2102      	movs	r1, #2
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fc68 	bl	800738c <USBH_FindInterface>
 8006abc:	4603      	mov	r3, r0
 8006abe:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	2bff      	cmp	r3, #255	; 0xff
 8006ac4:	d002      	beq.n	8006acc <USBH_CDC_InterfaceInit+0x24>
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d901      	bls.n	8006ad0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006acc:	2302      	movs	r3, #2
 8006ace:	e13d      	b.n	8006d4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fc3d 	bl	8007354 <USBH_SelectInterface>
 8006ada:	4603      	mov	r3, r0
 8006adc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006ade:	7bbb      	ldrb	r3, [r7, #14]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	e131      	b.n	8006d4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006aee:	2050      	movs	r0, #80	; 0x50
 8006af0:	f002 fa04 	bl	8008efc <malloc>
 8006af4:	4603      	mov	r3, r0
 8006af6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e11f      	b.n	8006d4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006b0c:	2250      	movs	r2, #80	; 0x50
 8006b0e:	2100      	movs	r1, #0
 8006b10:	68b8      	ldr	r0, [r7, #8]
 8006b12:	f002 fa03 	bl	8008f1c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	211a      	movs	r1, #26
 8006b1c:	fb01 f303 	mul.w	r3, r1, r3
 8006b20:	4413      	add	r3, r2
 8006b22:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	b25b      	sxtb	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	da15      	bge.n	8006b5a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	211a      	movs	r1, #26
 8006b34:	fb01 f303 	mul.w	r3, r1, r3
 8006b38:	4413      	add	r3, r2
 8006b3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b3e:	781a      	ldrb	r2, [r3, #0]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	211a      	movs	r1, #26
 8006b4a:	fb01 f303 	mul.w	r3, r1, r3
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b54:	881a      	ldrh	r2, [r3, #0]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	785b      	ldrb	r3, [r3, #1]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 fe36 	bl	80087d2 <USBH_AllocPipe>
 8006b66:	4603      	mov	r3, r0
 8006b68:	461a      	mov	r2, r3
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	7819      	ldrb	r1, [r3, #0]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	7858      	ldrb	r0, [r3, #1]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	8952      	ldrh	r2, [r2, #10]
 8006b86:	9202      	str	r2, [sp, #8]
 8006b88:	2203      	movs	r2, #3
 8006b8a:	9201      	str	r2, [sp, #4]
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	4623      	mov	r3, r4
 8006b90:	4602      	mov	r2, r0
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f001 fdee 	bl	8008774 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f002 f8fb 	bl	8008d9c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	2200      	movs	r2, #0
 8006baa:	210a      	movs	r1, #10
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fbed 	bl	800738c <USBH_FindInterface>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
 8006bb8:	2bff      	cmp	r3, #255	; 0xff
 8006bba:	d002      	beq.n	8006bc2 <USBH_CDC_InterfaceInit+0x11a>
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d901      	bls.n	8006bc6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	e0c2      	b.n	8006d4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	211a      	movs	r1, #26
 8006bcc:	fb01 f303 	mul.w	r3, r1, r3
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	b25b      	sxtb	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	da16      	bge.n	8006c0c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	211a      	movs	r1, #26
 8006be4:	fb01 f303 	mul.w	r3, r1, r3
 8006be8:	4413      	add	r3, r2
 8006bea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bee:	781a      	ldrb	r2, [r3, #0]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	211a      	movs	r1, #26
 8006bfa:	fb01 f303 	mul.w	r3, r1, r3
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c04:	881a      	ldrh	r2, [r3, #0]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	835a      	strh	r2, [r3, #26]
 8006c0a:	e015      	b.n	8006c38 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	211a      	movs	r1, #26
 8006c12:	fb01 f303 	mul.w	r3, r1, r3
 8006c16:	4413      	add	r3, r2
 8006c18:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c1c:	781a      	ldrb	r2, [r3, #0]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	211a      	movs	r1, #26
 8006c28:	fb01 f303 	mul.w	r3, r1, r3
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c32:	881a      	ldrh	r2, [r3, #0]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	211a      	movs	r1, #26
 8006c3e:	fb01 f303 	mul.w	r3, r1, r3
 8006c42:	4413      	add	r3, r2
 8006c44:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	b25b      	sxtb	r3, r3
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	da16      	bge.n	8006c7e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	211a      	movs	r1, #26
 8006c56:	fb01 f303 	mul.w	r3, r1, r3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c60:	781a      	ldrb	r2, [r3, #0]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	211a      	movs	r1, #26
 8006c6c:	fb01 f303 	mul.w	r3, r1, r3
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c76:	881a      	ldrh	r2, [r3, #0]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	835a      	strh	r2, [r3, #26]
 8006c7c:	e015      	b.n	8006caa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	211a      	movs	r1, #26
 8006c84:	fb01 f303 	mul.w	r3, r1, r3
 8006c88:	4413      	add	r3, r2
 8006c8a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c8e:	781a      	ldrb	r2, [r3, #0]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	211a      	movs	r1, #26
 8006c9a:	fb01 f303 	mul.w	r3, r1, r3
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006ca4:	881a      	ldrh	r2, [r3, #0]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	7b9b      	ldrb	r3, [r3, #14]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fd8e 	bl	80087d2 <USBH_AllocPipe>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	461a      	mov	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	7bdb      	ldrb	r3, [r3, #15]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 fd84 	bl	80087d2 <USBH_AllocPipe>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	461a      	mov	r2, r3
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	7b59      	ldrb	r1, [r3, #13]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	7b98      	ldrb	r0, [r3, #14]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	8b12      	ldrh	r2, [r2, #24]
 8006cea:	9202      	str	r2, [sp, #8]
 8006cec:	2202      	movs	r2, #2
 8006cee:	9201      	str	r2, [sp, #4]
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	4623      	mov	r3, r4
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f001 fd3c 	bl	8008774 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	7b19      	ldrb	r1, [r3, #12]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	7bd8      	ldrb	r0, [r3, #15]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	8b52      	ldrh	r2, [r2, #26]
 8006d14:	9202      	str	r2, [sp, #8]
 8006d16:	2202      	movs	r2, #2
 8006d18:	9201      	str	r2, [sp, #4]
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	4623      	mov	r3, r4
 8006d1e:	4602      	mov	r2, r0
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 fd27 	bl	8008774 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	7b5b      	ldrb	r3, [r3, #13]
 8006d32:	2200      	movs	r2, #0
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f002 f830 	bl	8008d9c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	7b1b      	ldrb	r3, [r3, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f002 f829 	bl	8008d9c <USBH_LL_SetToggle>

  return USBH_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd90      	pop	{r4, r7, pc}

08006d54 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00e      	beq.n	8006d8c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 fd1c 	bl	80087b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 fd47 	bl	8008814 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	7b1b      	ldrb	r3, [r3, #12]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00e      	beq.n	8006db2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	7b1b      	ldrb	r3, [r3, #12]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 fd09 	bl	80087b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	7b1b      	ldrb	r3, [r3, #12]
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 fd34 	bl	8008814 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	7b5b      	ldrb	r3, [r3, #13]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00e      	beq.n	8006dd8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	7b5b      	ldrb	r3, [r3, #13]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 fcf6 	bl	80087b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	7b5b      	ldrb	r3, [r3, #13]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 fd21 	bl	8008814 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00b      	beq.n	8006dfc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dea:	69db      	ldr	r3, [r3, #28]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f002 f88d 	bl	8008f0c <free>
    phost->pActiveClass->pData = 0U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006df8:	2200      	movs	r2, #0
 8006dfa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3340      	adds	r3, #64	; 0x40
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f8b1 	bl	8006f86 <GetLineCoding>
 8006e24:	4603      	mov	r3, r0
 8006e26:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006e28:	7afb      	ldrb	r3, [r7, #11]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d105      	bne.n	8006e3a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e34:	2102      	movs	r1, #2
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006e3a:	7afb      	ldrb	r3, [r7, #11]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d877      	bhi.n	8006f58 <USBH_CDC_Process+0x114>
 8006e68:	a201      	add	r2, pc, #4	; (adr r2, 8006e70 <USBH_CDC_Process+0x2c>)
 8006e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6e:	bf00      	nop
 8006e70:	08006e85 	.word	0x08006e85
 8006e74:	08006e8b 	.word	0x08006e8b
 8006e78:	08006ebb 	.word	0x08006ebb
 8006e7c:	08006f2f 	.word	0x08006f2f
 8006e80:	08006f3d 	.word	0x08006f3d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	73fb      	strb	r3, [r7, #15]
      break;
 8006e88:	e06d      	b.n	8006f66 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f897 	bl	8006fc4 <SetLineCoding>
 8006e96:	4603      	mov	r3, r0
 8006e98:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e9a:	7bbb      	ldrb	r3, [r7, #14]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d104      	bne.n	8006eaa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ea8:	e058      	b.n	8006f5c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d055      	beq.n	8006f5c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2204      	movs	r2, #4
 8006eb4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006eb8:	e050      	b.n	8006f5c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	3340      	adds	r3, #64	; 0x40
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f860 	bl	8006f86 <GetLineCoding>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006eca:	7bbb      	ldrb	r3, [r7, #14]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d126      	bne.n	8006f1e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee2:	791b      	ldrb	r3, [r3, #4]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d13b      	bne.n	8006f60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d133      	bne.n	8006f60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f02:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d12b      	bne.n	8006f60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f10:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d124      	bne.n	8006f60 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f95a 	bl	80071d0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f1c:	e020      	b.n	8006f60 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d01d      	beq.n	8006f60 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2204      	movs	r2, #4
 8006f28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006f2c:	e018      	b.n	8006f60 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f867 	bl	8007002 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f8dc 	bl	80070f2 <CDC_ProcessReception>
      break;
 8006f3a:	e014      	b.n	8006f66 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 ffe5 	bl	8007f0e <USBH_ClrFeature>
 8006f44:	4603      	mov	r3, r0
 8006f46:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f48:	7bbb      	ldrb	r3, [r7, #14]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10a      	bne.n	8006f64 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006f56:	e005      	b.n	8006f64 <USBH_CDC_Process+0x120>

    default:
      break;
 8006f58:	bf00      	nop
 8006f5a:	e004      	b.n	8006f66 <USBH_CDC_Process+0x122>
      break;
 8006f5c:	bf00      	nop
 8006f5e:	e002      	b.n	8006f66 <USBH_CDC_Process+0x122>
      break;
 8006f60:	bf00      	nop
 8006f62:	e000      	b.n	8006f66 <USBH_CDC_Process+0x122>
      break;
 8006f64:	bf00      	nop

  }

  return status;
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b082      	sub	sp, #8
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	22a1      	movs	r2, #161	; 0xa1
 8006f94:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2221      	movs	r2, #33	; 0x21
 8006f9a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2207      	movs	r2, #7
 8006fac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2207      	movs	r2, #7
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 f98a 	bl	80082ce <USBH_CtlReq>
 8006fba:	4603      	mov	r3, r0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2221      	movs	r2, #33	; 0x21
 8006fd2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2207      	movs	r2, #7
 8006fea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	2207      	movs	r2, #7
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 f96b 	bl	80082ce <USBH_CtlReq>
 8006ff8:	4603      	mov	r3, r0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b086      	sub	sp, #24
 8007006:	af02      	add	r7, sp, #8
 8007008:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007014:	2300      	movs	r3, #0
 8007016:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800701e:	2b01      	cmp	r3, #1
 8007020:	d002      	beq.n	8007028 <CDC_ProcessTransmission+0x26>
 8007022:	2b02      	cmp	r3, #2
 8007024:	d025      	beq.n	8007072 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8007026:	e060      	b.n	80070ea <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	8b12      	ldrh	r2, [r2, #24]
 8007030:	4293      	cmp	r3, r2
 8007032:	d90c      	bls.n	800704e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	69d9      	ldr	r1, [r3, #28]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8b1a      	ldrh	r2, [r3, #24]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	7b58      	ldrb	r0, [r3, #13]
 8007040:	2301      	movs	r3, #1
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	4603      	mov	r3, r0
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f001 fb51 	bl	80086ee <USBH_BulkSendData>
 800704c:	e00c      	b.n	8007068 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	7b58      	ldrb	r0, [r3, #13]
 800705c:	2301      	movs	r3, #1
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	4603      	mov	r3, r0
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f001 fb43 	bl	80086ee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007070:	e03b      	b.n	80070ea <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	7b5b      	ldrb	r3, [r3, #13]
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 fe65 	bl	8008d48 <USBH_LL_GetURBState>
 800707e:	4603      	mov	r3, r0
 8007080:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007082:	7afb      	ldrb	r3, [r7, #11]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d128      	bne.n	80070da <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	8b12      	ldrh	r2, [r2, #24]
 8007090:	4293      	cmp	r3, r2
 8007092:	d90e      	bls.n	80070b2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	8b12      	ldrh	r2, [r2, #24]
 800709c:	1a9a      	subs	r2, r3, r2
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	8b12      	ldrh	r2, [r2, #24]
 80070aa:	441a      	add	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	61da      	str	r2, [r3, #28]
 80070b0:	e002      	b.n	80070b8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d004      	beq.n	80070ca <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80070c8:	e00e      	b.n	80070e8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f868 	bl	80071a8 <USBH_CDC_TransmitCallback>
      break;
 80070d8:	e006      	b.n	80070e8 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 80070da:	7afb      	ldrb	r3, [r7, #11]
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d103      	bne.n	80070e8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80070e8:	bf00      	nop
  }
}
 80070ea:	bf00      	nop
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007104:	2300      	movs	r3, #0
 8007106:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800710e:	2b03      	cmp	r3, #3
 8007110:	d002      	beq.n	8007118 <CDC_ProcessReception+0x26>
 8007112:	2b04      	cmp	r3, #4
 8007114:	d00e      	beq.n	8007134 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007116:	e043      	b.n	80071a0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	6a19      	ldr	r1, [r3, #32]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	8b5a      	ldrh	r2, [r3, #26]
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	7b1b      	ldrb	r3, [r3, #12]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 fb07 	bl	8008738 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2204      	movs	r2, #4
 800712e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007132:	e035      	b.n	80071a0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	7b1b      	ldrb	r3, [r3, #12]
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f001 fe04 	bl	8008d48 <USBH_LL_GetURBState>
 8007140:	4603      	mov	r3, r0
 8007142:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007144:	7cfb      	ldrb	r3, [r7, #19]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d129      	bne.n	800719e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	7b1b      	ldrb	r3, [r3, #12]
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 fd67 	bl	8008c24 <USBH_LL_GetLastXferSize>
 8007156:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	429a      	cmp	r2, r3
 8007160:	d016      	beq.n	8007190 <CDC_ProcessReception+0x9e>
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	8b5b      	ldrh	r3, [r3, #26]
 8007166:	461a      	mov	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4293      	cmp	r3, r2
 800716c:	d910      	bls.n	8007190 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1ad2      	subs	r2, r2, r3
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	6a1a      	ldr	r2, [r3, #32]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	441a      	add	r2, r3
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2203      	movs	r2, #3
 800718a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800718e:	e006      	b.n	800719e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f80f 	bl	80071bc <USBH_CDC_ReceiveCallback>
      break;
 800719e:	bf00      	nop
  }
}
 80071a0:	bf00      	nop
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	4613      	mov	r3, r2
 80071f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80071f8:	2302      	movs	r3, #2
 80071fa:	e029      	b.n	8007250 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	79fa      	ldrb	r2, [r7, #7]
 8007200:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 f81f 	bl	8007258 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f001 fc39 	bl	8008ac0 <USBH_LL_Init>

  return USBH_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	e009      	b.n	800727e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	33e0      	adds	r3, #224	; 0xe0
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	2200      	movs	r2, #0
 8007276:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3301      	adds	r3, #1
 800727c:	60fb      	str	r3, [r7, #12]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b0e      	cmp	r3, #14
 8007282:	d9f2      	bls.n	800726a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007284:	2300      	movs	r3, #0
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	e009      	b.n	800729e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4413      	add	r3, r2
 8007290:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007294:	2200      	movs	r2, #0
 8007296:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3301      	adds	r3, #1
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072a4:	d3f1      	bcc.n	800728a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2240      	movs	r2, #64	; 0x40
 80072ca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d016      	beq.n	8007342 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10e      	bne.n	800733c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007324:	1c59      	adds	r1, r3, #1
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	33de      	adds	r3, #222	; 0xde
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]
 800733a:	e004      	b.n	8007346 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800733c:	2302      	movs	r3, #2
 800733e:	73fb      	strb	r3, [r7, #15]
 8007340:	e001      	b.n	8007346 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007342:	2302      	movs	r3, #2
 8007344:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007346:	7bfb      	ldrb	r3, [r7, #15]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800736a:	78fa      	ldrb	r2, [r7, #3]
 800736c:	429a      	cmp	r2, r3
 800736e:	d204      	bcs.n	800737a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	78fa      	ldrb	r2, [r7, #3]
 8007374:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007378:	e001      	b.n	800737e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800737a:	2302      	movs	r3, #2
 800737c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800737e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	4608      	mov	r0, r1
 8007396:	4611      	mov	r1, r2
 8007398:	461a      	mov	r2, r3
 800739a:	4603      	mov	r3, r0
 800739c:	70fb      	strb	r3, [r7, #3]
 800739e:	460b      	mov	r3, r1
 80073a0:	70bb      	strb	r3, [r7, #2]
 80073a2:	4613      	mov	r3, r2
 80073a4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80073b4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80073b6:	e025      	b.n	8007404 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	221a      	movs	r2, #26
 80073bc:	fb02 f303 	mul.w	r3, r2, r3
 80073c0:	3308      	adds	r3, #8
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	4413      	add	r3, r2
 80073c6:	3302      	adds	r3, #2
 80073c8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	795b      	ldrb	r3, [r3, #5]
 80073ce:	78fa      	ldrb	r2, [r7, #3]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d002      	beq.n	80073da <USBH_FindInterface+0x4e>
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	2bff      	cmp	r3, #255	; 0xff
 80073d8:	d111      	bne.n	80073fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80073de:	78ba      	ldrb	r2, [r7, #2]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d002      	beq.n	80073ea <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073e4:	78bb      	ldrb	r3, [r7, #2]
 80073e6:	2bff      	cmp	r3, #255	; 0xff
 80073e8:	d109      	bne.n	80073fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073ee:	787a      	ldrb	r2, [r7, #1]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d002      	beq.n	80073fa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073f4:	787b      	ldrb	r3, [r7, #1]
 80073f6:	2bff      	cmp	r3, #255	; 0xff
 80073f8:	d101      	bne.n	80073fe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	e006      	b.n	800740c <USBH_FindInterface+0x80>
    }
    if_ix++;
 80073fe:	7dfb      	ldrb	r3, [r7, #23]
 8007400:	3301      	adds	r3, #1
 8007402:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007404:	7dfb      	ldrb	r3, [r7, #23]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d9d6      	bls.n	80073b8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800740a:	23ff      	movs	r3, #255	; 0xff
}
 800740c:	4618      	mov	r0, r3
 800740e:	371c      	adds	r7, #28
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f001 fb89 	bl	8008b38 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007426:	2101      	movs	r1, #1
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f001 fca0 	bl	8008d6e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b088      	sub	sp, #32
 800743c:	af04      	add	r7, sp, #16
 800743e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007440:	2302      	movs	r3, #2
 8007442:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b01      	cmp	r3, #1
 8007452:	d102      	bne.n	800745a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2203      	movs	r2, #3
 8007458:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b0b      	cmp	r3, #11
 8007462:	f200 81b3 	bhi.w	80077cc <USBH_Process+0x394>
 8007466:	a201      	add	r2, pc, #4	; (adr r2, 800746c <USBH_Process+0x34>)
 8007468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746c:	0800749d 	.word	0x0800749d
 8007470:	080074cf 	.word	0x080074cf
 8007474:	08007537 	.word	0x08007537
 8007478:	08007767 	.word	0x08007767
 800747c:	080077cd 	.word	0x080077cd
 8007480:	080075db 	.word	0x080075db
 8007484:	0800770d 	.word	0x0800770d
 8007488:	08007611 	.word	0x08007611
 800748c:	08007631 	.word	0x08007631
 8007490:	08007651 	.word	0x08007651
 8007494:	0800767f 	.word	0x0800767f
 8007498:	0800774f 	.word	0x0800774f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 8193 	beq.w	80077d0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80074b0:	20c8      	movs	r0, #200	; 0xc8
 80074b2:	f001 fca6 	bl	8008e02 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f001 fb99 	bl	8008bee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80074cc:	e180      	b.n	80077d0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d107      	bne.n	80074e8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074e6:	e182      	b.n	80077ee <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80074ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074f2:	d914      	bls.n	800751e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80074fa:	3301      	adds	r3, #1
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800750a:	2b03      	cmp	r3, #3
 800750c:	d903      	bls.n	8007516 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	220d      	movs	r2, #13
 8007512:	701a      	strb	r2, [r3, #0]
      break;
 8007514:	e16b      	b.n	80077ee <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	701a      	strb	r2, [r3, #0]
      break;
 800751c:	e167      	b.n	80077ee <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007524:	f103 020a 	add.w	r2, r3, #10
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800752e:	200a      	movs	r0, #10
 8007530:	f001 fc67 	bl	8008e02 <USBH_Delay>
      break;
 8007534:	e15b      	b.n	80077ee <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007546:	2104      	movs	r1, #4
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800754c:	2064      	movs	r0, #100	; 0x64
 800754e:	f001 fc58 	bl	8008e02 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f001 fb26 	bl	8008ba4 <USBH_LL_GetSpeed>
 8007558:	4603      	mov	r3, r0
 800755a:	461a      	mov	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2205      	movs	r2, #5
 8007566:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007568:	2100      	movs	r1, #0
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 f931 	bl	80087d2 <USBH_AllocPipe>
 8007570:	4603      	mov	r3, r0
 8007572:	461a      	mov	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007578:	2180      	movs	r1, #128	; 0x80
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f001 f929 	bl	80087d2 <USBH_AllocPipe>
 8007580:	4603      	mov	r3, r0
 8007582:	461a      	mov	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	7919      	ldrb	r1, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800759c:	b292      	uxth	r2, r2
 800759e:	9202      	str	r2, [sp, #8]
 80075a0:	2200      	movs	r2, #0
 80075a2:	9201      	str	r2, [sp, #4]
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	4603      	mov	r3, r0
 80075a8:	2280      	movs	r2, #128	; 0x80
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f001 f8e2 	bl	8008774 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	7959      	ldrb	r1, [r3, #5]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075c4:	b292      	uxth	r2, r2
 80075c6:	9202      	str	r2, [sp, #8]
 80075c8:	2200      	movs	r2, #0
 80075ca:	9201      	str	r2, [sp, #4]
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	4603      	mov	r3, r0
 80075d0:	2200      	movs	r2, #0
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f001 f8ce 	bl	8008774 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80075d8:	e109      	b.n	80077ee <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f90c 	bl	80077f8 <USBH_HandleEnum>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f040 80f3 	bne.w	80077d4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d103      	bne.n	8007608 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2208      	movs	r2, #8
 8007604:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007606:	e0e5      	b.n	80077d4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2207      	movs	r2, #7
 800760c:	701a      	strb	r2, [r3, #0]
      break;
 800760e:	e0e1      	b.n	80077d4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007616:	2b00      	cmp	r3, #0
 8007618:	f000 80de 	beq.w	80077d8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007622:	2101      	movs	r1, #1
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2208      	movs	r2, #8
 800762c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800762e:	e0d3      	b.n	80077d8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007636:	b29b      	uxth	r3, r3
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fc20 	bl	8007e80 <USBH_SetCfg>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	f040 80ca 	bne.w	80077dc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2209      	movs	r2, #9
 800764c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800764e:	e0c5      	b.n	80077dc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007656:	f003 0320 	and.w	r3, r3, #32
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00b      	beq.n	8007676 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800765e:	2101      	movs	r1, #1
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fc30 	bl	8007ec6 <USBH_SetFeature>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	f040 80b9 	bne.w	80077e0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	220a      	movs	r2, #10
 8007672:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007674:	e0b4      	b.n	80077e0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	220a      	movs	r2, #10
 800767a:	701a      	strb	r2, [r3, #0]
      break;
 800767c:	e0b0      	b.n	80077e0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 80ad 	beq.w	80077e4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007692:	2300      	movs	r3, #0
 8007694:	73fb      	strb	r3, [r7, #15]
 8007696:	e016      	b.n	80076c6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007698:	7bfa      	ldrb	r2, [r7, #15]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	32de      	adds	r2, #222	; 0xde
 800769e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a2:	791a      	ldrb	r2, [r3, #4]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d108      	bne.n	80076c0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80076ae:	7bfa      	ldrb	r2, [r7, #15]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	32de      	adds	r2, #222	; 0xde
 80076b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80076be:	e005      	b.n	80076cc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
 80076c2:	3301      	adds	r3, #1
 80076c4:	73fb      	strb	r3, [r7, #15]
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d0e5      	beq.n	8007698 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d016      	beq.n	8007704 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	4798      	blx	r3
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d109      	bne.n	80076fc <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2206      	movs	r2, #6
 80076ec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076f4:	2103      	movs	r1, #3
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80076fa:	e073      	b.n	80077e4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	220d      	movs	r2, #13
 8007700:	701a      	strb	r2, [r3, #0]
      break;
 8007702:	e06f      	b.n	80077e4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	220d      	movs	r2, #13
 8007708:	701a      	strb	r2, [r3, #0]
      break;
 800770a:	e06b      	b.n	80077e4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007712:	2b00      	cmp	r3, #0
 8007714:	d017      	beq.n	8007746 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	4798      	blx	r3
 8007722:	4603      	mov	r3, r0
 8007724:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007726:	7bbb      	ldrb	r3, [r7, #14]
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d103      	bne.n	8007736 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	220b      	movs	r2, #11
 8007732:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007734:	e058      	b.n	80077e8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007736:	7bbb      	ldrb	r3, [r7, #14]
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b02      	cmp	r3, #2
 800773c:	d154      	bne.n	80077e8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	220d      	movs	r2, #13
 8007742:	701a      	strb	r2, [r3, #0]
      break;
 8007744:	e050      	b.n	80077e8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	220d      	movs	r2, #13
 800774a:	701a      	strb	r2, [r3, #0]
      break;
 800774c:	e04c      	b.n	80077e8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007754:	2b00      	cmp	r3, #0
 8007756:	d049      	beq.n	80077ec <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	4798      	blx	r3
      }
      break;
 8007764:	e042      	b.n	80077ec <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff fd72 	bl	8007258 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800777a:	2b00      	cmp	r3, #0
 800777c:	d009      	beq.n	8007792 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077a2:	2105      	movs	r1, #5
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d107      	bne.n	80077c4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7ff fe2b 	bl	8007418 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077c2:	e014      	b.n	80077ee <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 f9b7 	bl	8008b38 <USBH_LL_Start>
      break;
 80077ca:	e010      	b.n	80077ee <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80077cc:	bf00      	nop
 80077ce:	e00e      	b.n	80077ee <USBH_Process+0x3b6>
      break;
 80077d0:	bf00      	nop
 80077d2:	e00c      	b.n	80077ee <USBH_Process+0x3b6>
      break;
 80077d4:	bf00      	nop
 80077d6:	e00a      	b.n	80077ee <USBH_Process+0x3b6>
    break;
 80077d8:	bf00      	nop
 80077da:	e008      	b.n	80077ee <USBH_Process+0x3b6>
      break;
 80077dc:	bf00      	nop
 80077de:	e006      	b.n	80077ee <USBH_Process+0x3b6>
      break;
 80077e0:	bf00      	nop
 80077e2:	e004      	b.n	80077ee <USBH_Process+0x3b6>
      break;
 80077e4:	bf00      	nop
 80077e6:	e002      	b.n	80077ee <USBH_Process+0x3b6>
      break;
 80077e8:	bf00      	nop
 80077ea:	e000      	b.n	80077ee <USBH_Process+0x3b6>
      break;
 80077ec:	bf00      	nop
  }
  return USBH_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af04      	add	r7, sp, #16
 80077fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007800:	2301      	movs	r3, #1
 8007802:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007804:	2301      	movs	r3, #1
 8007806:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	785b      	ldrb	r3, [r3, #1]
 800780c:	2b07      	cmp	r3, #7
 800780e:	f200 81c1 	bhi.w	8007b94 <USBH_HandleEnum+0x39c>
 8007812:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <USBH_HandleEnum+0x20>)
 8007814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007818:	08007839 	.word	0x08007839
 800781c:	080078f7 	.word	0x080078f7
 8007820:	08007961 	.word	0x08007961
 8007824:	080079ef 	.word	0x080079ef
 8007828:	08007a59 	.word	0x08007a59
 800782c:	08007ac9 	.word	0x08007ac9
 8007830:	08007b0f 	.word	0x08007b0f
 8007834:	08007b55 	.word	0x08007b55
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007838:	2108      	movs	r1, #8
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fa50 	bl	8007ce0 <USBH_Get_DevDesc>
 8007840:	4603      	mov	r3, r0
 8007842:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d130      	bne.n	80078ac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	7919      	ldrb	r1, [r3, #4]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800786e:	b292      	uxth	r2, r2
 8007870:	9202      	str	r2, [sp, #8]
 8007872:	2200      	movs	r2, #0
 8007874:	9201      	str	r2, [sp, #4]
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	4603      	mov	r3, r0
 800787a:	2280      	movs	r2, #128	; 0x80
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 ff79 	bl	8008774 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	7959      	ldrb	r1, [r3, #5]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007896:	b292      	uxth	r2, r2
 8007898:	9202      	str	r2, [sp, #8]
 800789a:	2200      	movs	r2, #0
 800789c:	9201      	str	r2, [sp, #4]
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	4603      	mov	r3, r0
 80078a2:	2200      	movs	r2, #0
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 ff65 	bl	8008774 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078aa:	e175      	b.n	8007b98 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	f040 8172 	bne.w	8007b98 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078ba:	3301      	adds	r3, #1
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	d903      	bls.n	80078d6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	220d      	movs	r2, #13
 80078d2:	701a      	strb	r2, [r3, #0]
      break;
 80078d4:	e160      	b.n	8007b98 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	795b      	ldrb	r3, [r3, #5]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 ff99 	bl	8008814 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	791b      	ldrb	r3, [r3, #4]
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 ff93 	bl	8008814 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	701a      	strb	r2, [r3, #0]
      break;
 80078f4:	e150      	b.n	8007b98 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80078f6:	2112      	movs	r1, #18
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f9f1 	bl	8007ce0 <USBH_Get_DevDesc>
 80078fe:	4603      	mov	r3, r0
 8007900:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d103      	bne.n	8007910 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800790e:	e145      	b.n	8007b9c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007910:	7bbb      	ldrb	r3, [r7, #14]
 8007912:	2b03      	cmp	r3, #3
 8007914:	f040 8142 	bne.w	8007b9c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800791e:	3301      	adds	r3, #1
 8007920:	b2da      	uxtb	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800792e:	2b03      	cmp	r3, #3
 8007930:	d903      	bls.n	800793a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	220d      	movs	r2, #13
 8007936:	701a      	strb	r2, [r3, #0]
      break;
 8007938:	e130      	b.n	8007b9c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	795b      	ldrb	r3, [r3, #5]
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 ff67 	bl	8008814 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	791b      	ldrb	r3, [r3, #4]
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 ff61 	bl	8008814 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	701a      	strb	r2, [r3, #0]
      break;
 800795e:	e11d      	b.n	8007b9c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007960:	2101      	movs	r1, #1
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fa68 	bl	8007e38 <USBH_SetAddress>
 8007968:	4603      	mov	r3, r0
 800796a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d132      	bne.n	80079d8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007972:	2002      	movs	r0, #2
 8007974:	f001 fa45 	bl	8008e02 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2203      	movs	r2, #3
 8007984:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	7919      	ldrb	r1, [r3, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800799a:	b292      	uxth	r2, r2
 800799c:	9202      	str	r2, [sp, #8]
 800799e:	2200      	movs	r2, #0
 80079a0:	9201      	str	r2, [sp, #4]
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	4603      	mov	r3, r0
 80079a6:	2280      	movs	r2, #128	; 0x80
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fee3 	bl	8008774 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	7959      	ldrb	r1, [r3, #5]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079c2:	b292      	uxth	r2, r2
 80079c4:	9202      	str	r2, [sp, #8]
 80079c6:	2200      	movs	r2, #0
 80079c8:	9201      	str	r2, [sp, #4]
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	4603      	mov	r3, r0
 80079ce:	2200      	movs	r2, #0
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fecf 	bl	8008774 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80079d6:	e0e3      	b.n	8007ba0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	2b03      	cmp	r3, #3
 80079dc:	f040 80e0 	bne.w	8007ba0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	220d      	movs	r2, #13
 80079e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	705a      	strb	r2, [r3, #1]
      break;
 80079ec:	e0d8      	b.n	8007ba0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80079ee:	2109      	movs	r1, #9
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f99d 	bl	8007d30 <USBH_Get_CfgDesc>
 80079f6:	4603      	mov	r3, r0
 80079f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d103      	bne.n	8007a08 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2204      	movs	r2, #4
 8007a04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a06:	e0cd      	b.n	8007ba4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	f040 80ca 	bne.w	8007ba4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a16:	3301      	adds	r3, #1
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	d903      	bls.n	8007a32 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	220d      	movs	r2, #13
 8007a2e:	701a      	strb	r2, [r3, #0]
      break;
 8007a30:	e0b8      	b.n	8007ba4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	795b      	ldrb	r3, [r3, #5]
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 feeb 	bl	8008814 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	791b      	ldrb	r3, [r3, #4]
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fee5 	bl	8008814 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	701a      	strb	r2, [r3, #0]
      break;
 8007a56:	e0a5      	b.n	8007ba4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f965 	bl	8007d30 <USBH_Get_CfgDesc>
 8007a66:	4603      	mov	r3, r0
 8007a68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d103      	bne.n	8007a78 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2205      	movs	r2, #5
 8007a74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a76:	e097      	b.n	8007ba8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	f040 8094 	bne.w	8007ba8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a86:	3301      	adds	r3, #1
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d903      	bls.n	8007aa2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	220d      	movs	r2, #13
 8007a9e:	701a      	strb	r2, [r3, #0]
      break;
 8007aa0:	e082      	b.n	8007ba8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	795b      	ldrb	r3, [r3, #5]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 feb3 	bl	8008814 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	791b      	ldrb	r3, [r3, #4]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fead 	bl	8008814 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	701a      	strb	r2, [r3, #0]
      break;
 8007ac6:	e06f      	b.n	8007ba8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d019      	beq.n	8007b06 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ade:	23ff      	movs	r3, #255	; 0xff
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f949 	bl	8007d78 <USBH_Get_StringDesc>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007aea:	7bbb      	ldrb	r3, [r7, #14]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d103      	bne.n	8007af8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2206      	movs	r2, #6
 8007af4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007af6:	e059      	b.n	8007bac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d156      	bne.n	8007bac <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2206      	movs	r2, #6
 8007b02:	705a      	strb	r2, [r3, #1]
      break;
 8007b04:	e052      	b.n	8007bac <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2206      	movs	r2, #6
 8007b0a:	705a      	strb	r2, [r3, #1]
      break;
 8007b0c:	e04e      	b.n	8007bac <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d019      	beq.n	8007b4c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b24:	23ff      	movs	r3, #255	; 0xff
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f926 	bl	8007d78 <USBH_Get_StringDesc>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d103      	bne.n	8007b3e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2207      	movs	r2, #7
 8007b3a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007b3c:	e038      	b.n	8007bb0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d135      	bne.n	8007bb0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2207      	movs	r2, #7
 8007b48:	705a      	strb	r2, [r3, #1]
      break;
 8007b4a:	e031      	b.n	8007bb0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2207      	movs	r2, #7
 8007b50:	705a      	strb	r2, [r3, #1]
      break;
 8007b52:	e02d      	b.n	8007bb0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d017      	beq.n	8007b8e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b6a:	23ff      	movs	r3, #255	; 0xff
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f903 	bl	8007d78 <USBH_Get_StringDesc>
 8007b72:	4603      	mov	r3, r0
 8007b74:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d102      	bne.n	8007b82 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007b80:	e018      	b.n	8007bb4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d115      	bne.n	8007bb4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b8c:	e012      	b.n	8007bb4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]
      break;
 8007b92:	e00f      	b.n	8007bb4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007b94:	bf00      	nop
 8007b96:	e00e      	b.n	8007bb6 <USBH_HandleEnum+0x3be>
      break;
 8007b98:	bf00      	nop
 8007b9a:	e00c      	b.n	8007bb6 <USBH_HandleEnum+0x3be>
      break;
 8007b9c:	bf00      	nop
 8007b9e:	e00a      	b.n	8007bb6 <USBH_HandleEnum+0x3be>
      break;
 8007ba0:	bf00      	nop
 8007ba2:	e008      	b.n	8007bb6 <USBH_HandleEnum+0x3be>
      break;
 8007ba4:	bf00      	nop
 8007ba6:	e006      	b.n	8007bb6 <USBH_HandleEnum+0x3be>
      break;
 8007ba8:	bf00      	nop
 8007baa:	e004      	b.n	8007bb6 <USBH_HandleEnum+0x3be>
      break;
 8007bac:	bf00      	nop
 8007bae:	e002      	b.n	8007bb6 <USBH_HandleEnum+0x3be>
      break;
 8007bb0:	bf00      	nop
 8007bb2:	e000      	b.n	8007bb6 <USBH_HandleEnum+0x3be>
      break;
 8007bb4:	bf00      	nop
  }
  return Status;
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	683a      	ldr	r2, [r7, #0]
 8007bce:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007bd2:	bf00      	nop
 8007bd4:	370c      	adds	r7, #12
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b082      	sub	sp, #8
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f804 	bl	8007c02 <USBH_HandleSof>
}
 8007bfa:	bf00      	nop
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b0b      	cmp	r3, #11
 8007c12:	d10a      	bne.n	8007c2a <USBH_HandleSof+0x28>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d005      	beq.n	8007c2a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	4798      	blx	r3
  }
}
 8007c2a:	bf00      	nop
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b083      	sub	sp, #12
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007c42:	bf00      	nop
}
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007c5e:	bf00      	nop
}
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 ff58 	bl	8008b6e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	791b      	ldrb	r3, [r3, #4]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fda5 	bl	8008814 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	795b      	ldrb	r3, [r3, #5]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fd9f 	bl	8008814 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007cf2:	78fb      	ldrb	r3, [r7, #3]
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cfe:	2100      	movs	r1, #0
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f864 	bl	8007dce <USBH_GetDescriptor>
 8007d06:	4603      	mov	r3, r0
 8007d08:	73fb      	strb	r3, [r7, #15]
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10a      	bne.n	8007d26 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d1c:	78fa      	ldrb	r2, [r7, #3]
 8007d1e:	b292      	uxth	r2, r2
 8007d20:	4619      	mov	r1, r3
 8007d22:	f000 f918 	bl	8007f56 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af02      	add	r7, sp, #8
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	331c      	adds	r3, #28
 8007d40:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007d42:	887b      	ldrh	r3, [r7, #2]
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f83d 	bl	8007dce <USBH_GetDescriptor>
 8007d54:	4603      	mov	r3, r0
 8007d56:	72fb      	strb	r3, [r7, #11]
 8007d58:	7afb      	ldrb	r3, [r7, #11]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d107      	bne.n	8007d6e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d64:	887a      	ldrh	r2, [r7, #2]
 8007d66:	68f9      	ldr	r1, [r7, #12]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 f964 	bl	8008036 <USBH_ParseCfgDesc>
  }

  return status;
 8007d6e:	7afb      	ldrb	r3, [r7, #11]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af02      	add	r7, sp, #8
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	607a      	str	r2, [r7, #4]
 8007d82:	461a      	mov	r2, r3
 8007d84:	460b      	mov	r3, r1
 8007d86:	72fb      	strb	r3, [r7, #11]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007d8c:	7afb      	ldrb	r3, [r7, #11]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007d94:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007d9c:	893b      	ldrh	r3, [r7, #8]
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	460b      	mov	r3, r1
 8007da2:	2100      	movs	r1, #0
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 f812 	bl	8007dce <USBH_GetDescriptor>
 8007daa:	4603      	mov	r3, r0
 8007dac:	75fb      	strb	r3, [r7, #23]
 8007dae:	7dfb      	ldrb	r3, [r7, #23]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d107      	bne.n	8007dc4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007dba:	893a      	ldrh	r2, [r7, #8]
 8007dbc:	6879      	ldr	r1, [r7, #4]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 fa37 	bl	8008232 <USBH_ParseStringDesc>
  }

  return status;
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	60f8      	str	r0, [r7, #12]
 8007dd6:	607b      	str	r3, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	72fb      	strb	r3, [r7, #11]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	789b      	ldrb	r3, [r3, #2]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d11c      	bne.n	8007e22 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007de8:	7afb      	ldrb	r3, [r7, #11]
 8007dea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2206      	movs	r2, #6
 8007df8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	893a      	ldrh	r2, [r7, #8]
 8007dfe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007e00:	893b      	ldrh	r3, [r7, #8]
 8007e02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e0a:	d104      	bne.n	8007e16 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f240 4209 	movw	r2, #1033	; 0x409
 8007e12:	829a      	strh	r2, [r3, #20]
 8007e14:	e002      	b.n	8007e1c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	8b3a      	ldrh	r2, [r7, #24]
 8007e20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007e22:	8b3b      	ldrh	r3, [r7, #24]
 8007e24:	461a      	mov	r2, r3
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 fa50 	bl	80082ce <USBH_CtlReq>
 8007e2e:	4603      	mov	r3, r0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	789b      	ldrb	r3, [r3, #2]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d10f      	bne.n	8007e6c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2205      	movs	r2, #5
 8007e56:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007e58:	78fb      	ldrb	r3, [r7, #3]
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2100      	movs	r1, #0
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fa2c 	bl	80082ce <USBH_CtlReq>
 8007e76:	4603      	mov	r3, r0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	789b      	ldrb	r3, [r3, #2]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d10e      	bne.n	8007eb2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2209      	movs	r2, #9
 8007e9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	887a      	ldrh	r2, [r7, #2]
 8007ea4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fa09 	bl	80082ce <USBH_CtlReq>
 8007ebc:	4603      	mov	r3, r0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	789b      	ldrb	r3, [r3, #2]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d10f      	bne.n	8007efa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2203      	movs	r2, #3
 8007ee4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007efa:	2200      	movs	r2, #0
 8007efc:	2100      	movs	r1, #0
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f9e5 	bl	80082ce <USBH_CtlReq>
 8007f04:	4603      	mov	r3, r0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b082      	sub	sp, #8
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	460b      	mov	r3, r1
 8007f18:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	789b      	ldrb	r3, [r3, #2]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d10f      	bne.n	8007f42 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2202      	movs	r2, #2
 8007f26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007f42:	2200      	movs	r2, #0
 8007f44:	2100      	movs	r1, #0
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f9c1 	bl	80082ce <USBH_CtlReq>
 8007f4c:	4603      	mov	r3, r0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b085      	sub	sp, #20
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	60f8      	str	r0, [r7, #12]
 8007f5e:	60b9      	str	r1, [r7, #8]
 8007f60:	4613      	mov	r3, r2
 8007f62:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	781a      	ldrb	r2, [r3, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	785a      	ldrb	r2, [r3, #1]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	3302      	adds	r3, #2
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	3303      	adds	r3, #3
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	021b      	lsls	r3, r3, #8
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	791a      	ldrb	r2, [r3, #4]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	795a      	ldrb	r2, [r3, #5]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	799a      	ldrb	r2, [r3, #6]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	79da      	ldrb	r2, [r3, #7]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007fb0:	88fb      	ldrh	r3, [r7, #6]
 8007fb2:	2b08      	cmp	r3, #8
 8007fb4:	d939      	bls.n	800802a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	3308      	adds	r3, #8
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	3309      	adds	r3, #9
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	021b      	lsls	r3, r3, #8
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	330a      	adds	r3, #10
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	330b      	adds	r3, #11
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	021b      	lsls	r3, r3, #8
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	330c      	adds	r3, #12
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	330d      	adds	r3, #13
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	021b      	lsls	r3, r3, #8
 8008000:	b29b      	uxth	r3, r3
 8008002:	4313      	orrs	r3, r2
 8008004:	b29a      	uxth	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	7b9a      	ldrb	r2, [r3, #14]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	7bda      	ldrb	r2, [r3, #15]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	7c1a      	ldrb	r2, [r3, #16]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	7c5a      	ldrb	r2, [r3, #17]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	745a      	strb	r2, [r3, #17]
  }
}
 800802a:	bf00      	nop
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b08a      	sub	sp, #40	; 0x28
 800803a:	af00      	add	r7, sp, #0
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	4613      	mov	r3, r2
 8008042:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008048:	2300      	movs	r3, #0
 800804a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800804e:	2300      	movs	r3, #0
 8008050:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	781a      	ldrb	r2, [r3, #0]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	785a      	ldrb	r2, [r3, #1]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	3302      	adds	r3, #2
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	b29a      	uxth	r2, r3
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	3303      	adds	r3, #3
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	b29b      	uxth	r3, r3
 8008078:	021b      	lsls	r3, r3, #8
 800807a:	b29b      	uxth	r3, r3
 800807c:	4313      	orrs	r3, r2
 800807e:	b29a      	uxth	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	791a      	ldrb	r2, [r3, #4]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	795a      	ldrb	r2, [r3, #5]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	799a      	ldrb	r2, [r3, #6]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	79da      	ldrb	r2, [r3, #7]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	7a1a      	ldrb	r2, [r3, #8]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80080ac:	88fb      	ldrh	r3, [r7, #6]
 80080ae:	2b09      	cmp	r3, #9
 80080b0:	d95f      	bls.n	8008172 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80080b2:	2309      	movs	r3, #9
 80080b4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80080b6:	2300      	movs	r3, #0
 80080b8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080ba:	e051      	b.n	8008160 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080bc:	f107 0316 	add.w	r3, r7, #22
 80080c0:	4619      	mov	r1, r3
 80080c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080c4:	f000 f8e8 	bl	8008298 <USBH_GetNextDesc>
 80080c8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	785b      	ldrb	r3, [r3, #1]
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	d146      	bne.n	8008160 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80080d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080d6:	221a      	movs	r2, #26
 80080d8:	fb02 f303 	mul.w	r3, r2, r3
 80080dc:	3308      	adds	r3, #8
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4413      	add	r3, r2
 80080e2:	3302      	adds	r3, #2
 80080e4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80080e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080e8:	69f8      	ldr	r0, [r7, #28]
 80080ea:	f000 f846 	bl	800817a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80080ee:	2300      	movs	r3, #0
 80080f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80080f4:	2300      	movs	r3, #0
 80080f6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80080f8:	e022      	b.n	8008140 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080fa:	f107 0316 	add.w	r3, r7, #22
 80080fe:	4619      	mov	r1, r3
 8008100:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008102:	f000 f8c9 	bl	8008298 <USBH_GetNextDesc>
 8008106:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	785b      	ldrb	r3, [r3, #1]
 800810c:	2b05      	cmp	r3, #5
 800810e:	d117      	bne.n	8008140 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008110:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008114:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008118:	3201      	adds	r2, #1
 800811a:	00d2      	lsls	r2, r2, #3
 800811c:	211a      	movs	r1, #26
 800811e:	fb01 f303 	mul.w	r3, r1, r3
 8008122:	4413      	add	r3, r2
 8008124:	3308      	adds	r3, #8
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	4413      	add	r3, r2
 800812a:	3304      	adds	r3, #4
 800812c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800812e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008130:	69b8      	ldr	r0, [r7, #24]
 8008132:	f000 f851 	bl	80081d8 <USBH_ParseEPDesc>
            ep_ix++;
 8008136:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800813a:	3301      	adds	r3, #1
 800813c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	791b      	ldrb	r3, [r3, #4]
 8008144:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008148:	429a      	cmp	r2, r3
 800814a:	d204      	bcs.n	8008156 <USBH_ParseCfgDesc+0x120>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	885a      	ldrh	r2, [r3, #2]
 8008150:	8afb      	ldrh	r3, [r7, #22]
 8008152:	429a      	cmp	r2, r3
 8008154:	d8d1      	bhi.n	80080fa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800815a:	3301      	adds	r3, #1
 800815c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008160:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008164:	2b01      	cmp	r3, #1
 8008166:	d804      	bhi.n	8008172 <USBH_ParseCfgDesc+0x13c>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	885a      	ldrh	r2, [r3, #2]
 800816c:	8afb      	ldrh	r3, [r7, #22]
 800816e:	429a      	cmp	r2, r3
 8008170:	d8a4      	bhi.n	80080bc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008172:	bf00      	nop
 8008174:	3728      	adds	r7, #40	; 0x28
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800817a:	b480      	push	{r7}
 800817c:	b083      	sub	sp, #12
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	781a      	ldrb	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	785a      	ldrb	r2, [r3, #1]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	789a      	ldrb	r2, [r3, #2]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	78da      	ldrb	r2, [r3, #3]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	791a      	ldrb	r2, [r3, #4]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	795a      	ldrb	r2, [r3, #5]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	799a      	ldrb	r2, [r3, #6]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	79da      	ldrb	r2, [r3, #7]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	7a1a      	ldrb	r2, [r3, #8]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	721a      	strb	r2, [r3, #8]
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781a      	ldrb	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	785a      	ldrb	r2, [r3, #1]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	789a      	ldrb	r2, [r3, #2]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	78da      	ldrb	r2, [r3, #3]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	3304      	adds	r3, #4
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	b29a      	uxth	r2, r3
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	3305      	adds	r3, #5
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	b29b      	uxth	r3, r3
 8008212:	021b      	lsls	r3, r3, #8
 8008214:	b29b      	uxth	r3, r3
 8008216:	4313      	orrs	r3, r2
 8008218:	b29a      	uxth	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	799a      	ldrb	r2, [r3, #6]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	719a      	strb	r2, [r3, #6]
}
 8008226:	bf00      	nop
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008232:	b480      	push	{r7}
 8008234:	b087      	sub	sp, #28
 8008236:	af00      	add	r7, sp, #0
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	4613      	mov	r3, r2
 800823e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3301      	adds	r3, #1
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b03      	cmp	r3, #3
 8008248:	d120      	bne.n	800828c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	1e9a      	subs	r2, r3, #2
 8008250:	88fb      	ldrh	r3, [r7, #6]
 8008252:	4293      	cmp	r3, r2
 8008254:	bf28      	it	cs
 8008256:	4613      	movcs	r3, r2
 8008258:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3302      	adds	r3, #2
 800825e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008260:	2300      	movs	r3, #0
 8008262:	82fb      	strh	r3, [r7, #22]
 8008264:	e00b      	b.n	800827e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008266:	8afb      	ldrh	r3, [r7, #22]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	4413      	add	r3, r2
 800826c:	781a      	ldrb	r2, [r3, #0]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	3301      	adds	r3, #1
 8008276:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008278:	8afb      	ldrh	r3, [r7, #22]
 800827a:	3302      	adds	r3, #2
 800827c:	82fb      	strh	r3, [r7, #22]
 800827e:	8afa      	ldrh	r2, [r7, #22]
 8008280:	8abb      	ldrh	r3, [r7, #20]
 8008282:	429a      	cmp	r2, r3
 8008284:	d3ef      	bcc.n	8008266 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2200      	movs	r2, #0
 800828a:	701a      	strb	r2, [r3, #0]
  }
}
 800828c:	bf00      	nop
 800828e:	371c      	adds	r7, #28
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	881a      	ldrh	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	4413      	add	r3, r2
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4413      	add	r3, r2
 80082be:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80082c0:	68fb      	ldr	r3, [r7, #12]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b086      	sub	sp, #24
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	4613      	mov	r3, r2
 80082da:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80082dc:	2301      	movs	r3, #1
 80082de:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	789b      	ldrb	r3, [r3, #2]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d002      	beq.n	80082ee <USBH_CtlReq+0x20>
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d00f      	beq.n	800830c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80082ec:	e027      	b.n	800833e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	88fa      	ldrh	r2, [r7, #6]
 80082f8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2201      	movs	r2, #1
 80082fe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2202      	movs	r2, #2
 8008304:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008306:	2301      	movs	r3, #1
 8008308:	75fb      	strb	r3, [r7, #23]
      break;
 800830a:	e018      	b.n	800833e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 f81b 	bl	8008348 <USBH_HandleControl>
 8008312:	4603      	mov	r3, r0
 8008314:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d002      	beq.n	8008322 <USBH_CtlReq+0x54>
 800831c:	7dfb      	ldrb	r3, [r7, #23]
 800831e:	2b03      	cmp	r3, #3
 8008320:	d106      	bne.n	8008330 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2201      	movs	r2, #1
 8008326:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	761a      	strb	r2, [r3, #24]
      break;
 800832e:	e005      	b.n	800833c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008330:	7dfb      	ldrb	r3, [r7, #23]
 8008332:	2b02      	cmp	r3, #2
 8008334:	d102      	bne.n	800833c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2201      	movs	r2, #1
 800833a:	709a      	strb	r2, [r3, #2]
      break;
 800833c:	bf00      	nop
  }
  return status;
 800833e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af02      	add	r7, sp, #8
 800834e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008350:	2301      	movs	r3, #1
 8008352:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008354:	2300      	movs	r3, #0
 8008356:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	7e1b      	ldrb	r3, [r3, #24]
 800835c:	3b01      	subs	r3, #1
 800835e:	2b0a      	cmp	r3, #10
 8008360:	f200 8158 	bhi.w	8008614 <USBH_HandleControl+0x2cc>
 8008364:	a201      	add	r2, pc, #4	; (adr r2, 800836c <USBH_HandleControl+0x24>)
 8008366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836a:	bf00      	nop
 800836c:	08008399 	.word	0x08008399
 8008370:	080083b3 	.word	0x080083b3
 8008374:	0800841d 	.word	0x0800841d
 8008378:	08008443 	.word	0x08008443
 800837c:	0800847b 	.word	0x0800847b
 8008380:	080084a7 	.word	0x080084a7
 8008384:	080084f9 	.word	0x080084f9
 8008388:	0800851b 	.word	0x0800851b
 800838c:	08008557 	.word	0x08008557
 8008390:	0800857f 	.word	0x0800857f
 8008394:	080085bd 	.word	0x080085bd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f103 0110 	add.w	r1, r3, #16
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	795b      	ldrb	r3, [r3, #5]
 80083a2:	461a      	mov	r2, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f945 	bl	8008634 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2202      	movs	r2, #2
 80083ae:	761a      	strb	r2, [r3, #24]
      break;
 80083b0:	e13b      	b.n	800862a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	795b      	ldrb	r3, [r3, #5]
 80083b6:	4619      	mov	r1, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fcc5 	bl	8008d48 <USBH_LL_GetURBState>
 80083be:	4603      	mov	r3, r0
 80083c0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d11e      	bne.n	8008406 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	7c1b      	ldrb	r3, [r3, #16]
 80083cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083d0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	8adb      	ldrh	r3, [r3, #22]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80083da:	7b7b      	ldrb	r3, [r7, #13]
 80083dc:	2b80      	cmp	r3, #128	; 0x80
 80083de:	d103      	bne.n	80083e8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2203      	movs	r2, #3
 80083e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80083e6:	e117      	b.n	8008618 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2205      	movs	r2, #5
 80083ec:	761a      	strb	r2, [r3, #24]
      break;
 80083ee:	e113      	b.n	8008618 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80083f0:	7b7b      	ldrb	r3, [r7, #13]
 80083f2:	2b80      	cmp	r3, #128	; 0x80
 80083f4:	d103      	bne.n	80083fe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2209      	movs	r2, #9
 80083fa:	761a      	strb	r2, [r3, #24]
      break;
 80083fc:	e10c      	b.n	8008618 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2207      	movs	r2, #7
 8008402:	761a      	strb	r2, [r3, #24]
      break;
 8008404:	e108      	b.n	8008618 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	2b04      	cmp	r3, #4
 800840a:	d003      	beq.n	8008414 <USBH_HandleControl+0xcc>
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	2b02      	cmp	r3, #2
 8008410:	f040 8102 	bne.w	8008618 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	220b      	movs	r2, #11
 8008418:	761a      	strb	r2, [r3, #24]
      break;
 800841a:	e0fd      	b.n	8008618 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008422:	b29a      	uxth	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6899      	ldr	r1, [r3, #8]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	899a      	ldrh	r2, [r3, #12]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	791b      	ldrb	r3, [r3, #4]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f93c 	bl	80086b2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2204      	movs	r2, #4
 800843e:	761a      	strb	r2, [r3, #24]
      break;
 8008440:	e0f3      	b.n	800862a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	791b      	ldrb	r3, [r3, #4]
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fc7d 	bl	8008d48 <USBH_LL_GetURBState>
 800844e:	4603      	mov	r3, r0
 8008450:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d102      	bne.n	800845e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2209      	movs	r2, #9
 800845c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	2b05      	cmp	r3, #5
 8008462:	d102      	bne.n	800846a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008464:	2303      	movs	r3, #3
 8008466:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008468:	e0d8      	b.n	800861c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800846a:	7bbb      	ldrb	r3, [r7, #14]
 800846c:	2b04      	cmp	r3, #4
 800846e:	f040 80d5 	bne.w	800861c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	220b      	movs	r2, #11
 8008476:	761a      	strb	r2, [r3, #24]
      break;
 8008478:	e0d0      	b.n	800861c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6899      	ldr	r1, [r3, #8]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	899a      	ldrh	r2, [r3, #12]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	7958      	ldrb	r0, [r3, #5]
 8008486:	2301      	movs	r3, #1
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	4603      	mov	r3, r0
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f8eb 	bl	8008668 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008498:	b29a      	uxth	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2206      	movs	r2, #6
 80084a2:	761a      	strb	r2, [r3, #24]
      break;
 80084a4:	e0c1      	b.n	800862a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	795b      	ldrb	r3, [r3, #5]
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fc4b 	bl	8008d48 <USBH_LL_GetURBState>
 80084b2:	4603      	mov	r3, r0
 80084b4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d103      	bne.n	80084c4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2207      	movs	r2, #7
 80084c0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80084c2:	e0ad      	b.n	8008620 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	2b05      	cmp	r3, #5
 80084c8:	d105      	bne.n	80084d6 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	220c      	movs	r2, #12
 80084ce:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80084d0:	2303      	movs	r3, #3
 80084d2:	73fb      	strb	r3, [r7, #15]
      break;
 80084d4:	e0a4      	b.n	8008620 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d103      	bne.n	80084e4 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2205      	movs	r2, #5
 80084e0:	761a      	strb	r2, [r3, #24]
      break;
 80084e2:	e09d      	b.n	8008620 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	2b04      	cmp	r3, #4
 80084e8:	f040 809a 	bne.w	8008620 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	220b      	movs	r2, #11
 80084f0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80084f2:	2302      	movs	r3, #2
 80084f4:	73fb      	strb	r3, [r7, #15]
      break;
 80084f6:	e093      	b.n	8008620 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	791b      	ldrb	r3, [r3, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	2100      	movs	r1, #0
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f8d6 	bl	80086b2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800850c:	b29a      	uxth	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2208      	movs	r2, #8
 8008516:	761a      	strb	r2, [r3, #24]

      break;
 8008518:	e087      	b.n	800862a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	791b      	ldrb	r3, [r3, #4]
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fc11 	bl	8008d48 <USBH_LL_GetURBState>
 8008526:	4603      	mov	r3, r0
 8008528:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800852a:	7bbb      	ldrb	r3, [r7, #14]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d105      	bne.n	800853c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	220d      	movs	r2, #13
 8008534:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800853a:	e073      	b.n	8008624 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	2b04      	cmp	r3, #4
 8008540:	d103      	bne.n	800854a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	220b      	movs	r2, #11
 8008546:	761a      	strb	r2, [r3, #24]
      break;
 8008548:	e06c      	b.n	8008624 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800854a:	7bbb      	ldrb	r3, [r7, #14]
 800854c:	2b05      	cmp	r3, #5
 800854e:	d169      	bne.n	8008624 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008550:	2303      	movs	r3, #3
 8008552:	73fb      	strb	r3, [r7, #15]
      break;
 8008554:	e066      	b.n	8008624 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	795a      	ldrb	r2, [r3, #5]
 800855a:	2301      	movs	r3, #1
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	4613      	mov	r3, r2
 8008560:	2200      	movs	r2, #0
 8008562:	2100      	movs	r1, #0
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f87f 	bl	8008668 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008570:	b29a      	uxth	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	220a      	movs	r2, #10
 800857a:	761a      	strb	r2, [r3, #24]
      break;
 800857c:	e055      	b.n	800862a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	795b      	ldrb	r3, [r3, #5]
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fbdf 	bl	8008d48 <USBH_LL_GetURBState>
 800858a:	4603      	mov	r3, r0
 800858c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d105      	bne.n	80085a0 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	220d      	movs	r2, #13
 800859c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800859e:	e043      	b.n	8008628 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d103      	bne.n	80085ae <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2209      	movs	r2, #9
 80085aa:	761a      	strb	r2, [r3, #24]
      break;
 80085ac:	e03c      	b.n	8008628 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	d139      	bne.n	8008628 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	220b      	movs	r2, #11
 80085b8:	761a      	strb	r2, [r3, #24]
      break;
 80085ba:	e035      	b.n	8008628 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	7e5b      	ldrb	r3, [r3, #25]
 80085c0:	3301      	adds	r3, #1
 80085c2:	b2da      	uxtb	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	765a      	strb	r2, [r3, #25]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	7e5b      	ldrb	r3, [r3, #25]
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d806      	bhi.n	80085de <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80085dc:	e025      	b.n	800862a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085e4:	2106      	movs	r1, #6
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	795b      	ldrb	r3, [r3, #5]
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f90c 	bl	8008814 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	791b      	ldrb	r3, [r3, #4]
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f906 	bl	8008814 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800860e:	2302      	movs	r3, #2
 8008610:	73fb      	strb	r3, [r7, #15]
      break;
 8008612:	e00a      	b.n	800862a <USBH_HandleControl+0x2e2>

    default:
      break;
 8008614:	bf00      	nop
 8008616:	e008      	b.n	800862a <USBH_HandleControl+0x2e2>
      break;
 8008618:	bf00      	nop
 800861a:	e006      	b.n	800862a <USBH_HandleControl+0x2e2>
      break;
 800861c:	bf00      	nop
 800861e:	e004      	b.n	800862a <USBH_HandleControl+0x2e2>
      break;
 8008620:	bf00      	nop
 8008622:	e002      	b.n	800862a <USBH_HandleControl+0x2e2>
      break;
 8008624:	bf00      	nop
 8008626:	e000      	b.n	800862a <USBH_HandleControl+0x2e2>
      break;
 8008628:	bf00      	nop
  }

  return status;
 800862a:	7bfb      	ldrb	r3, [r7, #15]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b088      	sub	sp, #32
 8008638:	af04      	add	r7, sp, #16
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	4613      	mov	r3, r2
 8008640:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008642:	79f9      	ldrb	r1, [r7, #7]
 8008644:	2300      	movs	r3, #0
 8008646:	9303      	str	r3, [sp, #12]
 8008648:	2308      	movs	r3, #8
 800864a:	9302      	str	r3, [sp, #8]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	9301      	str	r3, [sp, #4]
 8008650:	2300      	movs	r3, #0
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	2300      	movs	r3, #0
 8008656:	2200      	movs	r2, #0
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 fb44 	bl	8008ce6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b088      	sub	sp, #32
 800866c:	af04      	add	r7, sp, #16
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	4611      	mov	r1, r2
 8008674:	461a      	mov	r2, r3
 8008676:	460b      	mov	r3, r1
 8008678:	80fb      	strh	r3, [r7, #6]
 800867a:	4613      	mov	r3, r2
 800867c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008688:	2300      	movs	r3, #0
 800868a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800868c:	7979      	ldrb	r1, [r7, #5]
 800868e:	7e3b      	ldrb	r3, [r7, #24]
 8008690:	9303      	str	r3, [sp, #12]
 8008692:	88fb      	ldrh	r3, [r7, #6]
 8008694:	9302      	str	r3, [sp, #8]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	9301      	str	r3, [sp, #4]
 800869a:	2301      	movs	r3, #1
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	2300      	movs	r3, #0
 80086a0:	2200      	movs	r2, #0
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f000 fb1f 	bl	8008ce6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b088      	sub	sp, #32
 80086b6:	af04      	add	r7, sp, #16
 80086b8:	60f8      	str	r0, [r7, #12]
 80086ba:	60b9      	str	r1, [r7, #8]
 80086bc:	4611      	mov	r1, r2
 80086be:	461a      	mov	r2, r3
 80086c0:	460b      	mov	r3, r1
 80086c2:	80fb      	strh	r3, [r7, #6]
 80086c4:	4613      	mov	r3, r2
 80086c6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80086c8:	7979      	ldrb	r1, [r7, #5]
 80086ca:	2300      	movs	r3, #0
 80086cc:	9303      	str	r3, [sp, #12]
 80086ce:	88fb      	ldrh	r3, [r7, #6]
 80086d0:	9302      	str	r3, [sp, #8]
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	2301      	movs	r3, #1
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	2300      	movs	r3, #0
 80086dc:	2201      	movs	r2, #1
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 fb01 	bl	8008ce6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80086e4:	2300      	movs	r3, #0

}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b088      	sub	sp, #32
 80086f2:	af04      	add	r7, sp, #16
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	60b9      	str	r1, [r7, #8]
 80086f8:	4611      	mov	r1, r2
 80086fa:	461a      	mov	r2, r3
 80086fc:	460b      	mov	r3, r1
 80086fe:	80fb      	strh	r3, [r7, #6]
 8008700:	4613      	mov	r3, r2
 8008702:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008712:	7979      	ldrb	r1, [r7, #5]
 8008714:	7e3b      	ldrb	r3, [r7, #24]
 8008716:	9303      	str	r3, [sp, #12]
 8008718:	88fb      	ldrh	r3, [r7, #6]
 800871a:	9302      	str	r3, [sp, #8]
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	9301      	str	r3, [sp, #4]
 8008720:	2301      	movs	r3, #1
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	2302      	movs	r3, #2
 8008726:	2200      	movs	r2, #0
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 fadc 	bl	8008ce6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b088      	sub	sp, #32
 800873c:	af04      	add	r7, sp, #16
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	4611      	mov	r1, r2
 8008744:	461a      	mov	r2, r3
 8008746:	460b      	mov	r3, r1
 8008748:	80fb      	strh	r3, [r7, #6]
 800874a:	4613      	mov	r3, r2
 800874c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800874e:	7979      	ldrb	r1, [r7, #5]
 8008750:	2300      	movs	r3, #0
 8008752:	9303      	str	r3, [sp, #12]
 8008754:	88fb      	ldrh	r3, [r7, #6]
 8008756:	9302      	str	r3, [sp, #8]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	9301      	str	r3, [sp, #4]
 800875c:	2301      	movs	r3, #1
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	2302      	movs	r3, #2
 8008762:	2201      	movs	r2, #1
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 fabe 	bl	8008ce6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af04      	add	r7, sp, #16
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	4608      	mov	r0, r1
 800877e:	4611      	mov	r1, r2
 8008780:	461a      	mov	r2, r3
 8008782:	4603      	mov	r3, r0
 8008784:	70fb      	strb	r3, [r7, #3]
 8008786:	460b      	mov	r3, r1
 8008788:	70bb      	strb	r3, [r7, #2]
 800878a:	4613      	mov	r3, r2
 800878c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800878e:	7878      	ldrb	r0, [r7, #1]
 8008790:	78ba      	ldrb	r2, [r7, #2]
 8008792:	78f9      	ldrb	r1, [r7, #3]
 8008794:	8b3b      	ldrh	r3, [r7, #24]
 8008796:	9302      	str	r3, [sp, #8]
 8008798:	7d3b      	ldrb	r3, [r7, #20]
 800879a:	9301      	str	r3, [sp, #4]
 800879c:	7c3b      	ldrb	r3, [r7, #16]
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	4603      	mov	r3, r0
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fa51 	bl	8008c4a <USBH_LL_OpenPipe>

  return USBH_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b082      	sub	sp, #8
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	460b      	mov	r3, r1
 80087bc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80087be:	78fb      	ldrb	r3, [r7, #3]
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fa70 	bl	8008ca8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	460b      	mov	r3, r1
 80087dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f836 	bl	8008850 <USBH_GetFreePipe>
 80087e4:	4603      	mov	r3, r0
 80087e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80087e8:	89fb      	ldrh	r3, [r7, #14]
 80087ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d00a      	beq.n	8008808 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80087f2:	78fa      	ldrb	r2, [r7, #3]
 80087f4:	89fb      	ldrh	r3, [r7, #14]
 80087f6:	f003 030f 	and.w	r3, r3, #15
 80087fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087fe:	6879      	ldr	r1, [r7, #4]
 8008800:	33e0      	adds	r3, #224	; 0xe0
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	440b      	add	r3, r1
 8008806:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008808:	89fb      	ldrh	r3, [r7, #14]
 800880a:	b2db      	uxtb	r3, r3
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008820:	78fb      	ldrb	r3, [r7, #3]
 8008822:	2b0a      	cmp	r3, #10
 8008824:	d80d      	bhi.n	8008842 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008826:	78fb      	ldrb	r3, [r7, #3]
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	33e0      	adds	r3, #224	; 0xe0
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	78fb      	ldrb	r3, [r7, #3]
 8008834:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008838:	6879      	ldr	r1, [r7, #4]
 800883a:	33e0      	adds	r3, #224	; 0xe0
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	440b      	add	r3, r1
 8008840:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800885c:	2300      	movs	r3, #0
 800885e:	73fb      	strb	r3, [r7, #15]
 8008860:	e00f      	b.n	8008882 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008862:	7bfb      	ldrb	r3, [r7, #15]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	33e0      	adds	r3, #224	; 0xe0
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4413      	add	r3, r2
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d102      	bne.n	800887c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	b29b      	uxth	r3, r3
 800887a:	e007      	b.n	800888c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	3301      	adds	r3, #1
 8008880:	73fb      	strb	r3, [r7, #15]
 8008882:	7bfb      	ldrb	r3, [r7, #15]
 8008884:	2b0a      	cmp	r3, #10
 8008886:	d9ec      	bls.n	8008862 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008888:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800888c:	4618      	mov	r0, r3
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800889c:	2201      	movs	r2, #1
 800889e:	490e      	ldr	r1, [pc, #56]	; (80088d8 <MX_USB_HOST_Init+0x40>)
 80088a0:	480e      	ldr	r0, [pc, #56]	; (80088dc <MX_USB_HOST_Init+0x44>)
 80088a2:	f7fe fc9f 	bl	80071e4 <USBH_Init>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80088ac:	f7f8 fa22 	bl	8000cf4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80088b0:	490b      	ldr	r1, [pc, #44]	; (80088e0 <MX_USB_HOST_Init+0x48>)
 80088b2:	480a      	ldr	r0, [pc, #40]	; (80088dc <MX_USB_HOST_Init+0x44>)
 80088b4:	f7fe fd24 	bl	8007300 <USBH_RegisterClass>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80088be:	f7f8 fa19 	bl	8000cf4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80088c2:	4806      	ldr	r0, [pc, #24]	; (80088dc <MX_USB_HOST_Init+0x44>)
 80088c4:	f7fe fda8 	bl	8007418 <USBH_Start>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d001      	beq.n	80088d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80088ce:	f7f8 fa11 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80088d2:	bf00      	nop
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	080088f9 	.word	0x080088f9
 80088dc:	200002f0 	.word	0x200002f0
 80088e0:	2000000c 	.word	0x2000000c

080088e4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80088e8:	4802      	ldr	r0, [pc, #8]	; (80088f4 <MX_USB_HOST_Process+0x10>)
 80088ea:	f7fe fda5 	bl	8007438 <USBH_Process>
}
 80088ee:	bf00      	nop
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	200002f0 	.word	0x200002f0

080088f8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008904:	78fb      	ldrb	r3, [r7, #3]
 8008906:	3b01      	subs	r3, #1
 8008908:	2b04      	cmp	r3, #4
 800890a:	d819      	bhi.n	8008940 <USBH_UserProcess+0x48>
 800890c:	a201      	add	r2, pc, #4	; (adr r2, 8008914 <USBH_UserProcess+0x1c>)
 800890e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008912:	bf00      	nop
 8008914:	08008941 	.word	0x08008941
 8008918:	08008931 	.word	0x08008931
 800891c:	08008941 	.word	0x08008941
 8008920:	08008939 	.word	0x08008939
 8008924:	08008929 	.word	0x08008929
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008928:	4b09      	ldr	r3, [pc, #36]	; (8008950 <USBH_UserProcess+0x58>)
 800892a:	2203      	movs	r2, #3
 800892c:	701a      	strb	r2, [r3, #0]
  break;
 800892e:	e008      	b.n	8008942 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008930:	4b07      	ldr	r3, [pc, #28]	; (8008950 <USBH_UserProcess+0x58>)
 8008932:	2202      	movs	r2, #2
 8008934:	701a      	strb	r2, [r3, #0]
  break;
 8008936:	e004      	b.n	8008942 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008938:	4b05      	ldr	r3, [pc, #20]	; (8008950 <USBH_UserProcess+0x58>)
 800893a:	2201      	movs	r2, #1
 800893c:	701a      	strb	r2, [r3, #0]
  break;
 800893e:	e000      	b.n	8008942 <USBH_UserProcess+0x4a>

  default:
  break;
 8008940:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008942:	bf00      	nop
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	200000bc 	.word	0x200000bc

08008954 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b08a      	sub	sp, #40	; 0x28
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800895c:	f107 0314 	add.w	r3, r7, #20
 8008960:	2200      	movs	r2, #0
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	605a      	str	r2, [r3, #4]
 8008966:	609a      	str	r2, [r3, #8]
 8008968:	60da      	str	r2, [r3, #12]
 800896a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008974:	d147      	bne.n	8008a06 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008976:	2300      	movs	r3, #0
 8008978:	613b      	str	r3, [r7, #16]
 800897a:	4b25      	ldr	r3, [pc, #148]	; (8008a10 <HAL_HCD_MspInit+0xbc>)
 800897c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897e:	4a24      	ldr	r2, [pc, #144]	; (8008a10 <HAL_HCD_MspInit+0xbc>)
 8008980:	f043 0301 	orr.w	r3, r3, #1
 8008984:	6313      	str	r3, [r2, #48]	; 0x30
 8008986:	4b22      	ldr	r3, [pc, #136]	; (8008a10 <HAL_HCD_MspInit+0xbc>)
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	613b      	str	r3, [r7, #16]
 8008990:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008998:	2300      	movs	r3, #0
 800899a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800899c:	2300      	movs	r3, #0
 800899e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80089a0:	f107 0314 	add.w	r3, r7, #20
 80089a4:	4619      	mov	r1, r3
 80089a6:	481b      	ldr	r0, [pc, #108]	; (8008a14 <HAL_HCD_MspInit+0xc0>)
 80089a8:	f7f8 fdc6 	bl	8001538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80089ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80089b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089b2:	2302      	movs	r3, #2
 80089b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089b6:	2300      	movs	r3, #0
 80089b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089ba:	2300      	movs	r3, #0
 80089bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089be:	230a      	movs	r3, #10
 80089c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089c2:	f107 0314 	add.w	r3, r7, #20
 80089c6:	4619      	mov	r1, r3
 80089c8:	4812      	ldr	r0, [pc, #72]	; (8008a14 <HAL_HCD_MspInit+0xc0>)
 80089ca:	f7f8 fdb5 	bl	8001538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089ce:	4b10      	ldr	r3, [pc, #64]	; (8008a10 <HAL_HCD_MspInit+0xbc>)
 80089d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d2:	4a0f      	ldr	r2, [pc, #60]	; (8008a10 <HAL_HCD_MspInit+0xbc>)
 80089d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d8:	6353      	str	r3, [r2, #52]	; 0x34
 80089da:	2300      	movs	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]
 80089de:	4b0c      	ldr	r3, [pc, #48]	; (8008a10 <HAL_HCD_MspInit+0xbc>)
 80089e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e2:	4a0b      	ldr	r2, [pc, #44]	; (8008a10 <HAL_HCD_MspInit+0xbc>)
 80089e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089e8:	6453      	str	r3, [r2, #68]	; 0x44
 80089ea:	4b09      	ldr	r3, [pc, #36]	; (8008a10 <HAL_HCD_MspInit+0xbc>)
 80089ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089f6:	2200      	movs	r2, #0
 80089f8:	2100      	movs	r1, #0
 80089fa:	2043      	movs	r0, #67	; 0x43
 80089fc:	f7f8 fd43 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a00:	2043      	movs	r0, #67	; 0x43
 8008a02:	f7f8 fd5c 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a06:	bf00      	nop
 8008a08:	3728      	adds	r7, #40	; 0x28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	40023800 	.word	0x40023800
 8008a14:	40020000 	.word	0x40020000

08008a18 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7ff f8d9 	bl	8007bde <USBH_LL_IncTimer>
}
 8008a2c:	bf00      	nop
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7ff f911 	bl	8007c6a <USBH_LL_Connect>
}
 8008a48:	bf00      	nop
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff f91a 	bl	8007c98 <USBH_LL_Disconnect>
}
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	70fb      	strb	r3, [r7, #3]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7ff f8cb 	bl	8007c32 <USBH_LL_PortEnabled>
}
 8008a9c:	bf00      	nop
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7ff f8cb 	bl	8007c4e <USBH_LL_PortDisabled>
}
 8008ab8:	bf00      	nop
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d12a      	bne.n	8008b28 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008ad2:	4a18      	ldr	r2, [pc, #96]	; (8008b34 <USBH_LL_Init+0x74>)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a15      	ldr	r2, [pc, #84]	; (8008b34 <USBH_LL_Init+0x74>)
 8008ade:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ae2:	4b14      	ldr	r3, [pc, #80]	; (8008b34 <USBH_LL_Init+0x74>)
 8008ae4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ae8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008aea:	4b12      	ldr	r3, [pc, #72]	; (8008b34 <USBH_LL_Init+0x74>)
 8008aec:	2208      	movs	r2, #8
 8008aee:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008af0:	4b10      	ldr	r3, [pc, #64]	; (8008b34 <USBH_LL_Init+0x74>)
 8008af2:	2201      	movs	r2, #1
 8008af4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008af6:	4b0f      	ldr	r3, [pc, #60]	; (8008b34 <USBH_LL_Init+0x74>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008afc:	4b0d      	ldr	r3, [pc, #52]	; (8008b34 <USBH_LL_Init+0x74>)
 8008afe:	2202      	movs	r2, #2
 8008b00:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b02:	4b0c      	ldr	r3, [pc, #48]	; (8008b34 <USBH_LL_Init+0x74>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008b08:	480a      	ldr	r0, [pc, #40]	; (8008b34 <USBH_LL_Init+0x74>)
 8008b0a:	f7f8 fee3 	bl	80018d4 <HAL_HCD_Init>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008b14:	f7f8 f8ee 	bl	8000cf4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008b18:	4806      	ldr	r0, [pc, #24]	; (8008b34 <USBH_LL_Init+0x74>)
 8008b1a:	f7f9 fae7 	bl	80020ec <HAL_HCD_GetCurrentFrame>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7ff f84c 	bl	8007bc0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	200006c8 	.word	0x200006c8

08008b38 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7f9 fa54 	bl	8001ffc <HAL_HCD_Start>
 8008b54:	4603      	mov	r3, r0
 8008b56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 f95c 	bl	8008e18 <USBH_Get_USB_Status>
 8008b60:	4603      	mov	r3, r0
 8008b62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7f9 fa5c 	bl	8002042 <HAL_HCD_Stop>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b8e:	7bfb      	ldrb	r3, [r7, #15]
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 f941 	bl	8008e18 <USBH_Get_USB_Status>
 8008b96:	4603      	mov	r3, r0
 8008b98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008bac:	2301      	movs	r3, #1
 8008bae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7f9 faa6 	bl	8002108 <HAL_HCD_GetCurrentSpeed>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d007      	beq.n	8008bd2 <USBH_LL_GetSpeed+0x2e>
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d302      	bcc.n	8008bcc <USBH_LL_GetSpeed+0x28>
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d006      	beq.n	8008bd8 <USBH_LL_GetSpeed+0x34>
 8008bca:	e008      	b.n	8008bde <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd0:	e008      	b.n	8008be4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd6:	e005      	b.n	8008be4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008bd8:	2302      	movs	r3, #2
 8008bda:	73fb      	strb	r3, [r7, #15]
    break;
 8008bdc:	e002      	b.n	8008be4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008bde:	2301      	movs	r3, #1
 8008be0:	73fb      	strb	r3, [r7, #15]
    break;
 8008be2:	bf00      	nop
  }
  return  speed;
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b084      	sub	sp, #16
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7f9 fa39 	bl	800207c <HAL_HCD_ResetPort>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f000 f901 	bl	8008e18 <USBH_Get_USB_Status>
 8008c16:	4603      	mov	r3, r0
 8008c18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c36:	78fa      	ldrb	r2, [r7, #3]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7f9 fa41 	bl	80020c2 <HAL_HCD_HC_GetXferCount>
 8008c40:	4603      	mov	r3, r0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008c4a:	b590      	push	{r4, r7, lr}
 8008c4c:	b089      	sub	sp, #36	; 0x24
 8008c4e:	af04      	add	r7, sp, #16
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	4608      	mov	r0, r1
 8008c54:	4611      	mov	r1, r2
 8008c56:	461a      	mov	r2, r3
 8008c58:	4603      	mov	r3, r0
 8008c5a:	70fb      	strb	r3, [r7, #3]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	70bb      	strb	r3, [r7, #2]
 8008c60:	4613      	mov	r3, r2
 8008c62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c72:	787c      	ldrb	r4, [r7, #1]
 8008c74:	78ba      	ldrb	r2, [r7, #2]
 8008c76:	78f9      	ldrb	r1, [r7, #3]
 8008c78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c7a:	9302      	str	r3, [sp, #8]
 8008c7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	4623      	mov	r3, r4
 8008c8a:	f7f8 fe85 	bl	8001998 <HAL_HCD_HC_Init>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 f8bf 	bl	8008e18 <USBH_Get_USB_Status>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd90      	pop	{r4, r7, pc}

08008ca8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cc2:	78fa      	ldrb	r2, [r7, #3]
 8008cc4:	4611      	mov	r1, r2
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7f8 fefe 	bl	8001ac8 <HAL_HCD_HC_Halt>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 f8a0 	bl	8008e18 <USBH_Get_USB_Status>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008ce6:	b590      	push	{r4, r7, lr}
 8008ce8:	b089      	sub	sp, #36	; 0x24
 8008cea:	af04      	add	r7, sp, #16
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	4608      	mov	r0, r1
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	70fb      	strb	r3, [r7, #3]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	70bb      	strb	r3, [r7, #2]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008d0e:	787c      	ldrb	r4, [r7, #1]
 8008d10:	78ba      	ldrb	r2, [r7, #2]
 8008d12:	78f9      	ldrb	r1, [r7, #3]
 8008d14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008d18:	9303      	str	r3, [sp, #12]
 8008d1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008d1c:	9302      	str	r3, [sp, #8]
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	4623      	mov	r3, r4
 8008d2a:	f7f8 fef1 	bl	8001b10 <HAL_HCD_HC_SubmitRequest>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 f86f 	bl	8008e18 <USBH_Get_USB_Status>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd90      	pop	{r4, r7, pc}

08008d48 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d5a:	78fa      	ldrb	r2, [r7, #3]
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7f9 f99a 	bl	8002098 <HAL_HCD_HC_GetURBState>
 8008d64:	4603      	mov	r3, r0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b082      	sub	sp, #8
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	460b      	mov	r3, r1
 8008d78:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d103      	bne.n	8008d8c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008d84:	78fb      	ldrb	r3, [r7, #3]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 f872 	bl	8008e70 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008d8c:	20c8      	movs	r0, #200	; 0xc8
 8008d8e:	f7f8 fa7d 	bl	800128c <HAL_Delay>
  return USBH_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3708      	adds	r7, #8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	70fb      	strb	r3, [r7, #3]
 8008da8:	4613      	mov	r3, r2
 8008daa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008db2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008db4:	78fa      	ldrb	r2, [r7, #3]
 8008db6:	68f9      	ldr	r1, [r7, #12]
 8008db8:	4613      	mov	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	00db      	lsls	r3, r3, #3
 8008dc0:	440b      	add	r3, r1
 8008dc2:	333b      	adds	r3, #59	; 0x3b
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00a      	beq.n	8008de0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008dca:	78fa      	ldrb	r2, [r7, #3]
 8008dcc:	68f9      	ldr	r1, [r7, #12]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	00db      	lsls	r3, r3, #3
 8008dd6:	440b      	add	r3, r1
 8008dd8:	3350      	adds	r3, #80	; 0x50
 8008dda:	78ba      	ldrb	r2, [r7, #2]
 8008ddc:	701a      	strb	r2, [r3, #0]
 8008dde:	e009      	b.n	8008df4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008de0:	78fa      	ldrb	r2, [r7, #3]
 8008de2:	68f9      	ldr	r1, [r7, #12]
 8008de4:	4613      	mov	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	440b      	add	r3, r1
 8008dee:	3351      	adds	r3, #81	; 0x51
 8008df0:	78ba      	ldrb	r2, [r7, #2]
 8008df2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7f8 fa3e 	bl	800128c <HAL_Delay>
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e26:	79fb      	ldrb	r3, [r7, #7]
 8008e28:	2b03      	cmp	r3, #3
 8008e2a:	d817      	bhi.n	8008e5c <USBH_Get_USB_Status+0x44>
 8008e2c:	a201      	add	r2, pc, #4	; (adr r2, 8008e34 <USBH_Get_USB_Status+0x1c>)
 8008e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e32:	bf00      	nop
 8008e34:	08008e45 	.word	0x08008e45
 8008e38:	08008e4b 	.word	0x08008e4b
 8008e3c:	08008e51 	.word	0x08008e51
 8008e40:	08008e57 	.word	0x08008e57
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73fb      	strb	r3, [r7, #15]
    break;
 8008e48:	e00b      	b.n	8008e62 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e4e:	e008      	b.n	8008e62 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008e50:	2301      	movs	r3, #1
 8008e52:	73fb      	strb	r3, [r7, #15]
    break;
 8008e54:	e005      	b.n	8008e62 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008e56:	2302      	movs	r3, #2
 8008e58:	73fb      	strb	r3, [r7, #15]
    break;
 8008e5a:	e002      	b.n	8008e62 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e60:	bf00      	nop
  }
  return usb_status;
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	4603      	mov	r3, r0
 8008e78:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008e7a:	79fb      	ldrb	r3, [r7, #7]
 8008e7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008e7e:	79fb      	ldrb	r3, [r7, #7]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d102      	bne.n	8008e8a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008e84:	2301      	movs	r3, #1
 8008e86:	73fb      	strb	r3, [r7, #15]
 8008e88:	e001      	b.n	8008e8e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
 8008e90:	461a      	mov	r2, r3
 8008e92:	2101      	movs	r1, #1
 8008e94:	4803      	ldr	r0, [pc, #12]	; (8008ea4 <MX_DriverVbusFS+0x34>)
 8008e96:	f7f8 fce9 	bl	800186c <HAL_GPIO_WritePin>
}
 8008e9a:	bf00      	nop
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	40020800 	.word	0x40020800

08008ea8 <__errno>:
 8008ea8:	4b01      	ldr	r3, [pc, #4]	; (8008eb0 <__errno+0x8>)
 8008eaa:	6818      	ldr	r0, [r3, #0]
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	2000002c 	.word	0x2000002c

08008eb4 <__libc_init_array>:
 8008eb4:	b570      	push	{r4, r5, r6, lr}
 8008eb6:	4e0d      	ldr	r6, [pc, #52]	; (8008eec <__libc_init_array+0x38>)
 8008eb8:	4c0d      	ldr	r4, [pc, #52]	; (8008ef0 <__libc_init_array+0x3c>)
 8008eba:	1ba4      	subs	r4, r4, r6
 8008ebc:	10a4      	asrs	r4, r4, #2
 8008ebe:	2500      	movs	r5, #0
 8008ec0:	42a5      	cmp	r5, r4
 8008ec2:	d109      	bne.n	8008ed8 <__libc_init_array+0x24>
 8008ec4:	4e0b      	ldr	r6, [pc, #44]	; (8008ef4 <__libc_init_array+0x40>)
 8008ec6:	4c0c      	ldr	r4, [pc, #48]	; (8008ef8 <__libc_init_array+0x44>)
 8008ec8:	f000 fc36 	bl	8009738 <_init>
 8008ecc:	1ba4      	subs	r4, r4, r6
 8008ece:	10a4      	asrs	r4, r4, #2
 8008ed0:	2500      	movs	r5, #0
 8008ed2:	42a5      	cmp	r5, r4
 8008ed4:	d105      	bne.n	8008ee2 <__libc_init_array+0x2e>
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}
 8008ed8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008edc:	4798      	blx	r3
 8008ede:	3501      	adds	r5, #1
 8008ee0:	e7ee      	b.n	8008ec0 <__libc_init_array+0xc>
 8008ee2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ee6:	4798      	blx	r3
 8008ee8:	3501      	adds	r5, #1
 8008eea:	e7f2      	b.n	8008ed2 <__libc_init_array+0x1e>
 8008eec:	08009834 	.word	0x08009834
 8008ef0:	08009834 	.word	0x08009834
 8008ef4:	08009834 	.word	0x08009834
 8008ef8:	08009838 	.word	0x08009838

08008efc <malloc>:
 8008efc:	4b02      	ldr	r3, [pc, #8]	; (8008f08 <malloc+0xc>)
 8008efe:	4601      	mov	r1, r0
 8008f00:	6818      	ldr	r0, [r3, #0]
 8008f02:	f000 b861 	b.w	8008fc8 <_malloc_r>
 8008f06:	bf00      	nop
 8008f08:	2000002c 	.word	0x2000002c

08008f0c <free>:
 8008f0c:	4b02      	ldr	r3, [pc, #8]	; (8008f18 <free+0xc>)
 8008f0e:	4601      	mov	r1, r0
 8008f10:	6818      	ldr	r0, [r3, #0]
 8008f12:	f000 b80b 	b.w	8008f2c <_free_r>
 8008f16:	bf00      	nop
 8008f18:	2000002c 	.word	0x2000002c

08008f1c <memset>:
 8008f1c:	4402      	add	r2, r0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d100      	bne.n	8008f26 <memset+0xa>
 8008f24:	4770      	bx	lr
 8008f26:	f803 1b01 	strb.w	r1, [r3], #1
 8008f2a:	e7f9      	b.n	8008f20 <memset+0x4>

08008f2c <_free_r>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	4605      	mov	r5, r0
 8008f30:	2900      	cmp	r1, #0
 8008f32:	d045      	beq.n	8008fc0 <_free_r+0x94>
 8008f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f38:	1f0c      	subs	r4, r1, #4
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	bfb8      	it	lt
 8008f3e:	18e4      	addlt	r4, r4, r3
 8008f40:	f000 f8cc 	bl	80090dc <__malloc_lock>
 8008f44:	4a1f      	ldr	r2, [pc, #124]	; (8008fc4 <_free_r+0x98>)
 8008f46:	6813      	ldr	r3, [r2, #0]
 8008f48:	4610      	mov	r0, r2
 8008f4a:	b933      	cbnz	r3, 8008f5a <_free_r+0x2e>
 8008f4c:	6063      	str	r3, [r4, #4]
 8008f4e:	6014      	str	r4, [r2, #0]
 8008f50:	4628      	mov	r0, r5
 8008f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f56:	f000 b8c2 	b.w	80090de <__malloc_unlock>
 8008f5a:	42a3      	cmp	r3, r4
 8008f5c:	d90c      	bls.n	8008f78 <_free_r+0x4c>
 8008f5e:	6821      	ldr	r1, [r4, #0]
 8008f60:	1862      	adds	r2, r4, r1
 8008f62:	4293      	cmp	r3, r2
 8008f64:	bf04      	itt	eq
 8008f66:	681a      	ldreq	r2, [r3, #0]
 8008f68:	685b      	ldreq	r3, [r3, #4]
 8008f6a:	6063      	str	r3, [r4, #4]
 8008f6c:	bf04      	itt	eq
 8008f6e:	1852      	addeq	r2, r2, r1
 8008f70:	6022      	streq	r2, [r4, #0]
 8008f72:	6004      	str	r4, [r0, #0]
 8008f74:	e7ec      	b.n	8008f50 <_free_r+0x24>
 8008f76:	4613      	mov	r3, r2
 8008f78:	685a      	ldr	r2, [r3, #4]
 8008f7a:	b10a      	cbz	r2, 8008f80 <_free_r+0x54>
 8008f7c:	42a2      	cmp	r2, r4
 8008f7e:	d9fa      	bls.n	8008f76 <_free_r+0x4a>
 8008f80:	6819      	ldr	r1, [r3, #0]
 8008f82:	1858      	adds	r0, r3, r1
 8008f84:	42a0      	cmp	r0, r4
 8008f86:	d10b      	bne.n	8008fa0 <_free_r+0x74>
 8008f88:	6820      	ldr	r0, [r4, #0]
 8008f8a:	4401      	add	r1, r0
 8008f8c:	1858      	adds	r0, r3, r1
 8008f8e:	4282      	cmp	r2, r0
 8008f90:	6019      	str	r1, [r3, #0]
 8008f92:	d1dd      	bne.n	8008f50 <_free_r+0x24>
 8008f94:	6810      	ldr	r0, [r2, #0]
 8008f96:	6852      	ldr	r2, [r2, #4]
 8008f98:	605a      	str	r2, [r3, #4]
 8008f9a:	4401      	add	r1, r0
 8008f9c:	6019      	str	r1, [r3, #0]
 8008f9e:	e7d7      	b.n	8008f50 <_free_r+0x24>
 8008fa0:	d902      	bls.n	8008fa8 <_free_r+0x7c>
 8008fa2:	230c      	movs	r3, #12
 8008fa4:	602b      	str	r3, [r5, #0]
 8008fa6:	e7d3      	b.n	8008f50 <_free_r+0x24>
 8008fa8:	6820      	ldr	r0, [r4, #0]
 8008faa:	1821      	adds	r1, r4, r0
 8008fac:	428a      	cmp	r2, r1
 8008fae:	bf04      	itt	eq
 8008fb0:	6811      	ldreq	r1, [r2, #0]
 8008fb2:	6852      	ldreq	r2, [r2, #4]
 8008fb4:	6062      	str	r2, [r4, #4]
 8008fb6:	bf04      	itt	eq
 8008fb8:	1809      	addeq	r1, r1, r0
 8008fba:	6021      	streq	r1, [r4, #0]
 8008fbc:	605c      	str	r4, [r3, #4]
 8008fbe:	e7c7      	b.n	8008f50 <_free_r+0x24>
 8008fc0:	bd38      	pop	{r3, r4, r5, pc}
 8008fc2:	bf00      	nop
 8008fc4:	200000c0 	.word	0x200000c0

08008fc8 <_malloc_r>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	1ccd      	adds	r5, r1, #3
 8008fcc:	f025 0503 	bic.w	r5, r5, #3
 8008fd0:	3508      	adds	r5, #8
 8008fd2:	2d0c      	cmp	r5, #12
 8008fd4:	bf38      	it	cc
 8008fd6:	250c      	movcc	r5, #12
 8008fd8:	2d00      	cmp	r5, #0
 8008fda:	4606      	mov	r6, r0
 8008fdc:	db01      	blt.n	8008fe2 <_malloc_r+0x1a>
 8008fde:	42a9      	cmp	r1, r5
 8008fe0:	d903      	bls.n	8008fea <_malloc_r+0x22>
 8008fe2:	230c      	movs	r3, #12
 8008fe4:	6033      	str	r3, [r6, #0]
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	bd70      	pop	{r4, r5, r6, pc}
 8008fea:	f000 f877 	bl	80090dc <__malloc_lock>
 8008fee:	4a21      	ldr	r2, [pc, #132]	; (8009074 <_malloc_r+0xac>)
 8008ff0:	6814      	ldr	r4, [r2, #0]
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	b991      	cbnz	r1, 800901c <_malloc_r+0x54>
 8008ff6:	4c20      	ldr	r4, [pc, #128]	; (8009078 <_malloc_r+0xb0>)
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	b91b      	cbnz	r3, 8009004 <_malloc_r+0x3c>
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f000 f83d 	bl	800907c <_sbrk_r>
 8009002:	6020      	str	r0, [r4, #0]
 8009004:	4629      	mov	r1, r5
 8009006:	4630      	mov	r0, r6
 8009008:	f000 f838 	bl	800907c <_sbrk_r>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	d124      	bne.n	800905a <_malloc_r+0x92>
 8009010:	230c      	movs	r3, #12
 8009012:	6033      	str	r3, [r6, #0]
 8009014:	4630      	mov	r0, r6
 8009016:	f000 f862 	bl	80090de <__malloc_unlock>
 800901a:	e7e4      	b.n	8008fe6 <_malloc_r+0x1e>
 800901c:	680b      	ldr	r3, [r1, #0]
 800901e:	1b5b      	subs	r3, r3, r5
 8009020:	d418      	bmi.n	8009054 <_malloc_r+0x8c>
 8009022:	2b0b      	cmp	r3, #11
 8009024:	d90f      	bls.n	8009046 <_malloc_r+0x7e>
 8009026:	600b      	str	r3, [r1, #0]
 8009028:	50cd      	str	r5, [r1, r3]
 800902a:	18cc      	adds	r4, r1, r3
 800902c:	4630      	mov	r0, r6
 800902e:	f000 f856 	bl	80090de <__malloc_unlock>
 8009032:	f104 000b 	add.w	r0, r4, #11
 8009036:	1d23      	adds	r3, r4, #4
 8009038:	f020 0007 	bic.w	r0, r0, #7
 800903c:	1ac3      	subs	r3, r0, r3
 800903e:	d0d3      	beq.n	8008fe8 <_malloc_r+0x20>
 8009040:	425a      	negs	r2, r3
 8009042:	50e2      	str	r2, [r4, r3]
 8009044:	e7d0      	b.n	8008fe8 <_malloc_r+0x20>
 8009046:	428c      	cmp	r4, r1
 8009048:	684b      	ldr	r3, [r1, #4]
 800904a:	bf16      	itet	ne
 800904c:	6063      	strne	r3, [r4, #4]
 800904e:	6013      	streq	r3, [r2, #0]
 8009050:	460c      	movne	r4, r1
 8009052:	e7eb      	b.n	800902c <_malloc_r+0x64>
 8009054:	460c      	mov	r4, r1
 8009056:	6849      	ldr	r1, [r1, #4]
 8009058:	e7cc      	b.n	8008ff4 <_malloc_r+0x2c>
 800905a:	1cc4      	adds	r4, r0, #3
 800905c:	f024 0403 	bic.w	r4, r4, #3
 8009060:	42a0      	cmp	r0, r4
 8009062:	d005      	beq.n	8009070 <_malloc_r+0xa8>
 8009064:	1a21      	subs	r1, r4, r0
 8009066:	4630      	mov	r0, r6
 8009068:	f000 f808 	bl	800907c <_sbrk_r>
 800906c:	3001      	adds	r0, #1
 800906e:	d0cf      	beq.n	8009010 <_malloc_r+0x48>
 8009070:	6025      	str	r5, [r4, #0]
 8009072:	e7db      	b.n	800902c <_malloc_r+0x64>
 8009074:	200000c0 	.word	0x200000c0
 8009078:	200000c4 	.word	0x200000c4

0800907c <_sbrk_r>:
 800907c:	b538      	push	{r3, r4, r5, lr}
 800907e:	4c06      	ldr	r4, [pc, #24]	; (8009098 <_sbrk_r+0x1c>)
 8009080:	2300      	movs	r3, #0
 8009082:	4605      	mov	r5, r0
 8009084:	4608      	mov	r0, r1
 8009086:	6023      	str	r3, [r4, #0]
 8009088:	f7f8 f818 	bl	80010bc <_sbrk>
 800908c:	1c43      	adds	r3, r0, #1
 800908e:	d102      	bne.n	8009096 <_sbrk_r+0x1a>
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	b103      	cbz	r3, 8009096 <_sbrk_r+0x1a>
 8009094:	602b      	str	r3, [r5, #0]
 8009096:	bd38      	pop	{r3, r4, r5, pc}
 8009098:	2000098c 	.word	0x2000098c

0800909c <siprintf>:
 800909c:	b40e      	push	{r1, r2, r3}
 800909e:	b500      	push	{lr}
 80090a0:	b09c      	sub	sp, #112	; 0x70
 80090a2:	ab1d      	add	r3, sp, #116	; 0x74
 80090a4:	9002      	str	r0, [sp, #8]
 80090a6:	9006      	str	r0, [sp, #24]
 80090a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090ac:	4809      	ldr	r0, [pc, #36]	; (80090d4 <siprintf+0x38>)
 80090ae:	9107      	str	r1, [sp, #28]
 80090b0:	9104      	str	r1, [sp, #16]
 80090b2:	4909      	ldr	r1, [pc, #36]	; (80090d8 <siprintf+0x3c>)
 80090b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090b8:	9105      	str	r1, [sp, #20]
 80090ba:	6800      	ldr	r0, [r0, #0]
 80090bc:	9301      	str	r3, [sp, #4]
 80090be:	a902      	add	r1, sp, #8
 80090c0:	f000 f868 	bl	8009194 <_svfiprintf_r>
 80090c4:	9b02      	ldr	r3, [sp, #8]
 80090c6:	2200      	movs	r2, #0
 80090c8:	701a      	strb	r2, [r3, #0]
 80090ca:	b01c      	add	sp, #112	; 0x70
 80090cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80090d0:	b003      	add	sp, #12
 80090d2:	4770      	bx	lr
 80090d4:	2000002c 	.word	0x2000002c
 80090d8:	ffff0208 	.word	0xffff0208

080090dc <__malloc_lock>:
 80090dc:	4770      	bx	lr

080090de <__malloc_unlock>:
 80090de:	4770      	bx	lr

080090e0 <__ssputs_r>:
 80090e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e4:	688e      	ldr	r6, [r1, #8]
 80090e6:	429e      	cmp	r6, r3
 80090e8:	4682      	mov	sl, r0
 80090ea:	460c      	mov	r4, r1
 80090ec:	4690      	mov	r8, r2
 80090ee:	4699      	mov	r9, r3
 80090f0:	d837      	bhi.n	8009162 <__ssputs_r+0x82>
 80090f2:	898a      	ldrh	r2, [r1, #12]
 80090f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090f8:	d031      	beq.n	800915e <__ssputs_r+0x7e>
 80090fa:	6825      	ldr	r5, [r4, #0]
 80090fc:	6909      	ldr	r1, [r1, #16]
 80090fe:	1a6f      	subs	r7, r5, r1
 8009100:	6965      	ldr	r5, [r4, #20]
 8009102:	2302      	movs	r3, #2
 8009104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009108:	fb95 f5f3 	sdiv	r5, r5, r3
 800910c:	f109 0301 	add.w	r3, r9, #1
 8009110:	443b      	add	r3, r7
 8009112:	429d      	cmp	r5, r3
 8009114:	bf38      	it	cc
 8009116:	461d      	movcc	r5, r3
 8009118:	0553      	lsls	r3, r2, #21
 800911a:	d530      	bpl.n	800917e <__ssputs_r+0x9e>
 800911c:	4629      	mov	r1, r5
 800911e:	f7ff ff53 	bl	8008fc8 <_malloc_r>
 8009122:	4606      	mov	r6, r0
 8009124:	b950      	cbnz	r0, 800913c <__ssputs_r+0x5c>
 8009126:	230c      	movs	r3, #12
 8009128:	f8ca 3000 	str.w	r3, [sl]
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009132:	81a3      	strh	r3, [r4, #12]
 8009134:	f04f 30ff 	mov.w	r0, #4294967295
 8009138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800913c:	463a      	mov	r2, r7
 800913e:	6921      	ldr	r1, [r4, #16]
 8009140:	f000 faa8 	bl	8009694 <memcpy>
 8009144:	89a3      	ldrh	r3, [r4, #12]
 8009146:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800914a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800914e:	81a3      	strh	r3, [r4, #12]
 8009150:	6126      	str	r6, [r4, #16]
 8009152:	6165      	str	r5, [r4, #20]
 8009154:	443e      	add	r6, r7
 8009156:	1bed      	subs	r5, r5, r7
 8009158:	6026      	str	r6, [r4, #0]
 800915a:	60a5      	str	r5, [r4, #8]
 800915c:	464e      	mov	r6, r9
 800915e:	454e      	cmp	r6, r9
 8009160:	d900      	bls.n	8009164 <__ssputs_r+0x84>
 8009162:	464e      	mov	r6, r9
 8009164:	4632      	mov	r2, r6
 8009166:	4641      	mov	r1, r8
 8009168:	6820      	ldr	r0, [r4, #0]
 800916a:	f000 fa9e 	bl	80096aa <memmove>
 800916e:	68a3      	ldr	r3, [r4, #8]
 8009170:	1b9b      	subs	r3, r3, r6
 8009172:	60a3      	str	r3, [r4, #8]
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	441e      	add	r6, r3
 8009178:	6026      	str	r6, [r4, #0]
 800917a:	2000      	movs	r0, #0
 800917c:	e7dc      	b.n	8009138 <__ssputs_r+0x58>
 800917e:	462a      	mov	r2, r5
 8009180:	f000 faac 	bl	80096dc <_realloc_r>
 8009184:	4606      	mov	r6, r0
 8009186:	2800      	cmp	r0, #0
 8009188:	d1e2      	bne.n	8009150 <__ssputs_r+0x70>
 800918a:	6921      	ldr	r1, [r4, #16]
 800918c:	4650      	mov	r0, sl
 800918e:	f7ff fecd 	bl	8008f2c <_free_r>
 8009192:	e7c8      	b.n	8009126 <__ssputs_r+0x46>

08009194 <_svfiprintf_r>:
 8009194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009198:	461d      	mov	r5, r3
 800919a:	898b      	ldrh	r3, [r1, #12]
 800919c:	061f      	lsls	r7, r3, #24
 800919e:	b09d      	sub	sp, #116	; 0x74
 80091a0:	4680      	mov	r8, r0
 80091a2:	460c      	mov	r4, r1
 80091a4:	4616      	mov	r6, r2
 80091a6:	d50f      	bpl.n	80091c8 <_svfiprintf_r+0x34>
 80091a8:	690b      	ldr	r3, [r1, #16]
 80091aa:	b96b      	cbnz	r3, 80091c8 <_svfiprintf_r+0x34>
 80091ac:	2140      	movs	r1, #64	; 0x40
 80091ae:	f7ff ff0b 	bl	8008fc8 <_malloc_r>
 80091b2:	6020      	str	r0, [r4, #0]
 80091b4:	6120      	str	r0, [r4, #16]
 80091b6:	b928      	cbnz	r0, 80091c4 <_svfiprintf_r+0x30>
 80091b8:	230c      	movs	r3, #12
 80091ba:	f8c8 3000 	str.w	r3, [r8]
 80091be:	f04f 30ff 	mov.w	r0, #4294967295
 80091c2:	e0c8      	b.n	8009356 <_svfiprintf_r+0x1c2>
 80091c4:	2340      	movs	r3, #64	; 0x40
 80091c6:	6163      	str	r3, [r4, #20]
 80091c8:	2300      	movs	r3, #0
 80091ca:	9309      	str	r3, [sp, #36]	; 0x24
 80091cc:	2320      	movs	r3, #32
 80091ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091d2:	2330      	movs	r3, #48	; 0x30
 80091d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091d8:	9503      	str	r5, [sp, #12]
 80091da:	f04f 0b01 	mov.w	fp, #1
 80091de:	4637      	mov	r7, r6
 80091e0:	463d      	mov	r5, r7
 80091e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80091e6:	b10b      	cbz	r3, 80091ec <_svfiprintf_r+0x58>
 80091e8:	2b25      	cmp	r3, #37	; 0x25
 80091ea:	d13e      	bne.n	800926a <_svfiprintf_r+0xd6>
 80091ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80091f0:	d00b      	beq.n	800920a <_svfiprintf_r+0x76>
 80091f2:	4653      	mov	r3, sl
 80091f4:	4632      	mov	r2, r6
 80091f6:	4621      	mov	r1, r4
 80091f8:	4640      	mov	r0, r8
 80091fa:	f7ff ff71 	bl	80090e0 <__ssputs_r>
 80091fe:	3001      	adds	r0, #1
 8009200:	f000 80a4 	beq.w	800934c <_svfiprintf_r+0x1b8>
 8009204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009206:	4453      	add	r3, sl
 8009208:	9309      	str	r3, [sp, #36]	; 0x24
 800920a:	783b      	ldrb	r3, [r7, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	f000 809d 	beq.w	800934c <_svfiprintf_r+0x1b8>
 8009212:	2300      	movs	r3, #0
 8009214:	f04f 32ff 	mov.w	r2, #4294967295
 8009218:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800921c:	9304      	str	r3, [sp, #16]
 800921e:	9307      	str	r3, [sp, #28]
 8009220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009224:	931a      	str	r3, [sp, #104]	; 0x68
 8009226:	462f      	mov	r7, r5
 8009228:	2205      	movs	r2, #5
 800922a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800922e:	4850      	ldr	r0, [pc, #320]	; (8009370 <_svfiprintf_r+0x1dc>)
 8009230:	f7f6 ffce 	bl	80001d0 <memchr>
 8009234:	9b04      	ldr	r3, [sp, #16]
 8009236:	b9d0      	cbnz	r0, 800926e <_svfiprintf_r+0xda>
 8009238:	06d9      	lsls	r1, r3, #27
 800923a:	bf44      	itt	mi
 800923c:	2220      	movmi	r2, #32
 800923e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009242:	071a      	lsls	r2, r3, #28
 8009244:	bf44      	itt	mi
 8009246:	222b      	movmi	r2, #43	; 0x2b
 8009248:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800924c:	782a      	ldrb	r2, [r5, #0]
 800924e:	2a2a      	cmp	r2, #42	; 0x2a
 8009250:	d015      	beq.n	800927e <_svfiprintf_r+0xea>
 8009252:	9a07      	ldr	r2, [sp, #28]
 8009254:	462f      	mov	r7, r5
 8009256:	2000      	movs	r0, #0
 8009258:	250a      	movs	r5, #10
 800925a:	4639      	mov	r1, r7
 800925c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009260:	3b30      	subs	r3, #48	; 0x30
 8009262:	2b09      	cmp	r3, #9
 8009264:	d94d      	bls.n	8009302 <_svfiprintf_r+0x16e>
 8009266:	b1b8      	cbz	r0, 8009298 <_svfiprintf_r+0x104>
 8009268:	e00f      	b.n	800928a <_svfiprintf_r+0xf6>
 800926a:	462f      	mov	r7, r5
 800926c:	e7b8      	b.n	80091e0 <_svfiprintf_r+0x4c>
 800926e:	4a40      	ldr	r2, [pc, #256]	; (8009370 <_svfiprintf_r+0x1dc>)
 8009270:	1a80      	subs	r0, r0, r2
 8009272:	fa0b f000 	lsl.w	r0, fp, r0
 8009276:	4318      	orrs	r0, r3
 8009278:	9004      	str	r0, [sp, #16]
 800927a:	463d      	mov	r5, r7
 800927c:	e7d3      	b.n	8009226 <_svfiprintf_r+0x92>
 800927e:	9a03      	ldr	r2, [sp, #12]
 8009280:	1d11      	adds	r1, r2, #4
 8009282:	6812      	ldr	r2, [r2, #0]
 8009284:	9103      	str	r1, [sp, #12]
 8009286:	2a00      	cmp	r2, #0
 8009288:	db01      	blt.n	800928e <_svfiprintf_r+0xfa>
 800928a:	9207      	str	r2, [sp, #28]
 800928c:	e004      	b.n	8009298 <_svfiprintf_r+0x104>
 800928e:	4252      	negs	r2, r2
 8009290:	f043 0302 	orr.w	r3, r3, #2
 8009294:	9207      	str	r2, [sp, #28]
 8009296:	9304      	str	r3, [sp, #16]
 8009298:	783b      	ldrb	r3, [r7, #0]
 800929a:	2b2e      	cmp	r3, #46	; 0x2e
 800929c:	d10c      	bne.n	80092b8 <_svfiprintf_r+0x124>
 800929e:	787b      	ldrb	r3, [r7, #1]
 80092a0:	2b2a      	cmp	r3, #42	; 0x2a
 80092a2:	d133      	bne.n	800930c <_svfiprintf_r+0x178>
 80092a4:	9b03      	ldr	r3, [sp, #12]
 80092a6:	1d1a      	adds	r2, r3, #4
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	9203      	str	r2, [sp, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	bfb8      	it	lt
 80092b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80092b4:	3702      	adds	r7, #2
 80092b6:	9305      	str	r3, [sp, #20]
 80092b8:	4d2e      	ldr	r5, [pc, #184]	; (8009374 <_svfiprintf_r+0x1e0>)
 80092ba:	7839      	ldrb	r1, [r7, #0]
 80092bc:	2203      	movs	r2, #3
 80092be:	4628      	mov	r0, r5
 80092c0:	f7f6 ff86 	bl	80001d0 <memchr>
 80092c4:	b138      	cbz	r0, 80092d6 <_svfiprintf_r+0x142>
 80092c6:	2340      	movs	r3, #64	; 0x40
 80092c8:	1b40      	subs	r0, r0, r5
 80092ca:	fa03 f000 	lsl.w	r0, r3, r0
 80092ce:	9b04      	ldr	r3, [sp, #16]
 80092d0:	4303      	orrs	r3, r0
 80092d2:	3701      	adds	r7, #1
 80092d4:	9304      	str	r3, [sp, #16]
 80092d6:	7839      	ldrb	r1, [r7, #0]
 80092d8:	4827      	ldr	r0, [pc, #156]	; (8009378 <_svfiprintf_r+0x1e4>)
 80092da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092de:	2206      	movs	r2, #6
 80092e0:	1c7e      	adds	r6, r7, #1
 80092e2:	f7f6 ff75 	bl	80001d0 <memchr>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d038      	beq.n	800935c <_svfiprintf_r+0x1c8>
 80092ea:	4b24      	ldr	r3, [pc, #144]	; (800937c <_svfiprintf_r+0x1e8>)
 80092ec:	bb13      	cbnz	r3, 8009334 <_svfiprintf_r+0x1a0>
 80092ee:	9b03      	ldr	r3, [sp, #12]
 80092f0:	3307      	adds	r3, #7
 80092f2:	f023 0307 	bic.w	r3, r3, #7
 80092f6:	3308      	adds	r3, #8
 80092f8:	9303      	str	r3, [sp, #12]
 80092fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092fc:	444b      	add	r3, r9
 80092fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009300:	e76d      	b.n	80091de <_svfiprintf_r+0x4a>
 8009302:	fb05 3202 	mla	r2, r5, r2, r3
 8009306:	2001      	movs	r0, #1
 8009308:	460f      	mov	r7, r1
 800930a:	e7a6      	b.n	800925a <_svfiprintf_r+0xc6>
 800930c:	2300      	movs	r3, #0
 800930e:	3701      	adds	r7, #1
 8009310:	9305      	str	r3, [sp, #20]
 8009312:	4619      	mov	r1, r3
 8009314:	250a      	movs	r5, #10
 8009316:	4638      	mov	r0, r7
 8009318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800931c:	3a30      	subs	r2, #48	; 0x30
 800931e:	2a09      	cmp	r2, #9
 8009320:	d903      	bls.n	800932a <_svfiprintf_r+0x196>
 8009322:	2b00      	cmp	r3, #0
 8009324:	d0c8      	beq.n	80092b8 <_svfiprintf_r+0x124>
 8009326:	9105      	str	r1, [sp, #20]
 8009328:	e7c6      	b.n	80092b8 <_svfiprintf_r+0x124>
 800932a:	fb05 2101 	mla	r1, r5, r1, r2
 800932e:	2301      	movs	r3, #1
 8009330:	4607      	mov	r7, r0
 8009332:	e7f0      	b.n	8009316 <_svfiprintf_r+0x182>
 8009334:	ab03      	add	r3, sp, #12
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	4622      	mov	r2, r4
 800933a:	4b11      	ldr	r3, [pc, #68]	; (8009380 <_svfiprintf_r+0x1ec>)
 800933c:	a904      	add	r1, sp, #16
 800933e:	4640      	mov	r0, r8
 8009340:	f3af 8000 	nop.w
 8009344:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009348:	4681      	mov	r9, r0
 800934a:	d1d6      	bne.n	80092fa <_svfiprintf_r+0x166>
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	065b      	lsls	r3, r3, #25
 8009350:	f53f af35 	bmi.w	80091be <_svfiprintf_r+0x2a>
 8009354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009356:	b01d      	add	sp, #116	; 0x74
 8009358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800935c:	ab03      	add	r3, sp, #12
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	4622      	mov	r2, r4
 8009362:	4b07      	ldr	r3, [pc, #28]	; (8009380 <_svfiprintf_r+0x1ec>)
 8009364:	a904      	add	r1, sp, #16
 8009366:	4640      	mov	r0, r8
 8009368:	f000 f882 	bl	8009470 <_printf_i>
 800936c:	e7ea      	b.n	8009344 <_svfiprintf_r+0x1b0>
 800936e:	bf00      	nop
 8009370:	080097f8 	.word	0x080097f8
 8009374:	080097fe 	.word	0x080097fe
 8009378:	08009802 	.word	0x08009802
 800937c:	00000000 	.word	0x00000000
 8009380:	080090e1 	.word	0x080090e1

08009384 <_printf_common>:
 8009384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009388:	4691      	mov	r9, r2
 800938a:	461f      	mov	r7, r3
 800938c:	688a      	ldr	r2, [r1, #8]
 800938e:	690b      	ldr	r3, [r1, #16]
 8009390:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009394:	4293      	cmp	r3, r2
 8009396:	bfb8      	it	lt
 8009398:	4613      	movlt	r3, r2
 800939a:	f8c9 3000 	str.w	r3, [r9]
 800939e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093a2:	4606      	mov	r6, r0
 80093a4:	460c      	mov	r4, r1
 80093a6:	b112      	cbz	r2, 80093ae <_printf_common+0x2a>
 80093a8:	3301      	adds	r3, #1
 80093aa:	f8c9 3000 	str.w	r3, [r9]
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	0699      	lsls	r1, r3, #26
 80093b2:	bf42      	ittt	mi
 80093b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80093b8:	3302      	addmi	r3, #2
 80093ba:	f8c9 3000 	strmi.w	r3, [r9]
 80093be:	6825      	ldr	r5, [r4, #0]
 80093c0:	f015 0506 	ands.w	r5, r5, #6
 80093c4:	d107      	bne.n	80093d6 <_printf_common+0x52>
 80093c6:	f104 0a19 	add.w	sl, r4, #25
 80093ca:	68e3      	ldr	r3, [r4, #12]
 80093cc:	f8d9 2000 	ldr.w	r2, [r9]
 80093d0:	1a9b      	subs	r3, r3, r2
 80093d2:	42ab      	cmp	r3, r5
 80093d4:	dc28      	bgt.n	8009428 <_printf_common+0xa4>
 80093d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80093da:	6822      	ldr	r2, [r4, #0]
 80093dc:	3300      	adds	r3, #0
 80093de:	bf18      	it	ne
 80093e0:	2301      	movne	r3, #1
 80093e2:	0692      	lsls	r2, r2, #26
 80093e4:	d42d      	bmi.n	8009442 <_printf_common+0xbe>
 80093e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093ea:	4639      	mov	r1, r7
 80093ec:	4630      	mov	r0, r6
 80093ee:	47c0      	blx	r8
 80093f0:	3001      	adds	r0, #1
 80093f2:	d020      	beq.n	8009436 <_printf_common+0xb2>
 80093f4:	6823      	ldr	r3, [r4, #0]
 80093f6:	68e5      	ldr	r5, [r4, #12]
 80093f8:	f8d9 2000 	ldr.w	r2, [r9]
 80093fc:	f003 0306 	and.w	r3, r3, #6
 8009400:	2b04      	cmp	r3, #4
 8009402:	bf08      	it	eq
 8009404:	1aad      	subeq	r5, r5, r2
 8009406:	68a3      	ldr	r3, [r4, #8]
 8009408:	6922      	ldr	r2, [r4, #16]
 800940a:	bf0c      	ite	eq
 800940c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009410:	2500      	movne	r5, #0
 8009412:	4293      	cmp	r3, r2
 8009414:	bfc4      	itt	gt
 8009416:	1a9b      	subgt	r3, r3, r2
 8009418:	18ed      	addgt	r5, r5, r3
 800941a:	f04f 0900 	mov.w	r9, #0
 800941e:	341a      	adds	r4, #26
 8009420:	454d      	cmp	r5, r9
 8009422:	d11a      	bne.n	800945a <_printf_common+0xd6>
 8009424:	2000      	movs	r0, #0
 8009426:	e008      	b.n	800943a <_printf_common+0xb6>
 8009428:	2301      	movs	r3, #1
 800942a:	4652      	mov	r2, sl
 800942c:	4639      	mov	r1, r7
 800942e:	4630      	mov	r0, r6
 8009430:	47c0      	blx	r8
 8009432:	3001      	adds	r0, #1
 8009434:	d103      	bne.n	800943e <_printf_common+0xba>
 8009436:	f04f 30ff 	mov.w	r0, #4294967295
 800943a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943e:	3501      	adds	r5, #1
 8009440:	e7c3      	b.n	80093ca <_printf_common+0x46>
 8009442:	18e1      	adds	r1, r4, r3
 8009444:	1c5a      	adds	r2, r3, #1
 8009446:	2030      	movs	r0, #48	; 0x30
 8009448:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800944c:	4422      	add	r2, r4
 800944e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009452:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009456:	3302      	adds	r3, #2
 8009458:	e7c5      	b.n	80093e6 <_printf_common+0x62>
 800945a:	2301      	movs	r3, #1
 800945c:	4622      	mov	r2, r4
 800945e:	4639      	mov	r1, r7
 8009460:	4630      	mov	r0, r6
 8009462:	47c0      	blx	r8
 8009464:	3001      	adds	r0, #1
 8009466:	d0e6      	beq.n	8009436 <_printf_common+0xb2>
 8009468:	f109 0901 	add.w	r9, r9, #1
 800946c:	e7d8      	b.n	8009420 <_printf_common+0x9c>
	...

08009470 <_printf_i>:
 8009470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009474:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009478:	460c      	mov	r4, r1
 800947a:	7e09      	ldrb	r1, [r1, #24]
 800947c:	b085      	sub	sp, #20
 800947e:	296e      	cmp	r1, #110	; 0x6e
 8009480:	4617      	mov	r7, r2
 8009482:	4606      	mov	r6, r0
 8009484:	4698      	mov	r8, r3
 8009486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009488:	f000 80b3 	beq.w	80095f2 <_printf_i+0x182>
 800948c:	d822      	bhi.n	80094d4 <_printf_i+0x64>
 800948e:	2963      	cmp	r1, #99	; 0x63
 8009490:	d036      	beq.n	8009500 <_printf_i+0x90>
 8009492:	d80a      	bhi.n	80094aa <_printf_i+0x3a>
 8009494:	2900      	cmp	r1, #0
 8009496:	f000 80b9 	beq.w	800960c <_printf_i+0x19c>
 800949a:	2958      	cmp	r1, #88	; 0x58
 800949c:	f000 8083 	beq.w	80095a6 <_printf_i+0x136>
 80094a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80094a8:	e032      	b.n	8009510 <_printf_i+0xa0>
 80094aa:	2964      	cmp	r1, #100	; 0x64
 80094ac:	d001      	beq.n	80094b2 <_printf_i+0x42>
 80094ae:	2969      	cmp	r1, #105	; 0x69
 80094b0:	d1f6      	bne.n	80094a0 <_printf_i+0x30>
 80094b2:	6820      	ldr	r0, [r4, #0]
 80094b4:	6813      	ldr	r3, [r2, #0]
 80094b6:	0605      	lsls	r5, r0, #24
 80094b8:	f103 0104 	add.w	r1, r3, #4
 80094bc:	d52a      	bpl.n	8009514 <_printf_i+0xa4>
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6011      	str	r1, [r2, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	da03      	bge.n	80094ce <_printf_i+0x5e>
 80094c6:	222d      	movs	r2, #45	; 0x2d
 80094c8:	425b      	negs	r3, r3
 80094ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80094ce:	486f      	ldr	r0, [pc, #444]	; (800968c <_printf_i+0x21c>)
 80094d0:	220a      	movs	r2, #10
 80094d2:	e039      	b.n	8009548 <_printf_i+0xd8>
 80094d4:	2973      	cmp	r1, #115	; 0x73
 80094d6:	f000 809d 	beq.w	8009614 <_printf_i+0x1a4>
 80094da:	d808      	bhi.n	80094ee <_printf_i+0x7e>
 80094dc:	296f      	cmp	r1, #111	; 0x6f
 80094de:	d020      	beq.n	8009522 <_printf_i+0xb2>
 80094e0:	2970      	cmp	r1, #112	; 0x70
 80094e2:	d1dd      	bne.n	80094a0 <_printf_i+0x30>
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	f043 0320 	orr.w	r3, r3, #32
 80094ea:	6023      	str	r3, [r4, #0]
 80094ec:	e003      	b.n	80094f6 <_printf_i+0x86>
 80094ee:	2975      	cmp	r1, #117	; 0x75
 80094f0:	d017      	beq.n	8009522 <_printf_i+0xb2>
 80094f2:	2978      	cmp	r1, #120	; 0x78
 80094f4:	d1d4      	bne.n	80094a0 <_printf_i+0x30>
 80094f6:	2378      	movs	r3, #120	; 0x78
 80094f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094fc:	4864      	ldr	r0, [pc, #400]	; (8009690 <_printf_i+0x220>)
 80094fe:	e055      	b.n	80095ac <_printf_i+0x13c>
 8009500:	6813      	ldr	r3, [r2, #0]
 8009502:	1d19      	adds	r1, r3, #4
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6011      	str	r1, [r2, #0]
 8009508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800950c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009510:	2301      	movs	r3, #1
 8009512:	e08c      	b.n	800962e <_printf_i+0x1be>
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	6011      	str	r1, [r2, #0]
 8009518:	f010 0f40 	tst.w	r0, #64	; 0x40
 800951c:	bf18      	it	ne
 800951e:	b21b      	sxthne	r3, r3
 8009520:	e7cf      	b.n	80094c2 <_printf_i+0x52>
 8009522:	6813      	ldr	r3, [r2, #0]
 8009524:	6825      	ldr	r5, [r4, #0]
 8009526:	1d18      	adds	r0, r3, #4
 8009528:	6010      	str	r0, [r2, #0]
 800952a:	0628      	lsls	r0, r5, #24
 800952c:	d501      	bpl.n	8009532 <_printf_i+0xc2>
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	e002      	b.n	8009538 <_printf_i+0xc8>
 8009532:	0668      	lsls	r0, r5, #25
 8009534:	d5fb      	bpl.n	800952e <_printf_i+0xbe>
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	4854      	ldr	r0, [pc, #336]	; (800968c <_printf_i+0x21c>)
 800953a:	296f      	cmp	r1, #111	; 0x6f
 800953c:	bf14      	ite	ne
 800953e:	220a      	movne	r2, #10
 8009540:	2208      	moveq	r2, #8
 8009542:	2100      	movs	r1, #0
 8009544:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009548:	6865      	ldr	r5, [r4, #4]
 800954a:	60a5      	str	r5, [r4, #8]
 800954c:	2d00      	cmp	r5, #0
 800954e:	f2c0 8095 	blt.w	800967c <_printf_i+0x20c>
 8009552:	6821      	ldr	r1, [r4, #0]
 8009554:	f021 0104 	bic.w	r1, r1, #4
 8009558:	6021      	str	r1, [r4, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d13d      	bne.n	80095da <_printf_i+0x16a>
 800955e:	2d00      	cmp	r5, #0
 8009560:	f040 808e 	bne.w	8009680 <_printf_i+0x210>
 8009564:	4665      	mov	r5, ip
 8009566:	2a08      	cmp	r2, #8
 8009568:	d10b      	bne.n	8009582 <_printf_i+0x112>
 800956a:	6823      	ldr	r3, [r4, #0]
 800956c:	07db      	lsls	r3, r3, #31
 800956e:	d508      	bpl.n	8009582 <_printf_i+0x112>
 8009570:	6923      	ldr	r3, [r4, #16]
 8009572:	6862      	ldr	r2, [r4, #4]
 8009574:	429a      	cmp	r2, r3
 8009576:	bfde      	ittt	le
 8009578:	2330      	movle	r3, #48	; 0x30
 800957a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800957e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009582:	ebac 0305 	sub.w	r3, ip, r5
 8009586:	6123      	str	r3, [r4, #16]
 8009588:	f8cd 8000 	str.w	r8, [sp]
 800958c:	463b      	mov	r3, r7
 800958e:	aa03      	add	r2, sp, #12
 8009590:	4621      	mov	r1, r4
 8009592:	4630      	mov	r0, r6
 8009594:	f7ff fef6 	bl	8009384 <_printf_common>
 8009598:	3001      	adds	r0, #1
 800959a:	d14d      	bne.n	8009638 <_printf_i+0x1c8>
 800959c:	f04f 30ff 	mov.w	r0, #4294967295
 80095a0:	b005      	add	sp, #20
 80095a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095a6:	4839      	ldr	r0, [pc, #228]	; (800968c <_printf_i+0x21c>)
 80095a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80095ac:	6813      	ldr	r3, [r2, #0]
 80095ae:	6821      	ldr	r1, [r4, #0]
 80095b0:	1d1d      	adds	r5, r3, #4
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6015      	str	r5, [r2, #0]
 80095b6:	060a      	lsls	r2, r1, #24
 80095b8:	d50b      	bpl.n	80095d2 <_printf_i+0x162>
 80095ba:	07ca      	lsls	r2, r1, #31
 80095bc:	bf44      	itt	mi
 80095be:	f041 0120 	orrmi.w	r1, r1, #32
 80095c2:	6021      	strmi	r1, [r4, #0]
 80095c4:	b91b      	cbnz	r3, 80095ce <_printf_i+0x15e>
 80095c6:	6822      	ldr	r2, [r4, #0]
 80095c8:	f022 0220 	bic.w	r2, r2, #32
 80095cc:	6022      	str	r2, [r4, #0]
 80095ce:	2210      	movs	r2, #16
 80095d0:	e7b7      	b.n	8009542 <_printf_i+0xd2>
 80095d2:	064d      	lsls	r5, r1, #25
 80095d4:	bf48      	it	mi
 80095d6:	b29b      	uxthmi	r3, r3
 80095d8:	e7ef      	b.n	80095ba <_printf_i+0x14a>
 80095da:	4665      	mov	r5, ip
 80095dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80095e0:	fb02 3311 	mls	r3, r2, r1, r3
 80095e4:	5cc3      	ldrb	r3, [r0, r3]
 80095e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80095ea:	460b      	mov	r3, r1
 80095ec:	2900      	cmp	r1, #0
 80095ee:	d1f5      	bne.n	80095dc <_printf_i+0x16c>
 80095f0:	e7b9      	b.n	8009566 <_printf_i+0xf6>
 80095f2:	6813      	ldr	r3, [r2, #0]
 80095f4:	6825      	ldr	r5, [r4, #0]
 80095f6:	6961      	ldr	r1, [r4, #20]
 80095f8:	1d18      	adds	r0, r3, #4
 80095fa:	6010      	str	r0, [r2, #0]
 80095fc:	0628      	lsls	r0, r5, #24
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	d501      	bpl.n	8009606 <_printf_i+0x196>
 8009602:	6019      	str	r1, [r3, #0]
 8009604:	e002      	b.n	800960c <_printf_i+0x19c>
 8009606:	066a      	lsls	r2, r5, #25
 8009608:	d5fb      	bpl.n	8009602 <_printf_i+0x192>
 800960a:	8019      	strh	r1, [r3, #0]
 800960c:	2300      	movs	r3, #0
 800960e:	6123      	str	r3, [r4, #16]
 8009610:	4665      	mov	r5, ip
 8009612:	e7b9      	b.n	8009588 <_printf_i+0x118>
 8009614:	6813      	ldr	r3, [r2, #0]
 8009616:	1d19      	adds	r1, r3, #4
 8009618:	6011      	str	r1, [r2, #0]
 800961a:	681d      	ldr	r5, [r3, #0]
 800961c:	6862      	ldr	r2, [r4, #4]
 800961e:	2100      	movs	r1, #0
 8009620:	4628      	mov	r0, r5
 8009622:	f7f6 fdd5 	bl	80001d0 <memchr>
 8009626:	b108      	cbz	r0, 800962c <_printf_i+0x1bc>
 8009628:	1b40      	subs	r0, r0, r5
 800962a:	6060      	str	r0, [r4, #4]
 800962c:	6863      	ldr	r3, [r4, #4]
 800962e:	6123      	str	r3, [r4, #16]
 8009630:	2300      	movs	r3, #0
 8009632:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009636:	e7a7      	b.n	8009588 <_printf_i+0x118>
 8009638:	6923      	ldr	r3, [r4, #16]
 800963a:	462a      	mov	r2, r5
 800963c:	4639      	mov	r1, r7
 800963e:	4630      	mov	r0, r6
 8009640:	47c0      	blx	r8
 8009642:	3001      	adds	r0, #1
 8009644:	d0aa      	beq.n	800959c <_printf_i+0x12c>
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	079b      	lsls	r3, r3, #30
 800964a:	d413      	bmi.n	8009674 <_printf_i+0x204>
 800964c:	68e0      	ldr	r0, [r4, #12]
 800964e:	9b03      	ldr	r3, [sp, #12]
 8009650:	4298      	cmp	r0, r3
 8009652:	bfb8      	it	lt
 8009654:	4618      	movlt	r0, r3
 8009656:	e7a3      	b.n	80095a0 <_printf_i+0x130>
 8009658:	2301      	movs	r3, #1
 800965a:	464a      	mov	r2, r9
 800965c:	4639      	mov	r1, r7
 800965e:	4630      	mov	r0, r6
 8009660:	47c0      	blx	r8
 8009662:	3001      	adds	r0, #1
 8009664:	d09a      	beq.n	800959c <_printf_i+0x12c>
 8009666:	3501      	adds	r5, #1
 8009668:	68e3      	ldr	r3, [r4, #12]
 800966a:	9a03      	ldr	r2, [sp, #12]
 800966c:	1a9b      	subs	r3, r3, r2
 800966e:	42ab      	cmp	r3, r5
 8009670:	dcf2      	bgt.n	8009658 <_printf_i+0x1e8>
 8009672:	e7eb      	b.n	800964c <_printf_i+0x1dc>
 8009674:	2500      	movs	r5, #0
 8009676:	f104 0919 	add.w	r9, r4, #25
 800967a:	e7f5      	b.n	8009668 <_printf_i+0x1f8>
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1ac      	bne.n	80095da <_printf_i+0x16a>
 8009680:	7803      	ldrb	r3, [r0, #0]
 8009682:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009686:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800968a:	e76c      	b.n	8009566 <_printf_i+0xf6>
 800968c:	08009809 	.word	0x08009809
 8009690:	0800981a 	.word	0x0800981a

08009694 <memcpy>:
 8009694:	b510      	push	{r4, lr}
 8009696:	1e43      	subs	r3, r0, #1
 8009698:	440a      	add	r2, r1
 800969a:	4291      	cmp	r1, r2
 800969c:	d100      	bne.n	80096a0 <memcpy+0xc>
 800969e:	bd10      	pop	{r4, pc}
 80096a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096a8:	e7f7      	b.n	800969a <memcpy+0x6>

080096aa <memmove>:
 80096aa:	4288      	cmp	r0, r1
 80096ac:	b510      	push	{r4, lr}
 80096ae:	eb01 0302 	add.w	r3, r1, r2
 80096b2:	d807      	bhi.n	80096c4 <memmove+0x1a>
 80096b4:	1e42      	subs	r2, r0, #1
 80096b6:	4299      	cmp	r1, r3
 80096b8:	d00a      	beq.n	80096d0 <memmove+0x26>
 80096ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096be:	f802 4f01 	strb.w	r4, [r2, #1]!
 80096c2:	e7f8      	b.n	80096b6 <memmove+0xc>
 80096c4:	4283      	cmp	r3, r0
 80096c6:	d9f5      	bls.n	80096b4 <memmove+0xa>
 80096c8:	1881      	adds	r1, r0, r2
 80096ca:	1ad2      	subs	r2, r2, r3
 80096cc:	42d3      	cmn	r3, r2
 80096ce:	d100      	bne.n	80096d2 <memmove+0x28>
 80096d0:	bd10      	pop	{r4, pc}
 80096d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096d6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80096da:	e7f7      	b.n	80096cc <memmove+0x22>

080096dc <_realloc_r>:
 80096dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096de:	4607      	mov	r7, r0
 80096e0:	4614      	mov	r4, r2
 80096e2:	460e      	mov	r6, r1
 80096e4:	b921      	cbnz	r1, 80096f0 <_realloc_r+0x14>
 80096e6:	4611      	mov	r1, r2
 80096e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80096ec:	f7ff bc6c 	b.w	8008fc8 <_malloc_r>
 80096f0:	b922      	cbnz	r2, 80096fc <_realloc_r+0x20>
 80096f2:	f7ff fc1b 	bl	8008f2c <_free_r>
 80096f6:	4625      	mov	r5, r4
 80096f8:	4628      	mov	r0, r5
 80096fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096fc:	f000 f814 	bl	8009728 <_malloc_usable_size_r>
 8009700:	42a0      	cmp	r0, r4
 8009702:	d20f      	bcs.n	8009724 <_realloc_r+0x48>
 8009704:	4621      	mov	r1, r4
 8009706:	4638      	mov	r0, r7
 8009708:	f7ff fc5e 	bl	8008fc8 <_malloc_r>
 800970c:	4605      	mov	r5, r0
 800970e:	2800      	cmp	r0, #0
 8009710:	d0f2      	beq.n	80096f8 <_realloc_r+0x1c>
 8009712:	4631      	mov	r1, r6
 8009714:	4622      	mov	r2, r4
 8009716:	f7ff ffbd 	bl	8009694 <memcpy>
 800971a:	4631      	mov	r1, r6
 800971c:	4638      	mov	r0, r7
 800971e:	f7ff fc05 	bl	8008f2c <_free_r>
 8009722:	e7e9      	b.n	80096f8 <_realloc_r+0x1c>
 8009724:	4635      	mov	r5, r6
 8009726:	e7e7      	b.n	80096f8 <_realloc_r+0x1c>

08009728 <_malloc_usable_size_r>:
 8009728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800972c:	1f18      	subs	r0, r3, #4
 800972e:	2b00      	cmp	r3, #0
 8009730:	bfbc      	itt	lt
 8009732:	580b      	ldrlt	r3, [r1, r0]
 8009734:	18c0      	addlt	r0, r0, r3
 8009736:	4770      	bx	lr

08009738 <_init>:
 8009738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973a:	bf00      	nop
 800973c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800973e:	bc08      	pop	{r3}
 8009740:	469e      	mov	lr, r3
 8009742:	4770      	bx	lr

08009744 <_fini>:
 8009744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009746:	bf00      	nop
 8009748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800974a:	bc08      	pop	{r3}
 800974c:	469e      	mov	lr, r3
 800974e:	4770      	bx	lr
