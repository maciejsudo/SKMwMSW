
uart_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000978c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800991c  0800991c  0001991c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ad4  08009ad4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009ad4  08009ad4  00019ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009adc  08009adc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009adc  08009adc  00019adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ae0  08009ae0  00019ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  20000090  08009b74  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000990  08009b74  00020990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4de  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f28  00000000  00000000  0003f59e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018b0  00000000  00000000  000434c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001710  00000000  00000000  00044d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000257f7  00000000  00000000  00046488  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015be4  00000000  00000000  0006bc7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4f16  00000000  00000000  00081863  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00156779  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c64  00000000  00000000  001567f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009904 	.word	0x08009904

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009904 	.word	0x08009904

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_TIM_PeriodElapsedCallback>:
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){ // Jeżeli przerwanie pochodzi od timera 10
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a05      	ldr	r2, [pc, #20]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d102      	bne.n	8000588 <HAL_TIM_PeriodElapsedCallback+0x18>
		timer_state=1;
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40014400 	.word	0x40014400
 8000598:	200000ac 	.word	0x200000ac

0800059c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]


	receive_flag=1;
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <HAL_UART_RxCpltCallback+0x1c>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]

}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	200000ad 	.word	0x200000ad

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b5b0      	push	{r4, r5, r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fed5 	bl	8001370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 fa15 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fb79 	bl	8000cc0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ce:	f000 fa93 	bl	8000af8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005d2:	f000 fabf 	bl	8000b54 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005d6:	f000 faed 	bl	8000bb4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005da:	f008 fa41 	bl	8008a60 <MX_USB_HOST_Init>
  MX_TIM10_Init();
 80005de:	f000 fb1f 	bl	8000c20 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 fb43 	bl	8000c6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim10);
 80005e6:	4894      	ldr	r0, [pc, #592]	; (8000838 <main+0x27c>)
 80005e8:	f004 fb51 	bl	8004c8e <HAL_TIM_Base_Start_IT>

HAL_UART_Receive_IT(&huart2, &Received, 1);
 80005ec:	2201      	movs	r2, #1
 80005ee:	4993      	ldr	r1, [pc, #588]	; (800083c <main+0x280>)
 80005f0:	4893      	ldr	r0, [pc, #588]	; (8000840 <main+0x284>)
 80005f2:	f004 fde7 	bl	80051c4 <HAL_UART_Receive_IT>
  while (1)
  {



	  if(timer_state==1)
 80005f6:	4b93      	ldr	r3, [pc, #588]	; (8000844 <main+0x288>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d123      	bne.n	8000646 <main+0x8a>
	  {
			 ++cnt; // Zwiekszenie licznika wyslanych wiadomosci.
 80005fe:	4b92      	ldr	r3, [pc, #584]	; (8000848 <main+0x28c>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	b29a      	uxth	r2, r3
 8000606:	4b90      	ldr	r3, [pc, #576]	; (8000848 <main+0x28c>)
 8000608:	801a      	strh	r2, [r3, #0]
			 size = sprintf(data, "						message nr: %d.\n\r", cnt); // Stworzenie wiadomosci do wyslania oraz przypisanie ilosci wysylanych znakow do zmiennej size.
 800060a:	4b8f      	ldr	r3, [pc, #572]	; (8000848 <main+0x28c>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	498e      	ldr	r1, [pc, #568]	; (800084c <main+0x290>)
 8000612:	488f      	ldr	r0, [pc, #572]	; (8000850 <main+0x294>)
 8000614:	f008 fe32 	bl	800927c <siprintf>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	4b8d      	ldr	r3, [pc, #564]	; (8000854 <main+0x298>)
 800061e:	801a      	strh	r2, [r3, #0]
			 if(monitor_flag==true)
 8000620:	4b8d      	ldr	r3, [pc, #564]	; (8000858 <main+0x29c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d006      	beq.n	8000636 <main+0x7a>
			 {
			 HAL_UART_Transmit_IT(&huart2, data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 8000628:	4b8a      	ldr	r3, [pc, #552]	; (8000854 <main+0x298>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4988      	ldr	r1, [pc, #544]	; (8000850 <main+0x294>)
 8000630:	4883      	ldr	r0, [pc, #524]	; (8000840 <main+0x284>)
 8000632:	f004 fd82 	bl	800513a <HAL_UART_Transmit_IT>
			 }

			 HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin); // Zmiana stanu pinu na diodzie LED
 8000636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063a:	4888      	ldr	r0, [pc, #544]	; (800085c <main+0x2a0>)
 800063c:	f001 fa13 	bl	8001a66 <HAL_GPIO_TogglePin>
			 timer_state=0;
 8000640:	4b80      	ldr	r3, [pc, #512]	; (8000844 <main+0x288>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
	  }

	  if(receive_flag==1)
 8000646:	4b86      	ldr	r3, [pc, #536]	; (8000860 <main+0x2a4>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	f040 81b6 	bne.w	80009bc <main+0x400>
	  {

		    static uint8_t i=0;
		  	uint16_t size = 0; // Rozmiar wysylanej wiadomosci
 8000650:	2300      	movs	r3, #0
 8000652:	80fb      	strh	r3, [r7, #6]



			//size = sprintf(receive_data, "%s",Received);
			if (Received[0] == 13 || Received[0]== 10)
 8000654:	4b79      	ldr	r3, [pc, #484]	; (800083c <main+0x280>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b0d      	cmp	r3, #13
 800065a:	d004      	beq.n	8000666 <main+0xaa>
 800065c:	4b77      	ldr	r3, [pc, #476]	; (800083c <main+0x280>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b0a      	cmp	r3, #10
 8000662:	f040 8180 	bne.w	8000966 <main+0x3aa>
			{
			size = sprintf(receive_data, "\n\r");
 8000666:	4b7f      	ldr	r3, [pc, #508]	; (8000864 <main+0x2a8>)
 8000668:	4a7f      	ldr	r2, [pc, #508]	; (8000868 <main+0x2ac>)
 800066a:	8811      	ldrh	r1, [r2, #0]
 800066c:	7892      	ldrb	r2, [r2, #2]
 800066e:	8019      	strh	r1, [r3, #0]
 8000670:	709a      	strb	r2, [r3, #2]
 8000672:	2302      	movs	r3, #2
 8000674:	80fb      	strh	r3, [r7, #6]
			i=0;
 8000676:	4b7d      	ldr	r3, [pc, #500]	; (800086c <main+0x2b0>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]

			//RLON/RLOFF
			//HELP
				if(data_buffer[0]=='h' && data_buffer[1]=='e' && data_buffer[2]=='l' && data_buffer[3]=='p')
 800067c:	4b7c      	ldr	r3, [pc, #496]	; (8000870 <main+0x2b4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b68      	cmp	r3, #104	; 0x68
 8000682:	d11c      	bne.n	80006be <main+0x102>
 8000684:	4b7a      	ldr	r3, [pc, #488]	; (8000870 <main+0x2b4>)
 8000686:	785b      	ldrb	r3, [r3, #1]
 8000688:	2b65      	cmp	r3, #101	; 0x65
 800068a:	d118      	bne.n	80006be <main+0x102>
 800068c:	4b78      	ldr	r3, [pc, #480]	; (8000870 <main+0x2b4>)
 800068e:	789b      	ldrb	r3, [r3, #2]
 8000690:	2b6c      	cmp	r3, #108	; 0x6c
 8000692:	d114      	bne.n	80006be <main+0x102>
 8000694:	4b76      	ldr	r3, [pc, #472]	; (8000870 <main+0x2b4>)
 8000696:	78db      	ldrb	r3, [r3, #3]
 8000698:	2b70      	cmp	r3, #112	; 0x70
 800069a:	d110      	bne.n	80006be <main+0x102>
				{
					size = sprintf(data,"\r\n rlon - turns red led on\r\n rloff - turns led red off\r\n blon - turns blue led on\r\n bloff - turns blue led off\r\n olon - turns orange led on\r\n oloff - turns orange led off\r\n");
 800069c:	4a6c      	ldr	r2, [pc, #432]	; (8000850 <main+0x294>)
 800069e:	4b75      	ldr	r3, [pc, #468]	; (8000874 <main+0x2b8>)
 80006a0:	4610      	mov	r0, r2
 80006a2:	4619      	mov	r1, r3
 80006a4:	23ad      	movs	r3, #173	; 0xad
 80006a6:	461a      	mov	r2, r3
 80006a8:	f008 fd1c 	bl	80090e4 <memcpy>
 80006ac:	23ac      	movs	r3, #172	; 0xac
 80006ae:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	461a      	mov	r2, r3
 80006b4:	4966      	ldr	r1, [pc, #408]	; (8000850 <main+0x294>)
 80006b6:	4862      	ldr	r0, [pc, #392]	; (8000840 <main+0x284>)
 80006b8:	f004 fd3f 	bl	800513a <HAL_UART_Transmit_IT>
 80006bc:	e152      	b.n	8000964 <main+0x3a8>
				}

				else if(data_buffer[0]=='r' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='n')
 80006be:	4b6c      	ldr	r3, [pc, #432]	; (8000870 <main+0x2b4>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b72      	cmp	r3, #114	; 0x72
 80006c4:	d127      	bne.n	8000716 <main+0x15a>
 80006c6:	4b6a      	ldr	r3, [pc, #424]	; (8000870 <main+0x2b4>)
 80006c8:	785b      	ldrb	r3, [r3, #1]
 80006ca:	2b6c      	cmp	r3, #108	; 0x6c
 80006cc:	d123      	bne.n	8000716 <main+0x15a>
 80006ce:	4b68      	ldr	r3, [pc, #416]	; (8000870 <main+0x2b4>)
 80006d0:	789b      	ldrb	r3, [r3, #2]
 80006d2:	2b6f      	cmp	r3, #111	; 0x6f
 80006d4:	d11f      	bne.n	8000716 <main+0x15a>
 80006d6:	4b66      	ldr	r3, [pc, #408]	; (8000870 <main+0x2b4>)
 80006d8:	78db      	ldrb	r3, [r3, #3]
 80006da:	2b6e      	cmp	r3, #110	; 0x6e
 80006dc:	d11b      	bne.n	8000716 <main+0x15a>
				{
					HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e4:	485d      	ldr	r0, [pc, #372]	; (800085c <main+0x2a0>)
 80006e6:	f001 f9a5 	bl	8001a34 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\nred led turned ON\r\n");
 80006ea:	4a59      	ldr	r2, [pc, #356]	; (8000850 <main+0x294>)
 80006ec:	4b62      	ldr	r3, [pc, #392]	; (8000878 <main+0x2bc>)
 80006ee:	4615      	mov	r5, r2
 80006f0:	461c      	mov	r4, r3
 80006f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006f4:	6028      	str	r0, [r5, #0]
 80006f6:	6069      	str	r1, [r5, #4]
 80006f8:	60aa      	str	r2, [r5, #8]
 80006fa:	60eb      	str	r3, [r5, #12]
 80006fc:	6820      	ldr	r0, [r4, #0]
 80006fe:	6128      	str	r0, [r5, #16]
 8000700:	88a3      	ldrh	r3, [r4, #4]
 8000702:	82ab      	strh	r3, [r5, #20]
 8000704:	2315      	movs	r3, #21
 8000706:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	461a      	mov	r2, r3
 800070c:	4950      	ldr	r1, [pc, #320]	; (8000850 <main+0x294>)
 800070e:	484c      	ldr	r0, [pc, #304]	; (8000840 <main+0x284>)
 8000710:	f004 fd13 	bl	800513a <HAL_UART_Transmit_IT>
 8000714:	e126      	b.n	8000964 <main+0x3a8>
				}

				else if(data_buffer[0]=='r' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='f' && data_buffer[4]=='f')
 8000716:	4b56      	ldr	r3, [pc, #344]	; (8000870 <main+0x2b4>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b72      	cmp	r3, #114	; 0x72
 800071c:	d12e      	bne.n	800077c <main+0x1c0>
 800071e:	4b54      	ldr	r3, [pc, #336]	; (8000870 <main+0x2b4>)
 8000720:	785b      	ldrb	r3, [r3, #1]
 8000722:	2b6c      	cmp	r3, #108	; 0x6c
 8000724:	d12a      	bne.n	800077c <main+0x1c0>
 8000726:	4b52      	ldr	r3, [pc, #328]	; (8000870 <main+0x2b4>)
 8000728:	789b      	ldrb	r3, [r3, #2]
 800072a:	2b6f      	cmp	r3, #111	; 0x6f
 800072c:	d126      	bne.n	800077c <main+0x1c0>
 800072e:	4b50      	ldr	r3, [pc, #320]	; (8000870 <main+0x2b4>)
 8000730:	78db      	ldrb	r3, [r3, #3]
 8000732:	2b66      	cmp	r3, #102	; 0x66
 8000734:	d122      	bne.n	800077c <main+0x1c0>
 8000736:	4b4e      	ldr	r3, [pc, #312]	; (8000870 <main+0x2b4>)
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	2b66      	cmp	r3, #102	; 0x66
 800073c:	d11e      	bne.n	800077c <main+0x1c0>
				{
					HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000744:	4845      	ldr	r0, [pc, #276]	; (800085c <main+0x2a0>)
 8000746:	f001 f975 	bl	8001a34 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\nred led turned OFF\r\n");
 800074a:	4a41      	ldr	r2, [pc, #260]	; (8000850 <main+0x294>)
 800074c:	4b4b      	ldr	r3, [pc, #300]	; (800087c <main+0x2c0>)
 800074e:	4614      	mov	r4, r2
 8000750:	461d      	mov	r5, r3
 8000752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000754:	6020      	str	r0, [r4, #0]
 8000756:	6061      	str	r1, [r4, #4]
 8000758:	60a2      	str	r2, [r4, #8]
 800075a:	60e3      	str	r3, [r4, #12]
 800075c:	6828      	ldr	r0, [r5, #0]
 800075e:	6120      	str	r0, [r4, #16]
 8000760:	88ab      	ldrh	r3, [r5, #4]
 8000762:	79aa      	ldrb	r2, [r5, #6]
 8000764:	82a3      	strh	r3, [r4, #20]
 8000766:	4613      	mov	r3, r2
 8000768:	75a3      	strb	r3, [r4, #22]
 800076a:	2316      	movs	r3, #22
 800076c:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 800076e:	88fb      	ldrh	r3, [r7, #6]
 8000770:	461a      	mov	r2, r3
 8000772:	4937      	ldr	r1, [pc, #220]	; (8000850 <main+0x294>)
 8000774:	4832      	ldr	r0, [pc, #200]	; (8000840 <main+0x284>)
 8000776:	f004 fce0 	bl	800513a <HAL_UART_Transmit_IT>
 800077a:	e0f3      	b.n	8000964 <main+0x3a8>
				}

				else if(data_buffer[0]=='o' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='n')
 800077c:	4b3c      	ldr	r3, [pc, #240]	; (8000870 <main+0x2b4>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b6f      	cmp	r3, #111	; 0x6f
 8000782:	d128      	bne.n	80007d6 <main+0x21a>
 8000784:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <main+0x2b4>)
 8000786:	785b      	ldrb	r3, [r3, #1]
 8000788:	2b6c      	cmp	r3, #108	; 0x6c
 800078a:	d124      	bne.n	80007d6 <main+0x21a>
 800078c:	4b38      	ldr	r3, [pc, #224]	; (8000870 <main+0x2b4>)
 800078e:	789b      	ldrb	r3, [r3, #2]
 8000790:	2b6f      	cmp	r3, #111	; 0x6f
 8000792:	d120      	bne.n	80007d6 <main+0x21a>
 8000794:	4b36      	ldr	r3, [pc, #216]	; (8000870 <main+0x2b4>)
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	2b6e      	cmp	r3, #110	; 0x6e
 800079a:	d11c      	bne.n	80007d6 <main+0x21a>
				{
					HAL_GPIO_WritePin(LED_Orange_GPIO_Port, LED_Orange_Pin, SET);
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a2:	482e      	ldr	r0, [pc, #184]	; (800085c <main+0x2a0>)
 80007a4:	f001 f946 	bl	8001a34 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\norange led turned ON\r\n");
 80007a8:	4a29      	ldr	r2, [pc, #164]	; (8000850 <main+0x294>)
 80007aa:	4b35      	ldr	r3, [pc, #212]	; (8000880 <main+0x2c4>)
 80007ac:	4615      	mov	r5, r2
 80007ae:	461c      	mov	r4, r3
 80007b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007b2:	6028      	str	r0, [r5, #0]
 80007b4:	6069      	str	r1, [r5, #4]
 80007b6:	60aa      	str	r2, [r5, #8]
 80007b8:	60eb      	str	r3, [r5, #12]
 80007ba:	cc03      	ldmia	r4!, {r0, r1}
 80007bc:	6128      	str	r0, [r5, #16]
 80007be:	6169      	str	r1, [r5, #20]
 80007c0:	7823      	ldrb	r3, [r4, #0]
 80007c2:	762b      	strb	r3, [r5, #24]
 80007c4:	2318      	movs	r3, #24
 80007c6:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 80007c8:	88fb      	ldrh	r3, [r7, #6]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4920      	ldr	r1, [pc, #128]	; (8000850 <main+0x294>)
 80007ce:	481c      	ldr	r0, [pc, #112]	; (8000840 <main+0x284>)
 80007d0:	f004 fcb3 	bl	800513a <HAL_UART_Transmit_IT>
 80007d4:	e0c6      	b.n	8000964 <main+0x3a8>
				}

				else if(data_buffer[0]=='o' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='f' && data_buffer[4]=='f')
 80007d6:	4b26      	ldr	r3, [pc, #152]	; (8000870 <main+0x2b4>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b6f      	cmp	r3, #111	; 0x6f
 80007dc:	d154      	bne.n	8000888 <main+0x2cc>
 80007de:	4b24      	ldr	r3, [pc, #144]	; (8000870 <main+0x2b4>)
 80007e0:	785b      	ldrb	r3, [r3, #1]
 80007e2:	2b6c      	cmp	r3, #108	; 0x6c
 80007e4:	d150      	bne.n	8000888 <main+0x2cc>
 80007e6:	4b22      	ldr	r3, [pc, #136]	; (8000870 <main+0x2b4>)
 80007e8:	789b      	ldrb	r3, [r3, #2]
 80007ea:	2b6f      	cmp	r3, #111	; 0x6f
 80007ec:	d14c      	bne.n	8000888 <main+0x2cc>
 80007ee:	4b20      	ldr	r3, [pc, #128]	; (8000870 <main+0x2b4>)
 80007f0:	78db      	ldrb	r3, [r3, #3]
 80007f2:	2b66      	cmp	r3, #102	; 0x66
 80007f4:	d148      	bne.n	8000888 <main+0x2cc>
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <main+0x2b4>)
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	2b66      	cmp	r3, #102	; 0x66
 80007fc:	d144      	bne.n	8000888 <main+0x2cc>
				{
					HAL_GPIO_WritePin(LED_Orange_GPIO_Port, LED_Orange_Pin, RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000804:	4815      	ldr	r0, [pc, #84]	; (800085c <main+0x2a0>)
 8000806:	f001 f915 	bl	8001a34 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\norange led turned OFF\r\n");
 800080a:	4a11      	ldr	r2, [pc, #68]	; (8000850 <main+0x294>)
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <main+0x2c8>)
 800080e:	4615      	mov	r5, r2
 8000810:	461c      	mov	r4, r3
 8000812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000814:	6028      	str	r0, [r5, #0]
 8000816:	6069      	str	r1, [r5, #4]
 8000818:	60aa      	str	r2, [r5, #8]
 800081a:	60eb      	str	r3, [r5, #12]
 800081c:	cc03      	ldmia	r4!, {r0, r1}
 800081e:	6128      	str	r0, [r5, #16]
 8000820:	6169      	str	r1, [r5, #20]
 8000822:	8823      	ldrh	r3, [r4, #0]
 8000824:	832b      	strh	r3, [r5, #24]
 8000826:	2319      	movs	r3, #25
 8000828:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	461a      	mov	r2, r3
 800082e:	4908      	ldr	r1, [pc, #32]	; (8000850 <main+0x294>)
 8000830:	4803      	ldr	r0, [pc, #12]	; (8000840 <main+0x284>)
 8000832:	f004 fc82 	bl	800513a <HAL_UART_Transmit_IT>
 8000836:	e095      	b.n	8000964 <main+0x3a8>
 8000838:	20000128 	.word	0x20000128
 800083c:	200000c8 	.word	0x200000c8
 8000840:	20000258 	.word	0x20000258
 8000844:	200000ac 	.word	0x200000ac
 8000848:	200000ae 	.word	0x200000ae
 800084c:	0800991c 	.word	0x0800991c
 8000850:	2000019c 	.word	0x2000019c
 8000854:	200000b0 	.word	0x200000b0
 8000858:	200000b2 	.word	0x200000b2
 800085c:	40020c00 	.word	0x40020c00
 8000860:	200000ad 	.word	0x200000ad
 8000864:	20000168 	.word	0x20000168
 8000868:	08009934 	.word	0x08009934
 800086c:	200000b3 	.word	0x200000b3
 8000870:	20000298 	.word	0x20000298
 8000874:	08009938 	.word	0x08009938
 8000878:	080099e8 	.word	0x080099e8
 800087c:	08009a00 	.word	0x08009a00
 8000880:	08009a18 	.word	0x08009a18
 8000884:	08009a34 	.word	0x08009a34
				}


				else if(data_buffer[0]=='b' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='n')
 8000888:	4b4e      	ldr	r3, [pc, #312]	; (80009c4 <main+0x408>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b62      	cmp	r3, #98	; 0x62
 800088e:	d12a      	bne.n	80008e6 <main+0x32a>
 8000890:	4b4c      	ldr	r3, [pc, #304]	; (80009c4 <main+0x408>)
 8000892:	785b      	ldrb	r3, [r3, #1]
 8000894:	2b6c      	cmp	r3, #108	; 0x6c
 8000896:	d126      	bne.n	80008e6 <main+0x32a>
 8000898:	4b4a      	ldr	r3, [pc, #296]	; (80009c4 <main+0x408>)
 800089a:	789b      	ldrb	r3, [r3, #2]
 800089c:	2b6f      	cmp	r3, #111	; 0x6f
 800089e:	d122      	bne.n	80008e6 <main+0x32a>
 80008a0:	4b48      	ldr	r3, [pc, #288]	; (80009c4 <main+0x408>)
 80008a2:	78db      	ldrb	r3, [r3, #3]
 80008a4:	2b6e      	cmp	r3, #110	; 0x6e
 80008a6:	d11e      	bne.n	80008e6 <main+0x32a>
				{
					HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ae:	4846      	ldr	r0, [pc, #280]	; (80009c8 <main+0x40c>)
 80008b0:	f001 f8c0 	bl	8001a34 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\nblue led turned ON\r\n");
 80008b4:	4a45      	ldr	r2, [pc, #276]	; (80009cc <main+0x410>)
 80008b6:	4b46      	ldr	r3, [pc, #280]	; (80009d0 <main+0x414>)
 80008b8:	4614      	mov	r4, r2
 80008ba:	461d      	mov	r5, r3
 80008bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008be:	6020      	str	r0, [r4, #0]
 80008c0:	6061      	str	r1, [r4, #4]
 80008c2:	60a2      	str	r2, [r4, #8]
 80008c4:	60e3      	str	r3, [r4, #12]
 80008c6:	6828      	ldr	r0, [r5, #0]
 80008c8:	6120      	str	r0, [r4, #16]
 80008ca:	88ab      	ldrh	r3, [r5, #4]
 80008cc:	79aa      	ldrb	r2, [r5, #6]
 80008ce:	82a3      	strh	r3, [r4, #20]
 80008d0:	4613      	mov	r3, r2
 80008d2:	75a3      	strb	r3, [r4, #22]
 80008d4:	2316      	movs	r3, #22
 80008d6:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	461a      	mov	r2, r3
 80008dc:	493b      	ldr	r1, [pc, #236]	; (80009cc <main+0x410>)
 80008de:	483d      	ldr	r0, [pc, #244]	; (80009d4 <main+0x418>)
 80008e0:	f004 fc2b 	bl	800513a <HAL_UART_Transmit_IT>
 80008e4:	e03e      	b.n	8000964 <main+0x3a8>
				}

				else if(data_buffer[0]=='b' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='f' && data_buffer[4]=='f')
 80008e6:	4b37      	ldr	r3, [pc, #220]	; (80009c4 <main+0x408>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b62      	cmp	r3, #98	; 0x62
 80008ec:	d12a      	bne.n	8000944 <main+0x388>
 80008ee:	4b35      	ldr	r3, [pc, #212]	; (80009c4 <main+0x408>)
 80008f0:	785b      	ldrb	r3, [r3, #1]
 80008f2:	2b6c      	cmp	r3, #108	; 0x6c
 80008f4:	d126      	bne.n	8000944 <main+0x388>
 80008f6:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <main+0x408>)
 80008f8:	789b      	ldrb	r3, [r3, #2]
 80008fa:	2b6f      	cmp	r3, #111	; 0x6f
 80008fc:	d122      	bne.n	8000944 <main+0x388>
 80008fe:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <main+0x408>)
 8000900:	78db      	ldrb	r3, [r3, #3]
 8000902:	2b66      	cmp	r3, #102	; 0x66
 8000904:	d11e      	bne.n	8000944 <main+0x388>
 8000906:	4b2f      	ldr	r3, [pc, #188]	; (80009c4 <main+0x408>)
 8000908:	791b      	ldrb	r3, [r3, #4]
 800090a:	2b66      	cmp	r3, #102	; 0x66
 800090c:	d11a      	bne.n	8000944 <main+0x388>
				{
					HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000914:	482c      	ldr	r0, [pc, #176]	; (80009c8 <main+0x40c>)
 8000916:	f001 f88d 	bl	8001a34 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\nblue led turned OFF\r\n");
 800091a:	4a2c      	ldr	r2, [pc, #176]	; (80009cc <main+0x410>)
 800091c:	4b2e      	ldr	r3, [pc, #184]	; (80009d8 <main+0x41c>)
 800091e:	4615      	mov	r5, r2
 8000920:	461c      	mov	r4, r3
 8000922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000924:	6028      	str	r0, [r5, #0]
 8000926:	6069      	str	r1, [r5, #4]
 8000928:	60aa      	str	r2, [r5, #8]
 800092a:	60eb      	str	r3, [r5, #12]
 800092c:	cc03      	ldmia	r4!, {r0, r1}
 800092e:	6128      	str	r0, [r5, #16]
 8000930:	6169      	str	r1, [r5, #20]
 8000932:	2317      	movs	r3, #23
 8000934:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	461a      	mov	r2, r3
 800093a:	4924      	ldr	r1, [pc, #144]	; (80009cc <main+0x410>)
 800093c:	4825      	ldr	r0, [pc, #148]	; (80009d4 <main+0x418>)
 800093e:	f004 fbfc 	bl	800513a <HAL_UART_Transmit_IT>
 8000942:	e00f      	b.n	8000964 <main+0x3a8>
				}
				else if(data_buffer[0]=='s')
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <main+0x408>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b73      	cmp	r3, #115	; 0x73
 800094a:	d103      	bne.n	8000954 <main+0x398>
				{
					monitor_flag = true;
 800094c:	4b23      	ldr	r3, [pc, #140]	; (80009dc <main+0x420>)
 800094e:	2201      	movs	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
				if(data_buffer[0]=='h' && data_buffer[1]=='e' && data_buffer[2]=='l' && data_buffer[3]=='p')
 8000952:	e024      	b.n	800099e <main+0x3e2>

				}

				else if(data_buffer[0]=='e')
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <main+0x408>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b65      	cmp	r3, #101	; 0x65
 800095a:	d120      	bne.n	800099e <main+0x3e2>
				{
					monitor_flag = false;
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <main+0x420>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
				if(data_buffer[0]=='h' && data_buffer[1]=='e' && data_buffer[2]=='l' && data_buffer[3]=='p')
 8000962:	e01c      	b.n	800099e <main+0x3e2>
 8000964:	e01b      	b.n	800099e <main+0x3e2>



			else
			{
			size = sprintf(receive_data, "%s",Received);
 8000966:	4a1e      	ldr	r2, [pc, #120]	; (80009e0 <main+0x424>)
 8000968:	491e      	ldr	r1, [pc, #120]	; (80009e4 <main+0x428>)
 800096a:	481f      	ldr	r0, [pc, #124]	; (80009e8 <main+0x42c>)
 800096c:	f008 fc86 	bl	800927c <siprintf>
 8000970:	4603      	mov	r3, r0
 8000972:	80fb      	strh	r3, [r7, #6]

			data_buffer[i]=receive_data[0];
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <main+0x430>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <main+0x42c>)
 800097c:	7819      	ldrb	r1, [r3, #0]
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <main+0x408>)
 8000980:	5499      	strb	r1, [r3, r2]
			i++;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <main+0x430>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	3301      	adds	r3, #1
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <main+0x430>)
 800098c:	701a      	strb	r2, [r3, #0]
			if(i==10)
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <main+0x430>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b0a      	cmp	r3, #10
 8000994:	d104      	bne.n	80009a0 <main+0x3e4>
			{
			i=0;
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <main+0x430>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	e000      	b.n	80009a0 <main+0x3e4>
				if(data_buffer[0]=='h' && data_buffer[1]=='e' && data_buffer[2]=='l' && data_buffer[3]=='p')
 800099e:	bf00      	nop
			}


			}

			HAL_UART_Transmit_IT(&huart2, receive_data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	461a      	mov	r2, r3
 80009a4:	4910      	ldr	r1, [pc, #64]	; (80009e8 <main+0x42c>)
 80009a6:	480b      	ldr	r0, [pc, #44]	; (80009d4 <main+0x418>)
 80009a8:	f004 fbc7 	bl	800513a <HAL_UART_Transmit_IT>
			HAL_UART_Receive_IT(&huart2, &Received, 1); // Ponowne włączenie nasłuchiwania
 80009ac:	2201      	movs	r2, #1
 80009ae:	490c      	ldr	r1, [pc, #48]	; (80009e0 <main+0x424>)
 80009b0:	4808      	ldr	r0, [pc, #32]	; (80009d4 <main+0x418>)
 80009b2:	f004 fc07 	bl	80051c4 <HAL_UART_Receive_IT>



			receive_flag=0;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <main+0x434>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]




    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009bc:	f008 f876 	bl	8008aac <MX_USB_HOST_Process>
	  if(timer_state==1)
 80009c0:	e619      	b.n	80005f6 <main+0x3a>
 80009c2:	bf00      	nop
 80009c4:	20000298 	.word	0x20000298
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	2000019c 	.word	0x2000019c
 80009d0:	08009a50 	.word	0x08009a50
 80009d4:	20000258 	.word	0x20000258
 80009d8:	08009a68 	.word	0x08009a68
 80009dc:	200000b2 	.word	0x200000b2
 80009e0:	200000c8 	.word	0x200000c8
 80009e4:	08009a80 	.word	0x08009a80
 80009e8:	20000168 	.word	0x20000168
 80009ec:	200000b3 	.word	0x200000b3
 80009f0:	200000ad 	.word	0x200000ad

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b098      	sub	sp, #96	; 0x60
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009fe:	2230      	movs	r2, #48	; 0x30
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f008 fb79 	bl	80090fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	4b31      	ldr	r3, [pc, #196]	; (8000af0 <SystemClock_Config+0xfc>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a30      	ldr	r2, [pc, #192]	; (8000af0 <SystemClock_Config+0xfc>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <SystemClock_Config+0xfc>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <SystemClock_Config+0x100>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a2a      	ldr	r2, [pc, #168]	; (8000af4 <SystemClock_Config+0x100>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6013      	str	r3, [r2, #0]
 8000a52:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <SystemClock_Config+0x100>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a70:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a72:	2308      	movs	r3, #8
 8000a74:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a76:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a7a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a80:	2307      	movs	r3, #7
 8000a82:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f003 fad1 	bl	8004030 <HAL_RCC_OscConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a94:	f000 fa12 	bl	8000ebc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a98:	230f      	movs	r3, #15
 8000a9a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aa4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	2105      	movs	r1, #5
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f003 fd2a 	bl	8004510 <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ac2:	f000 f9fb 	bl	8000ebc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000aca:	23c0      	movs	r3, #192	; 0xc0
 8000acc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f003 ff0c 	bl	80048f4 <HAL_RCCEx_PeriphCLKConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000ae2:	f000 f9eb 	bl	8000ebc <Error_Handler>
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	3760      	adds	r7, #96	; 0x60
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40007000 	.word	0x40007000

08000af8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000afe:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <MX_I2C1_Init+0x54>)
 8000b00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b04:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MX_I2C1_Init+0x58>)
 8000b06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b36:	f002 fca3 	bl	8003480 <HAL_I2C_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b40:	f000 f9bc 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200000d4 	.word	0x200000d4
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	000186a0 	.word	0x000186a0

08000b54 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b5a:	4a14      	ldr	r2, [pc, #80]	; (8000bac <MX_I2S3_Init+0x58>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b64:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b78:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b7c:	4a0c      	ldr	r2, [pc, #48]	; (8000bb0 <MX_I2S3_Init+0x5c>)
 8000b7e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b94:	f002 fdac 	bl	80036f0 <HAL_I2S_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b9e:	f000 f98d 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200002a4 	.word	0x200002a4
 8000bac:	40003c00 	.word	0x40003c00
 8000bb0:	00017700 	.word	0x00017700

08000bb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bba:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <MX_SPI1_Init+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000c00:	220a      	movs	r2, #10
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000c06:	f003 ffb3 	bl	8004b70 <HAL_SPI_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c10:	f000 f954 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000200 	.word	0x20000200
 8000c1c:	40013000 	.word	0x40013000

08000c20 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_TIM10_Init+0x44>)
 8000c26:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <MX_TIM10_Init+0x48>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_TIM10_Init+0x44>)
 8000c2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c30:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_TIM10_Init+0x44>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_TIM10_Init+0x44>)
 8000c3a:	f248 323f 	movw	r2, #33599	; 0x833f
 8000c3e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_TIM10_Init+0x44>)
 8000c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c46:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_TIM10_Init+0x44>)
 8000c4a:	2280      	movs	r2, #128	; 0x80
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_TIM10_Init+0x44>)
 8000c50:	f003 fff2 	bl	8004c38 <HAL_TIM_Base_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM10_Init+0x3e>
  {
    Error_Handler();
 8000c5a:	f000 f92f 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000128 	.word	0x20000128
 8000c68:	40014400 	.word	0x40014400

08000c6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <MX_USART2_UART_Init+0x50>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	f004 f9fc 	bl	80050a0 <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cae:	f000 f905 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000258 	.word	0x20000258
 8000cbc:	40004400 	.word	0x40004400

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	; 0x30
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
 8000cda:	4b71      	ldr	r3, [pc, #452]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a70      	ldr	r2, [pc, #448]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000ce0:	f043 0310 	orr.w	r3, r3, #16
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b6e      	ldr	r3, [pc, #440]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0310 	and.w	r3, r3, #16
 8000cee:	61bb      	str	r3, [r7, #24]
 8000cf0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	4b6a      	ldr	r3, [pc, #424]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a69      	ldr	r2, [pc, #420]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b67      	ldr	r3, [pc, #412]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	4b63      	ldr	r3, [pc, #396]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a62      	ldr	r2, [pc, #392]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b60      	ldr	r3, [pc, #384]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b5c      	ldr	r3, [pc, #368]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a5b      	ldr	r2, [pc, #364]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b59      	ldr	r3, [pc, #356]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	4b55      	ldr	r3, [pc, #340]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a54      	ldr	r2, [pc, #336]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b52      	ldr	r3, [pc, #328]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	4b4e      	ldr	r3, [pc, #312]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a4d      	ldr	r2, [pc, #308]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b4b      	ldr	r3, [pc, #300]	; (8000ea0 <MX_GPIO_Init+0x1e0>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2108      	movs	r1, #8
 8000d82:	4848      	ldr	r0, [pc, #288]	; (8000ea4 <MX_GPIO_Init+0x1e4>)
 8000d84:	f000 fe56 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	4846      	ldr	r0, [pc, #280]	; (8000ea8 <MX_GPIO_Init+0x1e8>)
 8000d8e:	f000 fe51 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin
 8000d92:	2200      	movs	r2, #0
 8000d94:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000d98:	4844      	ldr	r0, [pc, #272]	; (8000eac <MX_GPIO_Init+0x1ec>)
 8000d9a:	f000 fe4b 	bl	8001a34 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d9e:	2308      	movs	r3, #8
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	483b      	ldr	r0, [pc, #236]	; (8000ea4 <MX_GPIO_Init+0x1e4>)
 8000db6:	f000 fca3 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4835      	ldr	r0, [pc, #212]	; (8000ea8 <MX_GPIO_Init+0x1e8>)
 8000dd2:	f000 fc95 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000dd6:	2308      	movs	r3, #8
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000de6:	2305      	movs	r3, #5
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	482d      	ldr	r0, [pc, #180]	; (8000ea8 <MX_GPIO_Init+0x1e8>)
 8000df2:	f000 fc85 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dfa:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <MX_GPIO_Init+0x1f0>)
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	482a      	ldr	r0, [pc, #168]	; (8000eb4 <MX_GPIO_Init+0x1f4>)
 8000e0a:	f000 fc79 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4825      	ldr	r0, [pc, #148]	; (8000eb8 <MX_GPIO_Init+0x1f8>)
 8000e22:	f000 fc6d 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	4619      	mov	r1, r3
 8000e42:	481d      	ldr	r0, [pc, #116]	; (8000eb8 <MX_GPIO_Init+0x1f8>)
 8000e44:	f000 fc5c 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Green_Pin LED_Orange_Pin LED_Red_Pin LED_Blue_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin
 8000e48:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000e4c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4812      	ldr	r0, [pc, #72]	; (8000eac <MX_GPIO_Init+0x1ec>)
 8000e62:	f000 fc4d 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e66:	2320      	movs	r3, #32
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <MX_GPIO_Init+0x1ec>)
 8000e7a:	f000 fc41 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_GPIO_Init+0x1f0>)
 8000e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <MX_GPIO_Init+0x1e4>)
 8000e92:	f000 fc35 	bl	8001700 <HAL_GPIO_Init>

}
 8000e96:	bf00      	nop
 8000e98:	3730      	adds	r7, #48	; 0x30
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40020800 	.word	0x40020800
 8000eac:	40020c00 	.word	0x40020c00
 8000eb0:	10120000 	.word	0x10120000
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40020400 	.word	0x40020400

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <Error_Handler+0x6>

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <HAL_MspInit+0x4c>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_MspInit+0x4c>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f02:	2007      	movs	r0, #7
 8000f04:	f000 fb98 	bl	8001638 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40023800 	.word	0x40023800

08000f14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a19      	ldr	r2, [pc, #100]	; (8000f98 <HAL_I2C_MspInit+0x84>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d12c      	bne.n	8000f90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a17      	ldr	r2, [pc, #92]	; (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f52:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f58:	2312      	movs	r3, #18
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f64:	2304      	movs	r3, #4
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <HAL_I2C_MspInit+0x8c>)
 8000f70:	f000 fbc6 	bl	8001700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f82:	6413      	str	r3, [r2, #64]	; 0x40
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40005400 	.word	0x40005400
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020400 	.word	0x40020400

08000fa4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a28      	ldr	r2, [pc, #160]	; (8001064 <HAL_I2S_MspInit+0xc0>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d14a      	bne.n	800105c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	4b27      	ldr	r3, [pc, #156]	; (8001068 <HAL_I2S_MspInit+0xc4>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a26      	ldr	r2, [pc, #152]	; (8001068 <HAL_I2S_MspInit+0xc4>)
 8000fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b24      	ldr	r3, [pc, #144]	; (8001068 <HAL_I2S_MspInit+0xc4>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <HAL_I2S_MspInit+0xc4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a1f      	ldr	r2, [pc, #124]	; (8001068 <HAL_I2S_MspInit+0xc4>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <HAL_I2S_MspInit+0xc4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_I2S_MspInit+0xc4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a18      	ldr	r2, [pc, #96]	; (8001068 <HAL_I2S_MspInit+0xc4>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <HAL_I2S_MspInit+0xc4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800101a:	2310      	movs	r3, #16
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800102a:	2306      	movs	r3, #6
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <HAL_I2S_MspInit+0xc8>)
 8001036:	f000 fb63 	bl	8001700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800103a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800103e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800104c:	2306      	movs	r3, #6
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <HAL_I2S_MspInit+0xcc>)
 8001058:	f000 fb52 	bl	8001700 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	; 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40003c00 	.word	0x40003c00
 8001068:	40023800 	.word	0x40023800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020800 	.word	0x40020800

08001074 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a19      	ldr	r2, [pc, #100]	; (80010f8 <HAL_SPI_MspInit+0x84>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d12b      	bne.n	80010ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <HAL_SPI_MspInit+0x88>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a17      	ldr	r2, [pc, #92]	; (80010fc <HAL_SPI_MspInit+0x88>)
 80010a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_SPI_MspInit+0x88>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_SPI_MspInit+0x88>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <HAL_SPI_MspInit+0x88>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_SPI_MspInit+0x88>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010ce:	23e0      	movs	r3, #224	; 0xe0
 80010d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010de:	2305      	movs	r3, #5
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <HAL_SPI_MspInit+0x8c>)
 80010ea:	f000 fb09 	bl	8001700 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	; 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40013000 	.word	0x40013000
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020000 	.word	0x40020000

08001104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0e      	ldr	r2, [pc, #56]	; (800114c <HAL_TIM_Base_MspInit+0x48>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d115      	bne.n	8001142 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <HAL_TIM_Base_MspInit+0x4c>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <HAL_TIM_Base_MspInit+0x4c>)
 8001120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_TIM_Base_MspInit+0x4c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	2019      	movs	r0, #25
 8001138:	f000 fa89 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800113c:	2019      	movs	r0, #25
 800113e:	f000 faa2 	bl	8001686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40014400 	.word	0x40014400
 8001150:	40023800 	.word	0x40023800

08001154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <HAL_UART_MspInit+0x94>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d133      	bne.n	80011de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <HAL_UART_MspInit+0x98>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <HAL_UART_MspInit+0x98>)
 8001180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_UART_MspInit+0x98>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_UART_MspInit+0x98>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a14      	ldr	r2, [pc, #80]	; (80011ec <HAL_UART_MspInit+0x98>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_UART_MspInit+0x98>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011ae:	230c      	movs	r3, #12
 80011b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011be:	2307      	movs	r3, #7
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	4809      	ldr	r0, [pc, #36]	; (80011f0 <HAL_UART_MspInit+0x9c>)
 80011ca:	f000 fa99 	bl	8001700 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2026      	movs	r0, #38	; 0x26
 80011d4:	f000 fa3b 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011d8:	2026      	movs	r0, #38	; 0x26
 80011da:	f000 fa54 	bl	8001686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011de:	bf00      	nop
 80011e0:	3728      	adds	r7, #40	; 0x28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40004400 	.word	0x40004400
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020000 	.word	0x40020000

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001240:	f000 f8e8 	bl	8001414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800124e:	f003 fd42 	bl	8004cd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000128 	.word	0x20000128

0800125c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <USART2_IRQHandler+0x10>)
 8001262:	f004 f805 	bl	8005270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000258 	.word	0x20000258

08001270 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <OTG_FS_IRQHandler+0x10>)
 8001276:	f000 fea1 	bl	8001fbc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200006c8 	.word	0x200006c8

08001284 <_sbrk>:
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <_sbrk+0x5c>)
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <_sbrk+0x60>)
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <_sbrk+0x22>
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <_sbrk+0x64>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <_sbrk+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d207      	bcs.n	80012c4 <_sbrk+0x40>
 80012b4:	f007 fedc 	bl	8009070 <__errno>
 80012b8:	4602      	mov	r2, r0
 80012ba:	230c      	movs	r3, #12
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e009      	b.n	80012d8 <_sbrk+0x54>
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <_sbrk+0x64>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <_sbrk+0x64>)
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20020000 	.word	0x20020000
 80012e4:	00000400 	.word	0x00000400
 80012e8:	200000b4 	.word	0x200000b4
 80012ec:	20000990 	.word	0x20000990

080012f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <SystemInit+0x28>)
 80012f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fa:	4a07      	ldr	r2, [pc, #28]	; (8001318 <SystemInit+0x28>)
 80012fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SystemInit+0x28>)
 8001306:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800130a:	609a      	str	r2, [r3, #8]
#endif
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800131c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001354 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001320:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001322:	e003      	b.n	800132c <LoopCopyDataInit>

08001324 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001326:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001328:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800132a:	3104      	adds	r1, #4

0800132c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800132c:	480b      	ldr	r0, [pc, #44]	; (800135c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001330:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001332:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001334:	d3f6      	bcc.n	8001324 <CopyDataInit>
  ldr  r2, =_sbss
 8001336:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001338:	e002      	b.n	8001340 <LoopFillZerobss>

0800133a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800133a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800133c:	f842 3b04 	str.w	r3, [r2], #4

08001340 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001342:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001344:	d3f9      	bcc.n	800133a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001346:	f7ff ffd3 	bl	80012f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800134a:	f007 fe97 	bl	800907c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800134e:	f7ff f935 	bl	80005bc <main>
  bx  lr    
 8001352:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001354:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001358:	08009ae4 	.word	0x08009ae4
  ldr  r0, =_sdata
 800135c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001360:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001364:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001368:	20000990 	.word	0x20000990

0800136c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC_IRQHandler>
	...

08001370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001374:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_Init+0x40>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <HAL_Init+0x40>)
 800137a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_Init+0x40>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <HAL_Init+0x40>)
 8001386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <HAL_Init+0x40>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <HAL_Init+0x40>)
 8001392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001396:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001398:	2003      	movs	r0, #3
 800139a:	f000 f94d 	bl	8001638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800139e:	2000      	movs	r0, #0
 80013a0:	f000 f808 	bl	80013b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a4:	f7ff fd8e 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023c00 	.word	0x40023c00

080013b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_InitTick+0x54>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_InitTick+0x58>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f965 	bl	80016a2 <HAL_SYSTICK_Config>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e00e      	b.n	8001400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b0f      	cmp	r3, #15
 80013e6:	d80a      	bhi.n	80013fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e8:	2200      	movs	r2, #0
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f000 f92d 	bl	800164e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f4:	4a06      	ldr	r2, [pc, #24]	; (8001410 <HAL_InitTick+0x5c>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e000      	b.n	8001400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000000 	.word	0x20000000
 800140c:	20000008 	.word	0x20000008
 8001410:	20000004 	.word	0x20000004

08001414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x20>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_IncTick+0x24>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <HAL_IncTick+0x24>)
 8001426:	6013      	str	r3, [r2, #0]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008
 8001438:	200002ec 	.word	0x200002ec

0800143c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_GetTick+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	200002ec 	.word	0x200002ec

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff ffee 	bl	800143c <HAL_GetTick>
 8001460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	d005      	beq.n	800147a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_Delay+0x40>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800147a:	bf00      	nop
 800147c:	f7ff ffde 	bl	800143c <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	429a      	cmp	r2, r3
 800148a:	d8f7      	bhi.n	800147c <HAL_Delay+0x28>
  {
  }
}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000008 	.word	0x20000008

08001498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	60d3      	str	r3, [r2, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	2b00      	cmp	r3, #0
 800150c:	db0b      	blt.n	8001526 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	f003 021f 	and.w	r2, r3, #31
 8001514:	4907      	ldr	r1, [pc, #28]	; (8001534 <__NVIC_EnableIRQ+0x38>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	2001      	movs	r0, #1
 800151e:	fa00 f202 	lsl.w	r2, r0, r2
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001604:	d301      	bcc.n	800160a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001606:	2301      	movs	r3, #1
 8001608:	e00f      	b.n	800162a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <SysTick_Config+0x40>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001612:	210f      	movs	r1, #15
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f7ff ff8e 	bl	8001538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <SysTick_Config+0x40>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <SysTick_Config+0x40>)
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	e000e010 	.word	0xe000e010

08001638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff29 	bl	8001498 <__NVIC_SetPriorityGrouping>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff3e 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff8e 	bl	800158c <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5d 	bl	8001538 <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff31 	bl	80014fc <__NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffa2 	bl	80015f4 <SysTick_Config>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d004      	beq.n	80016d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e00c      	b.n	80016f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2205      	movs	r2, #5
 80016dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0201 	bic.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	e16b      	b.n	80019f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800171c:	2201      	movs	r2, #1
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	429a      	cmp	r2, r3
 8001736:	f040 815a 	bne.w	80019ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d00b      	beq.n	800175a <HAL_GPIO_Init+0x5a>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800174e:	2b11      	cmp	r3, #17
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b12      	cmp	r3, #18
 8001758:	d130      	bne.n	80017bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	2203      	movs	r2, #3
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001790:	2201      	movs	r2, #1
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f003 0201 	and.w	r2, r3, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0xfc>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b12      	cmp	r3, #18
 80017fa:	d123      	bne.n	8001844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	08da      	lsrs	r2, r3, #3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3208      	adds	r2, #8
 8001804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	220f      	movs	r2, #15
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	08da      	lsrs	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3208      	adds	r2, #8
 800183e:	69b9      	ldr	r1, [r7, #24]
 8001840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0203 	and.w	r2, r3, #3
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80b4 	beq.w	80019ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b5f      	ldr	r3, [pc, #380]	; (8001a08 <HAL_GPIO_Init+0x308>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	4a5e      	ldr	r2, [pc, #376]	; (8001a08 <HAL_GPIO_Init+0x308>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001894:	6453      	str	r3, [r2, #68]	; 0x44
 8001896:	4b5c      	ldr	r3, [pc, #368]	; (8001a08 <HAL_GPIO_Init+0x308>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018a2:	4a5a      	ldr	r2, [pc, #360]	; (8001a0c <HAL_GPIO_Init+0x30c>)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3302      	adds	r3, #2
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a51      	ldr	r2, [pc, #324]	; (8001a10 <HAL_GPIO_Init+0x310>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d02b      	beq.n	8001926 <HAL_GPIO_Init+0x226>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a50      	ldr	r2, [pc, #320]	; (8001a14 <HAL_GPIO_Init+0x314>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d025      	beq.n	8001922 <HAL_GPIO_Init+0x222>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a4f      	ldr	r2, [pc, #316]	; (8001a18 <HAL_GPIO_Init+0x318>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d01f      	beq.n	800191e <HAL_GPIO_Init+0x21e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a4e      	ldr	r2, [pc, #312]	; (8001a1c <HAL_GPIO_Init+0x31c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d019      	beq.n	800191a <HAL_GPIO_Init+0x21a>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4d      	ldr	r2, [pc, #308]	; (8001a20 <HAL_GPIO_Init+0x320>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d013      	beq.n	8001916 <HAL_GPIO_Init+0x216>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4c      	ldr	r2, [pc, #304]	; (8001a24 <HAL_GPIO_Init+0x324>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00d      	beq.n	8001912 <HAL_GPIO_Init+0x212>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4b      	ldr	r2, [pc, #300]	; (8001a28 <HAL_GPIO_Init+0x328>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d007      	beq.n	800190e <HAL_GPIO_Init+0x20e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4a      	ldr	r2, [pc, #296]	; (8001a2c <HAL_GPIO_Init+0x32c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d101      	bne.n	800190a <HAL_GPIO_Init+0x20a>
 8001906:	2307      	movs	r3, #7
 8001908:	e00e      	b.n	8001928 <HAL_GPIO_Init+0x228>
 800190a:	2308      	movs	r3, #8
 800190c:	e00c      	b.n	8001928 <HAL_GPIO_Init+0x228>
 800190e:	2306      	movs	r3, #6
 8001910:	e00a      	b.n	8001928 <HAL_GPIO_Init+0x228>
 8001912:	2305      	movs	r3, #5
 8001914:	e008      	b.n	8001928 <HAL_GPIO_Init+0x228>
 8001916:	2304      	movs	r3, #4
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x228>
 800191a:	2303      	movs	r3, #3
 800191c:	e004      	b.n	8001928 <HAL_GPIO_Init+0x228>
 800191e:	2302      	movs	r3, #2
 8001920:	e002      	b.n	8001928 <HAL_GPIO_Init+0x228>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_GPIO_Init+0x228>
 8001926:	2300      	movs	r3, #0
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	f002 0203 	and.w	r2, r2, #3
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	4093      	lsls	r3, r2
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001938:	4934      	ldr	r1, [pc, #208]	; (8001a0c <HAL_GPIO_Init+0x30c>)
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001946:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <HAL_GPIO_Init+0x330>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800196a:	4a31      	ldr	r2, [pc, #196]	; (8001a30 <HAL_GPIO_Init+0x330>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001970:	4b2f      	ldr	r3, [pc, #188]	; (8001a30 <HAL_GPIO_Init+0x330>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001994:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <HAL_GPIO_Init+0x330>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <HAL_GPIO_Init+0x330>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019be:	4a1c      	ldr	r2, [pc, #112]	; (8001a30 <HAL_GPIO_Init+0x330>)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c4:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <HAL_GPIO_Init+0x330>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e8:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <HAL_GPIO_Init+0x330>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3301      	adds	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	2b0f      	cmp	r3, #15
 80019f8:	f67f ae90 	bls.w	800171c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019fc:	bf00      	nop
 80019fe:	3724      	adds	r7, #36	; 0x24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40013800 	.word	0x40013800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40020400 	.word	0x40020400
 8001a18:	40020800 	.word	0x40020800
 8001a1c:	40020c00 	.word	0x40020c00
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40021400 	.word	0x40021400
 8001a28:	40021800 	.word	0x40021800
 8001a2c:	40021c00 	.word	0x40021c00
 8001a30:	40013c00 	.word	0x40013c00

08001a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
 8001a40:	4613      	mov	r3, r2
 8001a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a44:	787b      	ldrb	r3, [r7, #1]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a50:	e003      	b.n	8001a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	041a      	lsls	r2, r3, #16
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	619a      	str	r2, [r3, #24]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	401a      	ands	r2, r3
 8001a7a:	887b      	ldrh	r3, [r7, #2]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d104      	bne.n	8001a8a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	041a      	lsls	r2, r3, #16
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001a88:	e002      	b.n	8001a90 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a9e:	b08f      	sub	sp, #60	; 0x3c
 8001aa0:	af0a      	add	r7, sp, #40	; 0x28
 8001aa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e054      	b.n	8001b58 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d106      	bne.n	8001ace <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f007 f827 	bl	8008b1c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d102      	bne.n	8001ae8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f004 f9e3 	bl	8005eb8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	687e      	ldr	r6, [r7, #4]
 8001afa:	466d      	mov	r5, sp
 8001afc:	f106 0410 	add.w	r4, r6, #16
 8001b00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b10:	1d33      	adds	r3, r6, #4
 8001b12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b14:	6838      	ldr	r0, [r7, #0]
 8001b16:	f004 f95d 	bl	8005dd4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2101      	movs	r1, #1
 8001b20:	4618      	mov	r0, r3
 8001b22:	f004 f9da 	bl	8005eda <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	687e      	ldr	r6, [r7, #4]
 8001b2e:	466d      	mov	r5, sp
 8001b30:	f106 0410 	add.w	r4, r6, #16
 8001b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b40:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b44:	1d33      	adds	r3, r6, #4
 8001b46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b48:	6838      	ldr	r0, [r7, #0]
 8001b4a:	f004 faed 	bl	8006128 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b60 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af04      	add	r7, sp, #16
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	4608      	mov	r0, r1
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4603      	mov	r3, r0
 8001b70:	70fb      	strb	r3, [r7, #3]
 8001b72:	460b      	mov	r3, r1
 8001b74:	70bb      	strb	r3, [r7, #2]
 8001b76:	4613      	mov	r3, r2
 8001b78:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_HCD_HC_Init+0x28>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e07f      	b.n	8001c88 <HAL_HCD_HC_Init+0x128>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	440b      	add	r3, r1
 8001b9e:	333d      	adds	r3, #61	; 0x3d
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001ba4:	78fa      	ldrb	r2, [r7, #3]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3338      	adds	r3, #56	; 0x38
 8001bb4:	787a      	ldrb	r2, [r7, #1]
 8001bb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001bb8:	78fa      	ldrb	r2, [r7, #3]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3340      	adds	r3, #64	; 0x40
 8001bc8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001bca:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bcc:	78fa      	ldrb	r2, [r7, #3]
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	440b      	add	r3, r1
 8001bda:	3339      	adds	r3, #57	; 0x39
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	440b      	add	r3, r1
 8001bee:	333f      	adds	r3, #63	; 0x3f
 8001bf0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001bf4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001bf6:	78fa      	ldrb	r2, [r7, #3]
 8001bf8:	78bb      	ldrb	r3, [r7, #2]
 8001bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bfe:	b2d8      	uxtb	r0, r3
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	440b      	add	r3, r1
 8001c0c:	333a      	adds	r3, #58	; 0x3a
 8001c0e:	4602      	mov	r2, r0
 8001c10:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001c12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	da0a      	bge.n	8001c30 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c1a:	78fa      	ldrb	r2, [r7, #3]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	440b      	add	r3, r1
 8001c28:	333b      	adds	r3, #59	; 0x3b
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	e009      	b.n	8001c44 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	440b      	add	r3, r1
 8001c3e:	333b      	adds	r3, #59	; 0x3b
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001c44:	78fa      	ldrb	r2, [r7, #3]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	440b      	add	r3, r1
 8001c52:	333c      	adds	r3, #60	; 0x3c
 8001c54:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c58:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	787c      	ldrb	r4, [r7, #1]
 8001c60:	78ba      	ldrb	r2, [r7, #2]
 8001c62:	78f9      	ldrb	r1, [r7, #3]
 8001c64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c6c:	9301      	str	r3, [sp, #4]
 8001c6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	4623      	mov	r3, r4
 8001c76:	f004 fbd9 	bl	800642c <USB_HC_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd90      	pop	{r4, r7, pc}

08001c90 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_HCD_HC_Halt+0x1e>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e00f      	b.n	8001cce <HAL_HCD_HC_Halt+0x3e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f004 fe15 	bl	80068ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	4608      	mov	r0, r1
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	70fb      	strb	r3, [r7, #3]
 8001cea:	460b      	mov	r3, r1
 8001cec:	70bb      	strb	r3, [r7, #2]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001cf2:	78fa      	ldrb	r2, [r7, #3]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	333b      	adds	r3, #59	; 0x3b
 8001d02:	78ba      	ldrb	r2, [r7, #2]
 8001d04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d06:	78fa      	ldrb	r2, [r7, #3]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	440b      	add	r3, r1
 8001d14:	333f      	adds	r3, #63	; 0x3f
 8001d16:	787a      	ldrb	r2, [r7, #1]
 8001d18:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d1a:	7c3b      	ldrb	r3, [r7, #16]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d114      	bne.n	8001d4a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	440b      	add	r3, r1
 8001d2e:	3342      	adds	r3, #66	; 0x42
 8001d30:	2203      	movs	r2, #3
 8001d32:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	333d      	adds	r3, #61	; 0x3d
 8001d44:	7f3a      	ldrb	r2, [r7, #28]
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	e009      	b.n	8001d5e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d4a:	78fa      	ldrb	r2, [r7, #3]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	440b      	add	r3, r1
 8001d58:	3342      	adds	r3, #66	; 0x42
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001d5e:	787b      	ldrb	r3, [r7, #1]
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	f200 80d6 	bhi.w	8001f12 <HAL_HCD_HC_SubmitRequest+0x23a>
 8001d66:	a201      	add	r2, pc, #4	; (adr r2, 8001d6c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6c:	08001d7d 	.word	0x08001d7d
 8001d70:	08001efd 	.word	0x08001efd
 8001d74:	08001de9 	.word	0x08001de9
 8001d78:	08001e73 	.word	0x08001e73
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001d7c:	7c3b      	ldrb	r3, [r7, #16]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	f040 80c9 	bne.w	8001f16 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001d84:	78bb      	ldrb	r3, [r7, #2]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 80c5 	bne.w	8001f16 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001d8c:	8b3b      	ldrh	r3, [r7, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001d92:	78fa      	ldrb	r2, [r7, #3]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	440b      	add	r3, r1
 8001da0:	3351      	adds	r3, #81	; 0x51
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001da6:	78fa      	ldrb	r2, [r7, #3]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	3351      	adds	r3, #81	; 0x51
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10a      	bne.n	8001dd2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	3342      	adds	r3, #66	; 0x42
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001dd0:	e0a1      	b.n	8001f16 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dd2:	78fa      	ldrb	r2, [r7, #3]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	3342      	adds	r3, #66	; 0x42
 8001de2:	2202      	movs	r2, #2
 8001de4:	701a      	strb	r2, [r3, #0]
      break;
 8001de6:	e096      	b.n	8001f16 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001de8:	78bb      	ldrb	r3, [r7, #2]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d120      	bne.n	8001e30 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	440b      	add	r3, r1
 8001dfc:	3351      	adds	r3, #81	; 0x51
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10a      	bne.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e04:	78fa      	ldrb	r2, [r7, #3]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	440b      	add	r3, r1
 8001e12:	3342      	adds	r3, #66	; 0x42
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001e18:	e07e      	b.n	8001f18 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e1a:	78fa      	ldrb	r2, [r7, #3]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	440b      	add	r3, r1
 8001e28:	3342      	adds	r3, #66	; 0x42
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	701a      	strb	r2, [r3, #0]
      break;
 8001e2e:	e073      	b.n	8001f18 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3350      	adds	r3, #80	; 0x50
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10a      	bne.n	8001e5c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	3342      	adds	r3, #66	; 0x42
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
      break;
 8001e5a:	e05d      	b.n	8001f18 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	3342      	adds	r3, #66	; 0x42
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	701a      	strb	r2, [r3, #0]
      break;
 8001e70:	e052      	b.n	8001f18 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001e72:	78bb      	ldrb	r3, [r7, #2]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d120      	bne.n	8001eba <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e78:	78fa      	ldrb	r2, [r7, #3]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	440b      	add	r3, r1
 8001e86:	3351      	adds	r3, #81	; 0x51
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10a      	bne.n	8001ea4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3342      	adds	r3, #66	; 0x42
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ea2:	e039      	b.n	8001f18 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ea4:	78fa      	ldrb	r2, [r7, #3]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	440b      	add	r3, r1
 8001eb2:	3342      	adds	r3, #66	; 0x42
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	701a      	strb	r2, [r3, #0]
      break;
 8001eb8:	e02e      	b.n	8001f18 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3350      	adds	r3, #80	; 0x50
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10a      	bne.n	8001ee6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ed0:	78fa      	ldrb	r2, [r7, #3]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	440b      	add	r3, r1
 8001ede:	3342      	adds	r3, #66	; 0x42
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
      break;
 8001ee4:	e018      	b.n	8001f18 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3342      	adds	r3, #66	; 0x42
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	701a      	strb	r2, [r3, #0]
      break;
 8001efa:	e00d      	b.n	8001f18 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001efc:	78fa      	ldrb	r2, [r7, #3]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	3342      	adds	r3, #66	; 0x42
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
      break;
 8001f10:	e002      	b.n	8001f18 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001f12:	bf00      	nop
 8001f14:	e000      	b.n	8001f18 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001f16:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f18:	78fa      	ldrb	r2, [r7, #3]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	440b      	add	r3, r1
 8001f26:	3344      	adds	r3, #68	; 0x44
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	8b39      	ldrh	r1, [r7, #24]
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4403      	add	r3, r0
 8001f3c:	3348      	adds	r3, #72	; 0x48
 8001f3e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f40:	78fa      	ldrb	r2, [r7, #3]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	440b      	add	r3, r1
 8001f4e:	335c      	adds	r3, #92	; 0x5c
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001f54:	78fa      	ldrb	r2, [r7, #3]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	440b      	add	r3, r1
 8001f62:	334c      	adds	r3, #76	; 0x4c
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f68:	78fa      	ldrb	r2, [r7, #3]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	440b      	add	r3, r1
 8001f76:	3339      	adds	r3, #57	; 0x39
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	440b      	add	r3, r1
 8001f8a:	335d      	adds	r3, #93	; 0x5d
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	3338      	adds	r3, #56	; 0x38
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	18d1      	adds	r1, r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	f004 fb48 	bl	8006640 <USB_HC_StartXfer>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop

08001fbc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f004 f865 	bl	80060a2 <USB_GetMode>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	f040 80ef 	bne.w	80021be <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f004 f849 	bl	800607c <USB_ReadInterrupts>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80e5 	beq.w	80021bc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f004 f840 	bl	800607c <USB_ReadInterrupts>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002002:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002006:	d104      	bne.n	8002012 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002010:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f004 f830 	bl	800607c <USB_ReadInterrupts>
 800201c:	4603      	mov	r3, r0
 800201e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002026:	d104      	bne.n	8002032 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002030:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f004 f820 	bl	800607c <USB_ReadInterrupts>
 800203c:	4603      	mov	r3, r0
 800203e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002042:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002046:	d104      	bne.n	8002052 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002050:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f004 f810 	bl	800607c <USB_ReadInterrupts>
 800205c:	4603      	mov	r3, r0
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b02      	cmp	r3, #2
 8002064:	d103      	bne.n	800206e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2202      	movs	r2, #2
 800206c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f004 f802 	bl	800607c <USB_ReadInterrupts>
 8002078:	4603      	mov	r3, r0
 800207a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800207e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002082:	d115      	bne.n	80020b0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800208c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d108      	bne.n	80020b0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f006 fdba 	bl	8008c18 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2101      	movs	r1, #1
 80020aa:	4618      	mov	r0, r3
 80020ac:	f004 f8f8 	bl	80062a0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f003 ffe1 	bl	800607c <USB_ReadInterrupts>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c4:	d102      	bne.n	80020cc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f001 f966 	bl	8003398 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f003 ffd3 	bl	800607c <USB_ReadInterrupts>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d106      	bne.n	80020ee <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f006 fd7d 	bl	8008be0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2208      	movs	r2, #8
 80020ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 ffc2 	bl	800607c <USB_ReadInterrupts>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002102:	d138      	bne.n	8002176 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f004 fbdf 	bl	80068cc <USB_HC_ReadInterrupt>
 800210e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	e025      	b.n	8002162 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	fa22 f303 	lsr.w	r3, r2, r3
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d018      	beq.n	800215c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800213c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002140:	d106      	bne.n	8002150 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	4619      	mov	r1, r3
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f8cf 	bl	80022ec <HCD_HC_IN_IRQHandler>
 800214e:	e005      	b.n	800215c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	4619      	mov	r1, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fcfd 	bl	8002b56 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	3301      	adds	r3, #1
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	429a      	cmp	r2, r3
 800216a:	d3d4      	bcc.n	8002116 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002174:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f003 ff7e 	bl	800607c <USB_ReadInterrupts>
 8002180:	4603      	mov	r3, r0
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b10      	cmp	r3, #16
 8002188:	d101      	bne.n	800218e <HAL_HCD_IRQHandler+0x1d2>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_HCD_IRQHandler+0x1d4>
 800218e:	2300      	movs	r3, #0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d014      	beq.n	80021be <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699a      	ldr	r2, [r3, #24]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0210 	bic.w	r2, r2, #16
 80021a2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f001 f84b 	bl	8003240 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699a      	ldr	r2, [r3, #24]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0210 	orr.w	r2, r2, #16
 80021b8:	619a      	str	r2, [r3, #24]
 80021ba:	e000      	b.n	80021be <HAL_HCD_IRQHandler+0x202>
      return;
 80021bc:	bf00      	nop
    }
  }
}
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_HCD_Start+0x16>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e013      	b.n	8002202 <HAL_HCD_Start+0x3e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f003 fe55 	bl	8005e96 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 f8b8 	bl	8006368 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_HCD_Stop+0x16>
 800221c:	2302      	movs	r3, #2
 800221e:	e00d      	b.n	800223c <HAL_HCD_Stop+0x32>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f004 fc99 	bl	8006b64 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f004 f85f 	bl	8006314 <USB_ResetPort>
 8002256:	4603      	mov	r3, r0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	335c      	adds	r3, #92	; 0x5c
 800227c:	781b      	ldrb	r3, [r3, #0]
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	460b      	mov	r3, r1
 8002294:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002296:	78fa      	ldrb	r2, [r7, #3]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	440b      	add	r3, r1
 80022a4:	334c      	adds	r3, #76	; 0x4c
 80022a6:	681b      	ldr	r3, [r3, #0]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f004 f8a1 	bl	8006408 <USB_GetCurrentFrame>
 80022c6:	4603      	mov	r3, r0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f004 f87c 	bl	80063da <USB_GetHostSpeed>
 80022e2:	4603      	mov	r3, r0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b04      	cmp	r3, #4
 800231a:	d119      	bne.n	8002350 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002328:	461a      	mov	r2, r3
 800232a:	2304      	movs	r3, #4
 800232c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	0151      	lsls	r1, r2, #5
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	440a      	add	r2, r1
 8002344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	60d3      	str	r3, [r2, #12]
 800234e:	e0ce      	b.n	80024ee <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002366:	d12c      	bne.n	80023c2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	461a      	mov	r2, r3
 8002376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800237a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	440b      	add	r3, r1
 800238a:	335d      	adds	r3, #93	; 0x5d
 800238c:	2207      	movs	r2, #7
 800238e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4413      	add	r3, r2
 8002398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	0151      	lsls	r1, r2, #5
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	440a      	add	r2, r1
 80023a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023aa:	f043 0302 	orr.w	r3, r3, #2
 80023ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f004 fa97 	bl	80068ee <USB_HC_Halt>
 80023c0:	e095      	b.n	80024ee <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d109      	bne.n	80023ec <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e4:	461a      	mov	r2, r3
 80023e6:	2320      	movs	r3, #32
 80023e8:	6093      	str	r3, [r2, #8]
 80023ea:	e080      	b.n	80024ee <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d134      	bne.n	800246c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4413      	add	r3, r2
 800240a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	0151      	lsls	r1, r2, #5
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	440a      	add	r2, r1
 8002418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	440b      	add	r3, r1
 8002430:	335d      	adds	r3, #93	; 0x5d
 8002432:	2205      	movs	r2, #5
 8002434:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4413      	add	r3, r2
 800243e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002442:	461a      	mov	r2, r3
 8002444:	2310      	movs	r3, #16
 8002446:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4413      	add	r3, r2
 8002450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002454:	461a      	mov	r2, r3
 8002456:	2308      	movs	r3, #8
 8002458:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f004 fa42 	bl	80068ee <USB_HC_Halt>
 800246a:	e040      	b.n	80024ee <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002482:	d134      	bne.n	80024ee <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	0151      	lsls	r1, r2, #5
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	440a      	add	r2, r1
 800249a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f004 fa1d 	bl	80068ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c0:	461a      	mov	r2, r3
 80024c2:	2310      	movs	r3, #16
 80024c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	440b      	add	r3, r1
 80024d4:	335d      	adds	r3, #93	; 0x5d
 80024d6:	2208      	movs	r2, #8
 80024d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e6:	461a      	mov	r2, r3
 80024e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ec:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002504:	d122      	bne.n	800254c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	0151      	lsls	r1, r2, #5
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	440a      	add	r2, r1
 800251c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f004 f9dc 	bl	80068ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4413      	add	r3, r2
 800253e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002542:	461a      	mov	r2, r3
 8002544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002548:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800254a:	e300      	b.n	8002b4e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b01      	cmp	r3, #1
 8002560:	f040 80fd 	bne.w	800275e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01b      	beq.n	80025a4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	440b      	add	r3, r1
 800257a:	3348      	adds	r3, #72	; 0x48
 800257c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	0159      	lsls	r1, r3, #5
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	440b      	add	r3, r1
 8002586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002590:	1ad1      	subs	r1, r2, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4403      	add	r3, r0
 80025a0:	334c      	adds	r3, #76	; 0x4c
 80025a2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	440b      	add	r3, r1
 80025b2:	335d      	adds	r3, #93	; 0x5d
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	440b      	add	r3, r1
 80025c6:	3358      	adds	r3, #88	; 0x58
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d8:	461a      	mov	r2, r3
 80025da:	2301      	movs	r3, #1
 80025dc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	333f      	adds	r3, #63	; 0x3f
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	440b      	add	r3, r1
 8002602:	333f      	adds	r3, #63	; 0x3f
 8002604:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002606:	2b02      	cmp	r3, #2
 8002608:	d121      	bne.n	800264e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	015a      	lsls	r2, r3, #5
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4413      	add	r3, r2
 8002612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	0151      	lsls	r1, r2, #5
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	440a      	add	r2, r1
 8002620:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002624:	f043 0302 	orr.w	r3, r3, #2
 8002628:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f004 f95a 	bl	80068ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4413      	add	r3, r2
 8002642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002646:	461a      	mov	r2, r3
 8002648:	2310      	movs	r3, #16
 800264a:	6093      	str	r3, [r2, #8]
 800264c:	e070      	b.n	8002730 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	440b      	add	r3, r1
 800265c:	333f      	adds	r3, #63	; 0x3f
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d12a      	bne.n	80026ba <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	0151      	lsls	r1, r2, #5
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	440a      	add	r2, r1
 800267a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800267e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002682:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	440b      	add	r3, r1
 8002692:	335c      	adds	r3, #92	; 0x5c
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	b2d8      	uxtb	r0, r3
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	440b      	add	r3, r1
 80026aa:	335c      	adds	r3, #92	; 0x5c
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	4601      	mov	r1, r0
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f006 fabe 	bl	8008c34 <HAL_HCD_HC_NotifyURBChange_Callback>
 80026b8:	e03a      	b.n	8002730 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	440b      	add	r3, r1
 80026c8:	333f      	adds	r3, #63	; 0x3f
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d12f      	bne.n	8002730 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	440b      	add	r3, r1
 80026de:	335c      	adds	r3, #92	; 0x5c
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	440b      	add	r3, r1
 80026f2:	3350      	adds	r3, #80	; 0x50
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	f083 0301 	eor.w	r3, r3, #1
 80026fa:	b2d8      	uxtb	r0, r3
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	3350      	adds	r3, #80	; 0x50
 800270c:	4602      	mov	r2, r0
 800270e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	b2d8      	uxtb	r0, r3
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	335c      	adds	r3, #92	; 0x5c
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	4601      	mov	r1, r0
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f006 fa82 	bl	8008c34 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	440b      	add	r3, r1
 800273e:	3350      	adds	r3, #80	; 0x50
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	f083 0301 	eor.w	r3, r3, #1
 8002746:	b2d8      	uxtb	r0, r3
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	440b      	add	r3, r1
 8002756:	3350      	adds	r3, #80	; 0x50
 8002758:	4602      	mov	r2, r0
 800275a:	701a      	strb	r2, [r3, #0]
}
 800275c:	e1f7      	b.n	8002b4e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b02      	cmp	r3, #2
 8002772:	f040 811a 	bne.w	80029aa <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	0151      	lsls	r1, r2, #5
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	440a      	add	r2, r1
 800278c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002790:	f023 0302 	bic.w	r3, r3, #2
 8002794:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	335d      	adds	r3, #93	; 0x5d
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d10a      	bne.n	80027c2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	440b      	add	r3, r1
 80027ba:	335c      	adds	r3, #92	; 0x5c
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	e0d9      	b.n	8002976 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	440b      	add	r3, r1
 80027d0:	335d      	adds	r3, #93	; 0x5d
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d10a      	bne.n	80027ee <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	440b      	add	r3, r1
 80027e6:	335c      	adds	r3, #92	; 0x5c
 80027e8:	2205      	movs	r2, #5
 80027ea:	701a      	strb	r2, [r3, #0]
 80027ec:	e0c3      	b.n	8002976 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	440b      	add	r3, r1
 80027fc:	335d      	adds	r3, #93	; 0x5d
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b06      	cmp	r3, #6
 8002802:	d00a      	beq.n	800281a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	335d      	adds	r3, #93	; 0x5d
 8002814:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002816:	2b08      	cmp	r3, #8
 8002818:	d156      	bne.n	80028c8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	440b      	add	r3, r1
 8002828:	3358      	adds	r3, #88	; 0x58
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	1c59      	adds	r1, r3, #1
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4403      	add	r3, r0
 800283c:	3358      	adds	r3, #88	; 0x58
 800283e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	3358      	adds	r3, #88	; 0x58
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b03      	cmp	r3, #3
 8002854:	d914      	bls.n	8002880 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	440b      	add	r3, r1
 8002864:	3358      	adds	r3, #88	; 0x58
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	440b      	add	r3, r1
 8002878:	335c      	adds	r3, #92	; 0x5c
 800287a:	2204      	movs	r2, #4
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	e009      	b.n	8002894 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	440b      	add	r3, r1
 800288e:	335c      	adds	r3, #92	; 0x5c
 8002890:	2202      	movs	r2, #2
 8002892:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028aa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028b2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c0:	461a      	mov	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e056      	b.n	8002976 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	440b      	add	r3, r1
 80028d6:	335d      	adds	r3, #93	; 0x5d
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d123      	bne.n	8002926 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	440b      	add	r3, r1
 80028ec:	335c      	adds	r3, #92	; 0x5c
 80028ee:	2202      	movs	r2, #2
 80028f0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	015a      	lsls	r2, r3, #5
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002908:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002910:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4413      	add	r3, r2
 800291a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291e:	461a      	mov	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	e027      	b.n	8002976 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	440b      	add	r3, r1
 8002934:	335d      	adds	r3, #93	; 0x5d
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b07      	cmp	r3, #7
 800293a:	d11c      	bne.n	8002976 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	3358      	adds	r3, #88	; 0x58
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	1c59      	adds	r1, r3, #1
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4403      	add	r3, r0
 800295e:	3358      	adds	r3, #88	; 0x58
 8002960:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	440b      	add	r3, r1
 8002970:	335c      	adds	r3, #92	; 0x5c
 8002972:	2204      	movs	r2, #4
 8002974:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002982:	461a      	mov	r2, r3
 8002984:	2302      	movs	r3, #2
 8002986:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	b2d8      	uxtb	r0, r3
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	335c      	adds	r3, #92	; 0x5c
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	4601      	mov	r1, r0
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f006 f946 	bl	8008c34 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029a8:	e0d1      	b.n	8002b4e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029bc:	2b80      	cmp	r3, #128	; 0x80
 80029be:	d13e      	bne.n	8002a3e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	0151      	lsls	r1, r2, #5
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	440a      	add	r2, r1
 80029d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029da:	f043 0302 	orr.w	r3, r3, #2
 80029de:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	440b      	add	r3, r1
 80029ee:	3358      	adds	r3, #88	; 0x58
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	1c59      	adds	r1, r3, #1
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4403      	add	r3, r0
 8002a02:	3358      	adds	r3, #88	; 0x58
 8002a04:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	440b      	add	r3, r1
 8002a14:	335d      	adds	r3, #93	; 0x5d
 8002a16:	2206      	movs	r2, #6
 8002a18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 ff62 	bl	80068ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a36:	461a      	mov	r2, r3
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	6093      	str	r3, [r2, #8]
}
 8002a3c:	e087      	b.n	8002b4e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	d17c      	bne.n	8002b4e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	440b      	add	r3, r1
 8002a62:	333f      	adds	r3, #63	; 0x3f
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d122      	bne.n	8002ab0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	440b      	add	r3, r1
 8002a78:	3358      	adds	r3, #88	; 0x58
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	0151      	lsls	r1, r2, #5
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	440a      	add	r2, r1
 8002a94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a98:	f043 0302 	orr.w	r3, r3, #2
 8002a9c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 ff20 	bl	80068ee <USB_HC_Halt>
 8002aae:	e045      	b.n	8002b3c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	440b      	add	r3, r1
 8002abe:	333f      	adds	r3, #63	; 0x3f
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	440b      	add	r3, r1
 8002ad4:	333f      	adds	r3, #63	; 0x3f
 8002ad6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d12f      	bne.n	8002b3c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	440b      	add	r3, r1
 8002aea:	3358      	adds	r3, #88	; 0x58
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d121      	bne.n	8002b3c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	440b      	add	r3, r1
 8002b06:	335d      	adds	r3, #93	; 0x5d
 8002b08:	2203      	movs	r2, #3
 8002b0a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	0151      	lsls	r1, r2, #5
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	440a      	add	r2, r1
 8002b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b26:	f043 0302 	orr.w	r3, r3, #2
 8002b2a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f003 fed9 	bl	80068ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2310      	movs	r3, #16
 8002b4c:	6093      	str	r3, [r2, #8]
}
 8002b4e:	bf00      	nop
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b086      	sub	sp, #24
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d119      	bne.n	8002bba <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b92:	461a      	mov	r2, r3
 8002b94:	2304      	movs	r3, #4
 8002b96:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	0151      	lsls	r1, r2, #5
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	440a      	add	r2, r1
 8002bae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bb2:	f043 0302 	orr.w	r3, r3, #2
 8002bb6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002bb8:	e33e      	b.n	8003238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0320 	and.w	r3, r3, #32
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d141      	bne.n	8002c54 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2320      	movs	r3, #32
 8002be0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	333d      	adds	r3, #61	; 0x3d
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	f040 831f 	bne.w	8003238 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	440b      	add	r3, r1
 8002c08:	333d      	adds	r3, #61	; 0x3d
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	440b      	add	r3, r1
 8002c1c:	335c      	adds	r3, #92	; 0x5c
 8002c1e:	2202      	movs	r2, #2
 8002c20:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	0151      	lsls	r1, r2, #5
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	440a      	add	r2, r1
 8002c38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f003 fe4e 	bl	80068ee <USB_HC_Halt>
}
 8002c52:	e2f1      	b.n	8003238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b40      	cmp	r3, #64	; 0x40
 8002c68:	d13f      	bne.n	8002cea <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	440b      	add	r3, r1
 8002c78:	335d      	adds	r3, #93	; 0x5d
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	333d      	adds	r3, #61	; 0x3d
 8002c8e:	2201      	movs	r2, #1
 8002c90:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3358      	adds	r3, #88	; 0x58
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	0151      	lsls	r1, r2, #5
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	440a      	add	r2, r1
 8002cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cc0:	f043 0302 	orr.w	r3, r3, #2
 8002cc4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f003 fe0c 	bl	80068ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	2340      	movs	r3, #64	; 0x40
 8002ce6:	6093      	str	r3, [r2, #8]
}
 8002ce8:	e2a6      	b.n	8003238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d00:	d122      	bne.n	8002d48 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	0151      	lsls	r1, r2, #5
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	440a      	add	r2, r1
 8002d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f003 fdde 	bl	80068ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d44:	6093      	str	r3, [r2, #8]
}
 8002d46:	e277      	b.n	8003238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d135      	bne.n	8002dca <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3358      	adds	r3, #88	; 0x58
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	0151      	lsls	r1, r2, #5
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	440a      	add	r2, r1
 8002d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d8c:	f043 0302 	orr.w	r3, r3, #2
 8002d90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f003 fda6 	bl	80068ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	461a      	mov	r2, r3
 8002db0:	2301      	movs	r3, #1
 8002db2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	335d      	adds	r3, #93	; 0x5d
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]
}
 8002dc8:	e236      	b.n	8003238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d12b      	bne.n	8002e38 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dec:	461a      	mov	r2, r3
 8002dee:	2308      	movs	r3, #8
 8002df0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	0151      	lsls	r1, r2, #5
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	440a      	add	r2, r1
 8002e08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 fd66 	bl	80068ee <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	440b      	add	r3, r1
 8002e30:	335d      	adds	r3, #93	; 0x5d
 8002e32:	2205      	movs	r2, #5
 8002e34:	701a      	strb	r2, [r3, #0]
}
 8002e36:	e1ff      	b.n	8003238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2b10      	cmp	r3, #16
 8002e4c:	d155      	bne.n	8002efa <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	440b      	add	r3, r1
 8002e5c:	3358      	adds	r3, #88	; 0x58
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	335d      	adds	r3, #93	; 0x5d
 8002e72:	2203      	movs	r2, #3
 8002e74:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	440b      	add	r3, r1
 8002e84:	333d      	adds	r3, #61	; 0x3d
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d114      	bne.n	8002eb6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	333c      	adds	r3, #60	; 0x3c
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	333d      	adds	r3, #61	; 0x3d
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	0151      	lsls	r1, r2, #5
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	440a      	add	r2, r1
 8002ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 fd04 	bl	80068ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	6093      	str	r3, [r2, #8]
}
 8002ef8:	e19e      	b.n	8003238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0c:	2b80      	cmp	r3, #128	; 0x80
 8002f0e:	d12b      	bne.n	8002f68 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	0151      	lsls	r1, r2, #5
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	440a      	add	r2, r1
 8002f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f2a:	f043 0302 	orr.w	r3, r3, #2
 8002f2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 fcd7 	bl	80068ee <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	440b      	add	r3, r1
 8002f4e:	335d      	adds	r3, #93	; 0x5d
 8002f50:	2206      	movs	r2, #6
 8002f52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	461a      	mov	r2, r3
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	6093      	str	r3, [r2, #8]
}
 8002f66:	e167      	b.n	8003238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7e:	d135      	bne.n	8002fec <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	0151      	lsls	r1, r2, #5
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	440a      	add	r2, r1
 8002f96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f9a:	f043 0302 	orr.w	r3, r3, #2
 8002f9e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f003 fc9f 	bl	80068ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	440b      	add	r3, r1
 8002fe4:	335d      	adds	r3, #93	; 0x5d
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	701a      	strb	r2, [r3, #0]
}
 8002fea:	e125      	b.n	8003238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	f040 811a 	bne.w	8003238 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	0151      	lsls	r1, r2, #5
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	440a      	add	r2, r1
 800301a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800301e:	f023 0302 	bic.w	r3, r3, #2
 8003022:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	335d      	adds	r3, #93	; 0x5d
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d137      	bne.n	80030aa <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	440b      	add	r3, r1
 8003048:	335c      	adds	r3, #92	; 0x5c
 800304a:	2201      	movs	r2, #1
 800304c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	440b      	add	r3, r1
 800305c:	333f      	adds	r3, #63	; 0x3f
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d00b      	beq.n	800307c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	440b      	add	r3, r1
 8003072:	333f      	adds	r3, #63	; 0x3f
 8003074:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003076:	2b03      	cmp	r3, #3
 8003078:	f040 80c5 	bne.w	8003206 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	440b      	add	r3, r1
 800308a:	3351      	adds	r3, #81	; 0x51
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	f083 0301 	eor.w	r3, r3, #1
 8003092:	b2d8      	uxtb	r0, r3
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	440b      	add	r3, r1
 80030a2:	3351      	adds	r3, #81	; 0x51
 80030a4:	4602      	mov	r2, r0
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e0ad      	b.n	8003206 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	440b      	add	r3, r1
 80030b8:	335d      	adds	r3, #93	; 0x5d
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d10a      	bne.n	80030d6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	440b      	add	r3, r1
 80030ce:	335c      	adds	r3, #92	; 0x5c
 80030d0:	2202      	movs	r2, #2
 80030d2:	701a      	strb	r2, [r3, #0]
 80030d4:	e097      	b.n	8003206 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	440b      	add	r3, r1
 80030e4:	335d      	adds	r3, #93	; 0x5d
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d10a      	bne.n	8003102 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	440b      	add	r3, r1
 80030fa:	335c      	adds	r3, #92	; 0x5c
 80030fc:	2202      	movs	r2, #2
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	e081      	b.n	8003206 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	440b      	add	r3, r1
 8003110:	335d      	adds	r3, #93	; 0x5d
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b05      	cmp	r3, #5
 8003116:	d10a      	bne.n	800312e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	440b      	add	r3, r1
 8003126:	335c      	adds	r3, #92	; 0x5c
 8003128:	2205      	movs	r2, #5
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	e06b      	b.n	8003206 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	440b      	add	r3, r1
 800313c:	335d      	adds	r3, #93	; 0x5d
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b06      	cmp	r3, #6
 8003142:	d00a      	beq.n	800315a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	440b      	add	r3, r1
 8003152:	335d      	adds	r3, #93	; 0x5d
 8003154:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003156:	2b08      	cmp	r3, #8
 8003158:	d155      	bne.n	8003206 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	440b      	add	r3, r1
 8003168:	3358      	adds	r3, #88	; 0x58
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	1c59      	adds	r1, r3, #1
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4403      	add	r3, r0
 800317c:	3358      	adds	r3, #88	; 0x58
 800317e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	440b      	add	r3, r1
 800318e:	3358      	adds	r3, #88	; 0x58
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b03      	cmp	r3, #3
 8003194:	d914      	bls.n	80031c0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	440b      	add	r3, r1
 80031a4:	3358      	adds	r3, #88	; 0x58
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	440b      	add	r3, r1
 80031b8:	335c      	adds	r3, #92	; 0x5c
 80031ba:	2204      	movs	r2, #4
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	e009      	b.n	80031d4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	440b      	add	r3, r1
 80031ce:	335c      	adds	r3, #92	; 0x5c
 80031d0:	2202      	movs	r2, #2
 80031d2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031ea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031f2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003200:	461a      	mov	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4413      	add	r3, r2
 800320e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003212:	461a      	mov	r2, r3
 8003214:	2302      	movs	r3, #2
 8003216:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	b2d8      	uxtb	r0, r3
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	440b      	add	r3, r1
 800322a:	335c      	adds	r3, #92	; 0x5c
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	4601      	mov	r1, r0
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f005 fcfe 	bl	8008c34 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003238:	bf00      	nop
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	0c5b      	lsrs	r3, r3, #17
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003274:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d003      	beq.n	8003284 <HCD_RXQLVL_IRQHandler+0x44>
 800327c:	2b05      	cmp	r3, #5
 800327e:	f000 8082 	beq.w	8003386 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003282:	e083      	b.n	800338c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d07f      	beq.n	800338a <HCD_RXQLVL_IRQHandler+0x14a>
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	440b      	add	r3, r1
 8003298:	3344      	adds	r3, #68	; 0x44
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d074      	beq.n	800338a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	440b      	add	r3, r1
 80032b2:	3344      	adds	r3, #68	; 0x44
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	b292      	uxth	r2, r2
 80032ba:	4619      	mov	r1, r3
 80032bc:	f002 feb5 	bl	800602a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	440b      	add	r3, r1
 80032ce:	3344      	adds	r3, #68	; 0x44
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	18d1      	adds	r1, r2, r3
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4403      	add	r3, r0
 80032e4:	3344      	adds	r3, #68	; 0x44
 80032e6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	440b      	add	r3, r1
 80032f6:	334c      	adds	r3, #76	; 0x4c
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	18d1      	adds	r1, r2, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4403      	add	r3, r0
 800330c:	334c      	adds	r3, #76	; 0x4c
 800330e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <HCD_RXQLVL_IRQHandler+0x154>)
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d031      	beq.n	800338a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	4413      	add	r3, r2
 800332e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800333c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003344:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	461a      	mov	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	3350      	adds	r3, #80	; 0x50
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	f083 0301 	eor.w	r3, r3, #1
 800336e:	b2d8      	uxtb	r0, r3
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	440b      	add	r3, r1
 800337e:	3350      	adds	r3, #80	; 0x50
 8003380:	4602      	mov	r2, r0
 8003382:	701a      	strb	r2, [r3, #0]
      break;
 8003384:	e001      	b.n	800338a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003386:	bf00      	nop
 8003388:	e000      	b.n	800338c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800338a:	bf00      	nop
  }
}
 800338c:	bf00      	nop
 800338e:	3728      	adds	r7, #40	; 0x28
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	1ff80000 	.word	0x1ff80000

08003398 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80033c4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d10b      	bne.n	80033e8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d102      	bne.n	80033e0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f005 fc0e 	bl	8008bfc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f043 0302 	orr.w	r3, r3, #2
 80033e6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d132      	bne.n	8003458 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f043 0308 	orr.w	r3, r3, #8
 80033f8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b04      	cmp	r3, #4
 8003402:	d126      	bne.n	8003452 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d113      	bne.n	8003434 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003412:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003416:	d106      	bne.n	8003426 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2102      	movs	r1, #2
 800341e:	4618      	mov	r0, r3
 8003420:	f002 ff3e 	bl	80062a0 <USB_InitFSLSPClkSel>
 8003424:	e011      	b.n	800344a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2101      	movs	r1, #1
 800342c:	4618      	mov	r0, r3
 800342e:	f002 ff37 	bl	80062a0 <USB_InitFSLSPClkSel>
 8003432:	e00a      	b.n	800344a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d106      	bne.n	800344a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003442:	461a      	mov	r2, r3
 8003444:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003448:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f005 fc00 	bl	8008c50 <HAL_HCD_PortEnabled_Callback>
 8003450:	e002      	b.n	8003458 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f005 fc0a 	bl	8008c6c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b20      	cmp	r3, #32
 8003460:	d103      	bne.n	800346a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f043 0320 	orr.w	r3, r3, #32
 8003468:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003470:	461a      	mov	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	6013      	str	r3, [r2, #0]
}
 8003476:	bf00      	nop
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e11f      	b.n	80036d2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fd fd34 	bl	8000f14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2224      	movs	r2, #36	; 0x24
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0201 	bic.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034e4:	f001 f9de 	bl	80048a4 <HAL_RCC_GetPCLK1Freq>
 80034e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4a7b      	ldr	r2, [pc, #492]	; (80036dc <HAL_I2C_Init+0x25c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d807      	bhi.n	8003504 <HAL_I2C_Init+0x84>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4a7a      	ldr	r2, [pc, #488]	; (80036e0 <HAL_I2C_Init+0x260>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	bf94      	ite	ls
 80034fc:	2301      	movls	r3, #1
 80034fe:	2300      	movhi	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	e006      	b.n	8003512 <HAL_I2C_Init+0x92>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a77      	ldr	r2, [pc, #476]	; (80036e4 <HAL_I2C_Init+0x264>)
 8003508:	4293      	cmp	r3, r2
 800350a:	bf94      	ite	ls
 800350c:	2301      	movls	r3, #1
 800350e:	2300      	movhi	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0db      	b.n	80036d2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4a72      	ldr	r2, [pc, #456]	; (80036e8 <HAL_I2C_Init+0x268>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	0c9b      	lsrs	r3, r3, #18
 8003524:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	4a64      	ldr	r2, [pc, #400]	; (80036dc <HAL_I2C_Init+0x25c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d802      	bhi.n	8003554 <HAL_I2C_Init+0xd4>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3301      	adds	r3, #1
 8003552:	e009      	b.n	8003568 <HAL_I2C_Init+0xe8>
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	4a63      	ldr	r2, [pc, #396]	; (80036ec <HAL_I2C_Init+0x26c>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	099b      	lsrs	r3, r3, #6
 8003566:	3301      	adds	r3, #1
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	430b      	orrs	r3, r1
 800356e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800357a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	4956      	ldr	r1, [pc, #344]	; (80036dc <HAL_I2C_Init+0x25c>)
 8003584:	428b      	cmp	r3, r1
 8003586:	d80d      	bhi.n	80035a4 <HAL_I2C_Init+0x124>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	1e59      	subs	r1, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	fbb1 f3f3 	udiv	r3, r1, r3
 8003596:	3301      	adds	r3, #1
 8003598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359c:	2b04      	cmp	r3, #4
 800359e:	bf38      	it	cc
 80035a0:	2304      	movcc	r3, #4
 80035a2:	e04f      	b.n	8003644 <HAL_I2C_Init+0x1c4>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d111      	bne.n	80035d0 <HAL_I2C_Init+0x150>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1e58      	subs	r0, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	440b      	add	r3, r1
 80035ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	e012      	b.n	80035f6 <HAL_I2C_Init+0x176>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1e58      	subs	r0, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	0099      	lsls	r1, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e6:	3301      	adds	r3, #1
 80035e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_Init+0x17e>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e022      	b.n	8003644 <HAL_I2C_Init+0x1c4>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10e      	bne.n	8003624 <HAL_I2C_Init+0x1a4>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1e58      	subs	r0, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6859      	ldr	r1, [r3, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	440b      	add	r3, r1
 8003614:	fbb0 f3f3 	udiv	r3, r0, r3
 8003618:	3301      	adds	r3, #1
 800361a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003622:	e00f      	b.n	8003644 <HAL_I2C_Init+0x1c4>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1e58      	subs	r0, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	0099      	lsls	r1, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	fbb0 f3f3 	udiv	r3, r0, r3
 800363a:	3301      	adds	r3, #1
 800363c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	6809      	ldr	r1, [r1, #0]
 8003648:	4313      	orrs	r3, r2
 800364a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69da      	ldr	r2, [r3, #28]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003672:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6911      	ldr	r1, [r2, #16]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68d2      	ldr	r2, [r2, #12]
 800367e:	4311      	orrs	r1, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	430b      	orrs	r3, r1
 8003686:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	000186a0 	.word	0x000186a0
 80036e0:	001e847f 	.word	0x001e847f
 80036e4:	003d08ff 	.word	0x003d08ff
 80036e8:	431bde83 	.word	0x431bde83
 80036ec:	10624dd3 	.word	0x10624dd3

080036f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e128      	b.n	8003954 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a90      	ldr	r2, [pc, #576]	; (800395c <HAL_I2S_Init+0x26c>)
 800371a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7fd fc41 	bl	8000fa4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003738:	f023 030f 	bic.w	r3, r3, #15
 800373c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2202      	movs	r2, #2
 8003744:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d060      	beq.n	8003810 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d102      	bne.n	800375c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003756:	2310      	movs	r3, #16
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	e001      	b.n	8003760 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800375c:	2320      	movs	r3, #32
 800375e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b20      	cmp	r3, #32
 8003766:	d802      	bhi.n	800376e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800376e:	2001      	movs	r0, #1
 8003770:	f001 f9a2 	bl	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003774:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800377e:	d125      	bne.n	80037cc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d010      	beq.n	80037aa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	461a      	mov	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a4:	3305      	adds	r3, #5
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	e01f      	b.n	80037ea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	461a      	mov	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	3305      	adds	r3, #5
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	e00e      	b.n	80037ea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	461a      	mov	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	3305      	adds	r3, #5
 80037e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4a5c      	ldr	r2, [pc, #368]	; (8003960 <HAL_I2S_Init+0x270>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	08db      	lsrs	r3, r3, #3
 80037f4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	085b      	lsrs	r3, r3, #1
 8003806:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	e003      	b.n	8003818 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003810:	2302      	movs	r3, #2
 8003812:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d902      	bls.n	8003824 <HAL_I2S_Init+0x134>
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	2bff      	cmp	r3, #255	; 0xff
 8003822:	d907      	bls.n	8003834 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	f043 0210 	orr.w	r2, r3, #16
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e08f      	b.n	8003954 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	ea42 0103 	orr.w	r1, r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	430a      	orrs	r2, r1
 8003846:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003852:	f023 030f 	bic.w	r3, r3, #15
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6851      	ldr	r1, [r2, #4]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6892      	ldr	r2, [r2, #8]
 800385e:	4311      	orrs	r1, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	68d2      	ldr	r2, [r2, #12]
 8003864:	4311      	orrs	r1, r2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6992      	ldr	r2, [r2, #24]
 800386a:	430a      	orrs	r2, r1
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003876:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d161      	bne.n	8003944 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a38      	ldr	r2, [pc, #224]	; (8003964 <HAL_I2S_Init+0x274>)
 8003884:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a37      	ldr	r2, [pc, #220]	; (8003968 <HAL_I2S_Init+0x278>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d101      	bne.n	8003894 <HAL_I2S_Init+0x1a4>
 8003890:	4b36      	ldr	r3, [pc, #216]	; (800396c <HAL_I2S_Init+0x27c>)
 8003892:	e001      	b.n	8003898 <HAL_I2S_Init+0x1a8>
 8003894:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	4932      	ldr	r1, [pc, #200]	; (8003968 <HAL_I2S_Init+0x278>)
 80038a0:	428a      	cmp	r2, r1
 80038a2:	d101      	bne.n	80038a8 <HAL_I2S_Init+0x1b8>
 80038a4:	4a31      	ldr	r2, [pc, #196]	; (800396c <HAL_I2S_Init+0x27c>)
 80038a6:	e001      	b.n	80038ac <HAL_I2S_Init+0x1bc>
 80038a8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80038ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038b0:	f023 030f 	bic.w	r3, r3, #15
 80038b4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a2b      	ldr	r2, [pc, #172]	; (8003968 <HAL_I2S_Init+0x278>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d101      	bne.n	80038c4 <HAL_I2S_Init+0x1d4>
 80038c0:	4b2a      	ldr	r3, [pc, #168]	; (800396c <HAL_I2S_Init+0x27c>)
 80038c2:	e001      	b.n	80038c8 <HAL_I2S_Init+0x1d8>
 80038c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c8:	2202      	movs	r2, #2
 80038ca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a25      	ldr	r2, [pc, #148]	; (8003968 <HAL_I2S_Init+0x278>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d101      	bne.n	80038da <HAL_I2S_Init+0x1ea>
 80038d6:	4b25      	ldr	r3, [pc, #148]	; (800396c <HAL_I2S_Init+0x27c>)
 80038d8:	e001      	b.n	80038de <HAL_I2S_Init+0x1ee>
 80038da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ea:	d003      	beq.n	80038f4 <HAL_I2S_Init+0x204>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d103      	bne.n	80038fc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80038f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	e001      	b.n	8003900 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	b299      	uxth	r1, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003916:	4303      	orrs	r3, r0
 8003918:	b29b      	uxth	r3, r3
 800391a:	430b      	orrs	r3, r1
 800391c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800391e:	4313      	orrs	r3, r2
 8003920:	b29a      	uxth	r2, r3
 8003922:	897b      	ldrh	r3, [r7, #10]
 8003924:	4313      	orrs	r3, r2
 8003926:	b29b      	uxth	r3, r3
 8003928:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800392c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a0d      	ldr	r2, [pc, #52]	; (8003968 <HAL_I2S_Init+0x278>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d101      	bne.n	800393c <HAL_I2S_Init+0x24c>
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <HAL_I2S_Init+0x27c>)
 800393a:	e001      	b.n	8003940 <HAL_I2S_Init+0x250>
 800393c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003940:	897a      	ldrh	r2, [r7, #10]
 8003942:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3720      	adds	r7, #32
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	08003a67 	.word	0x08003a67
 8003960:	cccccccd 	.word	0xcccccccd
 8003964:	08003b7d 	.word	0x08003b7d
 8003968:	40003800 	.word	0x40003800
 800396c:	40003400 	.word	0x40003400

08003970 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	881a      	ldrh	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	1c9a      	adds	r2, r3, #2
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10e      	bne.n	8003a00 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039f0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff ffb8 	bl	8003970 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	b292      	uxth	r2, r2
 8003a1c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	1c9a      	adds	r2, r3, #2
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10e      	bne.n	8003a5e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a4e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff ff93 	bl	8003984 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b086      	sub	sp, #24
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d13a      	bne.n	8003af8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d109      	bne.n	8003aa0 <I2S_IRQHandler+0x3a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d102      	bne.n	8003aa0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ffb4 	bl	8003a08 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa6:	2b40      	cmp	r3, #64	; 0x40
 8003aa8:	d126      	bne.n	8003af8 <I2S_IRQHandler+0x92>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d11f      	bne.n	8003af8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ac6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ac8:	2300      	movs	r3, #0
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f043 0202 	orr.w	r2, r3, #2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff ff50 	bl	8003998 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d136      	bne.n	8003b72 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d109      	bne.n	8003b22 <I2S_IRQHandler+0xbc>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b18:	2b80      	cmp	r3, #128	; 0x80
 8003b1a:	d102      	bne.n	8003b22 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff ff45 	bl	80039ac <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d122      	bne.n	8003b72 <I2S_IRQHandler+0x10c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d11b      	bne.n	8003b72 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b48:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b64:	f043 0204 	orr.w	r2, r3, #4
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff ff13 	bl	8003998 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b72:	bf00      	nop
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4aa2      	ldr	r2, [pc, #648]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d101      	bne.n	8003b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b96:	4ba2      	ldr	r3, [pc, #648]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b98:	e001      	b.n	8003b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a9b      	ldr	r2, [pc, #620]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d101      	bne.n	8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003bb4:	4b9a      	ldr	r3, [pc, #616]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bb6:	e001      	b.n	8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003bb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc8:	d004      	beq.n	8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f040 8099 	bne.w	8003d06 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d107      	bne.n	8003bee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f925 	bl	8003e38 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f9c8 	bl	8003f98 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	d13a      	bne.n	8003c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d035      	beq.n	8003c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a7e      	ldr	r2, [pc, #504]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c26:	4b7e      	ldr	r3, [pc, #504]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c28:	e001      	b.n	8003c2e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4979      	ldr	r1, [pc, #484]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c36:	428b      	cmp	r3, r1
 8003c38:	d101      	bne.n	8003c3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c3a:	4b79      	ldr	r3, [pc, #484]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c3c:	e001      	b.n	8003c42 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c46:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7a:	f043 0202 	orr.w	r2, r3, #2
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff fe88 	bl	8003998 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	f040 80be 	bne.w	8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80b8 	beq.w	8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a59      	ldr	r2, [pc, #356]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d101      	bne.n	8003cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003cba:	4b59      	ldr	r3, [pc, #356]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cbc:	e001      	b.n	8003cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003cbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4954      	ldr	r1, [pc, #336]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cca:	428b      	cmp	r3, r1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003cce:	4b54      	ldr	r3, [pc, #336]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cd0:	e001      	b.n	8003cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003cd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cda:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	f043 0204 	orr.w	r2, r3, #4
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff fe4a 	bl	8003998 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d04:	e084      	b.n	8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d107      	bne.n	8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f8be 	bl	8003e9c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d107      	bne.n	8003d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f8fd 	bl	8003f34 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d40:	2b40      	cmp	r3, #64	; 0x40
 8003d42:	d12f      	bne.n	8003da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d02a      	beq.n	8003da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d5c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a2e      	ldr	r2, [pc, #184]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d101      	bne.n	8003d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003d68:	4b2d      	ldr	r3, [pc, #180]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d6a:	e001      	b.n	8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003d6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4929      	ldr	r1, [pc, #164]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d78:	428b      	cmp	r3, r1
 8003d7a:	d101      	bne.n	8003d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d7c:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d7e:	e001      	b.n	8003d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d88:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d96:	f043 0202 	orr.w	r2, r3, #2
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff fdfa 	bl	8003998 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d131      	bne.n	8003e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d02c      	beq.n	8003e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a17      	ldr	r2, [pc, #92]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d101      	bne.n	8003dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003dc2:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003dc4:	e001      	b.n	8003dca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003dc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4912      	ldr	r1, [pc, #72]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dd2:	428b      	cmp	r3, r1
 8003dd4:	d101      	bne.n	8003dda <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003dd8:	e001      	b.n	8003dde <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003dda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003de2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003df2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e00:	f043 0204 	orr.w	r2, r3, #4
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff fdc5 	bl	8003998 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e0e:	e000      	b.n	8003e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e10:	bf00      	nop
}
 8003e12:	bf00      	nop
 8003e14:	3720      	adds	r7, #32
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40003800 	.word	0x40003800
 8003e20:	40003400 	.word	0x40003400

08003e24 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	1c99      	adds	r1, r3, #2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6251      	str	r1, [r2, #36]	; 0x24
 8003e4a:	881a      	ldrh	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d113      	bne.n	8003e92 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e78:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff ffc9 	bl	8003e24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	1c99      	adds	r1, r3, #2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6251      	str	r1, [r2, #36]	; 0x24
 8003eae:	8819      	ldrh	r1, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <I2SEx_TxISR_I2SExt+0x90>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d101      	bne.n	8003ebe <I2SEx_TxISR_I2SExt+0x22>
 8003eba:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <I2SEx_TxISR_I2SExt+0x94>)
 8003ebc:	e001      	b.n	8003ec2 <I2SEx_TxISR_I2SExt+0x26>
 8003ebe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec2:	460a      	mov	r2, r1
 8003ec4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d121      	bne.n	8003f22 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a12      	ldr	r2, [pc, #72]	; (8003f2c <I2SEx_TxISR_I2SExt+0x90>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d101      	bne.n	8003eec <I2SEx_TxISR_I2SExt+0x50>
 8003ee8:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <I2SEx_TxISR_I2SExt+0x94>)
 8003eea:	e001      	b.n	8003ef0 <I2SEx_TxISR_I2SExt+0x54>
 8003eec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	490d      	ldr	r1, [pc, #52]	; (8003f2c <I2SEx_TxISR_I2SExt+0x90>)
 8003ef8:	428b      	cmp	r3, r1
 8003efa:	d101      	bne.n	8003f00 <I2SEx_TxISR_I2SExt+0x64>
 8003efc:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <I2SEx_TxISR_I2SExt+0x94>)
 8003efe:	e001      	b.n	8003f04 <I2SEx_TxISR_I2SExt+0x68>
 8003f00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f08:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff ff81 	bl	8003e24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40003800 	.word	0x40003800
 8003f30:	40003400 	.word	0x40003400

08003f34 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68d8      	ldr	r0, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	1c99      	adds	r1, r3, #2
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f4c:	b282      	uxth	r2, r0
 8003f4e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d113      	bne.n	8003f90 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f76:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff ff4a 	bl	8003e24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a20      	ldr	r2, [pc, #128]	; (8004028 <I2SEx_RxISR_I2SExt+0x90>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <I2SEx_RxISR_I2SExt+0x16>
 8003faa:	4b20      	ldr	r3, [pc, #128]	; (800402c <I2SEx_RxISR_I2SExt+0x94>)
 8003fac:	e001      	b.n	8003fb2 <I2SEx_RxISR_I2SExt+0x1a>
 8003fae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb2:	68d8      	ldr	r0, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	1c99      	adds	r1, r3, #2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003fbe:	b282      	uxth	r2, r0
 8003fc0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d121      	bne.n	800401e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a12      	ldr	r2, [pc, #72]	; (8004028 <I2SEx_RxISR_I2SExt+0x90>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d101      	bne.n	8003fe8 <I2SEx_RxISR_I2SExt+0x50>
 8003fe4:	4b11      	ldr	r3, [pc, #68]	; (800402c <I2SEx_RxISR_I2SExt+0x94>)
 8003fe6:	e001      	b.n	8003fec <I2SEx_RxISR_I2SExt+0x54>
 8003fe8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	490d      	ldr	r1, [pc, #52]	; (8004028 <I2SEx_RxISR_I2SExt+0x90>)
 8003ff4:	428b      	cmp	r3, r1
 8003ff6:	d101      	bne.n	8003ffc <I2SEx_RxISR_I2SExt+0x64>
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <I2SEx_RxISR_I2SExt+0x94>)
 8003ffa:	e001      	b.n	8004000 <I2SEx_RxISR_I2SExt+0x68>
 8003ffc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004000:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004004:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d106      	bne.n	800401e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff ff03 	bl	8003e24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40003800 	.word	0x40003800
 800402c:	40003400 	.word	0x40003400

08004030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e25b      	b.n	80044fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d075      	beq.n	800413a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800404e:	4ba3      	ldr	r3, [pc, #652]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b04      	cmp	r3, #4
 8004058:	d00c      	beq.n	8004074 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800405a:	4ba0      	ldr	r3, [pc, #640]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004062:	2b08      	cmp	r3, #8
 8004064:	d112      	bne.n	800408c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004066:	4b9d      	ldr	r3, [pc, #628]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004072:	d10b      	bne.n	800408c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	4b99      	ldr	r3, [pc, #612]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d05b      	beq.n	8004138 <HAL_RCC_OscConfig+0x108>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d157      	bne.n	8004138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e236      	b.n	80044fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004094:	d106      	bne.n	80040a4 <HAL_RCC_OscConfig+0x74>
 8004096:	4b91      	ldr	r3, [pc, #580]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a90      	ldr	r2, [pc, #576]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e01d      	b.n	80040e0 <HAL_RCC_OscConfig+0xb0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ac:	d10c      	bne.n	80040c8 <HAL_RCC_OscConfig+0x98>
 80040ae:	4b8b      	ldr	r3, [pc, #556]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a8a      	ldr	r2, [pc, #552]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	4b88      	ldr	r3, [pc, #544]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a87      	ldr	r2, [pc, #540]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	e00b      	b.n	80040e0 <HAL_RCC_OscConfig+0xb0>
 80040c8:	4b84      	ldr	r3, [pc, #528]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a83      	ldr	r2, [pc, #524]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80040ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	4b81      	ldr	r3, [pc, #516]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a80      	ldr	r2, [pc, #512]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80040da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d013      	beq.n	8004110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e8:	f7fd f9a8 	bl	800143c <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040f0:	f7fd f9a4 	bl	800143c <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b64      	cmp	r3, #100	; 0x64
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e1fb      	b.n	80044fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	4b76      	ldr	r3, [pc, #472]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0xc0>
 800410e:	e014      	b.n	800413a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004110:	f7fd f994 	bl	800143c <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004118:	f7fd f990 	bl	800143c <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b64      	cmp	r3, #100	; 0x64
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e1e7      	b.n	80044fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412a:	4b6c      	ldr	r3, [pc, #432]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0xe8>
 8004136:	e000      	b.n	800413a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d063      	beq.n	800420e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004146:	4b65      	ldr	r3, [pc, #404]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00b      	beq.n	800416a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004152:	4b62      	ldr	r3, [pc, #392]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800415a:	2b08      	cmp	r3, #8
 800415c:	d11c      	bne.n	8004198 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800415e:	4b5f      	ldr	r3, [pc, #380]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d116      	bne.n	8004198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416a:	4b5c      	ldr	r3, [pc, #368]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <HAL_RCC_OscConfig+0x152>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d001      	beq.n	8004182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e1bb      	b.n	80044fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004182:	4b56      	ldr	r3, [pc, #344]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4952      	ldr	r1, [pc, #328]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004192:	4313      	orrs	r3, r2
 8004194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004196:	e03a      	b.n	800420e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d020      	beq.n	80041e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a0:	4b4f      	ldr	r3, [pc, #316]	; (80042e0 <HAL_RCC_OscConfig+0x2b0>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a6:	f7fd f949 	bl	800143c <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ae:	f7fd f945 	bl	800143c <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e19c      	b.n	80044fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c0:	4b46      	ldr	r3, [pc, #280]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f0      	beq.n	80041ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041cc:	4b43      	ldr	r3, [pc, #268]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4940      	ldr	r1, [pc, #256]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	600b      	str	r3, [r1, #0]
 80041e0:	e015      	b.n	800420e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e2:	4b3f      	ldr	r3, [pc, #252]	; (80042e0 <HAL_RCC_OscConfig+0x2b0>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7fd f928 	bl	800143c <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041f0:	f7fd f924 	bl	800143c <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e17b      	b.n	80044fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004202:	4b36      	ldr	r3, [pc, #216]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d030      	beq.n	800427c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d016      	beq.n	8004250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004222:	4b30      	ldr	r3, [pc, #192]	; (80042e4 <HAL_RCC_OscConfig+0x2b4>)
 8004224:	2201      	movs	r2, #1
 8004226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004228:	f7fd f908 	bl	800143c <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004230:	f7fd f904 	bl	800143c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e15b      	b.n	80044fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004242:	4b26      	ldr	r3, [pc, #152]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0x200>
 800424e:	e015      	b.n	800427c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004250:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <HAL_RCC_OscConfig+0x2b4>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004256:	f7fd f8f1 	bl	800143c <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800425e:	f7fd f8ed 	bl	800143c <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e144      	b.n	80044fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004270:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f0      	bne.n	800425e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80a0 	beq.w	80043ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800428a:	2300      	movs	r3, #0
 800428c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800428e:	4b13      	ldr	r3, [pc, #76]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10f      	bne.n	80042ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800429a:	2300      	movs	r3, #0
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	4a0e      	ldr	r2, [pc, #56]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a8:	6413      	str	r3, [r2, #64]	; 0x40
 80042aa:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b2:	60bb      	str	r3, [r7, #8]
 80042b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b6:	2301      	movs	r3, #1
 80042b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ba:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_RCC_OscConfig+0x2b8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d121      	bne.n	800430a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042c6:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <HAL_RCC_OscConfig+0x2b8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a07      	ldr	r2, [pc, #28]	; (80042e8 <HAL_RCC_OscConfig+0x2b8>)
 80042cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042d2:	f7fd f8b3 	bl	800143c <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d8:	e011      	b.n	80042fe <HAL_RCC_OscConfig+0x2ce>
 80042da:	bf00      	nop
 80042dc:	40023800 	.word	0x40023800
 80042e0:	42470000 	.word	0x42470000
 80042e4:	42470e80 	.word	0x42470e80
 80042e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ec:	f7fd f8a6 	bl	800143c <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e0fd      	b.n	80044fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fe:	4b81      	ldr	r3, [pc, #516]	; (8004504 <HAL_RCC_OscConfig+0x4d4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d106      	bne.n	8004320 <HAL_RCC_OscConfig+0x2f0>
 8004312:	4b7d      	ldr	r3, [pc, #500]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004316:	4a7c      	ldr	r2, [pc, #496]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6713      	str	r3, [r2, #112]	; 0x70
 800431e:	e01c      	b.n	800435a <HAL_RCC_OscConfig+0x32a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b05      	cmp	r3, #5
 8004326:	d10c      	bne.n	8004342 <HAL_RCC_OscConfig+0x312>
 8004328:	4b77      	ldr	r3, [pc, #476]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 800432a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432c:	4a76      	ldr	r2, [pc, #472]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 800432e:	f043 0304 	orr.w	r3, r3, #4
 8004332:	6713      	str	r3, [r2, #112]	; 0x70
 8004334:	4b74      	ldr	r3, [pc, #464]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	4a73      	ldr	r2, [pc, #460]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	6713      	str	r3, [r2, #112]	; 0x70
 8004340:	e00b      	b.n	800435a <HAL_RCC_OscConfig+0x32a>
 8004342:	4b71      	ldr	r3, [pc, #452]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	4a70      	ldr	r2, [pc, #448]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	6713      	str	r3, [r2, #112]	; 0x70
 800434e:	4b6e      	ldr	r3, [pc, #440]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004352:	4a6d      	ldr	r2, [pc, #436]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 8004354:	f023 0304 	bic.w	r3, r3, #4
 8004358:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d015      	beq.n	800438e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004362:	f7fd f86b 	bl	800143c <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004368:	e00a      	b.n	8004380 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800436a:	f7fd f867 	bl	800143c <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	f241 3288 	movw	r2, #5000	; 0x1388
 8004378:	4293      	cmp	r3, r2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e0bc      	b.n	80044fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004380:	4b61      	ldr	r3, [pc, #388]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0ee      	beq.n	800436a <HAL_RCC_OscConfig+0x33a>
 800438c:	e014      	b.n	80043b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438e:	f7fd f855 	bl	800143c <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004394:	e00a      	b.n	80043ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004396:	f7fd f851 	bl	800143c <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e0a6      	b.n	80044fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ac:	4b56      	ldr	r3, [pc, #344]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1ee      	bne.n	8004396 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043b8:	7dfb      	ldrb	r3, [r7, #23]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d105      	bne.n	80043ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043be:	4b52      	ldr	r3, [pc, #328]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	4a51      	ldr	r2, [pc, #324]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 80043c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 8092 	beq.w	80044f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d4:	4b4c      	ldr	r3, [pc, #304]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 030c 	and.w	r3, r3, #12
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d05c      	beq.n	800449a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d141      	bne.n	800446c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e8:	4b48      	ldr	r3, [pc, #288]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ee:	f7fd f825 	bl	800143c <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f6:	f7fd f821 	bl	800143c <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e078      	b.n	80044fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004408:	4b3f      	ldr	r3, [pc, #252]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1f0      	bne.n	80043f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	019b      	lsls	r3, r3, #6
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	3b01      	subs	r3, #1
 800442e:	041b      	lsls	r3, r3, #16
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	061b      	lsls	r3, r3, #24
 8004438:	4933      	ldr	r1, [pc, #204]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 800443a:	4313      	orrs	r3, r2
 800443c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800443e:	4b33      	ldr	r3, [pc, #204]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 8004440:	2201      	movs	r2, #1
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004444:	f7fc fffa 	bl	800143c <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444c:	f7fc fff6 	bl	800143c <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e04d      	b.n	80044fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445e:	4b2a      	ldr	r3, [pc, #168]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f0      	beq.n	800444c <HAL_RCC_OscConfig+0x41c>
 800446a:	e045      	b.n	80044f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446c:	4b27      	ldr	r3, [pc, #156]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004472:	f7fc ffe3 	bl	800143c <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447a:	f7fc ffdf 	bl	800143c <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e036      	b.n	80044fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448c:	4b1e      	ldr	r3, [pc, #120]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1f0      	bne.n	800447a <HAL_RCC_OscConfig+0x44a>
 8004498:	e02e      	b.n	80044f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e029      	b.n	80044fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044a6:	4b18      	ldr	r3, [pc, #96]	; (8004508 <HAL_RCC_OscConfig+0x4d8>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d11c      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d115      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044ce:	4013      	ands	r3, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d10d      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d106      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40007000 	.word	0x40007000
 8004508:	40023800 	.word	0x40023800
 800450c:	42470060 	.word	0x42470060

08004510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0cc      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004524:	4b68      	ldr	r3, [pc, #416]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d90c      	bls.n	800454c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004532:	4b65      	ldr	r3, [pc, #404]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800453a:	4b63      	ldr	r3, [pc, #396]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d001      	beq.n	800454c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0b8      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d020      	beq.n	800459a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004564:	4b59      	ldr	r3, [pc, #356]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	4a58      	ldr	r2, [pc, #352]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800456e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800457c:	4b53      	ldr	r3, [pc, #332]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4a52      	ldr	r2, [pc, #328]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004588:	4b50      	ldr	r3, [pc, #320]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	494d      	ldr	r1, [pc, #308]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	4313      	orrs	r3, r2
 8004598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d044      	beq.n	8004630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d107      	bne.n	80045be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	4b47      	ldr	r3, [pc, #284]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d119      	bne.n	80045ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e07f      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d003      	beq.n	80045ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d107      	bne.n	80045de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ce:	4b3f      	ldr	r3, [pc, #252]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d109      	bne.n	80045ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e06f      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045de:	4b3b      	ldr	r3, [pc, #236]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e067      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ee:	4b37      	ldr	r3, [pc, #220]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f023 0203 	bic.w	r2, r3, #3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	4934      	ldr	r1, [pc, #208]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004600:	f7fc ff1c 	bl	800143c <HAL_GetTick>
 8004604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004606:	e00a      	b.n	800461e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004608:	f7fc ff18 	bl	800143c <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	f241 3288 	movw	r2, #5000	; 0x1388
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e04f      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461e:	4b2b      	ldr	r3, [pc, #172]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 020c 	and.w	r2, r3, #12
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	429a      	cmp	r2, r3
 800462e:	d1eb      	bne.n	8004608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004630:	4b25      	ldr	r3, [pc, #148]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d20c      	bcs.n	8004658 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463e:	4b22      	ldr	r3, [pc, #136]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004646:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d001      	beq.n	8004658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e032      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d008      	beq.n	8004676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004664:	4b19      	ldr	r3, [pc, #100]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4916      	ldr	r1, [pc, #88]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	4313      	orrs	r3, r2
 8004674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d009      	beq.n	8004696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004682:	4b12      	ldr	r3, [pc, #72]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	490e      	ldr	r1, [pc, #56]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004696:	f000 f821 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 800469a:	4601      	mov	r1, r0
 800469c:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	4a0a      	ldr	r2, [pc, #40]	; (80046d0 <HAL_RCC_ClockConfig+0x1c0>)
 80046a8:	5cd3      	ldrb	r3, [r2, r3]
 80046aa:	fa21 f303 	lsr.w	r3, r1, r3
 80046ae:	4a09      	ldr	r2, [pc, #36]	; (80046d4 <HAL_RCC_ClockConfig+0x1c4>)
 80046b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046b2:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <HAL_RCC_ClockConfig+0x1c8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fc fe7c 	bl	80013b4 <HAL_InitTick>

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40023c00 	.word	0x40023c00
 80046cc:	40023800 	.word	0x40023800
 80046d0:	08009a88 	.word	0x08009a88
 80046d4:	20000000 	.word	0x20000000
 80046d8:	20000004 	.word	0x20000004

080046dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	607b      	str	r3, [r7, #4]
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	2300      	movs	r3, #0
 80046ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046f2:	4b63      	ldr	r3, [pc, #396]	; (8004880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d007      	beq.n	800470e <HAL_RCC_GetSysClockFreq+0x32>
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d008      	beq.n	8004714 <HAL_RCC_GetSysClockFreq+0x38>
 8004702:	2b00      	cmp	r3, #0
 8004704:	f040 80b4 	bne.w	8004870 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004708:	4b5e      	ldr	r3, [pc, #376]	; (8004884 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800470a:	60bb      	str	r3, [r7, #8]
       break;
 800470c:	e0b3      	b.n	8004876 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800470e:	4b5e      	ldr	r3, [pc, #376]	; (8004888 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004710:	60bb      	str	r3, [r7, #8]
      break;
 8004712:	e0b0      	b.n	8004876 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004714:	4b5a      	ldr	r3, [pc, #360]	; (8004880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800471c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800471e:	4b58      	ldr	r3, [pc, #352]	; (8004880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d04a      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800472a:	4b55      	ldr	r3, [pc, #340]	; (8004880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	099b      	lsrs	r3, r3, #6
 8004730:	f04f 0400 	mov.w	r4, #0
 8004734:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	ea03 0501 	and.w	r5, r3, r1
 8004740:	ea04 0602 	and.w	r6, r4, r2
 8004744:	4629      	mov	r1, r5
 8004746:	4632      	mov	r2, r6
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	f04f 0400 	mov.w	r4, #0
 8004750:	0154      	lsls	r4, r2, #5
 8004752:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004756:	014b      	lsls	r3, r1, #5
 8004758:	4619      	mov	r1, r3
 800475a:	4622      	mov	r2, r4
 800475c:	1b49      	subs	r1, r1, r5
 800475e:	eb62 0206 	sbc.w	r2, r2, r6
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	f04f 0400 	mov.w	r4, #0
 800476a:	0194      	lsls	r4, r2, #6
 800476c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004770:	018b      	lsls	r3, r1, #6
 8004772:	1a5b      	subs	r3, r3, r1
 8004774:	eb64 0402 	sbc.w	r4, r4, r2
 8004778:	f04f 0100 	mov.w	r1, #0
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	00e2      	lsls	r2, r4, #3
 8004782:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004786:	00d9      	lsls	r1, r3, #3
 8004788:	460b      	mov	r3, r1
 800478a:	4614      	mov	r4, r2
 800478c:	195b      	adds	r3, r3, r5
 800478e:	eb44 0406 	adc.w	r4, r4, r6
 8004792:	f04f 0100 	mov.w	r1, #0
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	0262      	lsls	r2, r4, #9
 800479c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80047a0:	0259      	lsls	r1, r3, #9
 80047a2:	460b      	mov	r3, r1
 80047a4:	4614      	mov	r4, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	4621      	mov	r1, r4
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f04f 0400 	mov.w	r4, #0
 80047b0:	461a      	mov	r2, r3
 80047b2:	4623      	mov	r3, r4
 80047b4:	f7fb fd5c 	bl	8000270 <__aeabi_uldivmod>
 80047b8:	4603      	mov	r3, r0
 80047ba:	460c      	mov	r4, r1
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	e049      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047c0:	4b2f      	ldr	r3, [pc, #188]	; (8004880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	099b      	lsrs	r3, r3, #6
 80047c6:	f04f 0400 	mov.w	r4, #0
 80047ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	ea03 0501 	and.w	r5, r3, r1
 80047d6:	ea04 0602 	and.w	r6, r4, r2
 80047da:	4629      	mov	r1, r5
 80047dc:	4632      	mov	r2, r6
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	f04f 0400 	mov.w	r4, #0
 80047e6:	0154      	lsls	r4, r2, #5
 80047e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047ec:	014b      	lsls	r3, r1, #5
 80047ee:	4619      	mov	r1, r3
 80047f0:	4622      	mov	r2, r4
 80047f2:	1b49      	subs	r1, r1, r5
 80047f4:	eb62 0206 	sbc.w	r2, r2, r6
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	f04f 0400 	mov.w	r4, #0
 8004800:	0194      	lsls	r4, r2, #6
 8004802:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004806:	018b      	lsls	r3, r1, #6
 8004808:	1a5b      	subs	r3, r3, r1
 800480a:	eb64 0402 	sbc.w	r4, r4, r2
 800480e:	f04f 0100 	mov.w	r1, #0
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	00e2      	lsls	r2, r4, #3
 8004818:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800481c:	00d9      	lsls	r1, r3, #3
 800481e:	460b      	mov	r3, r1
 8004820:	4614      	mov	r4, r2
 8004822:	195b      	adds	r3, r3, r5
 8004824:	eb44 0406 	adc.w	r4, r4, r6
 8004828:	f04f 0100 	mov.w	r1, #0
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	02a2      	lsls	r2, r4, #10
 8004832:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004836:	0299      	lsls	r1, r3, #10
 8004838:	460b      	mov	r3, r1
 800483a:	4614      	mov	r4, r2
 800483c:	4618      	mov	r0, r3
 800483e:	4621      	mov	r1, r4
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f04f 0400 	mov.w	r4, #0
 8004846:	461a      	mov	r2, r3
 8004848:	4623      	mov	r3, r4
 800484a:	f7fb fd11 	bl	8000270 <__aeabi_uldivmod>
 800484e:	4603      	mov	r3, r0
 8004850:	460c      	mov	r4, r1
 8004852:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004854:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	0c1b      	lsrs	r3, r3, #16
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	3301      	adds	r3, #1
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	60bb      	str	r3, [r7, #8]
      break;
 800486e:	e002      	b.n	8004876 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004872:	60bb      	str	r3, [r7, #8]
      break;
 8004874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004876:	68bb      	ldr	r3, [r7, #8]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004880:	40023800 	.word	0x40023800
 8004884:	00f42400 	.word	0x00f42400
 8004888:	007a1200 	.word	0x007a1200

0800488c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004890:	4b03      	ldr	r3, [pc, #12]	; (80048a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004892:	681b      	ldr	r3, [r3, #0]
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000000 	.word	0x20000000

080048a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048a8:	f7ff fff0 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048ac:	4601      	mov	r1, r0
 80048ae:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	0a9b      	lsrs	r3, r3, #10
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	4a03      	ldr	r2, [pc, #12]	; (80048c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ba:	5cd3      	ldrb	r3, [r2, r3]
 80048bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40023800 	.word	0x40023800
 80048c8:	08009a98 	.word	0x08009a98

080048cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048d0:	f7ff ffdc 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048d4:	4601      	mov	r1, r0
 80048d6:	4b05      	ldr	r3, [pc, #20]	; (80048ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	0b5b      	lsrs	r3, r3, #13
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	4a03      	ldr	r2, [pc, #12]	; (80048f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048e2:	5cd3      	ldrb	r3, [r2, r3]
 80048e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40023800 	.word	0x40023800
 80048f0:	08009a98 	.word	0x08009a98

080048f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d105      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004918:	2b00      	cmp	r3, #0
 800491a:	d035      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800491c:	4b62      	ldr	r3, [pc, #392]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004922:	f7fc fd8b 	bl	800143c <HAL_GetTick>
 8004926:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004928:	e008      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800492a:	f7fc fd87 	bl	800143c <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e0b0      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800493c:	4b5b      	ldr	r3, [pc, #364]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1f0      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	019a      	lsls	r2, r3, #6
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	071b      	lsls	r3, r3, #28
 8004954:	4955      	ldr	r1, [pc, #340]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800495c:	4b52      	ldr	r3, [pc, #328]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800495e:	2201      	movs	r2, #1
 8004960:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004962:	f7fc fd6b 	bl	800143c <HAL_GetTick>
 8004966:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004968:	e008      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800496a:	f7fc fd67 	bl	800143c <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e090      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800497c:	4b4b      	ldr	r3, [pc, #300]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0f0      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8083 	beq.w	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	4b44      	ldr	r3, [pc, #272]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	4a43      	ldr	r2, [pc, #268]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a4:	6413      	str	r3, [r2, #64]	; 0x40
 80049a6:	4b41      	ldr	r3, [pc, #260]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80049b2:	4b3f      	ldr	r3, [pc, #252]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a3e      	ldr	r2, [pc, #248]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049be:	f7fc fd3d 	bl	800143c <HAL_GetTick>
 80049c2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049c4:	e008      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80049c6:	f7fc fd39 	bl	800143c <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e062      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049d8:	4b35      	ldr	r3, [pc, #212]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0f0      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049e4:	4b31      	ldr	r3, [pc, #196]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d02f      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d028      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a02:	4b2a      	ldr	r3, [pc, #168]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a0c:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a12:	4b28      	ldr	r3, [pc, #160]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a18:	4a24      	ldr	r2, [pc, #144]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a1e:	4b23      	ldr	r3, [pc, #140]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d114      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a2a:	f7fc fd07 	bl	800143c <HAL_GetTick>
 8004a2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a30:	e00a      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a32:	f7fc fd03 	bl	800143c <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e02a      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a48:	4b18      	ldr	r3, [pc, #96]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0ee      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a60:	d10d      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004a62:	4b12      	ldr	r3, [pc, #72]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a76:	490d      	ldr	r1, [pc, #52]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	608b      	str	r3, [r1, #8]
 8004a7c:	e005      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	4a0a      	ldr	r2, [pc, #40]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a88:	6093      	str	r3, [r2, #8]
 8004a8a:	4b08      	ldr	r3, [pc, #32]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a96:	4905      	ldr	r1, [pc, #20]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	42470068 	.word	0x42470068
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	40007000 	.word	0x40007000
 8004ab4:	42470e40 	.word	0x42470e40

08004ab8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d13d      	bne.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ad6:	4b22      	ldr	r3, [pc, #136]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ade:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d004      	beq.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d12f      	bne.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004aea:	4b1e      	ldr	r3, [pc, #120]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004aec:	617b      	str	r3, [r7, #20]
          break;
 8004aee:	e02f      	b.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004af0:	4b1b      	ldr	r3, [pc, #108]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004afc:	d108      	bne.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004afe:	4b18      	ldr	r3, [pc, #96]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b06:	4a18      	ldr	r2, [pc, #96]	; (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	e007      	b.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b10:	4b13      	ldr	r3, [pc, #76]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b18:	4a14      	ldr	r2, [pc, #80]	; (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004b20:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b26:	099b      	lsrs	r3, r3, #6
 8004b28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	fb02 f303 	mul.w	r3, r2, r3
 8004b32:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004b34:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b3a:	0f1b      	lsrs	r3, r3, #28
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b46:	617b      	str	r3, [r7, #20]
          break;
 8004b48:	e002      	b.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]
          break;
 8004b4e:	bf00      	nop
        }
      }
      break;
 8004b50:	bf00      	nop
    }
  }
  return frequency;
 8004b52:	697b      	ldr	r3, [r7, #20]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	371c      	adds	r7, #28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	40023800 	.word	0x40023800
 8004b64:	00bb8000 	.word	0x00bb8000
 8004b68:	007a1200 	.word	0x007a1200
 8004b6c:	00f42400 	.word	0x00f42400

08004b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e056      	b.n	8004c30 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d106      	bne.n	8004ba2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7fc fa69 	bl	8001074 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bb8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	ea42 0103 	orr.w	r1, r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	0c1b      	lsrs	r3, r3, #16
 8004c00:	f003 0104 	and.w	r1, r3, #4
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69da      	ldr	r2, [r3, #28]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e01d      	b.n	8004c86 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fc fa50 	bl	8001104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f000 f95e 	bl	8004f38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b085      	sub	sp, #20
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0201 	orr.w	r2, r2, #1
 8004ca4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b06      	cmp	r3, #6
 8004cb6:	d007      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b082      	sub	sp, #8
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d122      	bne.n	8004d32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d11b      	bne.n	8004d32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f06f 0202 	mvn.w	r2, #2
 8004d02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f8ee 	bl	8004efa <HAL_TIM_IC_CaptureCallback>
 8004d1e:	e005      	b.n	8004d2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f8e0 	bl	8004ee6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f8f1 	bl	8004f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d122      	bne.n	8004d86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d11b      	bne.n	8004d86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f06f 0204 	mvn.w	r2, #4
 8004d56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f8c4 	bl	8004efa <HAL_TIM_IC_CaptureCallback>
 8004d72:	e005      	b.n	8004d80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f8b6 	bl	8004ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f8c7 	bl	8004f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d122      	bne.n	8004dda <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d11b      	bne.n	8004dda <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f06f 0208 	mvn.w	r2, #8
 8004daa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2204      	movs	r2, #4
 8004db0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f89a 	bl	8004efa <HAL_TIM_IC_CaptureCallback>
 8004dc6:	e005      	b.n	8004dd4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f88c 	bl	8004ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f89d 	bl	8004f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f003 0310 	and.w	r3, r3, #16
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d122      	bne.n	8004e2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f003 0310 	and.w	r3, r3, #16
 8004df2:	2b10      	cmp	r3, #16
 8004df4:	d11b      	bne.n	8004e2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f06f 0210 	mvn.w	r2, #16
 8004dfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2208      	movs	r2, #8
 8004e04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f870 	bl	8004efa <HAL_TIM_IC_CaptureCallback>
 8004e1a:	e005      	b.n	8004e28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f862 	bl	8004ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f873 	bl	8004f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d10e      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d107      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f06f 0201 	mvn.w	r2, #1
 8004e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7fb fb8b 	bl	8000570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e64:	2b80      	cmp	r3, #128	; 0x80
 8004e66:	d10e      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e72:	2b80      	cmp	r3, #128	; 0x80
 8004e74:	d107      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f903 	bl	800508c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e90:	2b40      	cmp	r3, #64	; 0x40
 8004e92:	d10e      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d107      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f838 	bl	8004f22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	d10e      	bne.n	8004ede <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d107      	bne.n	8004ede <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f06f 0220 	mvn.w	r2, #32
 8004ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f8cd 	bl	8005078 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ede:	bf00      	nop
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
	...

08004f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a40      	ldr	r2, [pc, #256]	; (800504c <TIM_Base_SetConfig+0x114>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d013      	beq.n	8004f78 <TIM_Base_SetConfig+0x40>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f56:	d00f      	beq.n	8004f78 <TIM_Base_SetConfig+0x40>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a3d      	ldr	r2, [pc, #244]	; (8005050 <TIM_Base_SetConfig+0x118>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00b      	beq.n	8004f78 <TIM_Base_SetConfig+0x40>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a3c      	ldr	r2, [pc, #240]	; (8005054 <TIM_Base_SetConfig+0x11c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d007      	beq.n	8004f78 <TIM_Base_SetConfig+0x40>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a3b      	ldr	r2, [pc, #236]	; (8005058 <TIM_Base_SetConfig+0x120>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d003      	beq.n	8004f78 <TIM_Base_SetConfig+0x40>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a3a      	ldr	r2, [pc, #232]	; (800505c <TIM_Base_SetConfig+0x124>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d108      	bne.n	8004f8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a2f      	ldr	r2, [pc, #188]	; (800504c <TIM_Base_SetConfig+0x114>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d02b      	beq.n	8004fea <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f98:	d027      	beq.n	8004fea <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a2c      	ldr	r2, [pc, #176]	; (8005050 <TIM_Base_SetConfig+0x118>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d023      	beq.n	8004fea <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a2b      	ldr	r2, [pc, #172]	; (8005054 <TIM_Base_SetConfig+0x11c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d01f      	beq.n	8004fea <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a2a      	ldr	r2, [pc, #168]	; (8005058 <TIM_Base_SetConfig+0x120>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01b      	beq.n	8004fea <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a29      	ldr	r2, [pc, #164]	; (800505c <TIM_Base_SetConfig+0x124>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d017      	beq.n	8004fea <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a28      	ldr	r2, [pc, #160]	; (8005060 <TIM_Base_SetConfig+0x128>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d013      	beq.n	8004fea <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a27      	ldr	r2, [pc, #156]	; (8005064 <TIM_Base_SetConfig+0x12c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00f      	beq.n	8004fea <TIM_Base_SetConfig+0xb2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a26      	ldr	r2, [pc, #152]	; (8005068 <TIM_Base_SetConfig+0x130>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00b      	beq.n	8004fea <TIM_Base_SetConfig+0xb2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a25      	ldr	r2, [pc, #148]	; (800506c <TIM_Base_SetConfig+0x134>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d007      	beq.n	8004fea <TIM_Base_SetConfig+0xb2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a24      	ldr	r2, [pc, #144]	; (8005070 <TIM_Base_SetConfig+0x138>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d003      	beq.n	8004fea <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a23      	ldr	r2, [pc, #140]	; (8005074 <TIM_Base_SetConfig+0x13c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d108      	bne.n	8004ffc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a0a      	ldr	r2, [pc, #40]	; (800504c <TIM_Base_SetConfig+0x114>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d003      	beq.n	8005030 <TIM_Base_SetConfig+0xf8>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a0c      	ldr	r2, [pc, #48]	; (800505c <TIM_Base_SetConfig+0x124>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d103      	bne.n	8005038 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	615a      	str	r2, [r3, #20]
}
 800503e:	bf00      	nop
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40010000 	.word	0x40010000
 8005050:	40000400 	.word	0x40000400
 8005054:	40000800 	.word	0x40000800
 8005058:	40000c00 	.word	0x40000c00
 800505c:	40010400 	.word	0x40010400
 8005060:	40014000 	.word	0x40014000
 8005064:	40014400 	.word	0x40014400
 8005068:	40014800 	.word	0x40014800
 800506c:	40001800 	.word	0x40001800
 8005070:	40001c00 	.word	0x40001c00
 8005074:	40002000 	.word	0x40002000

08005078 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e03f      	b.n	8005132 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fc f844 	bl	8001154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2224      	movs	r2, #36	; 0x24
 80050d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 faf9 	bl	80056dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695a      	ldr	r2, [r3, #20]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005108:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005118:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800513a:	b480      	push	{r7}
 800513c:	b085      	sub	sp, #20
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	4613      	mov	r3, r2
 8005146:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b20      	cmp	r3, #32
 8005152:	d130      	bne.n	80051b6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <HAL_UART_Transmit_IT+0x26>
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e029      	b.n	80051b8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800516a:	2b01      	cmp	r3, #1
 800516c:	d101      	bne.n	8005172 <HAL_UART_Transmit_IT+0x38>
 800516e:	2302      	movs	r3, #2
 8005170:	e022      	b.n	80051b8 <HAL_UART_Transmit_IT+0x7e>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	88fa      	ldrh	r2, [r7, #6]
 8005184:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	88fa      	ldrh	r2, [r7, #6]
 800518a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2221      	movs	r2, #33	; 0x21
 8005196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051b0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	e000      	b.n	80051b8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80051b6:	2302      	movs	r3, #2
  }
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	4613      	mov	r3, r2
 80051d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b20      	cmp	r3, #32
 80051dc:	d140      	bne.n	8005260 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <HAL_UART_Receive_IT+0x26>
 80051e4:	88fb      	ldrh	r3, [r7, #6]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e039      	b.n	8005262 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_UART_Receive_IT+0x38>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e032      	b.n	8005262 <HAL_UART_Receive_IT+0x9e>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	88fa      	ldrh	r2, [r7, #6]
 800520e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	88fa      	ldrh	r2, [r7, #6]
 8005214:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2222      	movs	r2, #34	; 0x22
 8005220:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800523a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695a      	ldr	r2, [r3, #20]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0220 	orr.w	r2, r2, #32
 800525a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	e000      	b.n	8005262 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005260:	2302      	movs	r3, #2
  }
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005290:	2300      	movs	r3, #0
 8005292:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005294:	2300      	movs	r3, #0
 8005296:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10d      	bne.n	80052c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d008      	beq.n	80052c2 <HAL_UART_IRQHandler+0x52>
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f98c 	bl	80055d8 <UART_Receive_IT>
      return;
 80052c0:	e0d1      	b.n	8005466 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80b0 	beq.w	800542a <HAL_UART_IRQHandler+0x1ba>
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d105      	bne.n	80052e0 <HAL_UART_IRQHandler+0x70>
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 80a5 	beq.w	800542a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <HAL_UART_IRQHandler+0x90>
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f8:	f043 0201 	orr.w	r2, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <HAL_UART_IRQHandler+0xb0>
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d005      	beq.n	8005320 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005318:	f043 0202 	orr.w	r2, r3, #2
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <HAL_UART_IRQHandler+0xd0>
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005338:	f043 0204 	orr.w	r2, r3, #4
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00f      	beq.n	800536a <HAL_UART_IRQHandler+0xfa>
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d104      	bne.n	800535e <HAL_UART_IRQHandler+0xee>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005362:	f043 0208 	orr.w	r2, r3, #8
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536e:	2b00      	cmp	r3, #0
 8005370:	d078      	beq.n	8005464 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d007      	beq.n	800538c <HAL_UART_IRQHandler+0x11c>
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f926 	bl	80055d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005396:	2b40      	cmp	r3, #64	; 0x40
 8005398:	bf0c      	ite	eq
 800539a:	2301      	moveq	r3, #1
 800539c:	2300      	movne	r3, #0
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d102      	bne.n	80053b4 <HAL_UART_IRQHandler+0x144>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d031      	beq.n	8005418 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f86f 	bl	8005498 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c4:	2b40      	cmp	r3, #64	; 0x40
 80053c6:	d123      	bne.n	8005410 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695a      	ldr	r2, [r3, #20]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d013      	beq.n	8005408 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e4:	4a21      	ldr	r2, [pc, #132]	; (800546c <HAL_UART_IRQHandler+0x1fc>)
 80053e6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fc f964 	bl	80016ba <HAL_DMA_Abort_IT>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d016      	beq.n	8005426 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005402:	4610      	mov	r0, r2
 8005404:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005406:	e00e      	b.n	8005426 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f83b 	bl	8005484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540e:	e00a      	b.n	8005426 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f837 	bl	8005484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005416:	e006      	b.n	8005426 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f833 	bl	8005484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005424:	e01e      	b.n	8005464 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005426:	bf00      	nop
    return;
 8005428:	e01c      	b.n	8005464 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005430:	2b00      	cmp	r3, #0
 8005432:	d008      	beq.n	8005446 <HAL_UART_IRQHandler+0x1d6>
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f85c 	bl	80054fc <UART_Transmit_IT>
    return;
 8005444:	e00f      	b.n	8005466 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <HAL_UART_IRQHandler+0x1f6>
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f8a4 	bl	80055a8 <UART_EndTransmit_IT>
    return;
 8005460:	bf00      	nop
 8005462:	e000      	b.n	8005466 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005464:	bf00      	nop
  }
}
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	080054d5 	.word	0x080054d5

08005470 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80054ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695a      	ldr	r2, [r3, #20]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0201 	bic.w	r2, r2, #1
 80054be:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f7ff ffc8 	bl	8005484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054f4:	bf00      	nop
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b21      	cmp	r3, #33	; 0x21
 800550e:	d144      	bne.n	800559a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005518:	d11a      	bne.n	8005550 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800552e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d105      	bne.n	8005544 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	1c9a      	adds	r2, r3, #2
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	621a      	str	r2, [r3, #32]
 8005542:	e00e      	b.n	8005562 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	621a      	str	r2, [r3, #32]
 800554e:	e008      	b.n	8005562 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	1c59      	adds	r1, r3, #1
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6211      	str	r1, [r2, #32]
 800555a:	781a      	ldrb	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b29b      	uxth	r3, r3
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	4619      	mov	r1, r3
 8005570:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10f      	bne.n	8005596 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005584:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005594:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	e000      	b.n	800559c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800559a:	2302      	movs	r3, #2
  }
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff ff51 	bl	8005470 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b22      	cmp	r3, #34	; 0x22
 80055ea:	d171      	bne.n	80056d0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f4:	d123      	bne.n	800563e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10e      	bne.n	8005622 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	b29b      	uxth	r3, r3
 800560c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561a:	1c9a      	adds	r2, r3, #2
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	629a      	str	r2, [r3, #40]	; 0x28
 8005620:	e029      	b.n	8005676 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	b29b      	uxth	r3, r3
 800562a:	b2db      	uxtb	r3, r3
 800562c:	b29a      	uxth	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	629a      	str	r2, [r3, #40]	; 0x28
 800563c:	e01b      	b.n	8005676 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10a      	bne.n	800565c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6858      	ldr	r0, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005650:	1c59      	adds	r1, r3, #1
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6291      	str	r1, [r2, #40]	; 0x28
 8005656:	b2c2      	uxtb	r2, r0
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	e00c      	b.n	8005676 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	b2da      	uxtb	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005668:	1c58      	adds	r0, r3, #1
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	6288      	str	r0, [r1, #40]	; 0x28
 800566e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800567a:	b29b      	uxth	r3, r3
 800567c:	3b01      	subs	r3, #1
 800567e:	b29b      	uxth	r3, r3
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	4619      	mov	r1, r3
 8005684:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005686:	2b00      	cmp	r3, #0
 8005688:	d120      	bne.n	80056cc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0220 	bic.w	r2, r2, #32
 8005698:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695a      	ldr	r2, [r3, #20]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0201 	bic.w	r2, r2, #1
 80056b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fa ff6a 	bl	800059c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	e002      	b.n	80056d2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	e000      	b.n	80056d2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80056d0:	2302      	movs	r3, #2
  }
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
	...

080056dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	4313      	orrs	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800571e:	f023 030c 	bic.w	r3, r3, #12
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6812      	ldr	r2, [r2, #0]
 8005726:	68f9      	ldr	r1, [r7, #12]
 8005728:	430b      	orrs	r3, r1
 800572a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699a      	ldr	r2, [r3, #24]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800574a:	f040 818b 	bne.w	8005a64 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4ac1      	ldr	r2, [pc, #772]	; (8005a58 <UART_SetConfig+0x37c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d005      	beq.n	8005764 <UART_SetConfig+0x88>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4abf      	ldr	r2, [pc, #764]	; (8005a5c <UART_SetConfig+0x380>)
 800575e:	4293      	cmp	r3, r2
 8005760:	f040 80bd 	bne.w	80058de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005764:	f7ff f8b2 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 8005768:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	461d      	mov	r5, r3
 800576e:	f04f 0600 	mov.w	r6, #0
 8005772:	46a8      	mov	r8, r5
 8005774:	46b1      	mov	r9, r6
 8005776:	eb18 0308 	adds.w	r3, r8, r8
 800577a:	eb49 0409 	adc.w	r4, r9, r9
 800577e:	4698      	mov	r8, r3
 8005780:	46a1      	mov	r9, r4
 8005782:	eb18 0805 	adds.w	r8, r8, r5
 8005786:	eb49 0906 	adc.w	r9, r9, r6
 800578a:	f04f 0100 	mov.w	r1, #0
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005796:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800579a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800579e:	4688      	mov	r8, r1
 80057a0:	4691      	mov	r9, r2
 80057a2:	eb18 0005 	adds.w	r0, r8, r5
 80057a6:	eb49 0106 	adc.w	r1, r9, r6
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	461d      	mov	r5, r3
 80057b0:	f04f 0600 	mov.w	r6, #0
 80057b4:	196b      	adds	r3, r5, r5
 80057b6:	eb46 0406 	adc.w	r4, r6, r6
 80057ba:	461a      	mov	r2, r3
 80057bc:	4623      	mov	r3, r4
 80057be:	f7fa fd57 	bl	8000270 <__aeabi_uldivmod>
 80057c2:	4603      	mov	r3, r0
 80057c4:	460c      	mov	r4, r1
 80057c6:	461a      	mov	r2, r3
 80057c8:	4ba5      	ldr	r3, [pc, #660]	; (8005a60 <UART_SetConfig+0x384>)
 80057ca:	fba3 2302 	umull	r2, r3, r3, r2
 80057ce:	095b      	lsrs	r3, r3, #5
 80057d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	461d      	mov	r5, r3
 80057d8:	f04f 0600 	mov.w	r6, #0
 80057dc:	46a9      	mov	r9, r5
 80057de:	46b2      	mov	sl, r6
 80057e0:	eb19 0309 	adds.w	r3, r9, r9
 80057e4:	eb4a 040a 	adc.w	r4, sl, sl
 80057e8:	4699      	mov	r9, r3
 80057ea:	46a2      	mov	sl, r4
 80057ec:	eb19 0905 	adds.w	r9, r9, r5
 80057f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80057f4:	f04f 0100 	mov.w	r1, #0
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005800:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005804:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005808:	4689      	mov	r9, r1
 800580a:	4692      	mov	sl, r2
 800580c:	eb19 0005 	adds.w	r0, r9, r5
 8005810:	eb4a 0106 	adc.w	r1, sl, r6
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	461d      	mov	r5, r3
 800581a:	f04f 0600 	mov.w	r6, #0
 800581e:	196b      	adds	r3, r5, r5
 8005820:	eb46 0406 	adc.w	r4, r6, r6
 8005824:	461a      	mov	r2, r3
 8005826:	4623      	mov	r3, r4
 8005828:	f7fa fd22 	bl	8000270 <__aeabi_uldivmod>
 800582c:	4603      	mov	r3, r0
 800582e:	460c      	mov	r4, r1
 8005830:	461a      	mov	r2, r3
 8005832:	4b8b      	ldr	r3, [pc, #556]	; (8005a60 <UART_SetConfig+0x384>)
 8005834:	fba3 1302 	umull	r1, r3, r3, r2
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	2164      	movs	r1, #100	; 0x64
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	3332      	adds	r3, #50	; 0x32
 8005846:	4a86      	ldr	r2, [pc, #536]	; (8005a60 <UART_SetConfig+0x384>)
 8005848:	fba2 2303 	umull	r2, r3, r2, r3
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005854:	4498      	add	r8, r3
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	461d      	mov	r5, r3
 800585a:	f04f 0600 	mov.w	r6, #0
 800585e:	46a9      	mov	r9, r5
 8005860:	46b2      	mov	sl, r6
 8005862:	eb19 0309 	adds.w	r3, r9, r9
 8005866:	eb4a 040a 	adc.w	r4, sl, sl
 800586a:	4699      	mov	r9, r3
 800586c:	46a2      	mov	sl, r4
 800586e:	eb19 0905 	adds.w	r9, r9, r5
 8005872:	eb4a 0a06 	adc.w	sl, sl, r6
 8005876:	f04f 0100 	mov.w	r1, #0
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005882:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005886:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800588a:	4689      	mov	r9, r1
 800588c:	4692      	mov	sl, r2
 800588e:	eb19 0005 	adds.w	r0, r9, r5
 8005892:	eb4a 0106 	adc.w	r1, sl, r6
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	461d      	mov	r5, r3
 800589c:	f04f 0600 	mov.w	r6, #0
 80058a0:	196b      	adds	r3, r5, r5
 80058a2:	eb46 0406 	adc.w	r4, r6, r6
 80058a6:	461a      	mov	r2, r3
 80058a8:	4623      	mov	r3, r4
 80058aa:	f7fa fce1 	bl	8000270 <__aeabi_uldivmod>
 80058ae:	4603      	mov	r3, r0
 80058b0:	460c      	mov	r4, r1
 80058b2:	461a      	mov	r2, r3
 80058b4:	4b6a      	ldr	r3, [pc, #424]	; (8005a60 <UART_SetConfig+0x384>)
 80058b6:	fba3 1302 	umull	r1, r3, r3, r2
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	2164      	movs	r1, #100	; 0x64
 80058be:	fb01 f303 	mul.w	r3, r1, r3
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	3332      	adds	r3, #50	; 0x32
 80058c8:	4a65      	ldr	r2, [pc, #404]	; (8005a60 <UART_SetConfig+0x384>)
 80058ca:	fba2 2303 	umull	r2, r3, r2, r3
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	f003 0207 	and.w	r2, r3, #7
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4442      	add	r2, r8
 80058da:	609a      	str	r2, [r3, #8]
 80058dc:	e26f      	b.n	8005dbe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058de:	f7fe ffe1 	bl	80048a4 <HAL_RCC_GetPCLK1Freq>
 80058e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	461d      	mov	r5, r3
 80058e8:	f04f 0600 	mov.w	r6, #0
 80058ec:	46a8      	mov	r8, r5
 80058ee:	46b1      	mov	r9, r6
 80058f0:	eb18 0308 	adds.w	r3, r8, r8
 80058f4:	eb49 0409 	adc.w	r4, r9, r9
 80058f8:	4698      	mov	r8, r3
 80058fa:	46a1      	mov	r9, r4
 80058fc:	eb18 0805 	adds.w	r8, r8, r5
 8005900:	eb49 0906 	adc.w	r9, r9, r6
 8005904:	f04f 0100 	mov.w	r1, #0
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005910:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005914:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005918:	4688      	mov	r8, r1
 800591a:	4691      	mov	r9, r2
 800591c:	eb18 0005 	adds.w	r0, r8, r5
 8005920:	eb49 0106 	adc.w	r1, r9, r6
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	461d      	mov	r5, r3
 800592a:	f04f 0600 	mov.w	r6, #0
 800592e:	196b      	adds	r3, r5, r5
 8005930:	eb46 0406 	adc.w	r4, r6, r6
 8005934:	461a      	mov	r2, r3
 8005936:	4623      	mov	r3, r4
 8005938:	f7fa fc9a 	bl	8000270 <__aeabi_uldivmod>
 800593c:	4603      	mov	r3, r0
 800593e:	460c      	mov	r4, r1
 8005940:	461a      	mov	r2, r3
 8005942:	4b47      	ldr	r3, [pc, #284]	; (8005a60 <UART_SetConfig+0x384>)
 8005944:	fba3 2302 	umull	r2, r3, r3, r2
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	461d      	mov	r5, r3
 8005952:	f04f 0600 	mov.w	r6, #0
 8005956:	46a9      	mov	r9, r5
 8005958:	46b2      	mov	sl, r6
 800595a:	eb19 0309 	adds.w	r3, r9, r9
 800595e:	eb4a 040a 	adc.w	r4, sl, sl
 8005962:	4699      	mov	r9, r3
 8005964:	46a2      	mov	sl, r4
 8005966:	eb19 0905 	adds.w	r9, r9, r5
 800596a:	eb4a 0a06 	adc.w	sl, sl, r6
 800596e:	f04f 0100 	mov.w	r1, #0
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800597a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800597e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005982:	4689      	mov	r9, r1
 8005984:	4692      	mov	sl, r2
 8005986:	eb19 0005 	adds.w	r0, r9, r5
 800598a:	eb4a 0106 	adc.w	r1, sl, r6
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	461d      	mov	r5, r3
 8005994:	f04f 0600 	mov.w	r6, #0
 8005998:	196b      	adds	r3, r5, r5
 800599a:	eb46 0406 	adc.w	r4, r6, r6
 800599e:	461a      	mov	r2, r3
 80059a0:	4623      	mov	r3, r4
 80059a2:	f7fa fc65 	bl	8000270 <__aeabi_uldivmod>
 80059a6:	4603      	mov	r3, r0
 80059a8:	460c      	mov	r4, r1
 80059aa:	461a      	mov	r2, r3
 80059ac:	4b2c      	ldr	r3, [pc, #176]	; (8005a60 <UART_SetConfig+0x384>)
 80059ae:	fba3 1302 	umull	r1, r3, r3, r2
 80059b2:	095b      	lsrs	r3, r3, #5
 80059b4:	2164      	movs	r1, #100	; 0x64
 80059b6:	fb01 f303 	mul.w	r3, r1, r3
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	3332      	adds	r3, #50	; 0x32
 80059c0:	4a27      	ldr	r2, [pc, #156]	; (8005a60 <UART_SetConfig+0x384>)
 80059c2:	fba2 2303 	umull	r2, r3, r2, r3
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059ce:	4498      	add	r8, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	461d      	mov	r5, r3
 80059d4:	f04f 0600 	mov.w	r6, #0
 80059d8:	46a9      	mov	r9, r5
 80059da:	46b2      	mov	sl, r6
 80059dc:	eb19 0309 	adds.w	r3, r9, r9
 80059e0:	eb4a 040a 	adc.w	r4, sl, sl
 80059e4:	4699      	mov	r9, r3
 80059e6:	46a2      	mov	sl, r4
 80059e8:	eb19 0905 	adds.w	r9, r9, r5
 80059ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80059f0:	f04f 0100 	mov.w	r1, #0
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a04:	4689      	mov	r9, r1
 8005a06:	4692      	mov	sl, r2
 8005a08:	eb19 0005 	adds.w	r0, r9, r5
 8005a0c:	eb4a 0106 	adc.w	r1, sl, r6
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	461d      	mov	r5, r3
 8005a16:	f04f 0600 	mov.w	r6, #0
 8005a1a:	196b      	adds	r3, r5, r5
 8005a1c:	eb46 0406 	adc.w	r4, r6, r6
 8005a20:	461a      	mov	r2, r3
 8005a22:	4623      	mov	r3, r4
 8005a24:	f7fa fc24 	bl	8000270 <__aeabi_uldivmod>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <UART_SetConfig+0x384>)
 8005a30:	fba3 1302 	umull	r1, r3, r3, r2
 8005a34:	095b      	lsrs	r3, r3, #5
 8005a36:	2164      	movs	r1, #100	; 0x64
 8005a38:	fb01 f303 	mul.w	r3, r1, r3
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	3332      	adds	r3, #50	; 0x32
 8005a42:	4a07      	ldr	r2, [pc, #28]	; (8005a60 <UART_SetConfig+0x384>)
 8005a44:	fba2 2303 	umull	r2, r3, r2, r3
 8005a48:	095b      	lsrs	r3, r3, #5
 8005a4a:	f003 0207 	and.w	r2, r3, #7
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4442      	add	r2, r8
 8005a54:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005a56:	e1b2      	b.n	8005dbe <UART_SetConfig+0x6e2>
 8005a58:	40011000 	.word	0x40011000
 8005a5c:	40011400 	.word	0x40011400
 8005a60:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4ad7      	ldr	r2, [pc, #860]	; (8005dc8 <UART_SetConfig+0x6ec>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d005      	beq.n	8005a7a <UART_SetConfig+0x39e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4ad6      	ldr	r2, [pc, #856]	; (8005dcc <UART_SetConfig+0x6f0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	f040 80d1 	bne.w	8005c1c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a7a:	f7fe ff27 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 8005a7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	469a      	mov	sl, r3
 8005a84:	f04f 0b00 	mov.w	fp, #0
 8005a88:	46d0      	mov	r8, sl
 8005a8a:	46d9      	mov	r9, fp
 8005a8c:	eb18 0308 	adds.w	r3, r8, r8
 8005a90:	eb49 0409 	adc.w	r4, r9, r9
 8005a94:	4698      	mov	r8, r3
 8005a96:	46a1      	mov	r9, r4
 8005a98:	eb18 080a 	adds.w	r8, r8, sl
 8005a9c:	eb49 090b 	adc.w	r9, r9, fp
 8005aa0:	f04f 0100 	mov.w	r1, #0
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005aac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ab0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ab4:	4688      	mov	r8, r1
 8005ab6:	4691      	mov	r9, r2
 8005ab8:	eb1a 0508 	adds.w	r5, sl, r8
 8005abc:	eb4b 0609 	adc.w	r6, fp, r9
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	f04f 0400 	mov.w	r4, #0
 8005ad2:	0094      	lsls	r4, r2, #2
 8005ad4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ad8:	008b      	lsls	r3, r1, #2
 8005ada:	461a      	mov	r2, r3
 8005adc:	4623      	mov	r3, r4
 8005ade:	4628      	mov	r0, r5
 8005ae0:	4631      	mov	r1, r6
 8005ae2:	f7fa fbc5 	bl	8000270 <__aeabi_uldivmod>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	460c      	mov	r4, r1
 8005aea:	461a      	mov	r2, r3
 8005aec:	4bb8      	ldr	r3, [pc, #736]	; (8005dd0 <UART_SetConfig+0x6f4>)
 8005aee:	fba3 2302 	umull	r2, r3, r3, r2
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	469b      	mov	fp, r3
 8005afc:	f04f 0c00 	mov.w	ip, #0
 8005b00:	46d9      	mov	r9, fp
 8005b02:	46e2      	mov	sl, ip
 8005b04:	eb19 0309 	adds.w	r3, r9, r9
 8005b08:	eb4a 040a 	adc.w	r4, sl, sl
 8005b0c:	4699      	mov	r9, r3
 8005b0e:	46a2      	mov	sl, r4
 8005b10:	eb19 090b 	adds.w	r9, r9, fp
 8005b14:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b18:	f04f 0100 	mov.w	r1, #0
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b2c:	4689      	mov	r9, r1
 8005b2e:	4692      	mov	sl, r2
 8005b30:	eb1b 0509 	adds.w	r5, fp, r9
 8005b34:	eb4c 060a 	adc.w	r6, ip, sl
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	f04f 0400 	mov.w	r4, #0
 8005b4a:	0094      	lsls	r4, r2, #2
 8005b4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b50:	008b      	lsls	r3, r1, #2
 8005b52:	461a      	mov	r2, r3
 8005b54:	4623      	mov	r3, r4
 8005b56:	4628      	mov	r0, r5
 8005b58:	4631      	mov	r1, r6
 8005b5a:	f7fa fb89 	bl	8000270 <__aeabi_uldivmod>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	460c      	mov	r4, r1
 8005b62:	461a      	mov	r2, r3
 8005b64:	4b9a      	ldr	r3, [pc, #616]	; (8005dd0 <UART_SetConfig+0x6f4>)
 8005b66:	fba3 1302 	umull	r1, r3, r3, r2
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	2164      	movs	r1, #100	; 0x64
 8005b6e:	fb01 f303 	mul.w	r3, r1, r3
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	3332      	adds	r3, #50	; 0x32
 8005b78:	4a95      	ldr	r2, [pc, #596]	; (8005dd0 <UART_SetConfig+0x6f4>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b84:	4498      	add	r8, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	469b      	mov	fp, r3
 8005b8a:	f04f 0c00 	mov.w	ip, #0
 8005b8e:	46d9      	mov	r9, fp
 8005b90:	46e2      	mov	sl, ip
 8005b92:	eb19 0309 	adds.w	r3, r9, r9
 8005b96:	eb4a 040a 	adc.w	r4, sl, sl
 8005b9a:	4699      	mov	r9, r3
 8005b9c:	46a2      	mov	sl, r4
 8005b9e:	eb19 090b 	adds.w	r9, r9, fp
 8005ba2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ba6:	f04f 0100 	mov.w	r1, #0
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bba:	4689      	mov	r9, r1
 8005bbc:	4692      	mov	sl, r2
 8005bbe:	eb1b 0509 	adds.w	r5, fp, r9
 8005bc2:	eb4c 060a 	adc.w	r6, ip, sl
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	4619      	mov	r1, r3
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	f04f 0400 	mov.w	r4, #0
 8005bd8:	0094      	lsls	r4, r2, #2
 8005bda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bde:	008b      	lsls	r3, r1, #2
 8005be0:	461a      	mov	r2, r3
 8005be2:	4623      	mov	r3, r4
 8005be4:	4628      	mov	r0, r5
 8005be6:	4631      	mov	r1, r6
 8005be8:	f7fa fb42 	bl	8000270 <__aeabi_uldivmod>
 8005bec:	4603      	mov	r3, r0
 8005bee:	460c      	mov	r4, r1
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4b77      	ldr	r3, [pc, #476]	; (8005dd0 <UART_SetConfig+0x6f4>)
 8005bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf8:	095b      	lsrs	r3, r3, #5
 8005bfa:	2164      	movs	r1, #100	; 0x64
 8005bfc:	fb01 f303 	mul.w	r3, r1, r3
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	3332      	adds	r3, #50	; 0x32
 8005c06:	4a72      	ldr	r2, [pc, #456]	; (8005dd0 <UART_SetConfig+0x6f4>)
 8005c08:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0c:	095b      	lsrs	r3, r3, #5
 8005c0e:	f003 020f 	and.w	r2, r3, #15
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4442      	add	r2, r8
 8005c18:	609a      	str	r2, [r3, #8]
 8005c1a:	e0d0      	b.n	8005dbe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c1c:	f7fe fe42 	bl	80048a4 <HAL_RCC_GetPCLK1Freq>
 8005c20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	469a      	mov	sl, r3
 8005c26:	f04f 0b00 	mov.w	fp, #0
 8005c2a:	46d0      	mov	r8, sl
 8005c2c:	46d9      	mov	r9, fp
 8005c2e:	eb18 0308 	adds.w	r3, r8, r8
 8005c32:	eb49 0409 	adc.w	r4, r9, r9
 8005c36:	4698      	mov	r8, r3
 8005c38:	46a1      	mov	r9, r4
 8005c3a:	eb18 080a 	adds.w	r8, r8, sl
 8005c3e:	eb49 090b 	adc.w	r9, r9, fp
 8005c42:	f04f 0100 	mov.w	r1, #0
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c56:	4688      	mov	r8, r1
 8005c58:	4691      	mov	r9, r2
 8005c5a:	eb1a 0508 	adds.w	r5, sl, r8
 8005c5e:	eb4b 0609 	adc.w	r6, fp, r9
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	4619      	mov	r1, r3
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	f04f 0300 	mov.w	r3, #0
 8005c70:	f04f 0400 	mov.w	r4, #0
 8005c74:	0094      	lsls	r4, r2, #2
 8005c76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c7a:	008b      	lsls	r3, r1, #2
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	4623      	mov	r3, r4
 8005c80:	4628      	mov	r0, r5
 8005c82:	4631      	mov	r1, r6
 8005c84:	f7fa faf4 	bl	8000270 <__aeabi_uldivmod>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4b50      	ldr	r3, [pc, #320]	; (8005dd0 <UART_SetConfig+0x6f4>)
 8005c90:	fba3 2302 	umull	r2, r3, r3, r2
 8005c94:	095b      	lsrs	r3, r3, #5
 8005c96:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	469b      	mov	fp, r3
 8005c9e:	f04f 0c00 	mov.w	ip, #0
 8005ca2:	46d9      	mov	r9, fp
 8005ca4:	46e2      	mov	sl, ip
 8005ca6:	eb19 0309 	adds.w	r3, r9, r9
 8005caa:	eb4a 040a 	adc.w	r4, sl, sl
 8005cae:	4699      	mov	r9, r3
 8005cb0:	46a2      	mov	sl, r4
 8005cb2:	eb19 090b 	adds.w	r9, r9, fp
 8005cb6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005cba:	f04f 0100 	mov.w	r1, #0
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cce:	4689      	mov	r9, r1
 8005cd0:	4692      	mov	sl, r2
 8005cd2:	eb1b 0509 	adds.w	r5, fp, r9
 8005cd6:	eb4c 060a 	adc.w	r6, ip, sl
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	f04f 0200 	mov.w	r2, #0
 8005ce4:	f04f 0300 	mov.w	r3, #0
 8005ce8:	f04f 0400 	mov.w	r4, #0
 8005cec:	0094      	lsls	r4, r2, #2
 8005cee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cf2:	008b      	lsls	r3, r1, #2
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	4623      	mov	r3, r4
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	f7fa fab8 	bl	8000270 <__aeabi_uldivmod>
 8005d00:	4603      	mov	r3, r0
 8005d02:	460c      	mov	r4, r1
 8005d04:	461a      	mov	r2, r3
 8005d06:	4b32      	ldr	r3, [pc, #200]	; (8005dd0 <UART_SetConfig+0x6f4>)
 8005d08:	fba3 1302 	umull	r1, r3, r3, r2
 8005d0c:	095b      	lsrs	r3, r3, #5
 8005d0e:	2164      	movs	r1, #100	; 0x64
 8005d10:	fb01 f303 	mul.w	r3, r1, r3
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	3332      	adds	r3, #50	; 0x32
 8005d1a:	4a2d      	ldr	r2, [pc, #180]	; (8005dd0 <UART_SetConfig+0x6f4>)
 8005d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d20:	095b      	lsrs	r3, r3, #5
 8005d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d26:	4498      	add	r8, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	469b      	mov	fp, r3
 8005d2c:	f04f 0c00 	mov.w	ip, #0
 8005d30:	46d9      	mov	r9, fp
 8005d32:	46e2      	mov	sl, ip
 8005d34:	eb19 0309 	adds.w	r3, r9, r9
 8005d38:	eb4a 040a 	adc.w	r4, sl, sl
 8005d3c:	4699      	mov	r9, r3
 8005d3e:	46a2      	mov	sl, r4
 8005d40:	eb19 090b 	adds.w	r9, r9, fp
 8005d44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d48:	f04f 0100 	mov.w	r1, #0
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d5c:	4689      	mov	r9, r1
 8005d5e:	4692      	mov	sl, r2
 8005d60:	eb1b 0509 	adds.w	r5, fp, r9
 8005d64:	eb4c 060a 	adc.w	r6, ip, sl
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	f04f 0200 	mov.w	r2, #0
 8005d72:	f04f 0300 	mov.w	r3, #0
 8005d76:	f04f 0400 	mov.w	r4, #0
 8005d7a:	0094      	lsls	r4, r2, #2
 8005d7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d80:	008b      	lsls	r3, r1, #2
 8005d82:	461a      	mov	r2, r3
 8005d84:	4623      	mov	r3, r4
 8005d86:	4628      	mov	r0, r5
 8005d88:	4631      	mov	r1, r6
 8005d8a:	f7fa fa71 	bl	8000270 <__aeabi_uldivmod>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	460c      	mov	r4, r1
 8005d92:	461a      	mov	r2, r3
 8005d94:	4b0e      	ldr	r3, [pc, #56]	; (8005dd0 <UART_SetConfig+0x6f4>)
 8005d96:	fba3 1302 	umull	r1, r3, r3, r2
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	2164      	movs	r1, #100	; 0x64
 8005d9e:	fb01 f303 	mul.w	r3, r1, r3
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	3332      	adds	r3, #50	; 0x32
 8005da8:	4a09      	ldr	r2, [pc, #36]	; (8005dd0 <UART_SetConfig+0x6f4>)
 8005daa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	f003 020f 	and.w	r2, r3, #15
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4442      	add	r2, r8
 8005dba:	609a      	str	r2, [r3, #8]
}
 8005dbc:	e7ff      	b.n	8005dbe <UART_SetConfig+0x6e2>
 8005dbe:	bf00      	nop
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc8:	40011000 	.word	0x40011000
 8005dcc:	40011400 	.word	0x40011400
 8005dd0:	51eb851f 	.word	0x51eb851f

08005dd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	f107 001c 	add.w	r0, r7, #28
 8005de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d122      	bne.n	8005e32 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d105      	bne.n	8005e26 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f94a 	bl	80060c0 <USB_CoreReset>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	73fb      	strb	r3, [r7, #15]
 8005e30:	e01a      	b.n	8005e68 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f93e 	bl	80060c0 <USB_CoreReset>
 8005e44:	4603      	mov	r3, r0
 8005e46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	639a      	str	r2, [r3, #56]	; 0x38
 8005e5a:	e005      	b.n	8005e68 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d10b      	bne.n	8005e86 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f043 0206 	orr.w	r2, r3, #6
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f043 0220 	orr.w	r2, r3, #32
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e92:	b004      	add	sp, #16
 8005e94:	4770      	bx	lr

08005e96 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f043 0201 	orr.w	r2, r3, #1
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f023 0201 	bic.w	r2, r3, #1
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b082      	sub	sp, #8
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ef2:	78fb      	ldrb	r3, [r7, #3]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d106      	bne.n	8005f06 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	60da      	str	r2, [r3, #12]
 8005f04:	e00b      	b.n	8005f1e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f06:	78fb      	ldrb	r3, [r7, #3]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d106      	bne.n	8005f1a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	60da      	str	r2, [r3, #12]
 8005f18:	e001      	b.n	8005f1e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e003      	b.n	8005f26 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005f1e:	2032      	movs	r0, #50	; 0x32
 8005f20:	f7fb fa98 	bl	8001454 <HAL_Delay>

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
	...

08005f30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	019b      	lsls	r3, r3, #6
 8005f42:	f043 0220 	orr.w	r2, r3, #32
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4a09      	ldr	r2, [pc, #36]	; (8005f78 <USB_FlushTxFifo+0x48>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d901      	bls.n	8005f5c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e006      	b.n	8005f6a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d0f0      	beq.n	8005f4a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	00030d40 	.word	0x00030d40

08005f7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005f84:	2300      	movs	r3, #0
 8005f86:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2210      	movs	r2, #16
 8005f8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3301      	adds	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4a09      	ldr	r2, [pc, #36]	; (8005fbc <USB_FlushRxFifo+0x40>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d901      	bls.n	8005fa0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e006      	b.n	8005fae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f003 0310 	and.w	r3, r3, #16
 8005fa8:	2b10      	cmp	r3, #16
 8005faa:	d0f0      	beq.n	8005f8e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	00030d40 	.word	0x00030d40

08005fc0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b089      	sub	sp, #36	; 0x24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	4611      	mov	r1, r2
 8005fcc:	461a      	mov	r2, r3
 8005fce:	460b      	mov	r3, r1
 8005fd0:	71fb      	strb	r3, [r7, #7]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005fde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d11a      	bne.n	800601c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005fe6:	88bb      	ldrh	r3, [r7, #4]
 8005fe8:	3303      	adds	r3, #3
 8005fea:	089b      	lsrs	r3, r3, #2
 8005fec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61bb      	str	r3, [r7, #24]
 8005ff2:	e00f      	b.n	8006014 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ff4:	79fb      	ldrb	r3, [r7, #7]
 8005ff6:	031a      	lsls	r2, r3, #12
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006000:	461a      	mov	r2, r3
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	3304      	adds	r3, #4
 800600c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	3301      	adds	r3, #1
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	429a      	cmp	r2, r3
 800601a:	d3eb      	bcc.n	8005ff4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3724      	adds	r7, #36	; 0x24
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800602a:	b480      	push	{r7}
 800602c:	b089      	sub	sp, #36	; 0x24
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	4613      	mov	r3, r2
 8006036:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006040:	88fb      	ldrh	r3, [r7, #6]
 8006042:	3303      	adds	r3, #3
 8006044:	089b      	lsrs	r3, r3, #2
 8006046:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006048:	2300      	movs	r3, #0
 800604a:	61bb      	str	r3, [r7, #24]
 800604c:	e00b      	b.n	8006066 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	601a      	str	r2, [r3, #0]
    pDest++;
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	3304      	adds	r3, #4
 800605e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	3301      	adds	r3, #1
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	429a      	cmp	r2, r3
 800606c:	d3ef      	bcc.n	800604e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800606e:	69fb      	ldr	r3, [r7, #28]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3724      	adds	r7, #36	; 0x24
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4013      	ands	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006094:	68fb      	ldr	r3, [r7, #12]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	f003 0301 	and.w	r3, r3, #1
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
	...

080060c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	3301      	adds	r3, #1
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4a13      	ldr	r2, [pc, #76]	; (8006124 <USB_CoreReset+0x64>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d901      	bls.n	80060de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e01b      	b.n	8006116 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	daf2      	bge.n	80060cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f043 0201 	orr.w	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3301      	adds	r3, #1
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4a09      	ldr	r2, [pc, #36]	; (8006124 <USB_CoreReset+0x64>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d901      	bls.n	8006108 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e006      	b.n	8006116 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b01      	cmp	r3, #1
 8006112:	d0f0      	beq.n	80060f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	00030d40 	.word	0x00030d40

08006128 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006128:	b084      	sub	sp, #16
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	f107 001c 	add.w	r0, r7, #28
 8006136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006144:	461a      	mov	r2, r3
 8006146:	2300      	movs	r3, #0
 8006148:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006176:	2b00      	cmp	r3, #0
 8006178:	d018      	beq.n	80061ac <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	2b01      	cmp	r3, #1
 800617e:	d10a      	bne.n	8006196 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800618e:	f043 0304 	orr.w	r3, r3, #4
 8006192:	6013      	str	r3, [r2, #0]
 8006194:	e014      	b.n	80061c0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061a4:	f023 0304 	bic.w	r3, r3, #4
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	e009      	b.n	80061c0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061ba:	f023 0304 	bic.w	r3, r3, #4
 80061be:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80061c0:	2110      	movs	r1, #16
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff feb4 	bl	8005f30 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7ff fed7 	bl	8005f7c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	e015      	b.n	8006200 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e0:	461a      	mov	r2, r3
 80061e2:	f04f 33ff 	mov.w	r3, #4294967295
 80061e6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f4:	461a      	mov	r2, r3
 80061f6:	2300      	movs	r3, #0
 80061f8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3301      	adds	r3, #1
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	429a      	cmp	r2, r3
 8006206:	d3e5      	bcc.n	80061d4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006208:	2101      	movs	r1, #1
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f8ac 	bl	8006368 <USB_DriveVbus>

  HAL_Delay(200U);
 8006210:	20c8      	movs	r0, #200	; 0xc8
 8006212:	f7fb f91f 	bl	8001454 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f04f 32ff 	mov.w	r2, #4294967295
 8006222:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00b      	beq.n	8006248 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006236:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a14      	ldr	r2, [pc, #80]	; (800628c <USB_HostInit+0x164>)
 800623c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a13      	ldr	r2, [pc, #76]	; (8006290 <USB_HostInit+0x168>)
 8006242:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006246:	e009      	b.n	800625c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2280      	movs	r2, #128	; 0x80
 800624c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a10      	ldr	r2, [pc, #64]	; (8006294 <USB_HostInit+0x16c>)
 8006252:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a10      	ldr	r2, [pc, #64]	; (8006298 <USB_HostInit+0x170>)
 8006258:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	2b00      	cmp	r3, #0
 8006260:	d105      	bne.n	800626e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	f043 0210 	orr.w	r2, r3, #16
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	4b0a      	ldr	r3, [pc, #40]	; (800629c <USB_HostInit+0x174>)
 8006274:	4313      	orrs	r3, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006286:	b004      	add	sp, #16
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	01000200 	.word	0x01000200
 8006290:	00e00300 	.word	0x00e00300
 8006294:	00600080 	.word	0x00600080
 8006298:	004000e0 	.word	0x004000e0
 800629c:	a3200008 	.word	0xa3200008

080062a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062be:	f023 0303 	bic.w	r3, r3, #3
 80062c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	68f9      	ldr	r1, [r7, #12]
 80062d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062d8:	4313      	orrs	r3, r2
 80062da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80062dc:	78fb      	ldrb	r3, [r7, #3]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d107      	bne.n	80062f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062e8:	461a      	mov	r2, r3
 80062ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80062ee:	6053      	str	r3, [r2, #4]
 80062f0:	e009      	b.n	8006306 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80062f2:	78fb      	ldrb	r3, [r7, #3]
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d106      	bne.n	8006306 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062fe:	461a      	mov	r2, r3
 8006300:	f241 7370 	movw	r3, #6000	; 0x1770
 8006304:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006334:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800633e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006342:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006344:	2064      	movs	r0, #100	; 0x64
 8006346:	f7fb f885 	bl	8001454 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006352:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006356:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006358:	200a      	movs	r0, #10
 800635a:	f7fb f87b 	bl	8001454 <HAL_Delay>

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800638c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d109      	bne.n	80063ac <USB_DriveVbus+0x44>
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d106      	bne.n	80063ac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063aa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b6:	d109      	bne.n	80063cc <USB_DriveVbus+0x64>
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063ca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80063da:	b480      	push	{r7}
 80063dc:	b085      	sub	sp, #20
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	0c5b      	lsrs	r3, r3, #17
 80063f8:	f003 0303 	and.w	r3, r3, #3
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	b29b      	uxth	r3, r3
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
	...

0800642c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800642c:	b480      	push	{r7}
 800642e:	b087      	sub	sp, #28
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	4608      	mov	r0, r1
 8006436:	4611      	mov	r1, r2
 8006438:	461a      	mov	r2, r3
 800643a:	4603      	mov	r3, r0
 800643c:	70fb      	strb	r3, [r7, #3]
 800643e:	460b      	mov	r3, r1
 8006440:	70bb      	strb	r3, [r7, #2]
 8006442:	4613      	mov	r3, r2
 8006444:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800644e:	78fb      	ldrb	r3, [r7, #3]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	4413      	add	r3, r2
 8006456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645a:	461a      	mov	r2, r3
 800645c:	f04f 33ff 	mov.w	r3, #4294967295
 8006460:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006462:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006466:	2b03      	cmp	r3, #3
 8006468:	d87e      	bhi.n	8006568 <USB_HC_Init+0x13c>
 800646a:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <USB_HC_Init+0x44>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	08006481 	.word	0x08006481
 8006474:	0800652b 	.word	0x0800652b
 8006478:	08006481 	.word	0x08006481
 800647c:	080064ed 	.word	0x080064ed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4413      	add	r3, r2
 8006488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648c:	461a      	mov	r2, r3
 800648e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006492:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006494:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006498:	2b00      	cmp	r3, #0
 800649a:	da10      	bge.n	80064be <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	78fa      	ldrb	r2, [r7, #3]
 80064ac:	0151      	lsls	r1, r2, #5
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	440a      	add	r2, r1
 80064b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ba:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80064bc:	e057      	b.n	800656e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d051      	beq.n	800656e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80064ca:	78fb      	ldrb	r3, [r7, #3]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	78fa      	ldrb	r2, [r7, #3]
 80064da:	0151      	lsls	r1, r2, #5
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	440a      	add	r2, r1
 80064e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80064e8:	60d3      	str	r3, [r2, #12]
      break;
 80064ea:	e040      	b.n	800656e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f8:	461a      	mov	r2, r3
 80064fa:	f240 639d 	movw	r3, #1693	; 0x69d
 80064fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006500:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006504:	2b00      	cmp	r3, #0
 8006506:	da34      	bge.n	8006572 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4413      	add	r3, r2
 8006510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	78fa      	ldrb	r2, [r7, #3]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	440a      	add	r2, r1
 800651e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006526:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006528:	e023      	b.n	8006572 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800652a:	78fb      	ldrb	r3, [r7, #3]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	4413      	add	r3, r2
 8006532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006536:	461a      	mov	r2, r3
 8006538:	f240 2325 	movw	r3, #549	; 0x225
 800653c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800653e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006542:	2b00      	cmp	r3, #0
 8006544:	da17      	bge.n	8006576 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	4413      	add	r3, r2
 800654e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	78fa      	ldrb	r2, [r7, #3]
 8006556:	0151      	lsls	r1, r2, #5
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	440a      	add	r2, r1
 800655c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006560:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006564:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006566:	e006      	b.n	8006576 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	75fb      	strb	r3, [r7, #23]
      break;
 800656c:	e004      	b.n	8006578 <USB_HC_Init+0x14c>
      break;
 800656e:	bf00      	nop
 8006570:	e002      	b.n	8006578 <USB_HC_Init+0x14c>
      break;
 8006572:	bf00      	nop
 8006574:	e000      	b.n	8006578 <USB_HC_Init+0x14c>
      break;
 8006576:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800657e:	699a      	ldr	r2, [r3, #24]
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	2101      	movs	r1, #1
 8006588:	fa01 f303 	lsl.w	r3, r1, r3
 800658c:	68b9      	ldr	r1, [r7, #8]
 800658e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006592:	4313      	orrs	r3, r2
 8006594:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80065a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	da03      	bge.n	80065b2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80065aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	e001      	b.n	80065b6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80065b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d103      	bne.n	80065c6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80065be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	e001      	b.n	80065ca <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065ca:	787b      	ldrb	r3, [r7, #1]
 80065cc:	059b      	lsls	r3, r3, #22
 80065ce:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80065d2:	78bb      	ldrb	r3, [r7, #2]
 80065d4:	02db      	lsls	r3, r3, #11
 80065d6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065da:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80065dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80065e0:	049b      	lsls	r3, r3, #18
 80065e2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80065e6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80065e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80065ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80065ee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	0159      	lsls	r1, r3, #5
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	440b      	add	r3, r1
 80065fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006600:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006606:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006608:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800660c:	2b03      	cmp	r3, #3
 800660e:	d10f      	bne.n	8006630 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4413      	add	r3, r2
 8006618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	78fa      	ldrb	r2, [r7, #3]
 8006620:	0151      	lsls	r1, r2, #5
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	440a      	add	r2, r1
 8006626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800662a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800662e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006630:	7dfb      	ldrb	r3, [r7, #23]
}
 8006632:	4618      	mov	r0, r3
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop

08006640 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08c      	sub	sp, #48	; 0x30
 8006644:	af02      	add	r7, sp, #8
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	4613      	mov	r3, r2
 800664c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	785b      	ldrb	r3, [r3, #1]
 8006656:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800665c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006666:	2b00      	cmp	r3, #0
 8006668:	d028      	beq.n	80066bc <USB_HC_StartXfer+0x7c>
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	791b      	ldrb	r3, [r3, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d124      	bne.n	80066bc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10b      	bne.n	8006690 <USB_HC_StartXfer+0x50>
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	795b      	ldrb	r3, [r3, #5]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d107      	bne.n	8006690 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	785b      	ldrb	r3, [r3, #1]
 8006684:	4619      	mov	r1, r3
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f000 fa30 	bl	8006aec <USB_DoPing>
      return HAL_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	e114      	b.n	80068ba <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006690:	79fb      	ldrb	r3, [r7, #7]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d112      	bne.n	80066bc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	4413      	add	r3, r2
 800669e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	69fa      	ldr	r2, [r7, #28]
 80066a6:	0151      	lsls	r1, r2, #5
 80066a8:	6a3a      	ldr	r2, [r7, #32]
 80066aa:	440a      	add	r2, r1
 80066ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066b0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80066b4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2200      	movs	r2, #0
 80066ba:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d018      	beq.n	80066f6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	8912      	ldrh	r2, [r2, #8]
 80066cc:	4413      	add	r3, r2
 80066ce:	3b01      	subs	r3, #1
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	8912      	ldrh	r2, [r2, #8]
 80066d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80066d8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80066da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80066dc:	8b7b      	ldrh	r3, [r7, #26]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d90b      	bls.n	80066fa <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80066e2:	8b7b      	ldrh	r3, [r7, #26]
 80066e4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80066e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	8912      	ldrh	r2, [r2, #8]
 80066ec:	fb02 f203 	mul.w	r2, r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	611a      	str	r2, [r3, #16]
 80066f4:	e001      	b.n	80066fa <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80066f6:	2301      	movs	r3, #1
 80066f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	78db      	ldrb	r3, [r3, #3]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d006      	beq.n	8006710 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006702:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	8912      	ldrh	r2, [r2, #8]
 8006708:	fb02 f203 	mul.w	r2, r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006718:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800671a:	04d9      	lsls	r1, r3, #19
 800671c:	4b69      	ldr	r3, [pc, #420]	; (80068c4 <USB_HC_StartXfer+0x284>)
 800671e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006720:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	7a9b      	ldrb	r3, [r3, #10]
 8006726:	075b      	lsls	r3, r3, #29
 8006728:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800672c:	69f9      	ldr	r1, [r7, #28]
 800672e:	0148      	lsls	r0, r1, #5
 8006730:	6a39      	ldr	r1, [r7, #32]
 8006732:	4401      	add	r1, r0
 8006734:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006738:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800673a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800673c:	79fb      	ldrb	r3, [r7, #7]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d009      	beq.n	8006756 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	68d9      	ldr	r1, [r3, #12]
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	4413      	add	r3, r2
 800674e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006752:	460a      	mov	r2, r1
 8006754:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	bf0c      	ite	eq
 8006766:	2301      	moveq	r3, #1
 8006768:	2300      	movne	r3, #0
 800676a:	b2db      	uxtb	r3, r3
 800676c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	4413      	add	r3, r2
 8006776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69fa      	ldr	r2, [r7, #28]
 800677e:	0151      	lsls	r1, r2, #5
 8006780:	6a3a      	ldr	r2, [r7, #32]
 8006782:	440a      	add	r2, r1
 8006784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006788:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800678c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	4413      	add	r3, r2
 8006796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	7e7b      	ldrb	r3, [r7, #25]
 800679e:	075b      	lsls	r3, r3, #29
 80067a0:	69f9      	ldr	r1, [r7, #28]
 80067a2:	0148      	lsls	r0, r1, #5
 80067a4:	6a39      	ldr	r1, [r7, #32]
 80067a6:	4401      	add	r1, r0
 80067a8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80067ac:	4313      	orrs	r3, r2
 80067ae:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a42      	ldr	r2, [pc, #264]	; (80068c8 <USB_HC_StartXfer+0x288>)
 80067c0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80067c2:	4b41      	ldr	r3, [pc, #260]	; (80068c8 <USB_HC_StartXfer+0x288>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067ca:	4a3f      	ldr	r2, [pc, #252]	; (80068c8 <USB_HC_StartXfer+0x288>)
 80067cc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	78db      	ldrb	r3, [r3, #3]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d006      	beq.n	80067e4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80067d6:	4b3c      	ldr	r3, [pc, #240]	; (80068c8 <USB_HC_StartXfer+0x288>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067de:	4a3a      	ldr	r2, [pc, #232]	; (80068c8 <USB_HC_StartXfer+0x288>)
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	e005      	b.n	80067f0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80067e4:	4b38      	ldr	r3, [pc, #224]	; (80068c8 <USB_HC_StartXfer+0x288>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067ec:	4a36      	ldr	r2, [pc, #216]	; (80068c8 <USB_HC_StartXfer+0x288>)
 80067ee:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80067f0:	4b35      	ldr	r3, [pc, #212]	; (80068c8 <USB_HC_StartXfer+0x288>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067f8:	4a33      	ldr	r2, [pc, #204]	; (80068c8 <USB_HC_StartXfer+0x288>)
 80067fa:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	4413      	add	r3, r2
 8006804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006808:	461a      	mov	r2, r3
 800680a:	4b2f      	ldr	r3, [pc, #188]	; (80068c8 <USB_HC_StartXfer+0x288>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006810:	79fb      	ldrb	r3, [r7, #7]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	e04f      	b.n	80068ba <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	78db      	ldrb	r3, [r3, #3]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d14a      	bne.n	80068b8 <USB_HC_StartXfer+0x278>
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d046      	beq.n	80068b8 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	79db      	ldrb	r3, [r3, #7]
 800682e:	2b03      	cmp	r3, #3
 8006830:	d830      	bhi.n	8006894 <USB_HC_StartXfer+0x254>
 8006832:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <USB_HC_StartXfer+0x1f8>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	08006849 	.word	0x08006849
 800683c:	0800686d 	.word	0x0800686d
 8006840:	08006849 	.word	0x08006849
 8006844:	0800686d 	.word	0x0800686d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	3303      	adds	r3, #3
 800684e:	089b      	lsrs	r3, r3, #2
 8006850:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006852:	8afa      	ldrh	r2, [r7, #22]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	b29b      	uxth	r3, r3
 800685a:	429a      	cmp	r2, r3
 800685c:	d91c      	bls.n	8006898 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	f043 0220 	orr.w	r2, r3, #32
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	619a      	str	r2, [r3, #24]
        }
        break;
 800686a:	e015      	b.n	8006898 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	3303      	adds	r3, #3
 8006872:	089b      	lsrs	r3, r3, #2
 8006874:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006876:	8afa      	ldrh	r2, [r7, #22]
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	b29b      	uxth	r3, r3
 8006882:	429a      	cmp	r2, r3
 8006884:	d90a      	bls.n	800689c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	619a      	str	r2, [r3, #24]
        }
        break;
 8006892:	e003      	b.n	800689c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006894:	bf00      	nop
 8006896:	e002      	b.n	800689e <USB_HC_StartXfer+0x25e>
        break;
 8006898:	bf00      	nop
 800689a:	e000      	b.n	800689e <USB_HC_StartXfer+0x25e>
        break;
 800689c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	68d9      	ldr	r1, [r3, #12]
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	785a      	ldrb	r2, [r3, #1]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	b298      	uxth	r0, r3
 80068ac:	2300      	movs	r3, #0
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	4603      	mov	r3, r0
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f7ff fb84 	bl	8005fc0 <USB_WritePacket>
  }

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3728      	adds	r7, #40	; 0x28
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	1ff80000 	.word	0x1ff80000
 80068c8:	200000b8 	.word	0x200000b8

080068cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	b29b      	uxth	r3, r3
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b087      	sub	sp, #28
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	460b      	mov	r3, r1
 80068f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80068fe:	78fb      	ldrb	r3, [r7, #3]
 8006900:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	4413      	add	r3, r2
 800690e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	0c9b      	lsrs	r3, r3, #18
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <USB_HC_Halt+0x3a>
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b02      	cmp	r3, #2
 8006926:	d16c      	bne.n	8006a02 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	4413      	add	r3, r2
 8006930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	0151      	lsls	r1, r2, #5
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	440a      	add	r2, r1
 800693e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006942:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006946:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d143      	bne.n	80069dc <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	4413      	add	r3, r2
 800695c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	0151      	lsls	r1, r2, #5
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	440a      	add	r2, r1
 800696a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800696e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006972:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	4413      	add	r3, r2
 800697c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	0151      	lsls	r1, r2, #5
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	440a      	add	r2, r1
 800698a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800698e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006992:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	4413      	add	r3, r2
 800699c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	0151      	lsls	r1, r2, #5
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	440a      	add	r2, r1
 80069aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069b2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	3301      	adds	r3, #1
 80069b8:	617b      	str	r3, [r7, #20]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069c0:	d81d      	bhi.n	80069fe <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069d8:	d0ec      	beq.n	80069b4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80069da:	e080      	b.n	8006ade <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	0151      	lsls	r1, r2, #5
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	440a      	add	r2, r1
 80069f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069fa:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80069fc:	e06f      	b.n	8006ade <USB_HC_Halt+0x1f0>
          break;
 80069fe:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a00:	e06d      	b.n	8006ade <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	0151      	lsls	r1, r2, #5
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	440a      	add	r2, r1
 8006a18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a20:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d143      	bne.n	8006aba <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	0151      	lsls	r1, r2, #5
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	440a      	add	r2, r1
 8006a48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a50:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	0151      	lsls	r1, r2, #5
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	440a      	add	r2, r1
 8006a68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a70:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	0151      	lsls	r1, r2, #5
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	440a      	add	r2, r1
 8006a88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a90:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	3301      	adds	r3, #1
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a9e:	d81d      	bhi.n	8006adc <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ab6:	d0ec      	beq.n	8006a92 <USB_HC_Halt+0x1a4>
 8006ab8:	e011      	b.n	8006ade <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	0151      	lsls	r1, r2, #5
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	440a      	add	r2, r1
 8006ad0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ad4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	e000      	b.n	8006ade <USB_HC_Halt+0x1f0>
          break;
 8006adc:	bf00      	nop
    }
  }

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	371c      	adds	r7, #28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006afc:	78fb      	ldrb	r3, [r7, #3]
 8006afe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006b00:	2301      	movs	r3, #1
 8006b02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	04da      	lsls	r2, r3, #19
 8006b08:	4b15      	ldr	r3, [pc, #84]	; (8006b60 <USB_DoPing+0x74>)
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	0151      	lsls	r1, r2, #5
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	440a      	add	r2, r1
 8006b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b1c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b34:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b3c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	1ff80000 	.word	0x1ff80000

08006b64 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff f99f 	bl	8005eb8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006b7a:	2110      	movs	r1, #16
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff f9d7 	bl	8005f30 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7ff f9fa 	bl	8005f7c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	613b      	str	r3, [r7, #16]
 8006b8c:	e01f      	b.n	8006bce <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ba4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bb4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	613b      	str	r3, [r7, #16]
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b0f      	cmp	r3, #15
 8006bd2:	d9dc      	bls.n	8006b8e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	613b      	str	r3, [r7, #16]
 8006bd8:	e034      	b.n	8006c44 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bf0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bf8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c00:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0e:	461a      	mov	r2, r3
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	3301      	adds	r3, #1
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c20:	d80c      	bhi.n	8006c3c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c38:	d0ec      	beq.n	8006c14 <USB_StopHost+0xb0>
 8006c3a:	e000      	b.n	8006c3e <USB_StopHost+0xda>
        break;
 8006c3c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	3301      	adds	r3, #1
 8006c42:	613b      	str	r3, [r7, #16]
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2b0f      	cmp	r3, #15
 8006c48:	d9c7      	bls.n	8006bda <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c50:	461a      	mov	r2, r3
 8006c52:	f04f 33ff 	mov.w	r3, #4294967295
 8006c56:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7ff f918 	bl	8005e96 <USB_EnableGlobalInt>

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006c70:	b590      	push	{r4, r7, lr}
 8006c72:	b089      	sub	sp, #36	; 0x24
 8006c74:	af04      	add	r7, sp, #16
 8006c76:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006c78:	2301      	movs	r3, #1
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	2102      	movs	r1, #2
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fc68 	bl	8007554 <USBH_FindInterface>
 8006c84:	4603      	mov	r3, r0
 8006c86:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	2bff      	cmp	r3, #255	; 0xff
 8006c8c:	d002      	beq.n	8006c94 <USBH_CDC_InterfaceInit+0x24>
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d901      	bls.n	8006c98 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c94:	2302      	movs	r3, #2
 8006c96:	e13d      	b.n	8006f14 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fc3d 	bl	800751c <USBH_SelectInterface>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006cac:	2302      	movs	r3, #2
 8006cae:	e131      	b.n	8006f14 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006cb6:	2050      	movs	r0, #80	; 0x50
 8006cb8:	f002 fa04 	bl	80090c4 <malloc>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	e11f      	b.n	8006f14 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006cd4:	2250      	movs	r2, #80	; 0x50
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	68b8      	ldr	r0, [r7, #8]
 8006cda:	f002 fa0e 	bl	80090fa <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	211a      	movs	r1, #26
 8006ce4:	fb01 f303 	mul.w	r3, r1, r3
 8006ce8:	4413      	add	r3, r2
 8006cea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	b25b      	sxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	da15      	bge.n	8006d22 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	211a      	movs	r1, #26
 8006cfc:	fb01 f303 	mul.w	r3, r1, r3
 8006d00:	4413      	add	r3, r2
 8006d02:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d06:	781a      	ldrb	r2, [r3, #0]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	211a      	movs	r1, #26
 8006d12:	fb01 f303 	mul.w	r3, r1, r3
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d1c:	881a      	ldrh	r2, [r3, #0]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	785b      	ldrb	r3, [r3, #1]
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 fe36 	bl	800899a <USBH_AllocPipe>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	461a      	mov	r2, r3
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	7819      	ldrb	r1, [r3, #0]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	7858      	ldrb	r0, [r3, #1]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	8952      	ldrh	r2, [r2, #10]
 8006d4e:	9202      	str	r2, [sp, #8]
 8006d50:	2203      	movs	r2, #3
 8006d52:	9201      	str	r2, [sp, #4]
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	4623      	mov	r3, r4
 8006d58:	4602      	mov	r2, r0
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 fdee 	bl	800893c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2200      	movs	r2, #0
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f002 f8fb 	bl	8008f64 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006d6e:	2300      	movs	r3, #0
 8006d70:	2200      	movs	r2, #0
 8006d72:	210a      	movs	r1, #10
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fbed 	bl	8007554 <USBH_FindInterface>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	2bff      	cmp	r3, #255	; 0xff
 8006d82:	d002      	beq.n	8006d8a <USBH_CDC_InterfaceInit+0x11a>
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d901      	bls.n	8006d8e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	e0c2      	b.n	8006f14 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	211a      	movs	r1, #26
 8006d94:	fb01 f303 	mul.w	r3, r1, r3
 8006d98:	4413      	add	r3, r2
 8006d9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	b25b      	sxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	da16      	bge.n	8006dd4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	211a      	movs	r1, #26
 8006dac:	fb01 f303 	mul.w	r3, r1, r3
 8006db0:	4413      	add	r3, r2
 8006db2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006db6:	781a      	ldrb	r2, [r3, #0]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	211a      	movs	r1, #26
 8006dc2:	fb01 f303 	mul.w	r3, r1, r3
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006dcc:	881a      	ldrh	r2, [r3, #0]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	835a      	strh	r2, [r3, #26]
 8006dd2:	e015      	b.n	8006e00 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	211a      	movs	r1, #26
 8006dda:	fb01 f303 	mul.w	r3, r1, r3
 8006dde:	4413      	add	r3, r2
 8006de0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006de4:	781a      	ldrb	r2, [r3, #0]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	211a      	movs	r1, #26
 8006df0:	fb01 f303 	mul.w	r3, r1, r3
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006dfa:	881a      	ldrh	r2, [r3, #0]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	211a      	movs	r1, #26
 8006e06:	fb01 f303 	mul.w	r3, r1, r3
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	b25b      	sxtb	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	da16      	bge.n	8006e46 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	211a      	movs	r1, #26
 8006e1e:	fb01 f303 	mul.w	r3, r1, r3
 8006e22:	4413      	add	r3, r2
 8006e24:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e28:	781a      	ldrb	r2, [r3, #0]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	211a      	movs	r1, #26
 8006e34:	fb01 f303 	mul.w	r3, r1, r3
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006e3e:	881a      	ldrh	r2, [r3, #0]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	835a      	strh	r2, [r3, #26]
 8006e44:	e015      	b.n	8006e72 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	211a      	movs	r1, #26
 8006e4c:	fb01 f303 	mul.w	r3, r1, r3
 8006e50:	4413      	add	r3, r2
 8006e52:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e56:	781a      	ldrb	r2, [r3, #0]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	211a      	movs	r1, #26
 8006e62:	fb01 f303 	mul.w	r3, r1, r3
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006e6c:	881a      	ldrh	r2, [r3, #0]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	7b9b      	ldrb	r3, [r3, #14]
 8006e76:	4619      	mov	r1, r3
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f001 fd8e 	bl	800899a <USBH_AllocPipe>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	461a      	mov	r2, r3
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	7bdb      	ldrb	r3, [r3, #15]
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f001 fd84 	bl	800899a <USBH_AllocPipe>
 8006e92:	4603      	mov	r3, r0
 8006e94:	461a      	mov	r2, r3
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	7b59      	ldrb	r1, [r3, #13]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	7b98      	ldrb	r0, [r3, #14]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	8b12      	ldrh	r2, [r2, #24]
 8006eb2:	9202      	str	r2, [sp, #8]
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	9201      	str	r2, [sp, #4]
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	4623      	mov	r3, r4
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 fd3c 	bl	800893c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	7b19      	ldrb	r1, [r3, #12]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	7bd8      	ldrb	r0, [r3, #15]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	8b52      	ldrh	r2, [r2, #26]
 8006edc:	9202      	str	r2, [sp, #8]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	9201      	str	r2, [sp, #4]
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	4623      	mov	r3, r4
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 fd27 	bl	800893c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	7b5b      	ldrb	r3, [r3, #13]
 8006efa:	2200      	movs	r2, #0
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f002 f830 	bl	8008f64 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	7b1b      	ldrb	r3, [r3, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f002 f829 	bl	8008f64 <USBH_LL_SetToggle>

  return USBH_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd90      	pop	{r4, r7, pc}

08006f1c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00e      	beq.n	8006f54 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f001 fd1c 	bl	800897a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 fd47 	bl	80089dc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	7b1b      	ldrb	r3, [r3, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00e      	beq.n	8006f7a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	7b1b      	ldrb	r3, [r3, #12]
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f001 fd09 	bl	800897a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	7b1b      	ldrb	r3, [r3, #12]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f001 fd34 	bl	80089dc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	7b5b      	ldrb	r3, [r3, #13]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00e      	beq.n	8006fa0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	7b5b      	ldrb	r3, [r3, #13]
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f001 fcf6 	bl	800897a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	7b5b      	ldrb	r3, [r3, #13]
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 fd21 	bl	80089dc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f002 f88d 	bl	80090d4 <free>
    phost->pActiveClass->pData = 0U;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3340      	adds	r3, #64	; 0x40
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f8b1 	bl	800714e <GetLineCoding>
 8006fec:	4603      	mov	r3, r0
 8006fee:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006ff0:	7afb      	ldrb	r3, [r7, #11]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d105      	bne.n	8007002 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ffc:	2102      	movs	r1, #2
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007002:	7afb      	ldrb	r3, [r7, #11]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007014:	2301      	movs	r3, #1
 8007016:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800702c:	2b04      	cmp	r3, #4
 800702e:	d877      	bhi.n	8007120 <USBH_CDC_Process+0x114>
 8007030:	a201      	add	r2, pc, #4	; (adr r2, 8007038 <USBH_CDC_Process+0x2c>)
 8007032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007036:	bf00      	nop
 8007038:	0800704d 	.word	0x0800704d
 800703c:	08007053 	.word	0x08007053
 8007040:	08007083 	.word	0x08007083
 8007044:	080070f7 	.word	0x080070f7
 8007048:	08007105 	.word	0x08007105
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	73fb      	strb	r3, [r7, #15]
      break;
 8007050:	e06d      	b.n	800712e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f897 	bl	800718c <SetLineCoding>
 800705e:	4603      	mov	r3, r0
 8007060:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007062:	7bbb      	ldrb	r3, [r7, #14]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d104      	bne.n	8007072 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007070:	e058      	b.n	8007124 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007072:	7bbb      	ldrb	r3, [r7, #14]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d055      	beq.n	8007124 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2204      	movs	r2, #4
 800707c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007080:	e050      	b.n	8007124 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	3340      	adds	r3, #64	; 0x40
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f860 	bl	800714e <GetLineCoding>
 800708e:	4603      	mov	r3, r0
 8007090:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d126      	bne.n	80070e6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070aa:	791b      	ldrb	r3, [r3, #4]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d13b      	bne.n	8007128 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ba:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80070bc:	429a      	cmp	r2, r3
 80070be:	d133      	bne.n	8007128 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ca:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d12b      	bne.n	8007128 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80070da:	429a      	cmp	r2, r3
 80070dc:	d124      	bne.n	8007128 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f95a 	bl	8007398 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80070e4:	e020      	b.n	8007128 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80070e6:	7bbb      	ldrb	r3, [r7, #14]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d01d      	beq.n	8007128 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2204      	movs	r2, #4
 80070f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80070f4:	e018      	b.n	8007128 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f867 	bl	80071ca <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f8dc 	bl	80072ba <CDC_ProcessReception>
      break;
 8007102:	e014      	b.n	800712e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007104:	2100      	movs	r1, #0
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 ffe5 	bl	80080d6 <USBH_ClrFeature>
 800710c:	4603      	mov	r3, r0
 800710e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10a      	bne.n	800712c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800711e:	e005      	b.n	800712c <USBH_CDC_Process+0x120>

    default:
      break;
 8007120:	bf00      	nop
 8007122:	e004      	b.n	800712e <USBH_CDC_Process+0x122>
      break;
 8007124:	bf00      	nop
 8007126:	e002      	b.n	800712e <USBH_CDC_Process+0x122>
      break;
 8007128:	bf00      	nop
 800712a:	e000      	b.n	800712e <USBH_CDC_Process+0x122>
      break;
 800712c:	bf00      	nop

  }

  return status;
 800712e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	22a1      	movs	r2, #161	; 0xa1
 800715c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2221      	movs	r2, #33	; 0x21
 8007162:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2207      	movs	r2, #7
 8007174:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2207      	movs	r2, #7
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f001 f98a 	bl	8008496 <USBH_CtlReq>
 8007182:	4603      	mov	r3, r0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2221      	movs	r2, #33	; 0x21
 800719a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2220      	movs	r2, #32
 80071a0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2207      	movs	r2, #7
 80071b2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2207      	movs	r2, #7
 80071b8:	4619      	mov	r1, r3
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f001 f96b 	bl	8008496 <USBH_CtlReq>
 80071c0:	4603      	mov	r3, r0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b086      	sub	sp, #24
 80071ce:	af02      	add	r7, sp, #8
 80071d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071dc:	2300      	movs	r3, #0
 80071de:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d002      	beq.n	80071f0 <CDC_ProcessTransmission+0x26>
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d025      	beq.n	800723a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80071ee:	e060      	b.n	80072b2 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	8b12      	ldrh	r2, [r2, #24]
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d90c      	bls.n	8007216 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	69d9      	ldr	r1, [r3, #28]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8b1a      	ldrh	r2, [r3, #24]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	7b58      	ldrb	r0, [r3, #13]
 8007208:	2301      	movs	r3, #1
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	4603      	mov	r3, r0
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 fb51 	bl	80088b6 <USBH_BulkSendData>
 8007214:	e00c      	b.n	8007230 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800721e:	b29a      	uxth	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	7b58      	ldrb	r0, [r3, #13]
 8007224:	2301      	movs	r3, #1
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	4603      	mov	r3, r0
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 fb43 	bl	80088b6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007238:	e03b      	b.n	80072b2 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	7b5b      	ldrb	r3, [r3, #13]
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 fe65 	bl	8008f10 <USBH_LL_GetURBState>
 8007246:	4603      	mov	r3, r0
 8007248:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800724a:	7afb      	ldrb	r3, [r7, #11]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d128      	bne.n	80072a2 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	8b12      	ldrh	r2, [r2, #24]
 8007258:	4293      	cmp	r3, r2
 800725a:	d90e      	bls.n	800727a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	8b12      	ldrh	r2, [r2, #24]
 8007264:	1a9a      	subs	r2, r3, r2
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	8b12      	ldrh	r2, [r2, #24]
 8007272:	441a      	add	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	61da      	str	r2, [r3, #28]
 8007278:	e002      	b.n	8007280 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	2b00      	cmp	r3, #0
 8007286:	d004      	beq.n	8007292 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007290:	e00e      	b.n	80072b0 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f868 	bl	8007370 <USBH_CDC_TransmitCallback>
      break;
 80072a0:	e006      	b.n	80072b0 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 80072a2:	7afb      	ldrb	r3, [r7, #11]
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d103      	bne.n	80072b0 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80072b0:	bf00      	nop
  }
}
 80072b2:	bf00      	nop
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b086      	sub	sp, #24
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80072cc:	2300      	movs	r3, #0
 80072ce:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d002      	beq.n	80072e0 <CDC_ProcessReception+0x26>
 80072da:	2b04      	cmp	r3, #4
 80072dc:	d00e      	beq.n	80072fc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80072de:	e043      	b.n	8007368 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	6a19      	ldr	r1, [r3, #32]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	8b5a      	ldrh	r2, [r3, #26]
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	7b1b      	ldrb	r3, [r3, #12]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f001 fb07 	bl	8008900 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2204      	movs	r2, #4
 80072f6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80072fa:	e035      	b.n	8007368 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	7b1b      	ldrb	r3, [r3, #12]
 8007300:	4619      	mov	r1, r3
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f001 fe04 	bl	8008f10 <USBH_LL_GetURBState>
 8007308:	4603      	mov	r3, r0
 800730a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800730c:	7cfb      	ldrb	r3, [r7, #19]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d129      	bne.n	8007366 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	7b1b      	ldrb	r3, [r3, #12]
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f001 fd67 	bl	8008dec <USBH_LL_GetLastXferSize>
 800731e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	429a      	cmp	r2, r3
 8007328:	d016      	beq.n	8007358 <CDC_ProcessReception+0x9e>
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	8b5b      	ldrh	r3, [r3, #26]
 800732e:	461a      	mov	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4293      	cmp	r3, r2
 8007334:	d910      	bls.n	8007358 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	1ad2      	subs	r2, r2, r3
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	6a1a      	ldr	r2, [r3, #32]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	441a      	add	r2, r3
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2203      	movs	r2, #3
 8007352:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007356:	e006      	b.n	8007366 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f80f 	bl	8007384 <USBH_CDC_ReceiveCallback>
      break;
 8007366:	bf00      	nop
  }
}
 8007368:	bf00      	nop
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	4613      	mov	r3, r2
 80073b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80073c0:	2302      	movs	r3, #2
 80073c2:	e029      	b.n	8007418 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	79fa      	ldrb	r2, [r7, #7]
 80073c8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f000 f81f 	bl	8007420 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d003      	beq.n	8007410 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f001 fc39 	bl	8008c88 <USBH_LL_Init>

  return USBH_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800742c:	2300      	movs	r3, #0
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	e009      	b.n	8007446 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	33e0      	adds	r3, #224	; 0xe0
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	2200      	movs	r2, #0
 800743e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	3301      	adds	r3, #1
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b0e      	cmp	r3, #14
 800744a:	d9f2      	bls.n	8007432 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800744c:	2300      	movs	r3, #0
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	e009      	b.n	8007466 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4413      	add	r3, r2
 8007458:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800745c:	2200      	movs	r2, #0
 800745e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3301      	adds	r3, #1
 8007464:	60fb      	str	r3, [r7, #12]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800746c:	d3f1      	bcc.n	8007452 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2240      	movs	r2, #64	; 0x40
 8007492:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d016      	beq.n	800750a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10e      	bne.n	8007504 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80074ec:	1c59      	adds	r1, r3, #1
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	33de      	adds	r3, #222	; 0xde
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	73fb      	strb	r3, [r7, #15]
 8007502:	e004      	b.n	800750e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007504:	2302      	movs	r3, #2
 8007506:	73fb      	strb	r3, [r7, #15]
 8007508:	e001      	b.n	800750e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800750a:	2302      	movs	r3, #2
 800750c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800750e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007532:	78fa      	ldrb	r2, [r7, #3]
 8007534:	429a      	cmp	r2, r3
 8007536:	d204      	bcs.n	8007542 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	78fa      	ldrb	r2, [r7, #3]
 800753c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007540:	e001      	b.n	8007546 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007542:	2302      	movs	r3, #2
 8007544:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007546:	7bfb      	ldrb	r3, [r7, #15]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	4608      	mov	r0, r1
 800755e:	4611      	mov	r1, r2
 8007560:	461a      	mov	r2, r3
 8007562:	4603      	mov	r3, r0
 8007564:	70fb      	strb	r3, [r7, #3]
 8007566:	460b      	mov	r3, r1
 8007568:	70bb      	strb	r3, [r7, #2]
 800756a:	4613      	mov	r3, r2
 800756c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007572:	2300      	movs	r3, #0
 8007574:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800757c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800757e:	e025      	b.n	80075cc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007580:	7dfb      	ldrb	r3, [r7, #23]
 8007582:	221a      	movs	r2, #26
 8007584:	fb02 f303 	mul.w	r3, r2, r3
 8007588:	3308      	adds	r3, #8
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	4413      	add	r3, r2
 800758e:	3302      	adds	r3, #2
 8007590:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	795b      	ldrb	r3, [r3, #5]
 8007596:	78fa      	ldrb	r2, [r7, #3]
 8007598:	429a      	cmp	r2, r3
 800759a:	d002      	beq.n	80075a2 <USBH_FindInterface+0x4e>
 800759c:	78fb      	ldrb	r3, [r7, #3]
 800759e:	2bff      	cmp	r3, #255	; 0xff
 80075a0:	d111      	bne.n	80075c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80075a6:	78ba      	ldrb	r2, [r7, #2]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d002      	beq.n	80075b2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075ac:	78bb      	ldrb	r3, [r7, #2]
 80075ae:	2bff      	cmp	r3, #255	; 0xff
 80075b0:	d109      	bne.n	80075c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075b6:	787a      	ldrb	r2, [r7, #1]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d002      	beq.n	80075c2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80075bc:	787b      	ldrb	r3, [r7, #1]
 80075be:	2bff      	cmp	r3, #255	; 0xff
 80075c0:	d101      	bne.n	80075c6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	e006      	b.n	80075d4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	3301      	adds	r3, #1
 80075ca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d9d6      	bls.n	8007580 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80075d2:	23ff      	movs	r3, #255	; 0xff
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	371c      	adds	r7, #28
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 fb89 	bl	8008d00 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80075ee:	2101      	movs	r1, #1
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 fca0 	bl	8008f36 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b088      	sub	sp, #32
 8007604:	af04      	add	r7, sp, #16
 8007606:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007608:	2302      	movs	r3, #2
 800760a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800760c:	2300      	movs	r3, #0
 800760e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b01      	cmp	r3, #1
 800761a:	d102      	bne.n	8007622 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2203      	movs	r2, #3
 8007620:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b0b      	cmp	r3, #11
 800762a:	f200 81b3 	bhi.w	8007994 <USBH_Process+0x394>
 800762e:	a201      	add	r2, pc, #4	; (adr r2, 8007634 <USBH_Process+0x34>)
 8007630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007634:	08007665 	.word	0x08007665
 8007638:	08007697 	.word	0x08007697
 800763c:	080076ff 	.word	0x080076ff
 8007640:	0800792f 	.word	0x0800792f
 8007644:	08007995 	.word	0x08007995
 8007648:	080077a3 	.word	0x080077a3
 800764c:	080078d5 	.word	0x080078d5
 8007650:	080077d9 	.word	0x080077d9
 8007654:	080077f9 	.word	0x080077f9
 8007658:	08007819 	.word	0x08007819
 800765c:	08007847 	.word	0x08007847
 8007660:	08007917 	.word	0x08007917
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 8193 	beq.w	8007998 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007678:	20c8      	movs	r0, #200	; 0xc8
 800767a:	f001 fca6 	bl	8008fca <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 fb99 	bl	8008db6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007694:	e180      	b.n	8007998 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800769c:	2b01      	cmp	r3, #1
 800769e:	d107      	bne.n	80076b0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2202      	movs	r2, #2
 80076ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80076ae:	e182      	b.n	80079b6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076ba:	d914      	bls.n	80076e6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80076c2:	3301      	adds	r3, #1
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d903      	bls.n	80076de <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	220d      	movs	r2, #13
 80076da:	701a      	strb	r2, [r3, #0]
      break;
 80076dc:	e16b      	b.n	80079b6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	701a      	strb	r2, [r3, #0]
      break;
 80076e4:	e167      	b.n	80079b6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076ec:	f103 020a 	add.w	r2, r3, #10
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80076f6:	200a      	movs	r0, #10
 80076f8:	f001 fc67 	bl	8008fca <USBH_Delay>
      break;
 80076fc:	e15b      	b.n	80079b6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800770e:	2104      	movs	r1, #4
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007714:	2064      	movs	r0, #100	; 0x64
 8007716:	f001 fc58 	bl	8008fca <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f001 fb26 	bl	8008d6c <USBH_LL_GetSpeed>
 8007720:	4603      	mov	r3, r0
 8007722:	461a      	mov	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2205      	movs	r2, #5
 800772e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007730:	2100      	movs	r1, #0
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 f931 	bl	800899a <USBH_AllocPipe>
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007740:	2180      	movs	r1, #128	; 0x80
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f001 f929 	bl	800899a <USBH_AllocPipe>
 8007748:	4603      	mov	r3, r0
 800774a:	461a      	mov	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	7919      	ldrb	r1, [r3, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007764:	b292      	uxth	r2, r2
 8007766:	9202      	str	r2, [sp, #8]
 8007768:	2200      	movs	r2, #0
 800776a:	9201      	str	r2, [sp, #4]
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	4603      	mov	r3, r0
 8007770:	2280      	movs	r2, #128	; 0x80
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f001 f8e2 	bl	800893c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	7959      	ldrb	r1, [r3, #5]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800778c:	b292      	uxth	r2, r2
 800778e:	9202      	str	r2, [sp, #8]
 8007790:	2200      	movs	r2, #0
 8007792:	9201      	str	r2, [sp, #4]
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	4603      	mov	r3, r0
 8007798:	2200      	movs	r2, #0
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 f8ce 	bl	800893c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077a0:	e109      	b.n	80079b6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f90c 	bl	80079c0 <USBH_HandleEnum>
 80077a8:	4603      	mov	r3, r0
 80077aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f040 80f3 	bne.w	800799c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d103      	bne.n	80077d0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2208      	movs	r2, #8
 80077cc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80077ce:	e0e5      	b.n	800799c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2207      	movs	r2, #7
 80077d4:	701a      	strb	r2, [r3, #0]
      break;
 80077d6:	e0e1      	b.n	800799c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 80de 	beq.w	80079a0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077ea:	2101      	movs	r1, #1
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2208      	movs	r2, #8
 80077f4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80077f6:	e0d3      	b.n	80079a0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80077fe:	b29b      	uxth	r3, r3
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fc20 	bl	8008048 <USBH_SetCfg>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	f040 80ca 	bne.w	80079a4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2209      	movs	r2, #9
 8007814:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007816:	e0c5      	b.n	80079a4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00b      	beq.n	800783e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007826:	2101      	movs	r1, #1
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fc30 	bl	800808e <USBH_SetFeature>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	f040 80b9 	bne.w	80079a8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	220a      	movs	r2, #10
 800783a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800783c:	e0b4      	b.n	80079a8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	220a      	movs	r2, #10
 8007842:	701a      	strb	r2, [r3, #0]
      break;
 8007844:	e0b0      	b.n	80079a8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 80ad 	beq.w	80079ac <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800785a:	2300      	movs	r3, #0
 800785c:	73fb      	strb	r3, [r7, #15]
 800785e:	e016      	b.n	800788e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007860:	7bfa      	ldrb	r2, [r7, #15]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	32de      	adds	r2, #222	; 0xde
 8007866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786a:	791a      	ldrb	r2, [r3, #4]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007872:	429a      	cmp	r2, r3
 8007874:	d108      	bne.n	8007888 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007876:	7bfa      	ldrb	r2, [r7, #15]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	32de      	adds	r2, #222	; 0xde
 800787c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007886:	e005      	b.n	8007894 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007888:	7bfb      	ldrb	r3, [r7, #15]
 800788a:	3301      	adds	r3, #1
 800788c:	73fb      	strb	r3, [r7, #15]
 800788e:	7bfb      	ldrb	r3, [r7, #15]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d0e5      	beq.n	8007860 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d016      	beq.n	80078cc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d109      	bne.n	80078c4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2206      	movs	r2, #6
 80078b4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078bc:	2103      	movs	r1, #3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078c2:	e073      	b.n	80079ac <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	220d      	movs	r2, #13
 80078c8:	701a      	strb	r2, [r3, #0]
      break;
 80078ca:	e06f      	b.n	80079ac <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	220d      	movs	r2, #13
 80078d0:	701a      	strb	r2, [r3, #0]
      break;
 80078d2:	e06b      	b.n	80079ac <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d017      	beq.n	800790e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	4798      	blx	r3
 80078ea:	4603      	mov	r3, r0
 80078ec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d103      	bne.n	80078fe <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	220b      	movs	r2, #11
 80078fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078fc:	e058      	b.n	80079b0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b02      	cmp	r3, #2
 8007904:	d154      	bne.n	80079b0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	220d      	movs	r2, #13
 800790a:	701a      	strb	r2, [r3, #0]
      break;
 800790c:	e050      	b.n	80079b0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	220d      	movs	r2, #13
 8007912:	701a      	strb	r2, [r3, #0]
      break;
 8007914:	e04c      	b.n	80079b0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d049      	beq.n	80079b4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	4798      	blx	r3
      }
      break;
 800792c:	e042      	b.n	80079b4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7ff fd72 	bl	8007420 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007942:	2b00      	cmp	r3, #0
 8007944:	d009      	beq.n	800795a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d005      	beq.n	8007970 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800796a:	2105      	movs	r1, #5
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b01      	cmp	r3, #1
 800797a:	d107      	bne.n	800798c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7ff fe2b 	bl	80075e0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800798a:	e014      	b.n	80079b6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f001 f9b7 	bl	8008d00 <USBH_LL_Start>
      break;
 8007992:	e010      	b.n	80079b6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007994:	bf00      	nop
 8007996:	e00e      	b.n	80079b6 <USBH_Process+0x3b6>
      break;
 8007998:	bf00      	nop
 800799a:	e00c      	b.n	80079b6 <USBH_Process+0x3b6>
      break;
 800799c:	bf00      	nop
 800799e:	e00a      	b.n	80079b6 <USBH_Process+0x3b6>
    break;
 80079a0:	bf00      	nop
 80079a2:	e008      	b.n	80079b6 <USBH_Process+0x3b6>
      break;
 80079a4:	bf00      	nop
 80079a6:	e006      	b.n	80079b6 <USBH_Process+0x3b6>
      break;
 80079a8:	bf00      	nop
 80079aa:	e004      	b.n	80079b6 <USBH_Process+0x3b6>
      break;
 80079ac:	bf00      	nop
 80079ae:	e002      	b.n	80079b6 <USBH_Process+0x3b6>
      break;
 80079b0:	bf00      	nop
 80079b2:	e000      	b.n	80079b6 <USBH_Process+0x3b6>
      break;
 80079b4:	bf00      	nop
  }
  return USBH_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af04      	add	r7, sp, #16
 80079c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80079c8:	2301      	movs	r3, #1
 80079ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80079cc:	2301      	movs	r3, #1
 80079ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	785b      	ldrb	r3, [r3, #1]
 80079d4:	2b07      	cmp	r3, #7
 80079d6:	f200 81c1 	bhi.w	8007d5c <USBH_HandleEnum+0x39c>
 80079da:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <USBH_HandleEnum+0x20>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	08007a01 	.word	0x08007a01
 80079e4:	08007abf 	.word	0x08007abf
 80079e8:	08007b29 	.word	0x08007b29
 80079ec:	08007bb7 	.word	0x08007bb7
 80079f0:	08007c21 	.word	0x08007c21
 80079f4:	08007c91 	.word	0x08007c91
 80079f8:	08007cd7 	.word	0x08007cd7
 80079fc:	08007d1d 	.word	0x08007d1d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007a00:	2108      	movs	r1, #8
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fa50 	bl	8007ea8 <USBH_Get_DevDesc>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d130      	bne.n	8007a74 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	7919      	ldrb	r1, [r3, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a36:	b292      	uxth	r2, r2
 8007a38:	9202      	str	r2, [sp, #8]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	9201      	str	r2, [sp, #4]
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	4603      	mov	r3, r0
 8007a42:	2280      	movs	r2, #128	; 0x80
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 ff79 	bl	800893c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	7959      	ldrb	r1, [r3, #5]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a5e:	b292      	uxth	r2, r2
 8007a60:	9202      	str	r2, [sp, #8]
 8007a62:	2200      	movs	r2, #0
 8007a64:	9201      	str	r2, [sp, #4]
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 ff65 	bl	800893c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a72:	e175      	b.n	8007d60 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	f040 8172 	bne.w	8007d60 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a82:	3301      	adds	r3, #1
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d903      	bls.n	8007a9e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	220d      	movs	r2, #13
 8007a9a:	701a      	strb	r2, [r3, #0]
      break;
 8007a9c:	e160      	b.n	8007d60 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	795b      	ldrb	r3, [r3, #5]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 ff99 	bl	80089dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	791b      	ldrb	r3, [r3, #4]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 ff93 	bl	80089dc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	701a      	strb	r2, [r3, #0]
      break;
 8007abc:	e150      	b.n	8007d60 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007abe:	2112      	movs	r1, #18
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f9f1 	bl	8007ea8 <USBH_Get_DevDesc>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d103      	bne.n	8007ad8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ad6:	e145      	b.n	8007d64 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	f040 8142 	bne.w	8007d64 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d903      	bls.n	8007b02 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	220d      	movs	r2, #13
 8007afe:	701a      	strb	r2, [r3, #0]
      break;
 8007b00:	e130      	b.n	8007d64 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	795b      	ldrb	r3, [r3, #5]
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 ff67 	bl	80089dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	791b      	ldrb	r3, [r3, #4]
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 ff61 	bl	80089dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	701a      	strb	r2, [r3, #0]
      break;
 8007b26:	e11d      	b.n	8007d64 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007b28:	2101      	movs	r1, #1
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fa68 	bl	8008000 <USBH_SetAddress>
 8007b30:	4603      	mov	r3, r0
 8007b32:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d132      	bne.n	8007ba0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007b3a:	2002      	movs	r0, #2
 8007b3c:	f001 fa45 	bl	8008fca <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2203      	movs	r2, #3
 8007b4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	7919      	ldrb	r1, [r3, #4]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b62:	b292      	uxth	r2, r2
 8007b64:	9202      	str	r2, [sp, #8]
 8007b66:	2200      	movs	r2, #0
 8007b68:	9201      	str	r2, [sp, #4]
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2280      	movs	r2, #128	; 0x80
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fee3 	bl	800893c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	7959      	ldrb	r1, [r3, #5]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b8a:	b292      	uxth	r2, r2
 8007b8c:	9202      	str	r2, [sp, #8]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	9201      	str	r2, [sp, #4]
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	4603      	mov	r3, r0
 8007b96:	2200      	movs	r2, #0
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fecf 	bl	800893c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b9e:	e0e3      	b.n	8007d68 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	f040 80e0 	bne.w	8007d68 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	220d      	movs	r2, #13
 8007bac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	705a      	strb	r2, [r3, #1]
      break;
 8007bb4:	e0d8      	b.n	8007d68 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007bb6:	2109      	movs	r1, #9
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f99d 	bl	8007ef8 <USBH_Get_CfgDesc>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d103      	bne.n	8007bd0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2204      	movs	r2, #4
 8007bcc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bce:	e0cd      	b.n	8007d6c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	f040 80ca 	bne.w	8007d6c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bde:	3301      	adds	r3, #1
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d903      	bls.n	8007bfa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	220d      	movs	r2, #13
 8007bf6:	701a      	strb	r2, [r3, #0]
      break;
 8007bf8:	e0b8      	b.n	8007d6c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	795b      	ldrb	r3, [r3, #5]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 feeb 	bl	80089dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	791b      	ldrb	r3, [r3, #4]
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fee5 	bl	80089dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	701a      	strb	r2, [r3, #0]
      break;
 8007c1e:	e0a5      	b.n	8007d6c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f965 	bl	8007ef8 <USBH_Get_CfgDesc>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d103      	bne.n	8007c40 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2205      	movs	r2, #5
 8007c3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c3e:	e097      	b.n	8007d70 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	f040 8094 	bne.w	8007d70 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c4e:	3301      	adds	r3, #1
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d903      	bls.n	8007c6a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	220d      	movs	r2, #13
 8007c66:	701a      	strb	r2, [r3, #0]
      break;
 8007c68:	e082      	b.n	8007d70 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	795b      	ldrb	r3, [r3, #5]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 feb3 	bl	80089dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	791b      	ldrb	r3, [r3, #4]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fead 	bl	80089dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	701a      	strb	r2, [r3, #0]
      break;
 8007c8e:	e06f      	b.n	8007d70 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d019      	beq.n	8007cce <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ca6:	23ff      	movs	r3, #255	; 0xff
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f949 	bl	8007f40 <USBH_Get_StringDesc>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d103      	bne.n	8007cc0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2206      	movs	r2, #6
 8007cbc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007cbe:	e059      	b.n	8007d74 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d156      	bne.n	8007d74 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2206      	movs	r2, #6
 8007cca:	705a      	strb	r2, [r3, #1]
      break;
 8007ccc:	e052      	b.n	8007d74 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2206      	movs	r2, #6
 8007cd2:	705a      	strb	r2, [r3, #1]
      break;
 8007cd4:	e04e      	b.n	8007d74 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d019      	beq.n	8007d14 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007cec:	23ff      	movs	r3, #255	; 0xff
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f926 	bl	8007f40 <USBH_Get_StringDesc>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d103      	bne.n	8007d06 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2207      	movs	r2, #7
 8007d02:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d04:	e038      	b.n	8007d78 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	2b03      	cmp	r3, #3
 8007d0a:	d135      	bne.n	8007d78 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2207      	movs	r2, #7
 8007d10:	705a      	strb	r2, [r3, #1]
      break;
 8007d12:	e031      	b.n	8007d78 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2207      	movs	r2, #7
 8007d18:	705a      	strb	r2, [r3, #1]
      break;
 8007d1a:	e02d      	b.n	8007d78 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d017      	beq.n	8007d56 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d32:	23ff      	movs	r3, #255	; 0xff
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f903 	bl	8007f40 <USBH_Get_StringDesc>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d102      	bne.n	8007d4a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007d48:	e018      	b.n	8007d7c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d115      	bne.n	8007d7c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	73fb      	strb	r3, [r7, #15]
      break;
 8007d54:	e012      	b.n	8007d7c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]
      break;
 8007d5a:	e00f      	b.n	8007d7c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007d5c:	bf00      	nop
 8007d5e:	e00e      	b.n	8007d7e <USBH_HandleEnum+0x3be>
      break;
 8007d60:	bf00      	nop
 8007d62:	e00c      	b.n	8007d7e <USBH_HandleEnum+0x3be>
      break;
 8007d64:	bf00      	nop
 8007d66:	e00a      	b.n	8007d7e <USBH_HandleEnum+0x3be>
      break;
 8007d68:	bf00      	nop
 8007d6a:	e008      	b.n	8007d7e <USBH_HandleEnum+0x3be>
      break;
 8007d6c:	bf00      	nop
 8007d6e:	e006      	b.n	8007d7e <USBH_HandleEnum+0x3be>
      break;
 8007d70:	bf00      	nop
 8007d72:	e004      	b.n	8007d7e <USBH_HandleEnum+0x3be>
      break;
 8007d74:	bf00      	nop
 8007d76:	e002      	b.n	8007d7e <USBH_HandleEnum+0x3be>
      break;
 8007d78:	bf00      	nop
 8007d7a:	e000      	b.n	8007d7e <USBH_HandleEnum+0x3be>
      break;
 8007d7c:	bf00      	nop
  }
  return Status;
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007db4:	1c5a      	adds	r2, r3, #1
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f804 	bl	8007dca <USBH_HandleSof>
}
 8007dc2:	bf00      	nop
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b082      	sub	sp, #8
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b0b      	cmp	r3, #11
 8007dda:	d10a      	bne.n	8007df2 <USBH_HandleSof+0x28>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d005      	beq.n	8007df2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	4798      	blx	r3
  }
}
 8007df2:	bf00      	nop
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007e0a:	bf00      	nop
}
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b083      	sub	sp, #12
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007e26:	bf00      	nop
}
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 ff58 	bl	8008d36 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	791b      	ldrb	r3, [r3, #4]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fda5 	bl	80089dc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	795b      	ldrb	r3, [r3, #5]
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fd9f 	bl	80089dc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f864 	bl	8007f96 <USBH_GetDescriptor>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	73fb      	strb	r3, [r7, #15]
 8007ed2:	7bfb      	ldrb	r3, [r7, #15]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10a      	bne.n	8007eee <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ee4:	78fa      	ldrb	r2, [r7, #3]
 8007ee6:	b292      	uxth	r2, r2
 8007ee8:	4619      	mov	r1, r3
 8007eea:	f000 f918 	bl	800811e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	331c      	adds	r3, #28
 8007f08:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f0a:	887b      	ldrh	r3, [r7, #2]
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f14:	2100      	movs	r1, #0
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f83d 	bl	8007f96 <USBH_GetDescriptor>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	72fb      	strb	r3, [r7, #11]
 8007f20:	7afb      	ldrb	r3, [r7, #11]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d107      	bne.n	8007f36 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f2c:	887a      	ldrh	r2, [r7, #2]
 8007f2e:	68f9      	ldr	r1, [r7, #12]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 f964 	bl	80081fe <USBH_ParseCfgDesc>
  }

  return status;
 8007f36:	7afb      	ldrb	r3, [r7, #11]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	607a      	str	r2, [r7, #4]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	72fb      	strb	r3, [r7, #11]
 8007f50:	4613      	mov	r3, r2
 8007f52:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007f54:	7afb      	ldrb	r3, [r7, #11]
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007f5c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007f64:	893b      	ldrh	r3, [r7, #8]
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 f812 	bl	8007f96 <USBH_GetDescriptor>
 8007f72:	4603      	mov	r3, r0
 8007f74:	75fb      	strb	r3, [r7, #23]
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d107      	bne.n	8007f8c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f82:	893a      	ldrh	r2, [r7, #8]
 8007f84:	6879      	ldr	r1, [r7, #4]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fa37 	bl	80083fa <USBH_ParseStringDesc>
  }

  return status;
 8007f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b084      	sub	sp, #16
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	60f8      	str	r0, [r7, #12]
 8007f9e:	607b      	str	r3, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	72fb      	strb	r3, [r7, #11]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	789b      	ldrb	r3, [r3, #2]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d11c      	bne.n	8007fea <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007fb0:	7afb      	ldrb	r3, [r7, #11]
 8007fb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2206      	movs	r2, #6
 8007fc0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	893a      	ldrh	r2, [r7, #8]
 8007fc6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007fc8:	893b      	ldrh	r3, [r7, #8]
 8007fca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fd2:	d104      	bne.n	8007fde <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f240 4209 	movw	r2, #1033	; 0x409
 8007fda:	829a      	strh	r2, [r3, #20]
 8007fdc:	e002      	b.n	8007fe4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8b3a      	ldrh	r2, [r7, #24]
 8007fe8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007fea:	8b3b      	ldrh	r3, [r7, #24]
 8007fec:	461a      	mov	r2, r3
 8007fee:	6879      	ldr	r1, [r7, #4]
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 fa50 	bl	8008496 <USBH_CtlReq>
 8007ff6:	4603      	mov	r3, r0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	789b      	ldrb	r3, [r3, #2]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d10f      	bne.n	8008034 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2205      	movs	r2, #5
 800801e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008020:	78fb      	ldrb	r3, [r7, #3]
 8008022:	b29a      	uxth	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008034:	2200      	movs	r2, #0
 8008036:	2100      	movs	r1, #0
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fa2c 	bl	8008496 <USBH_CtlReq>
 800803e:	4603      	mov	r3, r0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	789b      	ldrb	r3, [r3, #2]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d10e      	bne.n	800807a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2209      	movs	r2, #9
 8008066:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	887a      	ldrh	r2, [r7, #2]
 800806c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800807a:	2200      	movs	r2, #0
 800807c:	2100      	movs	r1, #0
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fa09 	bl	8008496 <USBH_CtlReq>
 8008084:	4603      	mov	r3, r0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b082      	sub	sp, #8
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	460b      	mov	r3, r1
 8008098:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	789b      	ldrb	r3, [r3, #2]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d10f      	bne.n	80080c2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2203      	movs	r2, #3
 80080ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80080ae:	78fb      	ldrb	r3, [r7, #3]
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80080c2:	2200      	movs	r2, #0
 80080c4:	2100      	movs	r1, #0
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f9e5 	bl	8008496 <USBH_CtlReq>
 80080cc:	4603      	mov	r3, r0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3708      	adds	r7, #8
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b082      	sub	sp, #8
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	460b      	mov	r3, r1
 80080e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	789b      	ldrb	r3, [r3, #2]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d10f      	bne.n	800810a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2202      	movs	r2, #2
 80080ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80080fc:	78fb      	ldrb	r3, [r7, #3]
 80080fe:	b29a      	uxth	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800810a:	2200      	movs	r2, #0
 800810c:	2100      	movs	r1, #0
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f9c1 	bl	8008496 <USBH_CtlReq>
 8008114:	4603      	mov	r3, r0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800811e:	b480      	push	{r7}
 8008120:	b085      	sub	sp, #20
 8008122:	af00      	add	r7, sp, #0
 8008124:	60f8      	str	r0, [r7, #12]
 8008126:	60b9      	str	r1, [r7, #8]
 8008128:	4613      	mov	r3, r2
 800812a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	781a      	ldrb	r2, [r3, #0]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	785a      	ldrb	r2, [r3, #1]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	3302      	adds	r3, #2
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	b29a      	uxth	r2, r3
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	3303      	adds	r3, #3
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	b29b      	uxth	r3, r3
 800814c:	021b      	lsls	r3, r3, #8
 800814e:	b29b      	uxth	r3, r3
 8008150:	4313      	orrs	r3, r2
 8008152:	b29a      	uxth	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	791a      	ldrb	r2, [r3, #4]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	795a      	ldrb	r2, [r3, #5]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	799a      	ldrb	r2, [r3, #6]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	79da      	ldrb	r2, [r3, #7]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008178:	88fb      	ldrh	r3, [r7, #6]
 800817a:	2b08      	cmp	r3, #8
 800817c:	d939      	bls.n	80081f2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	3308      	adds	r3, #8
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	b29a      	uxth	r2, r3
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	3309      	adds	r3, #9
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	b29b      	uxth	r3, r3
 800818e:	021b      	lsls	r3, r3, #8
 8008190:	b29b      	uxth	r3, r3
 8008192:	4313      	orrs	r3, r2
 8008194:	b29a      	uxth	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	330a      	adds	r3, #10
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	330b      	adds	r3, #11
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	021b      	lsls	r3, r3, #8
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	4313      	orrs	r3, r2
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	330c      	adds	r3, #12
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	b29a      	uxth	r2, r3
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	330d      	adds	r3, #13
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	021b      	lsls	r3, r3, #8
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	4313      	orrs	r3, r2
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	7b9a      	ldrb	r2, [r3, #14]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	7bda      	ldrb	r2, [r3, #15]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	7c1a      	ldrb	r2, [r3, #16]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	7c5a      	ldrb	r2, [r3, #17]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	745a      	strb	r2, [r3, #17]
  }
}
 80081f2:	bf00      	nop
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b08a      	sub	sp, #40	; 0x28
 8008202:	af00      	add	r7, sp, #0
 8008204:	60f8      	str	r0, [r7, #12]
 8008206:	60b9      	str	r1, [r7, #8]
 8008208:	4613      	mov	r3, r2
 800820a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008216:	2300      	movs	r3, #0
 8008218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	781a      	ldrb	r2, [r3, #0]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	785a      	ldrb	r2, [r3, #1]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	3302      	adds	r3, #2
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	b29a      	uxth	r2, r3
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	3303      	adds	r3, #3
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	b29b      	uxth	r3, r3
 8008240:	021b      	lsls	r3, r3, #8
 8008242:	b29b      	uxth	r3, r3
 8008244:	4313      	orrs	r3, r2
 8008246:	b29a      	uxth	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	791a      	ldrb	r2, [r3, #4]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	795a      	ldrb	r2, [r3, #5]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	799a      	ldrb	r2, [r3, #6]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	79da      	ldrb	r2, [r3, #7]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	7a1a      	ldrb	r2, [r3, #8]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008274:	88fb      	ldrh	r3, [r7, #6]
 8008276:	2b09      	cmp	r3, #9
 8008278:	d95f      	bls.n	800833a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800827a:	2309      	movs	r3, #9
 800827c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800827e:	2300      	movs	r3, #0
 8008280:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008282:	e051      	b.n	8008328 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008284:	f107 0316 	add.w	r3, r7, #22
 8008288:	4619      	mov	r1, r3
 800828a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800828c:	f000 f8e8 	bl	8008460 <USBH_GetNextDesc>
 8008290:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	785b      	ldrb	r3, [r3, #1]
 8008296:	2b04      	cmp	r3, #4
 8008298:	d146      	bne.n	8008328 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800829a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800829e:	221a      	movs	r2, #26
 80082a0:	fb02 f303 	mul.w	r3, r2, r3
 80082a4:	3308      	adds	r3, #8
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	4413      	add	r3, r2
 80082aa:	3302      	adds	r3, #2
 80082ac:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80082ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082b0:	69f8      	ldr	r0, [r7, #28]
 80082b2:	f000 f846 	bl	8008342 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80082b6:	2300      	movs	r3, #0
 80082b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80082bc:	2300      	movs	r3, #0
 80082be:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082c0:	e022      	b.n	8008308 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80082c2:	f107 0316 	add.w	r3, r7, #22
 80082c6:	4619      	mov	r1, r3
 80082c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082ca:	f000 f8c9 	bl	8008460 <USBH_GetNextDesc>
 80082ce:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	785b      	ldrb	r3, [r3, #1]
 80082d4:	2b05      	cmp	r3, #5
 80082d6:	d117      	bne.n	8008308 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80082d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80082e0:	3201      	adds	r2, #1
 80082e2:	00d2      	lsls	r2, r2, #3
 80082e4:	211a      	movs	r1, #26
 80082e6:	fb01 f303 	mul.w	r3, r1, r3
 80082ea:	4413      	add	r3, r2
 80082ec:	3308      	adds	r3, #8
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4413      	add	r3, r2
 80082f2:	3304      	adds	r3, #4
 80082f4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80082f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082f8:	69b8      	ldr	r0, [r7, #24]
 80082fa:	f000 f851 	bl	80083a0 <USBH_ParseEPDesc>
            ep_ix++;
 80082fe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008302:	3301      	adds	r3, #1
 8008304:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	791b      	ldrb	r3, [r3, #4]
 800830c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008310:	429a      	cmp	r2, r3
 8008312:	d204      	bcs.n	800831e <USBH_ParseCfgDesc+0x120>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	885a      	ldrh	r2, [r3, #2]
 8008318:	8afb      	ldrh	r3, [r7, #22]
 800831a:	429a      	cmp	r2, r3
 800831c:	d8d1      	bhi.n	80082c2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800831e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008322:	3301      	adds	r3, #1
 8008324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008328:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800832c:	2b01      	cmp	r3, #1
 800832e:	d804      	bhi.n	800833a <USBH_ParseCfgDesc+0x13c>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	885a      	ldrh	r2, [r3, #2]
 8008334:	8afb      	ldrh	r3, [r7, #22]
 8008336:	429a      	cmp	r2, r3
 8008338:	d8a4      	bhi.n	8008284 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800833a:	bf00      	nop
 800833c:	3728      	adds	r7, #40	; 0x28
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	781a      	ldrb	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	785a      	ldrb	r2, [r3, #1]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	789a      	ldrb	r2, [r3, #2]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	78da      	ldrb	r2, [r3, #3]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	791a      	ldrb	r2, [r3, #4]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	795a      	ldrb	r2, [r3, #5]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	799a      	ldrb	r2, [r3, #6]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	79da      	ldrb	r2, [r3, #7]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	7a1a      	ldrb	r2, [r3, #8]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	721a      	strb	r2, [r3, #8]
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	781a      	ldrb	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	785a      	ldrb	r2, [r3, #1]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	789a      	ldrb	r2, [r3, #2]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	78da      	ldrb	r2, [r3, #3]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	3304      	adds	r3, #4
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	3305      	adds	r3, #5
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	021b      	lsls	r3, r3, #8
 80083dc:	b29b      	uxth	r3, r3
 80083de:	4313      	orrs	r3, r2
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	799a      	ldrb	r2, [r3, #6]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	719a      	strb	r2, [r3, #6]
}
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b087      	sub	sp, #28
 80083fe:	af00      	add	r7, sp, #0
 8008400:	60f8      	str	r0, [r7, #12]
 8008402:	60b9      	str	r1, [r7, #8]
 8008404:	4613      	mov	r3, r2
 8008406:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	3301      	adds	r3, #1
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b03      	cmp	r3, #3
 8008410:	d120      	bne.n	8008454 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	1e9a      	subs	r2, r3, #2
 8008418:	88fb      	ldrh	r3, [r7, #6]
 800841a:	4293      	cmp	r3, r2
 800841c:	bf28      	it	cs
 800841e:	4613      	movcs	r3, r2
 8008420:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	3302      	adds	r3, #2
 8008426:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008428:	2300      	movs	r3, #0
 800842a:	82fb      	strh	r3, [r7, #22]
 800842c:	e00b      	b.n	8008446 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800842e:	8afb      	ldrh	r3, [r7, #22]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	4413      	add	r3, r2
 8008434:	781a      	ldrb	r2, [r3, #0]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	701a      	strb	r2, [r3, #0]
      pdest++;
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	3301      	adds	r3, #1
 800843e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008440:	8afb      	ldrh	r3, [r7, #22]
 8008442:	3302      	adds	r3, #2
 8008444:	82fb      	strh	r3, [r7, #22]
 8008446:	8afa      	ldrh	r2, [r7, #22]
 8008448:	8abb      	ldrh	r3, [r7, #20]
 800844a:	429a      	cmp	r2, r3
 800844c:	d3ef      	bcc.n	800842e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2200      	movs	r2, #0
 8008452:	701a      	strb	r2, [r3, #0]
  }
}
 8008454:	bf00      	nop
 8008456:	371c      	adds	r7, #28
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	881a      	ldrh	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	b29b      	uxth	r3, r3
 8008474:	4413      	add	r3, r2
 8008476:	b29a      	uxth	r2, r3
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4413      	add	r3, r2
 8008486:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008488:	68fb      	ldr	r3, [r7, #12]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b086      	sub	sp, #24
 800849a:	af00      	add	r7, sp, #0
 800849c:	60f8      	str	r0, [r7, #12]
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	4613      	mov	r3, r2
 80084a2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80084a4:	2301      	movs	r3, #1
 80084a6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	789b      	ldrb	r3, [r3, #2]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d002      	beq.n	80084b6 <USBH_CtlReq+0x20>
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d00f      	beq.n	80084d4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80084b4:	e027      	b.n	8008506 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	88fa      	ldrh	r2, [r7, #6]
 80084c0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2201      	movs	r2, #1
 80084c6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2202      	movs	r2, #2
 80084cc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80084ce:	2301      	movs	r3, #1
 80084d0:	75fb      	strb	r3, [r7, #23]
      break;
 80084d2:	e018      	b.n	8008506 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 f81b 	bl	8008510 <USBH_HandleControl>
 80084da:	4603      	mov	r3, r0
 80084dc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <USBH_CtlReq+0x54>
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d106      	bne.n	80084f8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2201      	movs	r2, #1
 80084ee:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	761a      	strb	r2, [r3, #24]
      break;
 80084f6:	e005      	b.n	8008504 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d102      	bne.n	8008504 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2201      	movs	r2, #1
 8008502:	709a      	strb	r2, [r3, #2]
      break;
 8008504:	bf00      	nop
  }
  return status;
 8008506:	7dfb      	ldrb	r3, [r7, #23]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3718      	adds	r7, #24
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af02      	add	r7, sp, #8
 8008516:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008518:	2301      	movs	r3, #1
 800851a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800851c:	2300      	movs	r3, #0
 800851e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	7e1b      	ldrb	r3, [r3, #24]
 8008524:	3b01      	subs	r3, #1
 8008526:	2b0a      	cmp	r3, #10
 8008528:	f200 8158 	bhi.w	80087dc <USBH_HandleControl+0x2cc>
 800852c:	a201      	add	r2, pc, #4	; (adr r2, 8008534 <USBH_HandleControl+0x24>)
 800852e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008532:	bf00      	nop
 8008534:	08008561 	.word	0x08008561
 8008538:	0800857b 	.word	0x0800857b
 800853c:	080085e5 	.word	0x080085e5
 8008540:	0800860b 	.word	0x0800860b
 8008544:	08008643 	.word	0x08008643
 8008548:	0800866f 	.word	0x0800866f
 800854c:	080086c1 	.word	0x080086c1
 8008550:	080086e3 	.word	0x080086e3
 8008554:	0800871f 	.word	0x0800871f
 8008558:	08008747 	.word	0x08008747
 800855c:	08008785 	.word	0x08008785
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f103 0110 	add.w	r1, r3, #16
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	795b      	ldrb	r3, [r3, #5]
 800856a:	461a      	mov	r2, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f945 	bl	80087fc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2202      	movs	r2, #2
 8008576:	761a      	strb	r2, [r3, #24]
      break;
 8008578:	e13b      	b.n	80087f2 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	795b      	ldrb	r3, [r3, #5]
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fcc5 	bl	8008f10 <USBH_LL_GetURBState>
 8008586:	4603      	mov	r3, r0
 8008588:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800858a:	7bbb      	ldrb	r3, [r7, #14]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d11e      	bne.n	80085ce <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	7c1b      	ldrb	r3, [r3, #16]
 8008594:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008598:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	8adb      	ldrh	r3, [r3, #22]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00a      	beq.n	80085b8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80085a2:	7b7b      	ldrb	r3, [r7, #13]
 80085a4:	2b80      	cmp	r3, #128	; 0x80
 80085a6:	d103      	bne.n	80085b0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2203      	movs	r2, #3
 80085ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80085ae:	e117      	b.n	80087e0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2205      	movs	r2, #5
 80085b4:	761a      	strb	r2, [r3, #24]
      break;
 80085b6:	e113      	b.n	80087e0 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80085b8:	7b7b      	ldrb	r3, [r7, #13]
 80085ba:	2b80      	cmp	r3, #128	; 0x80
 80085bc:	d103      	bne.n	80085c6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2209      	movs	r2, #9
 80085c2:	761a      	strb	r2, [r3, #24]
      break;
 80085c4:	e10c      	b.n	80087e0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2207      	movs	r2, #7
 80085ca:	761a      	strb	r2, [r3, #24]
      break;
 80085cc:	e108      	b.n	80087e0 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	2b04      	cmp	r3, #4
 80085d2:	d003      	beq.n	80085dc <USBH_HandleControl+0xcc>
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	f040 8102 	bne.w	80087e0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	220b      	movs	r2, #11
 80085e0:	761a      	strb	r2, [r3, #24]
      break;
 80085e2:	e0fd      	b.n	80087e0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6899      	ldr	r1, [r3, #8]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	899a      	ldrh	r2, [r3, #12]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	791b      	ldrb	r3, [r3, #4]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f93c 	bl	800887a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2204      	movs	r2, #4
 8008606:	761a      	strb	r2, [r3, #24]
      break;
 8008608:	e0f3      	b.n	80087f2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	791b      	ldrb	r3, [r3, #4]
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fc7d 	bl	8008f10 <USBH_LL_GetURBState>
 8008616:	4603      	mov	r3, r0
 8008618:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800861a:	7bbb      	ldrb	r3, [r7, #14]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d102      	bne.n	8008626 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2209      	movs	r2, #9
 8008624:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	2b05      	cmp	r3, #5
 800862a:	d102      	bne.n	8008632 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800862c:	2303      	movs	r3, #3
 800862e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008630:	e0d8      	b.n	80087e4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	2b04      	cmp	r3, #4
 8008636:	f040 80d5 	bne.w	80087e4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	220b      	movs	r2, #11
 800863e:	761a      	strb	r2, [r3, #24]
      break;
 8008640:	e0d0      	b.n	80087e4 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6899      	ldr	r1, [r3, #8]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	899a      	ldrh	r2, [r3, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	7958      	ldrb	r0, [r3, #5]
 800864e:	2301      	movs	r3, #1
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	4603      	mov	r3, r0
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f8eb 	bl	8008830 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008660:	b29a      	uxth	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2206      	movs	r2, #6
 800866a:	761a      	strb	r2, [r3, #24]
      break;
 800866c:	e0c1      	b.n	80087f2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	795b      	ldrb	r3, [r3, #5]
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fc4b 	bl	8008f10 <USBH_LL_GetURBState>
 800867a:	4603      	mov	r3, r0
 800867c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800867e:	7bbb      	ldrb	r3, [r7, #14]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d103      	bne.n	800868c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2207      	movs	r2, #7
 8008688:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800868a:	e0ad      	b.n	80087e8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	2b05      	cmp	r3, #5
 8008690:	d105      	bne.n	800869e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	220c      	movs	r2, #12
 8008696:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008698:	2303      	movs	r3, #3
 800869a:	73fb      	strb	r3, [r7, #15]
      break;
 800869c:	e0a4      	b.n	80087e8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d103      	bne.n	80086ac <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2205      	movs	r2, #5
 80086a8:	761a      	strb	r2, [r3, #24]
      break;
 80086aa:	e09d      	b.n	80087e8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80086ac:	7bbb      	ldrb	r3, [r7, #14]
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	f040 809a 	bne.w	80087e8 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	220b      	movs	r2, #11
 80086b8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80086ba:	2302      	movs	r3, #2
 80086bc:	73fb      	strb	r3, [r7, #15]
      break;
 80086be:	e093      	b.n	80087e8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	791b      	ldrb	r3, [r3, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	2100      	movs	r1, #0
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f8d6 	bl	800887a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2208      	movs	r2, #8
 80086de:	761a      	strb	r2, [r3, #24]

      break;
 80086e0:	e087      	b.n	80087f2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	791b      	ldrb	r3, [r3, #4]
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fc11 	bl	8008f10 <USBH_LL_GetURBState>
 80086ee:	4603      	mov	r3, r0
 80086f0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80086f2:	7bbb      	ldrb	r3, [r7, #14]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d105      	bne.n	8008704 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	220d      	movs	r2, #13
 80086fc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008702:	e073      	b.n	80087ec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	2b04      	cmp	r3, #4
 8008708:	d103      	bne.n	8008712 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	220b      	movs	r2, #11
 800870e:	761a      	strb	r2, [r3, #24]
      break;
 8008710:	e06c      	b.n	80087ec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	2b05      	cmp	r3, #5
 8008716:	d169      	bne.n	80087ec <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008718:	2303      	movs	r3, #3
 800871a:	73fb      	strb	r3, [r7, #15]
      break;
 800871c:	e066      	b.n	80087ec <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	795a      	ldrb	r2, [r3, #5]
 8008722:	2301      	movs	r3, #1
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	4613      	mov	r3, r2
 8008728:	2200      	movs	r2, #0
 800872a:	2100      	movs	r1, #0
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f87f 	bl	8008830 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008738:	b29a      	uxth	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	220a      	movs	r2, #10
 8008742:	761a      	strb	r2, [r3, #24]
      break;
 8008744:	e055      	b.n	80087f2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	795b      	ldrb	r3, [r3, #5]
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fbdf 	bl	8008f10 <USBH_LL_GetURBState>
 8008752:	4603      	mov	r3, r0
 8008754:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008756:	7bbb      	ldrb	r3, [r7, #14]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d105      	bne.n	8008768 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	220d      	movs	r2, #13
 8008764:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008766:	e043      	b.n	80087f0 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	2b02      	cmp	r3, #2
 800876c:	d103      	bne.n	8008776 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2209      	movs	r2, #9
 8008772:	761a      	strb	r2, [r3, #24]
      break;
 8008774:	e03c      	b.n	80087f0 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008776:	7bbb      	ldrb	r3, [r7, #14]
 8008778:	2b04      	cmp	r3, #4
 800877a:	d139      	bne.n	80087f0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	220b      	movs	r2, #11
 8008780:	761a      	strb	r2, [r3, #24]
      break;
 8008782:	e035      	b.n	80087f0 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	7e5b      	ldrb	r3, [r3, #25]
 8008788:	3301      	adds	r3, #1
 800878a:	b2da      	uxtb	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	765a      	strb	r2, [r3, #25]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	7e5b      	ldrb	r3, [r3, #25]
 8008794:	2b02      	cmp	r3, #2
 8008796:	d806      	bhi.n	80087a6 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80087a4:	e025      	b.n	80087f2 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087ac:	2106      	movs	r1, #6
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	795b      	ldrb	r3, [r3, #5]
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f90c 	bl	80089dc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	791b      	ldrb	r3, [r3, #4]
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f906 	bl	80089dc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80087d6:	2302      	movs	r3, #2
 80087d8:	73fb      	strb	r3, [r7, #15]
      break;
 80087da:	e00a      	b.n	80087f2 <USBH_HandleControl+0x2e2>

    default:
      break;
 80087dc:	bf00      	nop
 80087de:	e008      	b.n	80087f2 <USBH_HandleControl+0x2e2>
      break;
 80087e0:	bf00      	nop
 80087e2:	e006      	b.n	80087f2 <USBH_HandleControl+0x2e2>
      break;
 80087e4:	bf00      	nop
 80087e6:	e004      	b.n	80087f2 <USBH_HandleControl+0x2e2>
      break;
 80087e8:	bf00      	nop
 80087ea:	e002      	b.n	80087f2 <USBH_HandleControl+0x2e2>
      break;
 80087ec:	bf00      	nop
 80087ee:	e000      	b.n	80087f2 <USBH_HandleControl+0x2e2>
      break;
 80087f0:	bf00      	nop
  }

  return status;
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b088      	sub	sp, #32
 8008800:	af04      	add	r7, sp, #16
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	4613      	mov	r3, r2
 8008808:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800880a:	79f9      	ldrb	r1, [r7, #7]
 800880c:	2300      	movs	r3, #0
 800880e:	9303      	str	r3, [sp, #12]
 8008810:	2308      	movs	r3, #8
 8008812:	9302      	str	r3, [sp, #8]
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	9301      	str	r3, [sp, #4]
 8008818:	2300      	movs	r3, #0
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	2300      	movs	r3, #0
 800881e:	2200      	movs	r2, #0
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f000 fb44 	bl	8008eae <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b088      	sub	sp, #32
 8008834:	af04      	add	r7, sp, #16
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	4611      	mov	r1, r2
 800883c:	461a      	mov	r2, r3
 800883e:	460b      	mov	r3, r1
 8008840:	80fb      	strh	r3, [r7, #6]
 8008842:	4613      	mov	r3, r2
 8008844:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008854:	7979      	ldrb	r1, [r7, #5]
 8008856:	7e3b      	ldrb	r3, [r7, #24]
 8008858:	9303      	str	r3, [sp, #12]
 800885a:	88fb      	ldrh	r3, [r7, #6]
 800885c:	9302      	str	r3, [sp, #8]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	9301      	str	r3, [sp, #4]
 8008862:	2301      	movs	r3, #1
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	2300      	movs	r3, #0
 8008868:	2200      	movs	r2, #0
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 fb1f 	bl	8008eae <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b088      	sub	sp, #32
 800887e:	af04      	add	r7, sp, #16
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	4611      	mov	r1, r2
 8008886:	461a      	mov	r2, r3
 8008888:	460b      	mov	r3, r1
 800888a:	80fb      	strh	r3, [r7, #6]
 800888c:	4613      	mov	r3, r2
 800888e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008890:	7979      	ldrb	r1, [r7, #5]
 8008892:	2300      	movs	r3, #0
 8008894:	9303      	str	r3, [sp, #12]
 8008896:	88fb      	ldrh	r3, [r7, #6]
 8008898:	9302      	str	r3, [sp, #8]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	2301      	movs	r3, #1
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	2300      	movs	r3, #0
 80088a4:	2201      	movs	r2, #1
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f000 fb01 	bl	8008eae <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80088ac:	2300      	movs	r3, #0

}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b088      	sub	sp, #32
 80088ba:	af04      	add	r7, sp, #16
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	60b9      	str	r1, [r7, #8]
 80088c0:	4611      	mov	r1, r2
 80088c2:	461a      	mov	r2, r3
 80088c4:	460b      	mov	r3, r1
 80088c6:	80fb      	strh	r3, [r7, #6]
 80088c8:	4613      	mov	r3, r2
 80088ca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80088da:	7979      	ldrb	r1, [r7, #5]
 80088dc:	7e3b      	ldrb	r3, [r7, #24]
 80088de:	9303      	str	r3, [sp, #12]
 80088e0:	88fb      	ldrh	r3, [r7, #6]
 80088e2:	9302      	str	r3, [sp, #8]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	9301      	str	r3, [sp, #4]
 80088e8:	2301      	movs	r3, #1
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	2302      	movs	r3, #2
 80088ee:	2200      	movs	r2, #0
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 fadc 	bl	8008eae <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af04      	add	r7, sp, #16
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	4611      	mov	r1, r2
 800890c:	461a      	mov	r2, r3
 800890e:	460b      	mov	r3, r1
 8008910:	80fb      	strh	r3, [r7, #6]
 8008912:	4613      	mov	r3, r2
 8008914:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008916:	7979      	ldrb	r1, [r7, #5]
 8008918:	2300      	movs	r3, #0
 800891a:	9303      	str	r3, [sp, #12]
 800891c:	88fb      	ldrh	r3, [r7, #6]
 800891e:	9302      	str	r3, [sp, #8]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	9301      	str	r3, [sp, #4]
 8008924:	2301      	movs	r3, #1
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	2302      	movs	r3, #2
 800892a:	2201      	movs	r2, #1
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f000 fabe 	bl	8008eae <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af04      	add	r7, sp, #16
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	4608      	mov	r0, r1
 8008946:	4611      	mov	r1, r2
 8008948:	461a      	mov	r2, r3
 800894a:	4603      	mov	r3, r0
 800894c:	70fb      	strb	r3, [r7, #3]
 800894e:	460b      	mov	r3, r1
 8008950:	70bb      	strb	r3, [r7, #2]
 8008952:	4613      	mov	r3, r2
 8008954:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008956:	7878      	ldrb	r0, [r7, #1]
 8008958:	78ba      	ldrb	r2, [r7, #2]
 800895a:	78f9      	ldrb	r1, [r7, #3]
 800895c:	8b3b      	ldrh	r3, [r7, #24]
 800895e:	9302      	str	r3, [sp, #8]
 8008960:	7d3b      	ldrb	r3, [r7, #20]
 8008962:	9301      	str	r3, [sp, #4]
 8008964:	7c3b      	ldrb	r3, [r7, #16]
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	4603      	mov	r3, r0
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fa51 	bl	8008e12 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b082      	sub	sp, #8
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	460b      	mov	r3, r1
 8008984:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008986:	78fb      	ldrb	r3, [r7, #3]
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa70 	bl	8008e70 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f836 	bl	8008a18 <USBH_GetFreePipe>
 80089ac:	4603      	mov	r3, r0
 80089ae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80089b0:	89fb      	ldrh	r3, [r7, #14]
 80089b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d00a      	beq.n	80089d0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80089ba:	78fa      	ldrb	r2, [r7, #3]
 80089bc:	89fb      	ldrh	r3, [r7, #14]
 80089be:	f003 030f 	and.w	r3, r3, #15
 80089c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	33e0      	adds	r3, #224	; 0xe0
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	440b      	add	r3, r1
 80089ce:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80089d0:	89fb      	ldrh	r3, [r7, #14]
 80089d2:	b2db      	uxtb	r3, r3
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	2b0a      	cmp	r3, #10
 80089ec:	d80d      	bhi.n	8008a0a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80089ee:	78fb      	ldrb	r3, [r7, #3]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	33e0      	adds	r3, #224	; 0xe0
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	685a      	ldr	r2, [r3, #4]
 80089fa:	78fb      	ldrb	r3, [r7, #3]
 80089fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008a00:	6879      	ldr	r1, [r7, #4]
 8008a02:	33e0      	adds	r3, #224	; 0xe0
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	440b      	add	r3, r1
 8008a08:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008a24:	2300      	movs	r3, #0
 8008a26:	73fb      	strb	r3, [r7, #15]
 8008a28:	e00f      	b.n	8008a4a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	33e0      	adds	r3, #224	; 0xe0
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d102      	bne.n	8008a44 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	e007      	b.n	8008a54 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	3301      	adds	r3, #1
 8008a48:	73fb      	strb	r3, [r7, #15]
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	2b0a      	cmp	r3, #10
 8008a4e:	d9ec      	bls.n	8008a2a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008a64:	2201      	movs	r2, #1
 8008a66:	490e      	ldr	r1, [pc, #56]	; (8008aa0 <MX_USB_HOST_Init+0x40>)
 8008a68:	480e      	ldr	r0, [pc, #56]	; (8008aa4 <MX_USB_HOST_Init+0x44>)
 8008a6a:	f7fe fc9f 	bl	80073ac <USBH_Init>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008a74:	f7f8 fa22 	bl	8000ebc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008a78:	490b      	ldr	r1, [pc, #44]	; (8008aa8 <MX_USB_HOST_Init+0x48>)
 8008a7a:	480a      	ldr	r0, [pc, #40]	; (8008aa4 <MX_USB_HOST_Init+0x44>)
 8008a7c:	f7fe fd24 	bl	80074c8 <USBH_RegisterClass>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008a86:	f7f8 fa19 	bl	8000ebc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008a8a:	4806      	ldr	r0, [pc, #24]	; (8008aa4 <MX_USB_HOST_Init+0x44>)
 8008a8c:	f7fe fda8 	bl	80075e0 <USBH_Start>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008a96:	f7f8 fa11 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008a9a:	bf00      	nop
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	08008ac1 	.word	0x08008ac1
 8008aa4:	200002f0 	.word	0x200002f0
 8008aa8:	2000000c 	.word	0x2000000c

08008aac <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008ab0:	4802      	ldr	r0, [pc, #8]	; (8008abc <MX_USB_HOST_Process+0x10>)
 8008ab2:	f7fe fda5 	bl	8007600 <USBH_Process>
}
 8008ab6:	bf00      	nop
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	200002f0 	.word	0x200002f0

08008ac0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008acc:	78fb      	ldrb	r3, [r7, #3]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	d819      	bhi.n	8008b08 <USBH_UserProcess+0x48>
 8008ad4:	a201      	add	r2, pc, #4	; (adr r2, 8008adc <USBH_UserProcess+0x1c>)
 8008ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ada:	bf00      	nop
 8008adc:	08008b09 	.word	0x08008b09
 8008ae0:	08008af9 	.word	0x08008af9
 8008ae4:	08008b09 	.word	0x08008b09
 8008ae8:	08008b01 	.word	0x08008b01
 8008aec:	08008af1 	.word	0x08008af1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008af0:	4b09      	ldr	r3, [pc, #36]	; (8008b18 <USBH_UserProcess+0x58>)
 8008af2:	2203      	movs	r2, #3
 8008af4:	701a      	strb	r2, [r3, #0]
  break;
 8008af6:	e008      	b.n	8008b0a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008af8:	4b07      	ldr	r3, [pc, #28]	; (8008b18 <USBH_UserProcess+0x58>)
 8008afa:	2202      	movs	r2, #2
 8008afc:	701a      	strb	r2, [r3, #0]
  break;
 8008afe:	e004      	b.n	8008b0a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008b00:	4b05      	ldr	r3, [pc, #20]	; (8008b18 <USBH_UserProcess+0x58>)
 8008b02:	2201      	movs	r2, #1
 8008b04:	701a      	strb	r2, [r3, #0]
  break;
 8008b06:	e000      	b.n	8008b0a <USBH_UserProcess+0x4a>

  default:
  break;
 8008b08:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008b0a:	bf00      	nop
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	200000bc 	.word	0x200000bc

08008b1c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b08a      	sub	sp, #40	; 0x28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b24:	f107 0314 	add.w	r3, r7, #20
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]
 8008b2c:	605a      	str	r2, [r3, #4]
 8008b2e:	609a      	str	r2, [r3, #8]
 8008b30:	60da      	str	r2, [r3, #12]
 8008b32:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b3c:	d147      	bne.n	8008bce <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b3e:	2300      	movs	r3, #0
 8008b40:	613b      	str	r3, [r7, #16]
 8008b42:	4b25      	ldr	r3, [pc, #148]	; (8008bd8 <HAL_HCD_MspInit+0xbc>)
 8008b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b46:	4a24      	ldr	r2, [pc, #144]	; (8008bd8 <HAL_HCD_MspInit+0xbc>)
 8008b48:	f043 0301 	orr.w	r3, r3, #1
 8008b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8008b4e:	4b22      	ldr	r3, [pc, #136]	; (8008bd8 <HAL_HCD_MspInit+0xbc>)
 8008b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	613b      	str	r3, [r7, #16]
 8008b58:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008b5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b60:	2300      	movs	r3, #0
 8008b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b64:	2300      	movs	r3, #0
 8008b66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008b68:	f107 0314 	add.w	r3, r7, #20
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	481b      	ldr	r0, [pc, #108]	; (8008bdc <HAL_HCD_MspInit+0xc0>)
 8008b70:	f7f8 fdc6 	bl	8001700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008b74:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b82:	2300      	movs	r3, #0
 8008b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b86:	230a      	movs	r3, #10
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b8a:	f107 0314 	add.w	r3, r7, #20
 8008b8e:	4619      	mov	r1, r3
 8008b90:	4812      	ldr	r0, [pc, #72]	; (8008bdc <HAL_HCD_MspInit+0xc0>)
 8008b92:	f7f8 fdb5 	bl	8001700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b96:	4b10      	ldr	r3, [pc, #64]	; (8008bd8 <HAL_HCD_MspInit+0xbc>)
 8008b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9a:	4a0f      	ldr	r2, [pc, #60]	; (8008bd8 <HAL_HCD_MspInit+0xbc>)
 8008b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba0:	6353      	str	r3, [r2, #52]	; 0x34
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <HAL_HCD_MspInit+0xbc>)
 8008ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008baa:	4a0b      	ldr	r2, [pc, #44]	; (8008bd8 <HAL_HCD_MspInit+0xbc>)
 8008bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8008bb2:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <HAL_HCD_MspInit+0xbc>)
 8008bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	2043      	movs	r0, #67	; 0x43
 8008bc4:	f7f8 fd43 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008bc8:	2043      	movs	r0, #67	; 0x43
 8008bca:	f7f8 fd5c 	bl	8001686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008bce:	bf00      	nop
 8008bd0:	3728      	adds	r7, #40	; 0x28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	40023800 	.word	0x40023800
 8008bdc:	40020000 	.word	0x40020000

08008be0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff f8d9 	bl	8007da6 <USBH_LL_IncTimer>
}
 8008bf4:	bf00      	nop
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff f911 	bl	8007e32 <USBH_LL_Connect>
}
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7ff f91a 	bl	8007e60 <USBH_LL_Disconnect>
}
 8008c2c:	bf00      	nop
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	70fb      	strb	r3, [r7, #3]
 8008c40:	4613      	mov	r3, r2
 8008c42:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff f8cb 	bl	8007dfa <USBH_LL_PortEnabled>
}
 8008c64:	bf00      	nop
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7ff f8cb 	bl	8007e16 <USBH_LL_PortDisabled>
}
 8008c80:	bf00      	nop
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d12a      	bne.n	8008cf0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008c9a:	4a18      	ldr	r2, [pc, #96]	; (8008cfc <USBH_LL_Init+0x74>)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a15      	ldr	r2, [pc, #84]	; (8008cfc <USBH_LL_Init+0x74>)
 8008ca6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008caa:	4b14      	ldr	r3, [pc, #80]	; (8008cfc <USBH_LL_Init+0x74>)
 8008cac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008cb0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008cb2:	4b12      	ldr	r3, [pc, #72]	; (8008cfc <USBH_LL_Init+0x74>)
 8008cb4:	2208      	movs	r2, #8
 8008cb6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008cb8:	4b10      	ldr	r3, [pc, #64]	; (8008cfc <USBH_LL_Init+0x74>)
 8008cba:	2201      	movs	r2, #1
 8008cbc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008cbe:	4b0f      	ldr	r3, [pc, #60]	; (8008cfc <USBH_LL_Init+0x74>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008cc4:	4b0d      	ldr	r3, [pc, #52]	; (8008cfc <USBH_LL_Init+0x74>)
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008cca:	4b0c      	ldr	r3, [pc, #48]	; (8008cfc <USBH_LL_Init+0x74>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008cd0:	480a      	ldr	r0, [pc, #40]	; (8008cfc <USBH_LL_Init+0x74>)
 8008cd2:	f7f8 fee3 	bl	8001a9c <HAL_HCD_Init>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008cdc:	f7f8 f8ee 	bl	8000ebc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ce0:	4806      	ldr	r0, [pc, #24]	; (8008cfc <USBH_LL_Init+0x74>)
 8008ce2:	f7f9 fae7 	bl	80022b4 <HAL_HCD_GetCurrentFrame>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7ff f84c 	bl	8007d88 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	200006c8 	.word	0x200006c8

08008d00 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7f9 fa54 	bl	80021c4 <HAL_HCD_Start>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 f95c 	bl	8008fe0 <USBH_Get_USB_Status>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b084      	sub	sp, #16
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7f9 fa5c 	bl	800220a <HAL_HCD_Stop>
 8008d52:	4603      	mov	r3, r0
 8008d54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d56:	7bfb      	ldrb	r3, [r7, #15]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 f941 	bl	8008fe0 <USBH_Get_USB_Status>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d62:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008d74:	2301      	movs	r3, #1
 8008d76:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7f9 faa6 	bl	80022d0 <HAL_HCD_GetCurrentSpeed>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d007      	beq.n	8008d9a <USBH_LL_GetSpeed+0x2e>
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d302      	bcc.n	8008d94 <USBH_LL_GetSpeed+0x28>
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d006      	beq.n	8008da0 <USBH_LL_GetSpeed+0x34>
 8008d92:	e008      	b.n	8008da6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73fb      	strb	r3, [r7, #15]
    break;
 8008d98:	e008      	b.n	8008dac <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9e:	e005      	b.n	8008dac <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008da0:	2302      	movs	r3, #2
 8008da2:	73fb      	strb	r3, [r7, #15]
    break;
 8008da4:	e002      	b.n	8008dac <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008da6:	2301      	movs	r3, #1
 8008da8:	73fb      	strb	r3, [r7, #15]
    break;
 8008daa:	bf00      	nop
  }
  return  speed;
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7f9 fa39 	bl	8002244 <HAL_HCD_ResetPort>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 f901 	bl	8008fe0 <USBH_Get_USB_Status>
 8008dde:	4603      	mov	r3, r0
 8008de0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dfe:	78fa      	ldrb	r2, [r7, #3]
 8008e00:	4611      	mov	r1, r2
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7f9 fa41 	bl	800228a <HAL_HCD_HC_GetXferCount>
 8008e08:	4603      	mov	r3, r0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e12:	b590      	push	{r4, r7, lr}
 8008e14:	b089      	sub	sp, #36	; 0x24
 8008e16:	af04      	add	r7, sp, #16
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	4608      	mov	r0, r1
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	461a      	mov	r2, r3
 8008e20:	4603      	mov	r3, r0
 8008e22:	70fb      	strb	r3, [r7, #3]
 8008e24:	460b      	mov	r3, r1
 8008e26:	70bb      	strb	r3, [r7, #2]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008e3a:	787c      	ldrb	r4, [r7, #1]
 8008e3c:	78ba      	ldrb	r2, [r7, #2]
 8008e3e:	78f9      	ldrb	r1, [r7, #3]
 8008e40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e42:	9302      	str	r3, [sp, #8]
 8008e44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	4623      	mov	r3, r4
 8008e52:	f7f8 fe85 	bl	8001b60 <HAL_HCD_HC_Init>
 8008e56:	4603      	mov	r3, r0
 8008e58:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e5a:	7bfb      	ldrb	r3, [r7, #15]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f000 f8bf 	bl	8008fe0 <USBH_Get_USB_Status>
 8008e62:	4603      	mov	r3, r0
 8008e64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e66:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd90      	pop	{r4, r7, pc}

08008e70 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e8a:	78fa      	ldrb	r2, [r7, #3]
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7f8 fefe 	bl	8001c90 <HAL_HCD_HC_Halt>
 8008e94:	4603      	mov	r3, r0
 8008e96:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 f8a0 	bl	8008fe0 <USBH_Get_USB_Status>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008eae:	b590      	push	{r4, r7, lr}
 8008eb0:	b089      	sub	sp, #36	; 0x24
 8008eb2:	af04      	add	r7, sp, #16
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	4608      	mov	r0, r1
 8008eb8:	4611      	mov	r1, r2
 8008eba:	461a      	mov	r2, r3
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	70fb      	strb	r3, [r7, #3]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70bb      	strb	r3, [r7, #2]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008ed6:	787c      	ldrb	r4, [r7, #1]
 8008ed8:	78ba      	ldrb	r2, [r7, #2]
 8008eda:	78f9      	ldrb	r1, [r7, #3]
 8008edc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ee0:	9303      	str	r3, [sp, #12]
 8008ee2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ee4:	9302      	str	r3, [sp, #8]
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	4623      	mov	r3, r4
 8008ef2:	f7f8 fef1 	bl	8001cd8 <HAL_HCD_HC_SubmitRequest>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 f86f 	bl	8008fe0 <USBH_Get_USB_Status>
 8008f02:	4603      	mov	r3, r0
 8008f04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3714      	adds	r7, #20
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd90      	pop	{r4, r7, pc}

08008f10 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	4611      	mov	r1, r2
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7f9 f99a 	bl	8002260 <HAL_HCD_HC_GetURBState>
 8008f2c:	4603      	mov	r3, r0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b082      	sub	sp, #8
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	460b      	mov	r3, r1
 8008f40:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d103      	bne.n	8008f54 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008f4c:	78fb      	ldrb	r3, [r7, #3]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 f872 	bl	8009038 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008f54:	20c8      	movs	r0, #200	; 0xc8
 8008f56:	f7f8 fa7d 	bl	8001454 <HAL_Delay>
  return USBH_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	70fb      	strb	r3, [r7, #3]
 8008f70:	4613      	mov	r3, r2
 8008f72:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f7a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008f7c:	78fa      	ldrb	r2, [r7, #3]
 8008f7e:	68f9      	ldr	r1, [r7, #12]
 8008f80:	4613      	mov	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	4413      	add	r3, r2
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	440b      	add	r3, r1
 8008f8a:	333b      	adds	r3, #59	; 0x3b
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00a      	beq.n	8008fa8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008f92:	78fa      	ldrb	r2, [r7, #3]
 8008f94:	68f9      	ldr	r1, [r7, #12]
 8008f96:	4613      	mov	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	00db      	lsls	r3, r3, #3
 8008f9e:	440b      	add	r3, r1
 8008fa0:	3350      	adds	r3, #80	; 0x50
 8008fa2:	78ba      	ldrb	r2, [r7, #2]
 8008fa4:	701a      	strb	r2, [r3, #0]
 8008fa6:	e009      	b.n	8008fbc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008fa8:	78fa      	ldrb	r2, [r7, #3]
 8008faa:	68f9      	ldr	r1, [r7, #12]
 8008fac:	4613      	mov	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	00db      	lsls	r3, r3, #3
 8008fb4:	440b      	add	r3, r1
 8008fb6:	3351      	adds	r3, #81	; 0x51
 8008fb8:	78ba      	ldrb	r2, [r7, #2]
 8008fba:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b082      	sub	sp, #8
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7f8 fa3e 	bl	8001454 <HAL_Delay>
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fee:	79fb      	ldrb	r3, [r7, #7]
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	d817      	bhi.n	8009024 <USBH_Get_USB_Status+0x44>
 8008ff4:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <USBH_Get_USB_Status+0x1c>)
 8008ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffa:	bf00      	nop
 8008ffc:	0800900d 	.word	0x0800900d
 8009000:	08009013 	.word	0x08009013
 8009004:	08009019 	.word	0x08009019
 8009008:	0800901f 	.word	0x0800901f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	73fb      	strb	r3, [r7, #15]
    break;
 8009010:	e00b      	b.n	800902a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009012:	2302      	movs	r3, #2
 8009014:	73fb      	strb	r3, [r7, #15]
    break;
 8009016:	e008      	b.n	800902a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009018:	2301      	movs	r3, #1
 800901a:	73fb      	strb	r3, [r7, #15]
    break;
 800901c:	e005      	b.n	800902a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800901e:	2302      	movs	r3, #2
 8009020:	73fb      	strb	r3, [r7, #15]
    break;
 8009022:	e002      	b.n	800902a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009024:	2302      	movs	r3, #2
 8009026:	73fb      	strb	r3, [r7, #15]
    break;
 8009028:	bf00      	nop
  }
  return usb_status;
 800902a:	7bfb      	ldrb	r3, [r7, #15]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	4603      	mov	r3, r0
 8009040:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009046:	79fb      	ldrb	r3, [r7, #7]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d102      	bne.n	8009052 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800904c:	2301      	movs	r3, #1
 800904e:	73fb      	strb	r3, [r7, #15]
 8009050:	e001      	b.n	8009056 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009052:	2300      	movs	r3, #0
 8009054:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	461a      	mov	r2, r3
 800905a:	2101      	movs	r1, #1
 800905c:	4803      	ldr	r0, [pc, #12]	; (800906c <MX_DriverVbusFS+0x34>)
 800905e:	f7f8 fce9 	bl	8001a34 <HAL_GPIO_WritePin>
}
 8009062:	bf00      	nop
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	40020800 	.word	0x40020800

08009070 <__errno>:
 8009070:	4b01      	ldr	r3, [pc, #4]	; (8009078 <__errno+0x8>)
 8009072:	6818      	ldr	r0, [r3, #0]
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	2000002c 	.word	0x2000002c

0800907c <__libc_init_array>:
 800907c:	b570      	push	{r4, r5, r6, lr}
 800907e:	4e0d      	ldr	r6, [pc, #52]	; (80090b4 <__libc_init_array+0x38>)
 8009080:	4c0d      	ldr	r4, [pc, #52]	; (80090b8 <__libc_init_array+0x3c>)
 8009082:	1ba4      	subs	r4, r4, r6
 8009084:	10a4      	asrs	r4, r4, #2
 8009086:	2500      	movs	r5, #0
 8009088:	42a5      	cmp	r5, r4
 800908a:	d109      	bne.n	80090a0 <__libc_init_array+0x24>
 800908c:	4e0b      	ldr	r6, [pc, #44]	; (80090bc <__libc_init_array+0x40>)
 800908e:	4c0c      	ldr	r4, [pc, #48]	; (80090c0 <__libc_init_array+0x44>)
 8009090:	f000 fc38 	bl	8009904 <_init>
 8009094:	1ba4      	subs	r4, r4, r6
 8009096:	10a4      	asrs	r4, r4, #2
 8009098:	2500      	movs	r5, #0
 800909a:	42a5      	cmp	r5, r4
 800909c:	d105      	bne.n	80090aa <__libc_init_array+0x2e>
 800909e:	bd70      	pop	{r4, r5, r6, pc}
 80090a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090a4:	4798      	blx	r3
 80090a6:	3501      	adds	r5, #1
 80090a8:	e7ee      	b.n	8009088 <__libc_init_array+0xc>
 80090aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090ae:	4798      	blx	r3
 80090b0:	3501      	adds	r5, #1
 80090b2:	e7f2      	b.n	800909a <__libc_init_array+0x1e>
 80090b4:	08009adc 	.word	0x08009adc
 80090b8:	08009adc 	.word	0x08009adc
 80090bc:	08009adc 	.word	0x08009adc
 80090c0:	08009ae0 	.word	0x08009ae0

080090c4 <malloc>:
 80090c4:	4b02      	ldr	r3, [pc, #8]	; (80090d0 <malloc+0xc>)
 80090c6:	4601      	mov	r1, r0
 80090c8:	6818      	ldr	r0, [r3, #0]
 80090ca:	f000 b86d 	b.w	80091a8 <_malloc_r>
 80090ce:	bf00      	nop
 80090d0:	2000002c 	.word	0x2000002c

080090d4 <free>:
 80090d4:	4b02      	ldr	r3, [pc, #8]	; (80090e0 <free+0xc>)
 80090d6:	4601      	mov	r1, r0
 80090d8:	6818      	ldr	r0, [r3, #0]
 80090da:	f000 b817 	b.w	800910c <_free_r>
 80090de:	bf00      	nop
 80090e0:	2000002c 	.word	0x2000002c

080090e4 <memcpy>:
 80090e4:	b510      	push	{r4, lr}
 80090e6:	1e43      	subs	r3, r0, #1
 80090e8:	440a      	add	r2, r1
 80090ea:	4291      	cmp	r1, r2
 80090ec:	d100      	bne.n	80090f0 <memcpy+0xc>
 80090ee:	bd10      	pop	{r4, pc}
 80090f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090f8:	e7f7      	b.n	80090ea <memcpy+0x6>

080090fa <memset>:
 80090fa:	4402      	add	r2, r0
 80090fc:	4603      	mov	r3, r0
 80090fe:	4293      	cmp	r3, r2
 8009100:	d100      	bne.n	8009104 <memset+0xa>
 8009102:	4770      	bx	lr
 8009104:	f803 1b01 	strb.w	r1, [r3], #1
 8009108:	e7f9      	b.n	80090fe <memset+0x4>
	...

0800910c <_free_r>:
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	4605      	mov	r5, r0
 8009110:	2900      	cmp	r1, #0
 8009112:	d045      	beq.n	80091a0 <_free_r+0x94>
 8009114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009118:	1f0c      	subs	r4, r1, #4
 800911a:	2b00      	cmp	r3, #0
 800911c:	bfb8      	it	lt
 800911e:	18e4      	addlt	r4, r4, r3
 8009120:	f000 f8cc 	bl	80092bc <__malloc_lock>
 8009124:	4a1f      	ldr	r2, [pc, #124]	; (80091a4 <_free_r+0x98>)
 8009126:	6813      	ldr	r3, [r2, #0]
 8009128:	4610      	mov	r0, r2
 800912a:	b933      	cbnz	r3, 800913a <_free_r+0x2e>
 800912c:	6063      	str	r3, [r4, #4]
 800912e:	6014      	str	r4, [r2, #0]
 8009130:	4628      	mov	r0, r5
 8009132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009136:	f000 b8c2 	b.w	80092be <__malloc_unlock>
 800913a:	42a3      	cmp	r3, r4
 800913c:	d90c      	bls.n	8009158 <_free_r+0x4c>
 800913e:	6821      	ldr	r1, [r4, #0]
 8009140:	1862      	adds	r2, r4, r1
 8009142:	4293      	cmp	r3, r2
 8009144:	bf04      	itt	eq
 8009146:	681a      	ldreq	r2, [r3, #0]
 8009148:	685b      	ldreq	r3, [r3, #4]
 800914a:	6063      	str	r3, [r4, #4]
 800914c:	bf04      	itt	eq
 800914e:	1852      	addeq	r2, r2, r1
 8009150:	6022      	streq	r2, [r4, #0]
 8009152:	6004      	str	r4, [r0, #0]
 8009154:	e7ec      	b.n	8009130 <_free_r+0x24>
 8009156:	4613      	mov	r3, r2
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	b10a      	cbz	r2, 8009160 <_free_r+0x54>
 800915c:	42a2      	cmp	r2, r4
 800915e:	d9fa      	bls.n	8009156 <_free_r+0x4a>
 8009160:	6819      	ldr	r1, [r3, #0]
 8009162:	1858      	adds	r0, r3, r1
 8009164:	42a0      	cmp	r0, r4
 8009166:	d10b      	bne.n	8009180 <_free_r+0x74>
 8009168:	6820      	ldr	r0, [r4, #0]
 800916a:	4401      	add	r1, r0
 800916c:	1858      	adds	r0, r3, r1
 800916e:	4282      	cmp	r2, r0
 8009170:	6019      	str	r1, [r3, #0]
 8009172:	d1dd      	bne.n	8009130 <_free_r+0x24>
 8009174:	6810      	ldr	r0, [r2, #0]
 8009176:	6852      	ldr	r2, [r2, #4]
 8009178:	605a      	str	r2, [r3, #4]
 800917a:	4401      	add	r1, r0
 800917c:	6019      	str	r1, [r3, #0]
 800917e:	e7d7      	b.n	8009130 <_free_r+0x24>
 8009180:	d902      	bls.n	8009188 <_free_r+0x7c>
 8009182:	230c      	movs	r3, #12
 8009184:	602b      	str	r3, [r5, #0]
 8009186:	e7d3      	b.n	8009130 <_free_r+0x24>
 8009188:	6820      	ldr	r0, [r4, #0]
 800918a:	1821      	adds	r1, r4, r0
 800918c:	428a      	cmp	r2, r1
 800918e:	bf04      	itt	eq
 8009190:	6811      	ldreq	r1, [r2, #0]
 8009192:	6852      	ldreq	r2, [r2, #4]
 8009194:	6062      	str	r2, [r4, #4]
 8009196:	bf04      	itt	eq
 8009198:	1809      	addeq	r1, r1, r0
 800919a:	6021      	streq	r1, [r4, #0]
 800919c:	605c      	str	r4, [r3, #4]
 800919e:	e7c7      	b.n	8009130 <_free_r+0x24>
 80091a0:	bd38      	pop	{r3, r4, r5, pc}
 80091a2:	bf00      	nop
 80091a4:	200000c0 	.word	0x200000c0

080091a8 <_malloc_r>:
 80091a8:	b570      	push	{r4, r5, r6, lr}
 80091aa:	1ccd      	adds	r5, r1, #3
 80091ac:	f025 0503 	bic.w	r5, r5, #3
 80091b0:	3508      	adds	r5, #8
 80091b2:	2d0c      	cmp	r5, #12
 80091b4:	bf38      	it	cc
 80091b6:	250c      	movcc	r5, #12
 80091b8:	2d00      	cmp	r5, #0
 80091ba:	4606      	mov	r6, r0
 80091bc:	db01      	blt.n	80091c2 <_malloc_r+0x1a>
 80091be:	42a9      	cmp	r1, r5
 80091c0:	d903      	bls.n	80091ca <_malloc_r+0x22>
 80091c2:	230c      	movs	r3, #12
 80091c4:	6033      	str	r3, [r6, #0]
 80091c6:	2000      	movs	r0, #0
 80091c8:	bd70      	pop	{r4, r5, r6, pc}
 80091ca:	f000 f877 	bl	80092bc <__malloc_lock>
 80091ce:	4a21      	ldr	r2, [pc, #132]	; (8009254 <_malloc_r+0xac>)
 80091d0:	6814      	ldr	r4, [r2, #0]
 80091d2:	4621      	mov	r1, r4
 80091d4:	b991      	cbnz	r1, 80091fc <_malloc_r+0x54>
 80091d6:	4c20      	ldr	r4, [pc, #128]	; (8009258 <_malloc_r+0xb0>)
 80091d8:	6823      	ldr	r3, [r4, #0]
 80091da:	b91b      	cbnz	r3, 80091e4 <_malloc_r+0x3c>
 80091dc:	4630      	mov	r0, r6
 80091de:	f000 f83d 	bl	800925c <_sbrk_r>
 80091e2:	6020      	str	r0, [r4, #0]
 80091e4:	4629      	mov	r1, r5
 80091e6:	4630      	mov	r0, r6
 80091e8:	f000 f838 	bl	800925c <_sbrk_r>
 80091ec:	1c43      	adds	r3, r0, #1
 80091ee:	d124      	bne.n	800923a <_malloc_r+0x92>
 80091f0:	230c      	movs	r3, #12
 80091f2:	6033      	str	r3, [r6, #0]
 80091f4:	4630      	mov	r0, r6
 80091f6:	f000 f862 	bl	80092be <__malloc_unlock>
 80091fa:	e7e4      	b.n	80091c6 <_malloc_r+0x1e>
 80091fc:	680b      	ldr	r3, [r1, #0]
 80091fe:	1b5b      	subs	r3, r3, r5
 8009200:	d418      	bmi.n	8009234 <_malloc_r+0x8c>
 8009202:	2b0b      	cmp	r3, #11
 8009204:	d90f      	bls.n	8009226 <_malloc_r+0x7e>
 8009206:	600b      	str	r3, [r1, #0]
 8009208:	50cd      	str	r5, [r1, r3]
 800920a:	18cc      	adds	r4, r1, r3
 800920c:	4630      	mov	r0, r6
 800920e:	f000 f856 	bl	80092be <__malloc_unlock>
 8009212:	f104 000b 	add.w	r0, r4, #11
 8009216:	1d23      	adds	r3, r4, #4
 8009218:	f020 0007 	bic.w	r0, r0, #7
 800921c:	1ac3      	subs	r3, r0, r3
 800921e:	d0d3      	beq.n	80091c8 <_malloc_r+0x20>
 8009220:	425a      	negs	r2, r3
 8009222:	50e2      	str	r2, [r4, r3]
 8009224:	e7d0      	b.n	80091c8 <_malloc_r+0x20>
 8009226:	428c      	cmp	r4, r1
 8009228:	684b      	ldr	r3, [r1, #4]
 800922a:	bf16      	itet	ne
 800922c:	6063      	strne	r3, [r4, #4]
 800922e:	6013      	streq	r3, [r2, #0]
 8009230:	460c      	movne	r4, r1
 8009232:	e7eb      	b.n	800920c <_malloc_r+0x64>
 8009234:	460c      	mov	r4, r1
 8009236:	6849      	ldr	r1, [r1, #4]
 8009238:	e7cc      	b.n	80091d4 <_malloc_r+0x2c>
 800923a:	1cc4      	adds	r4, r0, #3
 800923c:	f024 0403 	bic.w	r4, r4, #3
 8009240:	42a0      	cmp	r0, r4
 8009242:	d005      	beq.n	8009250 <_malloc_r+0xa8>
 8009244:	1a21      	subs	r1, r4, r0
 8009246:	4630      	mov	r0, r6
 8009248:	f000 f808 	bl	800925c <_sbrk_r>
 800924c:	3001      	adds	r0, #1
 800924e:	d0cf      	beq.n	80091f0 <_malloc_r+0x48>
 8009250:	6025      	str	r5, [r4, #0]
 8009252:	e7db      	b.n	800920c <_malloc_r+0x64>
 8009254:	200000c0 	.word	0x200000c0
 8009258:	200000c4 	.word	0x200000c4

0800925c <_sbrk_r>:
 800925c:	b538      	push	{r3, r4, r5, lr}
 800925e:	4c06      	ldr	r4, [pc, #24]	; (8009278 <_sbrk_r+0x1c>)
 8009260:	2300      	movs	r3, #0
 8009262:	4605      	mov	r5, r0
 8009264:	4608      	mov	r0, r1
 8009266:	6023      	str	r3, [r4, #0]
 8009268:	f7f8 f80c 	bl	8001284 <_sbrk>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	d102      	bne.n	8009276 <_sbrk_r+0x1a>
 8009270:	6823      	ldr	r3, [r4, #0]
 8009272:	b103      	cbz	r3, 8009276 <_sbrk_r+0x1a>
 8009274:	602b      	str	r3, [r5, #0]
 8009276:	bd38      	pop	{r3, r4, r5, pc}
 8009278:	2000098c 	.word	0x2000098c

0800927c <siprintf>:
 800927c:	b40e      	push	{r1, r2, r3}
 800927e:	b500      	push	{lr}
 8009280:	b09c      	sub	sp, #112	; 0x70
 8009282:	ab1d      	add	r3, sp, #116	; 0x74
 8009284:	9002      	str	r0, [sp, #8]
 8009286:	9006      	str	r0, [sp, #24]
 8009288:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800928c:	4809      	ldr	r0, [pc, #36]	; (80092b4 <siprintf+0x38>)
 800928e:	9107      	str	r1, [sp, #28]
 8009290:	9104      	str	r1, [sp, #16]
 8009292:	4909      	ldr	r1, [pc, #36]	; (80092b8 <siprintf+0x3c>)
 8009294:	f853 2b04 	ldr.w	r2, [r3], #4
 8009298:	9105      	str	r1, [sp, #20]
 800929a:	6800      	ldr	r0, [r0, #0]
 800929c:	9301      	str	r3, [sp, #4]
 800929e:	a902      	add	r1, sp, #8
 80092a0:	f000 f868 	bl	8009374 <_svfiprintf_r>
 80092a4:	9b02      	ldr	r3, [sp, #8]
 80092a6:	2200      	movs	r2, #0
 80092a8:	701a      	strb	r2, [r3, #0]
 80092aa:	b01c      	add	sp, #112	; 0x70
 80092ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80092b0:	b003      	add	sp, #12
 80092b2:	4770      	bx	lr
 80092b4:	2000002c 	.word	0x2000002c
 80092b8:	ffff0208 	.word	0xffff0208

080092bc <__malloc_lock>:
 80092bc:	4770      	bx	lr

080092be <__malloc_unlock>:
 80092be:	4770      	bx	lr

080092c0 <__ssputs_r>:
 80092c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092c4:	688e      	ldr	r6, [r1, #8]
 80092c6:	429e      	cmp	r6, r3
 80092c8:	4682      	mov	sl, r0
 80092ca:	460c      	mov	r4, r1
 80092cc:	4690      	mov	r8, r2
 80092ce:	4699      	mov	r9, r3
 80092d0:	d837      	bhi.n	8009342 <__ssputs_r+0x82>
 80092d2:	898a      	ldrh	r2, [r1, #12]
 80092d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092d8:	d031      	beq.n	800933e <__ssputs_r+0x7e>
 80092da:	6825      	ldr	r5, [r4, #0]
 80092dc:	6909      	ldr	r1, [r1, #16]
 80092de:	1a6f      	subs	r7, r5, r1
 80092e0:	6965      	ldr	r5, [r4, #20]
 80092e2:	2302      	movs	r3, #2
 80092e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80092ec:	f109 0301 	add.w	r3, r9, #1
 80092f0:	443b      	add	r3, r7
 80092f2:	429d      	cmp	r5, r3
 80092f4:	bf38      	it	cc
 80092f6:	461d      	movcc	r5, r3
 80092f8:	0553      	lsls	r3, r2, #21
 80092fa:	d530      	bpl.n	800935e <__ssputs_r+0x9e>
 80092fc:	4629      	mov	r1, r5
 80092fe:	f7ff ff53 	bl	80091a8 <_malloc_r>
 8009302:	4606      	mov	r6, r0
 8009304:	b950      	cbnz	r0, 800931c <__ssputs_r+0x5c>
 8009306:	230c      	movs	r3, #12
 8009308:	f8ca 3000 	str.w	r3, [sl]
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009312:	81a3      	strh	r3, [r4, #12]
 8009314:	f04f 30ff 	mov.w	r0, #4294967295
 8009318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800931c:	463a      	mov	r2, r7
 800931e:	6921      	ldr	r1, [r4, #16]
 8009320:	f7ff fee0 	bl	80090e4 <memcpy>
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800932a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800932e:	81a3      	strh	r3, [r4, #12]
 8009330:	6126      	str	r6, [r4, #16]
 8009332:	6165      	str	r5, [r4, #20]
 8009334:	443e      	add	r6, r7
 8009336:	1bed      	subs	r5, r5, r7
 8009338:	6026      	str	r6, [r4, #0]
 800933a:	60a5      	str	r5, [r4, #8]
 800933c:	464e      	mov	r6, r9
 800933e:	454e      	cmp	r6, r9
 8009340:	d900      	bls.n	8009344 <__ssputs_r+0x84>
 8009342:	464e      	mov	r6, r9
 8009344:	4632      	mov	r2, r6
 8009346:	4641      	mov	r1, r8
 8009348:	6820      	ldr	r0, [r4, #0]
 800934a:	f000 fa93 	bl	8009874 <memmove>
 800934e:	68a3      	ldr	r3, [r4, #8]
 8009350:	1b9b      	subs	r3, r3, r6
 8009352:	60a3      	str	r3, [r4, #8]
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	441e      	add	r6, r3
 8009358:	6026      	str	r6, [r4, #0]
 800935a:	2000      	movs	r0, #0
 800935c:	e7dc      	b.n	8009318 <__ssputs_r+0x58>
 800935e:	462a      	mov	r2, r5
 8009360:	f000 faa1 	bl	80098a6 <_realloc_r>
 8009364:	4606      	mov	r6, r0
 8009366:	2800      	cmp	r0, #0
 8009368:	d1e2      	bne.n	8009330 <__ssputs_r+0x70>
 800936a:	6921      	ldr	r1, [r4, #16]
 800936c:	4650      	mov	r0, sl
 800936e:	f7ff fecd 	bl	800910c <_free_r>
 8009372:	e7c8      	b.n	8009306 <__ssputs_r+0x46>

08009374 <_svfiprintf_r>:
 8009374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009378:	461d      	mov	r5, r3
 800937a:	898b      	ldrh	r3, [r1, #12]
 800937c:	061f      	lsls	r7, r3, #24
 800937e:	b09d      	sub	sp, #116	; 0x74
 8009380:	4680      	mov	r8, r0
 8009382:	460c      	mov	r4, r1
 8009384:	4616      	mov	r6, r2
 8009386:	d50f      	bpl.n	80093a8 <_svfiprintf_r+0x34>
 8009388:	690b      	ldr	r3, [r1, #16]
 800938a:	b96b      	cbnz	r3, 80093a8 <_svfiprintf_r+0x34>
 800938c:	2140      	movs	r1, #64	; 0x40
 800938e:	f7ff ff0b 	bl	80091a8 <_malloc_r>
 8009392:	6020      	str	r0, [r4, #0]
 8009394:	6120      	str	r0, [r4, #16]
 8009396:	b928      	cbnz	r0, 80093a4 <_svfiprintf_r+0x30>
 8009398:	230c      	movs	r3, #12
 800939a:	f8c8 3000 	str.w	r3, [r8]
 800939e:	f04f 30ff 	mov.w	r0, #4294967295
 80093a2:	e0c8      	b.n	8009536 <_svfiprintf_r+0x1c2>
 80093a4:	2340      	movs	r3, #64	; 0x40
 80093a6:	6163      	str	r3, [r4, #20]
 80093a8:	2300      	movs	r3, #0
 80093aa:	9309      	str	r3, [sp, #36]	; 0x24
 80093ac:	2320      	movs	r3, #32
 80093ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093b2:	2330      	movs	r3, #48	; 0x30
 80093b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093b8:	9503      	str	r5, [sp, #12]
 80093ba:	f04f 0b01 	mov.w	fp, #1
 80093be:	4637      	mov	r7, r6
 80093c0:	463d      	mov	r5, r7
 80093c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80093c6:	b10b      	cbz	r3, 80093cc <_svfiprintf_r+0x58>
 80093c8:	2b25      	cmp	r3, #37	; 0x25
 80093ca:	d13e      	bne.n	800944a <_svfiprintf_r+0xd6>
 80093cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80093d0:	d00b      	beq.n	80093ea <_svfiprintf_r+0x76>
 80093d2:	4653      	mov	r3, sl
 80093d4:	4632      	mov	r2, r6
 80093d6:	4621      	mov	r1, r4
 80093d8:	4640      	mov	r0, r8
 80093da:	f7ff ff71 	bl	80092c0 <__ssputs_r>
 80093de:	3001      	adds	r0, #1
 80093e0:	f000 80a4 	beq.w	800952c <_svfiprintf_r+0x1b8>
 80093e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e6:	4453      	add	r3, sl
 80093e8:	9309      	str	r3, [sp, #36]	; 0x24
 80093ea:	783b      	ldrb	r3, [r7, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 809d 	beq.w	800952c <_svfiprintf_r+0x1b8>
 80093f2:	2300      	movs	r3, #0
 80093f4:	f04f 32ff 	mov.w	r2, #4294967295
 80093f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093fc:	9304      	str	r3, [sp, #16]
 80093fe:	9307      	str	r3, [sp, #28]
 8009400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009404:	931a      	str	r3, [sp, #104]	; 0x68
 8009406:	462f      	mov	r7, r5
 8009408:	2205      	movs	r2, #5
 800940a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800940e:	4850      	ldr	r0, [pc, #320]	; (8009550 <_svfiprintf_r+0x1dc>)
 8009410:	f7f6 fede 	bl	80001d0 <memchr>
 8009414:	9b04      	ldr	r3, [sp, #16]
 8009416:	b9d0      	cbnz	r0, 800944e <_svfiprintf_r+0xda>
 8009418:	06d9      	lsls	r1, r3, #27
 800941a:	bf44      	itt	mi
 800941c:	2220      	movmi	r2, #32
 800941e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009422:	071a      	lsls	r2, r3, #28
 8009424:	bf44      	itt	mi
 8009426:	222b      	movmi	r2, #43	; 0x2b
 8009428:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800942c:	782a      	ldrb	r2, [r5, #0]
 800942e:	2a2a      	cmp	r2, #42	; 0x2a
 8009430:	d015      	beq.n	800945e <_svfiprintf_r+0xea>
 8009432:	9a07      	ldr	r2, [sp, #28]
 8009434:	462f      	mov	r7, r5
 8009436:	2000      	movs	r0, #0
 8009438:	250a      	movs	r5, #10
 800943a:	4639      	mov	r1, r7
 800943c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009440:	3b30      	subs	r3, #48	; 0x30
 8009442:	2b09      	cmp	r3, #9
 8009444:	d94d      	bls.n	80094e2 <_svfiprintf_r+0x16e>
 8009446:	b1b8      	cbz	r0, 8009478 <_svfiprintf_r+0x104>
 8009448:	e00f      	b.n	800946a <_svfiprintf_r+0xf6>
 800944a:	462f      	mov	r7, r5
 800944c:	e7b8      	b.n	80093c0 <_svfiprintf_r+0x4c>
 800944e:	4a40      	ldr	r2, [pc, #256]	; (8009550 <_svfiprintf_r+0x1dc>)
 8009450:	1a80      	subs	r0, r0, r2
 8009452:	fa0b f000 	lsl.w	r0, fp, r0
 8009456:	4318      	orrs	r0, r3
 8009458:	9004      	str	r0, [sp, #16]
 800945a:	463d      	mov	r5, r7
 800945c:	e7d3      	b.n	8009406 <_svfiprintf_r+0x92>
 800945e:	9a03      	ldr	r2, [sp, #12]
 8009460:	1d11      	adds	r1, r2, #4
 8009462:	6812      	ldr	r2, [r2, #0]
 8009464:	9103      	str	r1, [sp, #12]
 8009466:	2a00      	cmp	r2, #0
 8009468:	db01      	blt.n	800946e <_svfiprintf_r+0xfa>
 800946a:	9207      	str	r2, [sp, #28]
 800946c:	e004      	b.n	8009478 <_svfiprintf_r+0x104>
 800946e:	4252      	negs	r2, r2
 8009470:	f043 0302 	orr.w	r3, r3, #2
 8009474:	9207      	str	r2, [sp, #28]
 8009476:	9304      	str	r3, [sp, #16]
 8009478:	783b      	ldrb	r3, [r7, #0]
 800947a:	2b2e      	cmp	r3, #46	; 0x2e
 800947c:	d10c      	bne.n	8009498 <_svfiprintf_r+0x124>
 800947e:	787b      	ldrb	r3, [r7, #1]
 8009480:	2b2a      	cmp	r3, #42	; 0x2a
 8009482:	d133      	bne.n	80094ec <_svfiprintf_r+0x178>
 8009484:	9b03      	ldr	r3, [sp, #12]
 8009486:	1d1a      	adds	r2, r3, #4
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	9203      	str	r2, [sp, #12]
 800948c:	2b00      	cmp	r3, #0
 800948e:	bfb8      	it	lt
 8009490:	f04f 33ff 	movlt.w	r3, #4294967295
 8009494:	3702      	adds	r7, #2
 8009496:	9305      	str	r3, [sp, #20]
 8009498:	4d2e      	ldr	r5, [pc, #184]	; (8009554 <_svfiprintf_r+0x1e0>)
 800949a:	7839      	ldrb	r1, [r7, #0]
 800949c:	2203      	movs	r2, #3
 800949e:	4628      	mov	r0, r5
 80094a0:	f7f6 fe96 	bl	80001d0 <memchr>
 80094a4:	b138      	cbz	r0, 80094b6 <_svfiprintf_r+0x142>
 80094a6:	2340      	movs	r3, #64	; 0x40
 80094a8:	1b40      	subs	r0, r0, r5
 80094aa:	fa03 f000 	lsl.w	r0, r3, r0
 80094ae:	9b04      	ldr	r3, [sp, #16]
 80094b0:	4303      	orrs	r3, r0
 80094b2:	3701      	adds	r7, #1
 80094b4:	9304      	str	r3, [sp, #16]
 80094b6:	7839      	ldrb	r1, [r7, #0]
 80094b8:	4827      	ldr	r0, [pc, #156]	; (8009558 <_svfiprintf_r+0x1e4>)
 80094ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094be:	2206      	movs	r2, #6
 80094c0:	1c7e      	adds	r6, r7, #1
 80094c2:	f7f6 fe85 	bl	80001d0 <memchr>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d038      	beq.n	800953c <_svfiprintf_r+0x1c8>
 80094ca:	4b24      	ldr	r3, [pc, #144]	; (800955c <_svfiprintf_r+0x1e8>)
 80094cc:	bb13      	cbnz	r3, 8009514 <_svfiprintf_r+0x1a0>
 80094ce:	9b03      	ldr	r3, [sp, #12]
 80094d0:	3307      	adds	r3, #7
 80094d2:	f023 0307 	bic.w	r3, r3, #7
 80094d6:	3308      	adds	r3, #8
 80094d8:	9303      	str	r3, [sp, #12]
 80094da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094dc:	444b      	add	r3, r9
 80094de:	9309      	str	r3, [sp, #36]	; 0x24
 80094e0:	e76d      	b.n	80093be <_svfiprintf_r+0x4a>
 80094e2:	fb05 3202 	mla	r2, r5, r2, r3
 80094e6:	2001      	movs	r0, #1
 80094e8:	460f      	mov	r7, r1
 80094ea:	e7a6      	b.n	800943a <_svfiprintf_r+0xc6>
 80094ec:	2300      	movs	r3, #0
 80094ee:	3701      	adds	r7, #1
 80094f0:	9305      	str	r3, [sp, #20]
 80094f2:	4619      	mov	r1, r3
 80094f4:	250a      	movs	r5, #10
 80094f6:	4638      	mov	r0, r7
 80094f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094fc:	3a30      	subs	r2, #48	; 0x30
 80094fe:	2a09      	cmp	r2, #9
 8009500:	d903      	bls.n	800950a <_svfiprintf_r+0x196>
 8009502:	2b00      	cmp	r3, #0
 8009504:	d0c8      	beq.n	8009498 <_svfiprintf_r+0x124>
 8009506:	9105      	str	r1, [sp, #20]
 8009508:	e7c6      	b.n	8009498 <_svfiprintf_r+0x124>
 800950a:	fb05 2101 	mla	r1, r5, r1, r2
 800950e:	2301      	movs	r3, #1
 8009510:	4607      	mov	r7, r0
 8009512:	e7f0      	b.n	80094f6 <_svfiprintf_r+0x182>
 8009514:	ab03      	add	r3, sp, #12
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	4622      	mov	r2, r4
 800951a:	4b11      	ldr	r3, [pc, #68]	; (8009560 <_svfiprintf_r+0x1ec>)
 800951c:	a904      	add	r1, sp, #16
 800951e:	4640      	mov	r0, r8
 8009520:	f3af 8000 	nop.w
 8009524:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009528:	4681      	mov	r9, r0
 800952a:	d1d6      	bne.n	80094da <_svfiprintf_r+0x166>
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	065b      	lsls	r3, r3, #25
 8009530:	f53f af35 	bmi.w	800939e <_svfiprintf_r+0x2a>
 8009534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009536:	b01d      	add	sp, #116	; 0x74
 8009538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953c:	ab03      	add	r3, sp, #12
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	4622      	mov	r2, r4
 8009542:	4b07      	ldr	r3, [pc, #28]	; (8009560 <_svfiprintf_r+0x1ec>)
 8009544:	a904      	add	r1, sp, #16
 8009546:	4640      	mov	r0, r8
 8009548:	f000 f882 	bl	8009650 <_printf_i>
 800954c:	e7ea      	b.n	8009524 <_svfiprintf_r+0x1b0>
 800954e:	bf00      	nop
 8009550:	08009aa0 	.word	0x08009aa0
 8009554:	08009aa6 	.word	0x08009aa6
 8009558:	08009aaa 	.word	0x08009aaa
 800955c:	00000000 	.word	0x00000000
 8009560:	080092c1 	.word	0x080092c1

08009564 <_printf_common>:
 8009564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009568:	4691      	mov	r9, r2
 800956a:	461f      	mov	r7, r3
 800956c:	688a      	ldr	r2, [r1, #8]
 800956e:	690b      	ldr	r3, [r1, #16]
 8009570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009574:	4293      	cmp	r3, r2
 8009576:	bfb8      	it	lt
 8009578:	4613      	movlt	r3, r2
 800957a:	f8c9 3000 	str.w	r3, [r9]
 800957e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009582:	4606      	mov	r6, r0
 8009584:	460c      	mov	r4, r1
 8009586:	b112      	cbz	r2, 800958e <_printf_common+0x2a>
 8009588:	3301      	adds	r3, #1
 800958a:	f8c9 3000 	str.w	r3, [r9]
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	0699      	lsls	r1, r3, #26
 8009592:	bf42      	ittt	mi
 8009594:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009598:	3302      	addmi	r3, #2
 800959a:	f8c9 3000 	strmi.w	r3, [r9]
 800959e:	6825      	ldr	r5, [r4, #0]
 80095a0:	f015 0506 	ands.w	r5, r5, #6
 80095a4:	d107      	bne.n	80095b6 <_printf_common+0x52>
 80095a6:	f104 0a19 	add.w	sl, r4, #25
 80095aa:	68e3      	ldr	r3, [r4, #12]
 80095ac:	f8d9 2000 	ldr.w	r2, [r9]
 80095b0:	1a9b      	subs	r3, r3, r2
 80095b2:	42ab      	cmp	r3, r5
 80095b4:	dc28      	bgt.n	8009608 <_printf_common+0xa4>
 80095b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80095ba:	6822      	ldr	r2, [r4, #0]
 80095bc:	3300      	adds	r3, #0
 80095be:	bf18      	it	ne
 80095c0:	2301      	movne	r3, #1
 80095c2:	0692      	lsls	r2, r2, #26
 80095c4:	d42d      	bmi.n	8009622 <_printf_common+0xbe>
 80095c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095ca:	4639      	mov	r1, r7
 80095cc:	4630      	mov	r0, r6
 80095ce:	47c0      	blx	r8
 80095d0:	3001      	adds	r0, #1
 80095d2:	d020      	beq.n	8009616 <_printf_common+0xb2>
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	68e5      	ldr	r5, [r4, #12]
 80095d8:	f8d9 2000 	ldr.w	r2, [r9]
 80095dc:	f003 0306 	and.w	r3, r3, #6
 80095e0:	2b04      	cmp	r3, #4
 80095e2:	bf08      	it	eq
 80095e4:	1aad      	subeq	r5, r5, r2
 80095e6:	68a3      	ldr	r3, [r4, #8]
 80095e8:	6922      	ldr	r2, [r4, #16]
 80095ea:	bf0c      	ite	eq
 80095ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095f0:	2500      	movne	r5, #0
 80095f2:	4293      	cmp	r3, r2
 80095f4:	bfc4      	itt	gt
 80095f6:	1a9b      	subgt	r3, r3, r2
 80095f8:	18ed      	addgt	r5, r5, r3
 80095fa:	f04f 0900 	mov.w	r9, #0
 80095fe:	341a      	adds	r4, #26
 8009600:	454d      	cmp	r5, r9
 8009602:	d11a      	bne.n	800963a <_printf_common+0xd6>
 8009604:	2000      	movs	r0, #0
 8009606:	e008      	b.n	800961a <_printf_common+0xb6>
 8009608:	2301      	movs	r3, #1
 800960a:	4652      	mov	r2, sl
 800960c:	4639      	mov	r1, r7
 800960e:	4630      	mov	r0, r6
 8009610:	47c0      	blx	r8
 8009612:	3001      	adds	r0, #1
 8009614:	d103      	bne.n	800961e <_printf_common+0xba>
 8009616:	f04f 30ff 	mov.w	r0, #4294967295
 800961a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800961e:	3501      	adds	r5, #1
 8009620:	e7c3      	b.n	80095aa <_printf_common+0x46>
 8009622:	18e1      	adds	r1, r4, r3
 8009624:	1c5a      	adds	r2, r3, #1
 8009626:	2030      	movs	r0, #48	; 0x30
 8009628:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800962c:	4422      	add	r2, r4
 800962e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009632:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009636:	3302      	adds	r3, #2
 8009638:	e7c5      	b.n	80095c6 <_printf_common+0x62>
 800963a:	2301      	movs	r3, #1
 800963c:	4622      	mov	r2, r4
 800963e:	4639      	mov	r1, r7
 8009640:	4630      	mov	r0, r6
 8009642:	47c0      	blx	r8
 8009644:	3001      	adds	r0, #1
 8009646:	d0e6      	beq.n	8009616 <_printf_common+0xb2>
 8009648:	f109 0901 	add.w	r9, r9, #1
 800964c:	e7d8      	b.n	8009600 <_printf_common+0x9c>
	...

08009650 <_printf_i>:
 8009650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009654:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009658:	460c      	mov	r4, r1
 800965a:	7e09      	ldrb	r1, [r1, #24]
 800965c:	b085      	sub	sp, #20
 800965e:	296e      	cmp	r1, #110	; 0x6e
 8009660:	4617      	mov	r7, r2
 8009662:	4606      	mov	r6, r0
 8009664:	4698      	mov	r8, r3
 8009666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009668:	f000 80b3 	beq.w	80097d2 <_printf_i+0x182>
 800966c:	d822      	bhi.n	80096b4 <_printf_i+0x64>
 800966e:	2963      	cmp	r1, #99	; 0x63
 8009670:	d036      	beq.n	80096e0 <_printf_i+0x90>
 8009672:	d80a      	bhi.n	800968a <_printf_i+0x3a>
 8009674:	2900      	cmp	r1, #0
 8009676:	f000 80b9 	beq.w	80097ec <_printf_i+0x19c>
 800967a:	2958      	cmp	r1, #88	; 0x58
 800967c:	f000 8083 	beq.w	8009786 <_printf_i+0x136>
 8009680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009684:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009688:	e032      	b.n	80096f0 <_printf_i+0xa0>
 800968a:	2964      	cmp	r1, #100	; 0x64
 800968c:	d001      	beq.n	8009692 <_printf_i+0x42>
 800968e:	2969      	cmp	r1, #105	; 0x69
 8009690:	d1f6      	bne.n	8009680 <_printf_i+0x30>
 8009692:	6820      	ldr	r0, [r4, #0]
 8009694:	6813      	ldr	r3, [r2, #0]
 8009696:	0605      	lsls	r5, r0, #24
 8009698:	f103 0104 	add.w	r1, r3, #4
 800969c:	d52a      	bpl.n	80096f4 <_printf_i+0xa4>
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	6011      	str	r1, [r2, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	da03      	bge.n	80096ae <_printf_i+0x5e>
 80096a6:	222d      	movs	r2, #45	; 0x2d
 80096a8:	425b      	negs	r3, r3
 80096aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80096ae:	486f      	ldr	r0, [pc, #444]	; (800986c <_printf_i+0x21c>)
 80096b0:	220a      	movs	r2, #10
 80096b2:	e039      	b.n	8009728 <_printf_i+0xd8>
 80096b4:	2973      	cmp	r1, #115	; 0x73
 80096b6:	f000 809d 	beq.w	80097f4 <_printf_i+0x1a4>
 80096ba:	d808      	bhi.n	80096ce <_printf_i+0x7e>
 80096bc:	296f      	cmp	r1, #111	; 0x6f
 80096be:	d020      	beq.n	8009702 <_printf_i+0xb2>
 80096c0:	2970      	cmp	r1, #112	; 0x70
 80096c2:	d1dd      	bne.n	8009680 <_printf_i+0x30>
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	f043 0320 	orr.w	r3, r3, #32
 80096ca:	6023      	str	r3, [r4, #0]
 80096cc:	e003      	b.n	80096d6 <_printf_i+0x86>
 80096ce:	2975      	cmp	r1, #117	; 0x75
 80096d0:	d017      	beq.n	8009702 <_printf_i+0xb2>
 80096d2:	2978      	cmp	r1, #120	; 0x78
 80096d4:	d1d4      	bne.n	8009680 <_printf_i+0x30>
 80096d6:	2378      	movs	r3, #120	; 0x78
 80096d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096dc:	4864      	ldr	r0, [pc, #400]	; (8009870 <_printf_i+0x220>)
 80096de:	e055      	b.n	800978c <_printf_i+0x13c>
 80096e0:	6813      	ldr	r3, [r2, #0]
 80096e2:	1d19      	adds	r1, r3, #4
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6011      	str	r1, [r2, #0]
 80096e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096f0:	2301      	movs	r3, #1
 80096f2:	e08c      	b.n	800980e <_printf_i+0x1be>
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6011      	str	r1, [r2, #0]
 80096f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80096fc:	bf18      	it	ne
 80096fe:	b21b      	sxthne	r3, r3
 8009700:	e7cf      	b.n	80096a2 <_printf_i+0x52>
 8009702:	6813      	ldr	r3, [r2, #0]
 8009704:	6825      	ldr	r5, [r4, #0]
 8009706:	1d18      	adds	r0, r3, #4
 8009708:	6010      	str	r0, [r2, #0]
 800970a:	0628      	lsls	r0, r5, #24
 800970c:	d501      	bpl.n	8009712 <_printf_i+0xc2>
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	e002      	b.n	8009718 <_printf_i+0xc8>
 8009712:	0668      	lsls	r0, r5, #25
 8009714:	d5fb      	bpl.n	800970e <_printf_i+0xbe>
 8009716:	881b      	ldrh	r3, [r3, #0]
 8009718:	4854      	ldr	r0, [pc, #336]	; (800986c <_printf_i+0x21c>)
 800971a:	296f      	cmp	r1, #111	; 0x6f
 800971c:	bf14      	ite	ne
 800971e:	220a      	movne	r2, #10
 8009720:	2208      	moveq	r2, #8
 8009722:	2100      	movs	r1, #0
 8009724:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009728:	6865      	ldr	r5, [r4, #4]
 800972a:	60a5      	str	r5, [r4, #8]
 800972c:	2d00      	cmp	r5, #0
 800972e:	f2c0 8095 	blt.w	800985c <_printf_i+0x20c>
 8009732:	6821      	ldr	r1, [r4, #0]
 8009734:	f021 0104 	bic.w	r1, r1, #4
 8009738:	6021      	str	r1, [r4, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d13d      	bne.n	80097ba <_printf_i+0x16a>
 800973e:	2d00      	cmp	r5, #0
 8009740:	f040 808e 	bne.w	8009860 <_printf_i+0x210>
 8009744:	4665      	mov	r5, ip
 8009746:	2a08      	cmp	r2, #8
 8009748:	d10b      	bne.n	8009762 <_printf_i+0x112>
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	07db      	lsls	r3, r3, #31
 800974e:	d508      	bpl.n	8009762 <_printf_i+0x112>
 8009750:	6923      	ldr	r3, [r4, #16]
 8009752:	6862      	ldr	r2, [r4, #4]
 8009754:	429a      	cmp	r2, r3
 8009756:	bfde      	ittt	le
 8009758:	2330      	movle	r3, #48	; 0x30
 800975a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800975e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009762:	ebac 0305 	sub.w	r3, ip, r5
 8009766:	6123      	str	r3, [r4, #16]
 8009768:	f8cd 8000 	str.w	r8, [sp]
 800976c:	463b      	mov	r3, r7
 800976e:	aa03      	add	r2, sp, #12
 8009770:	4621      	mov	r1, r4
 8009772:	4630      	mov	r0, r6
 8009774:	f7ff fef6 	bl	8009564 <_printf_common>
 8009778:	3001      	adds	r0, #1
 800977a:	d14d      	bne.n	8009818 <_printf_i+0x1c8>
 800977c:	f04f 30ff 	mov.w	r0, #4294967295
 8009780:	b005      	add	sp, #20
 8009782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009786:	4839      	ldr	r0, [pc, #228]	; (800986c <_printf_i+0x21c>)
 8009788:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800978c:	6813      	ldr	r3, [r2, #0]
 800978e:	6821      	ldr	r1, [r4, #0]
 8009790:	1d1d      	adds	r5, r3, #4
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6015      	str	r5, [r2, #0]
 8009796:	060a      	lsls	r2, r1, #24
 8009798:	d50b      	bpl.n	80097b2 <_printf_i+0x162>
 800979a:	07ca      	lsls	r2, r1, #31
 800979c:	bf44      	itt	mi
 800979e:	f041 0120 	orrmi.w	r1, r1, #32
 80097a2:	6021      	strmi	r1, [r4, #0]
 80097a4:	b91b      	cbnz	r3, 80097ae <_printf_i+0x15e>
 80097a6:	6822      	ldr	r2, [r4, #0]
 80097a8:	f022 0220 	bic.w	r2, r2, #32
 80097ac:	6022      	str	r2, [r4, #0]
 80097ae:	2210      	movs	r2, #16
 80097b0:	e7b7      	b.n	8009722 <_printf_i+0xd2>
 80097b2:	064d      	lsls	r5, r1, #25
 80097b4:	bf48      	it	mi
 80097b6:	b29b      	uxthmi	r3, r3
 80097b8:	e7ef      	b.n	800979a <_printf_i+0x14a>
 80097ba:	4665      	mov	r5, ip
 80097bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80097c0:	fb02 3311 	mls	r3, r2, r1, r3
 80097c4:	5cc3      	ldrb	r3, [r0, r3]
 80097c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80097ca:	460b      	mov	r3, r1
 80097cc:	2900      	cmp	r1, #0
 80097ce:	d1f5      	bne.n	80097bc <_printf_i+0x16c>
 80097d0:	e7b9      	b.n	8009746 <_printf_i+0xf6>
 80097d2:	6813      	ldr	r3, [r2, #0]
 80097d4:	6825      	ldr	r5, [r4, #0]
 80097d6:	6961      	ldr	r1, [r4, #20]
 80097d8:	1d18      	adds	r0, r3, #4
 80097da:	6010      	str	r0, [r2, #0]
 80097dc:	0628      	lsls	r0, r5, #24
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	d501      	bpl.n	80097e6 <_printf_i+0x196>
 80097e2:	6019      	str	r1, [r3, #0]
 80097e4:	e002      	b.n	80097ec <_printf_i+0x19c>
 80097e6:	066a      	lsls	r2, r5, #25
 80097e8:	d5fb      	bpl.n	80097e2 <_printf_i+0x192>
 80097ea:	8019      	strh	r1, [r3, #0]
 80097ec:	2300      	movs	r3, #0
 80097ee:	6123      	str	r3, [r4, #16]
 80097f0:	4665      	mov	r5, ip
 80097f2:	e7b9      	b.n	8009768 <_printf_i+0x118>
 80097f4:	6813      	ldr	r3, [r2, #0]
 80097f6:	1d19      	adds	r1, r3, #4
 80097f8:	6011      	str	r1, [r2, #0]
 80097fa:	681d      	ldr	r5, [r3, #0]
 80097fc:	6862      	ldr	r2, [r4, #4]
 80097fe:	2100      	movs	r1, #0
 8009800:	4628      	mov	r0, r5
 8009802:	f7f6 fce5 	bl	80001d0 <memchr>
 8009806:	b108      	cbz	r0, 800980c <_printf_i+0x1bc>
 8009808:	1b40      	subs	r0, r0, r5
 800980a:	6060      	str	r0, [r4, #4]
 800980c:	6863      	ldr	r3, [r4, #4]
 800980e:	6123      	str	r3, [r4, #16]
 8009810:	2300      	movs	r3, #0
 8009812:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009816:	e7a7      	b.n	8009768 <_printf_i+0x118>
 8009818:	6923      	ldr	r3, [r4, #16]
 800981a:	462a      	mov	r2, r5
 800981c:	4639      	mov	r1, r7
 800981e:	4630      	mov	r0, r6
 8009820:	47c0      	blx	r8
 8009822:	3001      	adds	r0, #1
 8009824:	d0aa      	beq.n	800977c <_printf_i+0x12c>
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	079b      	lsls	r3, r3, #30
 800982a:	d413      	bmi.n	8009854 <_printf_i+0x204>
 800982c:	68e0      	ldr	r0, [r4, #12]
 800982e:	9b03      	ldr	r3, [sp, #12]
 8009830:	4298      	cmp	r0, r3
 8009832:	bfb8      	it	lt
 8009834:	4618      	movlt	r0, r3
 8009836:	e7a3      	b.n	8009780 <_printf_i+0x130>
 8009838:	2301      	movs	r3, #1
 800983a:	464a      	mov	r2, r9
 800983c:	4639      	mov	r1, r7
 800983e:	4630      	mov	r0, r6
 8009840:	47c0      	blx	r8
 8009842:	3001      	adds	r0, #1
 8009844:	d09a      	beq.n	800977c <_printf_i+0x12c>
 8009846:	3501      	adds	r5, #1
 8009848:	68e3      	ldr	r3, [r4, #12]
 800984a:	9a03      	ldr	r2, [sp, #12]
 800984c:	1a9b      	subs	r3, r3, r2
 800984e:	42ab      	cmp	r3, r5
 8009850:	dcf2      	bgt.n	8009838 <_printf_i+0x1e8>
 8009852:	e7eb      	b.n	800982c <_printf_i+0x1dc>
 8009854:	2500      	movs	r5, #0
 8009856:	f104 0919 	add.w	r9, r4, #25
 800985a:	e7f5      	b.n	8009848 <_printf_i+0x1f8>
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1ac      	bne.n	80097ba <_printf_i+0x16a>
 8009860:	7803      	ldrb	r3, [r0, #0]
 8009862:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009866:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800986a:	e76c      	b.n	8009746 <_printf_i+0xf6>
 800986c:	08009ab1 	.word	0x08009ab1
 8009870:	08009ac2 	.word	0x08009ac2

08009874 <memmove>:
 8009874:	4288      	cmp	r0, r1
 8009876:	b510      	push	{r4, lr}
 8009878:	eb01 0302 	add.w	r3, r1, r2
 800987c:	d807      	bhi.n	800988e <memmove+0x1a>
 800987e:	1e42      	subs	r2, r0, #1
 8009880:	4299      	cmp	r1, r3
 8009882:	d00a      	beq.n	800989a <memmove+0x26>
 8009884:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009888:	f802 4f01 	strb.w	r4, [r2, #1]!
 800988c:	e7f8      	b.n	8009880 <memmove+0xc>
 800988e:	4283      	cmp	r3, r0
 8009890:	d9f5      	bls.n	800987e <memmove+0xa>
 8009892:	1881      	adds	r1, r0, r2
 8009894:	1ad2      	subs	r2, r2, r3
 8009896:	42d3      	cmn	r3, r2
 8009898:	d100      	bne.n	800989c <memmove+0x28>
 800989a:	bd10      	pop	{r4, pc}
 800989c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098a0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80098a4:	e7f7      	b.n	8009896 <memmove+0x22>

080098a6 <_realloc_r>:
 80098a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a8:	4607      	mov	r7, r0
 80098aa:	4614      	mov	r4, r2
 80098ac:	460e      	mov	r6, r1
 80098ae:	b921      	cbnz	r1, 80098ba <_realloc_r+0x14>
 80098b0:	4611      	mov	r1, r2
 80098b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80098b6:	f7ff bc77 	b.w	80091a8 <_malloc_r>
 80098ba:	b922      	cbnz	r2, 80098c6 <_realloc_r+0x20>
 80098bc:	f7ff fc26 	bl	800910c <_free_r>
 80098c0:	4625      	mov	r5, r4
 80098c2:	4628      	mov	r0, r5
 80098c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098c6:	f000 f814 	bl	80098f2 <_malloc_usable_size_r>
 80098ca:	42a0      	cmp	r0, r4
 80098cc:	d20f      	bcs.n	80098ee <_realloc_r+0x48>
 80098ce:	4621      	mov	r1, r4
 80098d0:	4638      	mov	r0, r7
 80098d2:	f7ff fc69 	bl	80091a8 <_malloc_r>
 80098d6:	4605      	mov	r5, r0
 80098d8:	2800      	cmp	r0, #0
 80098da:	d0f2      	beq.n	80098c2 <_realloc_r+0x1c>
 80098dc:	4631      	mov	r1, r6
 80098de:	4622      	mov	r2, r4
 80098e0:	f7ff fc00 	bl	80090e4 <memcpy>
 80098e4:	4631      	mov	r1, r6
 80098e6:	4638      	mov	r0, r7
 80098e8:	f7ff fc10 	bl	800910c <_free_r>
 80098ec:	e7e9      	b.n	80098c2 <_realloc_r+0x1c>
 80098ee:	4635      	mov	r5, r6
 80098f0:	e7e7      	b.n	80098c2 <_realloc_r+0x1c>

080098f2 <_malloc_usable_size_r>:
 80098f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098f6:	1f18      	subs	r0, r3, #4
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	bfbc      	itt	lt
 80098fc:	580b      	ldrlt	r3, [r1, r0]
 80098fe:	18c0      	addlt	r0, r0, r3
 8009900:	4770      	bx	lr
	...

08009904 <_init>:
 8009904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009906:	bf00      	nop
 8009908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800990a:	bc08      	pop	{r3}
 800990c:	469e      	mov	lr, r3
 800990e:	4770      	bx	lr

08009910 <_fini>:
 8009910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009912:	bf00      	nop
 8009914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009916:	bc08      	pop	{r3}
 8009918:	469e      	mov	lr, r3
 800991a:	4770      	bx	lr
