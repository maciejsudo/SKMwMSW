
uart_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000974c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080098dc  080098dc  000198dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a98  08009a98  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009aa0  08009aa0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aa0  08009aa0  00019aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009aa4  08009aa4  00019aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  20000090  08009b38  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000990  08009b38  00020990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4c6  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f28  00000000  00000000  0003f586  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018b0  00000000  00000000  000434b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001710  00000000  00000000  00044d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000257cc  00000000  00000000  00046470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015bcb  00000000  00000000  0006bc3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4ec3  00000000  00000000  00081807  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001566ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c64  00000000  00000000  00156748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080098c4 	.word	0x080098c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080098c4 	.word	0x080098c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_TIM_PeriodElapsedCallback>:
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){ // Jeżeli przerwanie pochodzi od timera 10
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a05      	ldr	r2, [pc, #20]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d102      	bne.n	8000588 <HAL_TIM_PeriodElapsedCallback+0x18>
		timer_state=1;
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40014400 	.word	0x40014400
 8000598:	200000ac 	.word	0x200000ac

0800059c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]


	receive_flag=1;
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <HAL_UART_RxCpltCallback+0x1c>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]

}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	200000ad 	.word	0x200000ad

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b5b0      	push	{r4, r5, r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 feb5 	bl	8001330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f9f5 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fb59 	bl	8000c80 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ce:	f000 fa73 	bl	8000ab8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005d2:	f000 fa9f 	bl	8000b14 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005d6:	f000 facd 	bl	8000b74 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005da:	f008 fa21 	bl	8008a20 <MX_USB_HOST_Init>
  MX_TIM10_Init();
 80005de:	f000 faff 	bl	8000be0 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 fb23 	bl	8000c2c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim10);
 80005e6:	48a6      	ldr	r0, [pc, #664]	; (8000880 <main+0x2c4>)
 80005e8:	f004 fb31 	bl	8004c4e <HAL_TIM_Base_Start_IT>

HAL_UART_Receive_IT(&huart2, &Received, 1);
 80005ec:	2201      	movs	r2, #1
 80005ee:	49a5      	ldr	r1, [pc, #660]	; (8000884 <main+0x2c8>)
 80005f0:	48a5      	ldr	r0, [pc, #660]	; (8000888 <main+0x2cc>)
 80005f2:	f004 fdc7 	bl	8005184 <HAL_UART_Receive_IT>
  while (1)
  {



	  if(timer_state==1)
 80005f6:	4ba5      	ldr	r3, [pc, #660]	; (800088c <main+0x2d0>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d118      	bne.n	8000630 <main+0x74>
	  {
			 ++cnt; // Zwiekszenie licznika wyslanych wiadomosci.
 80005fe:	4ba4      	ldr	r3, [pc, #656]	; (8000890 <main+0x2d4>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	b29a      	uxth	r2, r3
 8000606:	4ba2      	ldr	r3, [pc, #648]	; (8000890 <main+0x2d4>)
 8000608:	801a      	strh	r2, [r3, #0]
			 size = sprintf(data, "									message nr: %d.\n\r", cnt); // Stworzenie wiadomosci do wyslania oraz przypisanie ilosci wysylanych znakow do zmiennej size.
 800060a:	4ba1      	ldr	r3, [pc, #644]	; (8000890 <main+0x2d4>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	49a0      	ldr	r1, [pc, #640]	; (8000894 <main+0x2d8>)
 8000612:	48a1      	ldr	r0, [pc, #644]	; (8000898 <main+0x2dc>)
 8000614:	f008 fe12 	bl	800923c <siprintf>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	4b9f      	ldr	r3, [pc, #636]	; (800089c <main+0x2e0>)
 800061e:	801a      	strh	r2, [r3, #0]
			 //HAL_UART_Transmit_IT(&huart2, data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
			 HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin); // Zmiana stanu pinu na diodzie LED
 8000620:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000624:	489e      	ldr	r0, [pc, #632]	; (80008a0 <main+0x2e4>)
 8000626:	f001 f9fe 	bl	8001a26 <HAL_GPIO_TogglePin>
			 timer_state=0;
 800062a:	4b98      	ldr	r3, [pc, #608]	; (800088c <main+0x2d0>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
	  }

	  if(receive_flag==1)
 8000630:	4b9c      	ldr	r3, [pc, #624]	; (80008a4 <main+0x2e8>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	f040 81a6 	bne.w	8000986 <main+0x3ca>
	  {

		    static uint8_t i=0;
		  	uint16_t size = 0; // Rozmiar wysylanej wiadomosci
 800063a:	2300      	movs	r3, #0
 800063c:	80fb      	strh	r3, [r7, #6]



			//size = sprintf(receive_data, "%s",Received);
			if (Received[0] == 13 || Received[0]== 10)
 800063e:	4b91      	ldr	r3, [pc, #580]	; (8000884 <main+0x2c8>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b0d      	cmp	r3, #13
 8000644:	d004      	beq.n	8000650 <main+0x94>
 8000646:	4b8f      	ldr	r3, [pc, #572]	; (8000884 <main+0x2c8>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b0a      	cmp	r3, #10
 800064c:	f040 8170 	bne.w	8000930 <main+0x374>
			{
			size = sprintf(receive_data, "\n\r");
 8000650:	4b95      	ldr	r3, [pc, #596]	; (80008a8 <main+0x2ec>)
 8000652:	4a96      	ldr	r2, [pc, #600]	; (80008ac <main+0x2f0>)
 8000654:	8811      	ldrh	r1, [r2, #0]
 8000656:	7892      	ldrb	r2, [r2, #2]
 8000658:	8019      	strh	r1, [r3, #0]
 800065a:	709a      	strb	r2, [r3, #2]
 800065c:	2302      	movs	r3, #2
 800065e:	80fb      	strh	r3, [r7, #6]
			i=0;
 8000660:	4b93      	ldr	r3, [pc, #588]	; (80008b0 <main+0x2f4>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]

			//RLON/RLOFF
			//HELP
				if(data_buffer[0]=='h' && data_buffer[1]=='e' && data_buffer[2]=='l' && data_buffer[3]=='p')
 8000666:	4b93      	ldr	r3, [pc, #588]	; (80008b4 <main+0x2f8>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b68      	cmp	r3, #104	; 0x68
 800066c:	d11c      	bne.n	80006a8 <main+0xec>
 800066e:	4b91      	ldr	r3, [pc, #580]	; (80008b4 <main+0x2f8>)
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	2b65      	cmp	r3, #101	; 0x65
 8000674:	d118      	bne.n	80006a8 <main+0xec>
 8000676:	4b8f      	ldr	r3, [pc, #572]	; (80008b4 <main+0x2f8>)
 8000678:	789b      	ldrb	r3, [r3, #2]
 800067a:	2b6c      	cmp	r3, #108	; 0x6c
 800067c:	d114      	bne.n	80006a8 <main+0xec>
 800067e:	4b8d      	ldr	r3, [pc, #564]	; (80008b4 <main+0x2f8>)
 8000680:	78db      	ldrb	r3, [r3, #3]
 8000682:	2b70      	cmp	r3, #112	; 0x70
 8000684:	d110      	bne.n	80006a8 <main+0xec>
				{
					size = sprintf(data,"\r\n rlon - turns red led on\r\n rloff - turns led red off\r\n blon - turns blue led on\r\n bloff - turns blue led off\r\n olon - turns orange led on\r\n oloff - turns orange led off\r\n");
 8000686:	4a84      	ldr	r2, [pc, #528]	; (8000898 <main+0x2dc>)
 8000688:	4b8b      	ldr	r3, [pc, #556]	; (80008b8 <main+0x2fc>)
 800068a:	4610      	mov	r0, r2
 800068c:	4619      	mov	r1, r3
 800068e:	23ad      	movs	r3, #173	; 0xad
 8000690:	461a      	mov	r2, r3
 8000692:	f008 fd07 	bl	80090a4 <memcpy>
 8000696:	23ac      	movs	r3, #172	; 0xac
 8000698:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	461a      	mov	r2, r3
 800069e:	497e      	ldr	r1, [pc, #504]	; (8000898 <main+0x2dc>)
 80006a0:	4879      	ldr	r0, [pc, #484]	; (8000888 <main+0x2cc>)
 80006a2:	f004 fd2a 	bl	80050fa <HAL_UART_Transmit_IT>
 80006a6:	e142      	b.n	800092e <main+0x372>
				}

				else if(data_buffer[0]=='r' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='n')
 80006a8:	4b82      	ldr	r3, [pc, #520]	; (80008b4 <main+0x2f8>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b72      	cmp	r3, #114	; 0x72
 80006ae:	d127      	bne.n	8000700 <main+0x144>
 80006b0:	4b80      	ldr	r3, [pc, #512]	; (80008b4 <main+0x2f8>)
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	2b6c      	cmp	r3, #108	; 0x6c
 80006b6:	d123      	bne.n	8000700 <main+0x144>
 80006b8:	4b7e      	ldr	r3, [pc, #504]	; (80008b4 <main+0x2f8>)
 80006ba:	789b      	ldrb	r3, [r3, #2]
 80006bc:	2b6f      	cmp	r3, #111	; 0x6f
 80006be:	d11f      	bne.n	8000700 <main+0x144>
 80006c0:	4b7c      	ldr	r3, [pc, #496]	; (80008b4 <main+0x2f8>)
 80006c2:	78db      	ldrb	r3, [r3, #3]
 80006c4:	2b6e      	cmp	r3, #110	; 0x6e
 80006c6:	d11b      	bne.n	8000700 <main+0x144>
				{
					HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ce:	4874      	ldr	r0, [pc, #464]	; (80008a0 <main+0x2e4>)
 80006d0:	f001 f990 	bl	80019f4 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\nred led turned ON\r\n");
 80006d4:	4a70      	ldr	r2, [pc, #448]	; (8000898 <main+0x2dc>)
 80006d6:	4b79      	ldr	r3, [pc, #484]	; (80008bc <main+0x300>)
 80006d8:	4615      	mov	r5, r2
 80006da:	461c      	mov	r4, r3
 80006dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006de:	6028      	str	r0, [r5, #0]
 80006e0:	6069      	str	r1, [r5, #4]
 80006e2:	60aa      	str	r2, [r5, #8]
 80006e4:	60eb      	str	r3, [r5, #12]
 80006e6:	6820      	ldr	r0, [r4, #0]
 80006e8:	6128      	str	r0, [r5, #16]
 80006ea:	88a3      	ldrh	r3, [r4, #4]
 80006ec:	82ab      	strh	r3, [r5, #20]
 80006ee:	2315      	movs	r3, #21
 80006f0:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4968      	ldr	r1, [pc, #416]	; (8000898 <main+0x2dc>)
 80006f8:	4863      	ldr	r0, [pc, #396]	; (8000888 <main+0x2cc>)
 80006fa:	f004 fcfe 	bl	80050fa <HAL_UART_Transmit_IT>
 80006fe:	e116      	b.n	800092e <main+0x372>
				}

				else if(data_buffer[0]=='r' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='f' && data_buffer[4]=='f')
 8000700:	4b6c      	ldr	r3, [pc, #432]	; (80008b4 <main+0x2f8>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b72      	cmp	r3, #114	; 0x72
 8000706:	d12e      	bne.n	8000766 <main+0x1aa>
 8000708:	4b6a      	ldr	r3, [pc, #424]	; (80008b4 <main+0x2f8>)
 800070a:	785b      	ldrb	r3, [r3, #1]
 800070c:	2b6c      	cmp	r3, #108	; 0x6c
 800070e:	d12a      	bne.n	8000766 <main+0x1aa>
 8000710:	4b68      	ldr	r3, [pc, #416]	; (80008b4 <main+0x2f8>)
 8000712:	789b      	ldrb	r3, [r3, #2]
 8000714:	2b6f      	cmp	r3, #111	; 0x6f
 8000716:	d126      	bne.n	8000766 <main+0x1aa>
 8000718:	4b66      	ldr	r3, [pc, #408]	; (80008b4 <main+0x2f8>)
 800071a:	78db      	ldrb	r3, [r3, #3]
 800071c:	2b66      	cmp	r3, #102	; 0x66
 800071e:	d122      	bne.n	8000766 <main+0x1aa>
 8000720:	4b64      	ldr	r3, [pc, #400]	; (80008b4 <main+0x2f8>)
 8000722:	791b      	ldrb	r3, [r3, #4]
 8000724:	2b66      	cmp	r3, #102	; 0x66
 8000726:	d11e      	bne.n	8000766 <main+0x1aa>
				{
					HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072e:	485c      	ldr	r0, [pc, #368]	; (80008a0 <main+0x2e4>)
 8000730:	f001 f960 	bl	80019f4 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\nred led turned OFF\r\n");
 8000734:	4a58      	ldr	r2, [pc, #352]	; (8000898 <main+0x2dc>)
 8000736:	4b62      	ldr	r3, [pc, #392]	; (80008c0 <main+0x304>)
 8000738:	4614      	mov	r4, r2
 800073a:	461d      	mov	r5, r3
 800073c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073e:	6020      	str	r0, [r4, #0]
 8000740:	6061      	str	r1, [r4, #4]
 8000742:	60a2      	str	r2, [r4, #8]
 8000744:	60e3      	str	r3, [r4, #12]
 8000746:	6828      	ldr	r0, [r5, #0]
 8000748:	6120      	str	r0, [r4, #16]
 800074a:	88ab      	ldrh	r3, [r5, #4]
 800074c:	79aa      	ldrb	r2, [r5, #6]
 800074e:	82a3      	strh	r3, [r4, #20]
 8000750:	4613      	mov	r3, r2
 8000752:	75a3      	strb	r3, [r4, #22]
 8000754:	2316      	movs	r3, #22
 8000756:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 8000758:	88fb      	ldrh	r3, [r7, #6]
 800075a:	461a      	mov	r2, r3
 800075c:	494e      	ldr	r1, [pc, #312]	; (8000898 <main+0x2dc>)
 800075e:	484a      	ldr	r0, [pc, #296]	; (8000888 <main+0x2cc>)
 8000760:	f004 fccb 	bl	80050fa <HAL_UART_Transmit_IT>
 8000764:	e0e3      	b.n	800092e <main+0x372>
				}

				else if(data_buffer[0]=='o' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='n')
 8000766:	4b53      	ldr	r3, [pc, #332]	; (80008b4 <main+0x2f8>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b6f      	cmp	r3, #111	; 0x6f
 800076c:	d128      	bne.n	80007c0 <main+0x204>
 800076e:	4b51      	ldr	r3, [pc, #324]	; (80008b4 <main+0x2f8>)
 8000770:	785b      	ldrb	r3, [r3, #1]
 8000772:	2b6c      	cmp	r3, #108	; 0x6c
 8000774:	d124      	bne.n	80007c0 <main+0x204>
 8000776:	4b4f      	ldr	r3, [pc, #316]	; (80008b4 <main+0x2f8>)
 8000778:	789b      	ldrb	r3, [r3, #2]
 800077a:	2b6f      	cmp	r3, #111	; 0x6f
 800077c:	d120      	bne.n	80007c0 <main+0x204>
 800077e:	4b4d      	ldr	r3, [pc, #308]	; (80008b4 <main+0x2f8>)
 8000780:	78db      	ldrb	r3, [r3, #3]
 8000782:	2b6e      	cmp	r3, #110	; 0x6e
 8000784:	d11c      	bne.n	80007c0 <main+0x204>
				{
					HAL_GPIO_WritePin(LED_Orange_GPIO_Port, LED_Orange_Pin, SET);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078c:	4844      	ldr	r0, [pc, #272]	; (80008a0 <main+0x2e4>)
 800078e:	f001 f931 	bl	80019f4 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\norange led turned ON\r\n");
 8000792:	4a41      	ldr	r2, [pc, #260]	; (8000898 <main+0x2dc>)
 8000794:	4b4b      	ldr	r3, [pc, #300]	; (80008c4 <main+0x308>)
 8000796:	4615      	mov	r5, r2
 8000798:	461c      	mov	r4, r3
 800079a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800079c:	6028      	str	r0, [r5, #0]
 800079e:	6069      	str	r1, [r5, #4]
 80007a0:	60aa      	str	r2, [r5, #8]
 80007a2:	60eb      	str	r3, [r5, #12]
 80007a4:	cc03      	ldmia	r4!, {r0, r1}
 80007a6:	6128      	str	r0, [r5, #16]
 80007a8:	6169      	str	r1, [r5, #20]
 80007aa:	7823      	ldrb	r3, [r4, #0]
 80007ac:	762b      	strb	r3, [r5, #24]
 80007ae:	2318      	movs	r3, #24
 80007b0:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4938      	ldr	r1, [pc, #224]	; (8000898 <main+0x2dc>)
 80007b8:	4833      	ldr	r0, [pc, #204]	; (8000888 <main+0x2cc>)
 80007ba:	f004 fc9e 	bl	80050fa <HAL_UART_Transmit_IT>
 80007be:	e0b6      	b.n	800092e <main+0x372>
				}

				else if(data_buffer[0]=='o' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='f' && data_buffer[4]=='f')
 80007c0:	4b3c      	ldr	r3, [pc, #240]	; (80008b4 <main+0x2f8>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b6f      	cmp	r3, #111	; 0x6f
 80007c6:	d12c      	bne.n	8000822 <main+0x266>
 80007c8:	4b3a      	ldr	r3, [pc, #232]	; (80008b4 <main+0x2f8>)
 80007ca:	785b      	ldrb	r3, [r3, #1]
 80007cc:	2b6c      	cmp	r3, #108	; 0x6c
 80007ce:	d128      	bne.n	8000822 <main+0x266>
 80007d0:	4b38      	ldr	r3, [pc, #224]	; (80008b4 <main+0x2f8>)
 80007d2:	789b      	ldrb	r3, [r3, #2]
 80007d4:	2b6f      	cmp	r3, #111	; 0x6f
 80007d6:	d124      	bne.n	8000822 <main+0x266>
 80007d8:	4b36      	ldr	r3, [pc, #216]	; (80008b4 <main+0x2f8>)
 80007da:	78db      	ldrb	r3, [r3, #3]
 80007dc:	2b66      	cmp	r3, #102	; 0x66
 80007de:	d120      	bne.n	8000822 <main+0x266>
 80007e0:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <main+0x2f8>)
 80007e2:	791b      	ldrb	r3, [r3, #4]
 80007e4:	2b66      	cmp	r3, #102	; 0x66
 80007e6:	d11c      	bne.n	8000822 <main+0x266>
				{
					HAL_GPIO_WritePin(LED_Orange_GPIO_Port, LED_Orange_Pin, RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ee:	482c      	ldr	r0, [pc, #176]	; (80008a0 <main+0x2e4>)
 80007f0:	f001 f900 	bl	80019f4 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\norange led turned OFF\r\n");
 80007f4:	4a28      	ldr	r2, [pc, #160]	; (8000898 <main+0x2dc>)
 80007f6:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <main+0x30c>)
 80007f8:	4615      	mov	r5, r2
 80007fa:	461c      	mov	r4, r3
 80007fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007fe:	6028      	str	r0, [r5, #0]
 8000800:	6069      	str	r1, [r5, #4]
 8000802:	60aa      	str	r2, [r5, #8]
 8000804:	60eb      	str	r3, [r5, #12]
 8000806:	cc03      	ldmia	r4!, {r0, r1}
 8000808:	6128      	str	r0, [r5, #16]
 800080a:	6169      	str	r1, [r5, #20]
 800080c:	8823      	ldrh	r3, [r4, #0]
 800080e:	832b      	strh	r3, [r5, #24]
 8000810:	2319      	movs	r3, #25
 8000812:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	461a      	mov	r2, r3
 8000818:	491f      	ldr	r1, [pc, #124]	; (8000898 <main+0x2dc>)
 800081a:	481b      	ldr	r0, [pc, #108]	; (8000888 <main+0x2cc>)
 800081c:	f004 fc6d 	bl	80050fa <HAL_UART_Transmit_IT>
 8000820:	e085      	b.n	800092e <main+0x372>
				}


				else if(data_buffer[0]=='b' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='n')
 8000822:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <main+0x2f8>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b62      	cmp	r3, #98	; 0x62
 8000828:	d152      	bne.n	80008d0 <main+0x314>
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <main+0x2f8>)
 800082c:	785b      	ldrb	r3, [r3, #1]
 800082e:	2b6c      	cmp	r3, #108	; 0x6c
 8000830:	d14e      	bne.n	80008d0 <main+0x314>
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <main+0x2f8>)
 8000834:	789b      	ldrb	r3, [r3, #2]
 8000836:	2b6f      	cmp	r3, #111	; 0x6f
 8000838:	d14a      	bne.n	80008d0 <main+0x314>
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <main+0x2f8>)
 800083c:	78db      	ldrb	r3, [r3, #3]
 800083e:	2b6e      	cmp	r3, #110	; 0x6e
 8000840:	d146      	bne.n	80008d0 <main+0x314>
				{
					HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000848:	4815      	ldr	r0, [pc, #84]	; (80008a0 <main+0x2e4>)
 800084a:	f001 f8d3 	bl	80019f4 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\nblue led turned ON\r\n");
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <main+0x2dc>)
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <main+0x310>)
 8000852:	4614      	mov	r4, r2
 8000854:	461d      	mov	r5, r3
 8000856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000858:	6020      	str	r0, [r4, #0]
 800085a:	6061      	str	r1, [r4, #4]
 800085c:	60a2      	str	r2, [r4, #8]
 800085e:	60e3      	str	r3, [r4, #12]
 8000860:	6828      	ldr	r0, [r5, #0]
 8000862:	6120      	str	r0, [r4, #16]
 8000864:	88ab      	ldrh	r3, [r5, #4]
 8000866:	79aa      	ldrb	r2, [r5, #6]
 8000868:	82a3      	strh	r3, [r4, #20]
 800086a:	4613      	mov	r3, r2
 800086c:	75a3      	strb	r3, [r4, #22]
 800086e:	2316      	movs	r3, #22
 8000870:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	461a      	mov	r2, r3
 8000876:	4908      	ldr	r1, [pc, #32]	; (8000898 <main+0x2dc>)
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <main+0x2cc>)
 800087a:	f004 fc3e 	bl	80050fa <HAL_UART_Transmit_IT>
 800087e:	e056      	b.n	800092e <main+0x372>
 8000880:	20000128 	.word	0x20000128
 8000884:	200000c8 	.word	0x200000c8
 8000888:	20000258 	.word	0x20000258
 800088c:	200000ac 	.word	0x200000ac
 8000890:	200000ae 	.word	0x200000ae
 8000894:	080098dc 	.word	0x080098dc
 8000898:	2000019c 	.word	0x2000019c
 800089c:	200000b0 	.word	0x200000b0
 80008a0:	40020c00 	.word	0x40020c00
 80008a4:	200000ad 	.word	0x200000ad
 80008a8:	20000168 	.word	0x20000168
 80008ac:	080098f8 	.word	0x080098f8
 80008b0:	200000b2 	.word	0x200000b2
 80008b4:	20000298 	.word	0x20000298
 80008b8:	080098fc 	.word	0x080098fc
 80008bc:	080099ac 	.word	0x080099ac
 80008c0:	080099c4 	.word	0x080099c4
 80008c4:	080099dc 	.word	0x080099dc
 80008c8:	080099f8 	.word	0x080099f8
 80008cc:	08009a14 	.word	0x08009a14
				}

				else if(data_buffer[0]=='b' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='f' && data_buffer[4]=='f')
 80008d0:	4b2e      	ldr	r3, [pc, #184]	; (800098c <main+0x3d0>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b62      	cmp	r3, #98	; 0x62
 80008d6:	d147      	bne.n	8000968 <main+0x3ac>
 80008d8:	4b2c      	ldr	r3, [pc, #176]	; (800098c <main+0x3d0>)
 80008da:	785b      	ldrb	r3, [r3, #1]
 80008dc:	2b6c      	cmp	r3, #108	; 0x6c
 80008de:	d143      	bne.n	8000968 <main+0x3ac>
 80008e0:	4b2a      	ldr	r3, [pc, #168]	; (800098c <main+0x3d0>)
 80008e2:	789b      	ldrb	r3, [r3, #2]
 80008e4:	2b6f      	cmp	r3, #111	; 0x6f
 80008e6:	d13f      	bne.n	8000968 <main+0x3ac>
 80008e8:	4b28      	ldr	r3, [pc, #160]	; (800098c <main+0x3d0>)
 80008ea:	78db      	ldrb	r3, [r3, #3]
 80008ec:	2b66      	cmp	r3, #102	; 0x66
 80008ee:	d13b      	bne.n	8000968 <main+0x3ac>
 80008f0:	4b26      	ldr	r3, [pc, #152]	; (800098c <main+0x3d0>)
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	2b66      	cmp	r3, #102	; 0x66
 80008f6:	d137      	bne.n	8000968 <main+0x3ac>
				{
					HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008fe:	4824      	ldr	r0, [pc, #144]	; (8000990 <main+0x3d4>)
 8000900:	f001 f878 	bl	80019f4 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\nblue led turned OFF\r\n");
 8000904:	4a23      	ldr	r2, [pc, #140]	; (8000994 <main+0x3d8>)
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <main+0x3dc>)
 8000908:	4615      	mov	r5, r2
 800090a:	461c      	mov	r4, r3
 800090c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800090e:	6028      	str	r0, [r5, #0]
 8000910:	6069      	str	r1, [r5, #4]
 8000912:	60aa      	str	r2, [r5, #8]
 8000914:	60eb      	str	r3, [r5, #12]
 8000916:	cc03      	ldmia	r4!, {r0, r1}
 8000918:	6128      	str	r0, [r5, #16]
 800091a:	6169      	str	r1, [r5, #20]
 800091c:	2317      	movs	r3, #23
 800091e:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 8000920:	88fb      	ldrh	r3, [r7, #6]
 8000922:	461a      	mov	r2, r3
 8000924:	491b      	ldr	r1, [pc, #108]	; (8000994 <main+0x3d8>)
 8000926:	481d      	ldr	r0, [pc, #116]	; (800099c <main+0x3e0>)
 8000928:	f004 fbe7 	bl	80050fa <HAL_UART_Transmit_IT>
				if(data_buffer[0]=='h' && data_buffer[1]=='e' && data_buffer[2]=='l' && data_buffer[3]=='p')
 800092c:	e01c      	b.n	8000968 <main+0x3ac>
 800092e:	e01b      	b.n	8000968 <main+0x3ac>



			else
			{
			size = sprintf(receive_data, "%s",Received);
 8000930:	4a1b      	ldr	r2, [pc, #108]	; (80009a0 <main+0x3e4>)
 8000932:	491c      	ldr	r1, [pc, #112]	; (80009a4 <main+0x3e8>)
 8000934:	481c      	ldr	r0, [pc, #112]	; (80009a8 <main+0x3ec>)
 8000936:	f008 fc81 	bl	800923c <siprintf>
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]

			data_buffer[i]=receive_data[0];
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <main+0x3f0>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <main+0x3ec>)
 8000946:	7819      	ldrb	r1, [r3, #0]
 8000948:	4b10      	ldr	r3, [pc, #64]	; (800098c <main+0x3d0>)
 800094a:	5499      	strb	r1, [r3, r2]
			i++;
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <main+0x3f0>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	3301      	adds	r3, #1
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <main+0x3f0>)
 8000956:	701a      	strb	r2, [r3, #0]
			if(i==10)
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <main+0x3f0>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b0a      	cmp	r3, #10
 800095e:	d104      	bne.n	800096a <main+0x3ae>
			{
			i=0;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <main+0x3f0>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	e000      	b.n	800096a <main+0x3ae>
				if(data_buffer[0]=='h' && data_buffer[1]=='e' && data_buffer[2]=='l' && data_buffer[3]=='p')
 8000968:	bf00      	nop
			}


			}

			HAL_UART_Transmit_IT(&huart2, receive_data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	461a      	mov	r2, r3
 800096e:	490e      	ldr	r1, [pc, #56]	; (80009a8 <main+0x3ec>)
 8000970:	480a      	ldr	r0, [pc, #40]	; (800099c <main+0x3e0>)
 8000972:	f004 fbc2 	bl	80050fa <HAL_UART_Transmit_IT>
			HAL_UART_Receive_IT(&huart2, &Received, 1); // Ponowne włączenie nasłuchiwania
 8000976:	2201      	movs	r2, #1
 8000978:	4909      	ldr	r1, [pc, #36]	; (80009a0 <main+0x3e4>)
 800097a:	4808      	ldr	r0, [pc, #32]	; (800099c <main+0x3e0>)
 800097c:	f004 fc02 	bl	8005184 <HAL_UART_Receive_IT>



			receive_flag=0;
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <main+0x3f4>)
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]




    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000986:	f008 f871 	bl	8008a6c <MX_USB_HOST_Process>
	  if(timer_state==1)
 800098a:	e634      	b.n	80005f6 <main+0x3a>
 800098c:	20000298 	.word	0x20000298
 8000990:	40020c00 	.word	0x40020c00
 8000994:	2000019c 	.word	0x2000019c
 8000998:	08009a2c 	.word	0x08009a2c
 800099c:	20000258 	.word	0x20000258
 80009a0:	200000c8 	.word	0x200000c8
 80009a4:	08009a44 	.word	0x08009a44
 80009a8:	20000168 	.word	0x20000168
 80009ac:	200000b2 	.word	0x200000b2
 80009b0:	200000ad 	.word	0x200000ad

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b098      	sub	sp, #96	; 0x60
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009be:	2230      	movs	r2, #48	; 0x30
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f008 fb79 	bl	80090ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <SystemClock_Config+0xfc>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a30      	ldr	r2, [pc, #192]	; (8000ab0 <SystemClock_Config+0xfc>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <SystemClock_Config+0xfc>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <SystemClock_Config+0x100>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a2a      	ldr	r2, [pc, #168]	; (8000ab4 <SystemClock_Config+0x100>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <SystemClock_Config+0x100>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a32:	2308      	movs	r3, #8
 8000a34:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a36:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a3a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a40:	2307      	movs	r3, #7
 8000a42:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 fad1 	bl	8003ff0 <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a54:	f000 fa12 	bl	8000e7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	2105      	movs	r1, #5
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 fd2a 	bl	80044d0 <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a82:	f000 f9fb 	bl	8000e7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a86:	2301      	movs	r3, #1
 8000a88:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a8a:	23c0      	movs	r3, #192	; 0xc0
 8000a8c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4618      	mov	r0, r3
 8000a98:	f003 ff0c 	bl	80048b4 <HAL_RCCEx_PeriphCLKConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000aa2:	f000 f9eb 	bl	8000e7c <Error_Handler>
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3760      	adds	r7, #96	; 0x60
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40007000 	.word	0x40007000

08000ab8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000abe:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <MX_I2C1_Init+0x54>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000ac4:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <MX_I2C1_Init+0x58>)
 8000ac6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000ad6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ada:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000af6:	f002 fca3 	bl	8003440 <HAL_I2C_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b00:	f000 f9bc 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200000d4 	.word	0x200000d4
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	000186a0 	.word	0x000186a0

08000b14 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b1a:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <MX_I2S3_Init+0x58>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b24:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b38:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <MX_I2S3_Init+0x5c>)
 8000b3e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b54:	f002 fdac 	bl	80036b0 <HAL_I2S_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b5e:	f000 f98d 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200002a4 	.word	0x200002a4
 8000b6c:	40003c00 	.word	0x40003c00
 8000b70:	00017700 	.word	0x00017700

08000b74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b7a:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <MX_SPI1_Init+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bc0:	220a      	movs	r2, #10
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bc6:	f003 ffb3 	bl	8004b30 <HAL_SPI_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bd0:	f000 f954 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000200 	.word	0x20000200
 8000bdc:	40013000 	.word	0x40013000

08000be0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_TIM10_Init+0x44>)
 8000be6:	4a10      	ldr	r2, [pc, #64]	; (8000c28 <MX_TIM10_Init+0x48>)
 8000be8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_TIM10_Init+0x44>)
 8000bec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bf0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_TIM10_Init+0x44>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_TIM10_Init+0x44>)
 8000bfa:	f248 323f 	movw	r2, #33599	; 0x833f
 8000bfe:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_TIM10_Init+0x44>)
 8000c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c06:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_TIM10_Init+0x44>)
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_TIM10_Init+0x44>)
 8000c10:	f003 fff2 	bl	8004bf8 <HAL_TIM_Base_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM10_Init+0x3e>
  {
    Error_Handler();
 8000c1a:	f000 f92f 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000128 	.word	0x20000128
 8000c28:	40014400 	.word	0x40014400

08000c2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <MX_USART2_UART_Init+0x50>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c64:	f004 f9fc 	bl	8005060 <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c6e:	f000 f905 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000258 	.word	0x20000258
 8000c7c:	40004400 	.word	0x40004400

08000c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	; 0x30
 8000c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
 8000c9a:	4b71      	ldr	r3, [pc, #452]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a70      	ldr	r2, [pc, #448]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000ca0:	f043 0310 	orr.w	r3, r3, #16
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b6e      	ldr	r3, [pc, #440]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0310 	and.w	r3, r3, #16
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	4b6a      	ldr	r3, [pc, #424]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a69      	ldr	r2, [pc, #420]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b67      	ldr	r3, [pc, #412]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b63      	ldr	r3, [pc, #396]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a62      	ldr	r2, [pc, #392]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b60      	ldr	r3, [pc, #384]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b5c      	ldr	r3, [pc, #368]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a5b      	ldr	r2, [pc, #364]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b59      	ldr	r3, [pc, #356]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b55      	ldr	r3, [pc, #340]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a54      	ldr	r2, [pc, #336]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b52      	ldr	r3, [pc, #328]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b4e      	ldr	r3, [pc, #312]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a4d      	ldr	r2, [pc, #308]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000d2c:	f043 0308 	orr.w	r3, r3, #8
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b4b      	ldr	r3, [pc, #300]	; (8000e60 <MX_GPIO_Init+0x1e0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2108      	movs	r1, #8
 8000d42:	4848      	ldr	r0, [pc, #288]	; (8000e64 <MX_GPIO_Init+0x1e4>)
 8000d44:	f000 fe56 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	4846      	ldr	r0, [pc, #280]	; (8000e68 <MX_GPIO_Init+0x1e8>)
 8000d4e:	f000 fe51 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin
 8000d52:	2200      	movs	r2, #0
 8000d54:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000d58:	4844      	ldr	r0, [pc, #272]	; (8000e6c <MX_GPIO_Init+0x1ec>)
 8000d5a:	f000 fe4b 	bl	80019f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d5e:	2308      	movs	r3, #8
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	483b      	ldr	r0, [pc, #236]	; (8000e64 <MX_GPIO_Init+0x1e4>)
 8000d76:	f000 fca3 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4835      	ldr	r0, [pc, #212]	; (8000e68 <MX_GPIO_Init+0x1e8>)
 8000d92:	f000 fc95 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d96:	2308      	movs	r3, #8
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000da6:	2305      	movs	r3, #5
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	482d      	ldr	r0, [pc, #180]	; (8000e68 <MX_GPIO_Init+0x1e8>)
 8000db2:	f000 fc85 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000db6:	2301      	movs	r3, #1
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <MX_GPIO_Init+0x1f0>)
 8000dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	482a      	ldr	r0, [pc, #168]	; (8000e74 <MX_GPIO_Init+0x1f4>)
 8000dca:	f000 fc79 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	4825      	ldr	r0, [pc, #148]	; (8000e78 <MX_GPIO_Init+0x1f8>)
 8000de2:	f000 fc6d 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000df8:	2305      	movs	r3, #5
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	481d      	ldr	r0, [pc, #116]	; (8000e78 <MX_GPIO_Init+0x1f8>)
 8000e04:	f000 fc5c 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Green_Pin LED_Orange_Pin LED_Red_Pin LED_Blue_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin
 8000e08:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000e0c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4812      	ldr	r0, [pc, #72]	; (8000e6c <MX_GPIO_Init+0x1ec>)
 8000e22:	f000 fc4d 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e26:	2320      	movs	r3, #32
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <MX_GPIO_Init+0x1ec>)
 8000e3a:	f000 fc41 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_GPIO_Init+0x1f0>)
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <MX_GPIO_Init+0x1e4>)
 8000e52:	f000 fc35 	bl	80016c0 <HAL_GPIO_Init>

}
 8000e56:	bf00      	nop
 8000e58:	3730      	adds	r7, #48	; 0x30
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40020800 	.word	0x40020800
 8000e6c:	40020c00 	.word	0x40020c00
 8000e70:	10120000 	.word	0x10120000
 8000e74:	40020000 	.word	0x40020000
 8000e78:	40020400 	.word	0x40020400

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <Error_Handler+0x6>

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ec2:	2007      	movs	r0, #7
 8000ec4:	f000 fb98 	bl	80015f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a19      	ldr	r2, [pc, #100]	; (8000f58 <HAL_I2C_MspInit+0x84>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12c      	bne.n	8000f50 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f12:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f18:	2312      	movs	r3, #18
 8000f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f24:	2304      	movs	r3, #4
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480c      	ldr	r0, [pc, #48]	; (8000f60 <HAL_I2C_MspInit+0x8c>)
 8000f30:	f000 fbc6 	bl	80016c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f42:	6413      	str	r3, [r2, #64]	; 0x40
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40005400 	.word	0x40005400
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020400 	.word	0x40020400

08000f64 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a28      	ldr	r2, [pc, #160]	; (8001024 <HAL_I2S_MspInit+0xc0>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d14a      	bne.n	800101c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b27      	ldr	r3, [pc, #156]	; (8001028 <HAL_I2S_MspInit+0xc4>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a26      	ldr	r2, [pc, #152]	; (8001028 <HAL_I2S_MspInit+0xc4>)
 8000f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b24      	ldr	r3, [pc, #144]	; (8001028 <HAL_I2S_MspInit+0xc4>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b20      	ldr	r3, [pc, #128]	; (8001028 <HAL_I2S_MspInit+0xc4>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a1f      	ldr	r2, [pc, #124]	; (8001028 <HAL_I2S_MspInit+0xc4>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <HAL_I2S_MspInit+0xc4>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <HAL_I2S_MspInit+0xc4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a18      	ldr	r2, [pc, #96]	; (8001028 <HAL_I2S_MspInit+0xc4>)
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <HAL_I2S_MspInit+0xc4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000fda:	2310      	movs	r3, #16
 8000fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fea:	2306      	movs	r3, #6
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <HAL_I2S_MspInit+0xc8>)
 8000ff6:	f000 fb63 	bl	80016c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ffa:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800100c:	2306      	movs	r3, #6
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <HAL_I2S_MspInit+0xcc>)
 8001018:	f000 fb52 	bl	80016c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	; 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40003c00 	.word	0x40003c00
 8001028:	40023800 	.word	0x40023800
 800102c:	40020000 	.word	0x40020000
 8001030:	40020800 	.word	0x40020800

08001034 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a19      	ldr	r2, [pc, #100]	; (80010b8 <HAL_SPI_MspInit+0x84>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d12b      	bne.n	80010ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_SPI_MspInit+0x88>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_SPI_MspInit+0x88>)
 8001060:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_SPI_MspInit+0x88>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_SPI_MspInit+0x88>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <HAL_SPI_MspInit+0x88>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_SPI_MspInit+0x88>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800108e:	23e0      	movs	r3, #224	; 0xe0
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800109e:	2305      	movs	r3, #5
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <HAL_SPI_MspInit+0x8c>)
 80010aa:	f000 fb09 	bl	80016c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	; 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40013000 	.word	0x40013000
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020000 	.word	0x40020000

080010c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0e      	ldr	r2, [pc, #56]	; (800110c <HAL_TIM_Base_MspInit+0x48>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d115      	bne.n	8001102 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <HAL_TIM_Base_MspInit+0x4c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <HAL_TIM_Base_MspInit+0x4c>)
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_TIM_Base_MspInit+0x4c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2019      	movs	r0, #25
 80010f8:	f000 fa89 	bl	800160e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010fc:	2019      	movs	r0, #25
 80010fe:	f000 faa2 	bl	8001646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40014400 	.word	0x40014400
 8001110:	40023800 	.word	0x40023800

08001114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <HAL_UART_MspInit+0x94>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d133      	bne.n	800119e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_UART_MspInit+0x98>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <HAL_UART_MspInit+0x98>)
 8001140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <HAL_UART_MspInit+0x98>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_UART_MspInit+0x98>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <HAL_UART_MspInit+0x98>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_UART_MspInit+0x98>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800116e:	230c      	movs	r3, #12
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800117e:	2307      	movs	r3, #7
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4809      	ldr	r0, [pc, #36]	; (80011b0 <HAL_UART_MspInit+0x9c>)
 800118a:	f000 fa99 	bl	80016c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2026      	movs	r0, #38	; 0x26
 8001194:	f000 fa3b 	bl	800160e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001198:	2026      	movs	r0, #38	; 0x26
 800119a:	f000 fa54 	bl	8001646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800119e:	bf00      	nop
 80011a0:	3728      	adds	r7, #40	; 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40004400 	.word	0x40004400
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020000 	.word	0x40020000

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <NMI_Handler+0x4>

080011ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler+0x4>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001200:	f000 f8e8 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800120e:	f003 fd42 	bl	8004c96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000128 	.word	0x20000128

0800121c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <USART2_IRQHandler+0x10>)
 8001222:	f004 f805 	bl	8005230 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000258 	.word	0x20000258

08001230 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <OTG_FS_IRQHandler+0x10>)
 8001236:	f000 fea1 	bl	8001f7c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200006c8 	.word	0x200006c8

08001244 <_sbrk>:
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <_sbrk+0x5c>)
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <_sbrk+0x60>)
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <_sbrk+0x64>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <_sbrk+0x22>
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <_sbrk+0x64>)
 8001262:	4a12      	ldr	r2, [pc, #72]	; (80012ac <_sbrk+0x68>)
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	429a      	cmp	r2, r3
 8001272:	d207      	bcs.n	8001284 <_sbrk+0x40>
 8001274:	f007 fedc 	bl	8009030 <__errno>
 8001278:	4602      	mov	r2, r0
 800127a:	230c      	movs	r3, #12
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	e009      	b.n	8001298 <_sbrk+0x54>
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <_sbrk+0x64>)
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20020000 	.word	0x20020000
 80012a4:	00000400 	.word	0x00000400
 80012a8:	200000b4 	.word	0x200000b4
 80012ac:	20000990 	.word	0x20000990

080012b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <SystemInit+0x28>)
 80012b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ba:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <SystemInit+0x28>)
 80012bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SystemInit+0x28>)
 80012c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ca:	609a      	str	r2, [r3, #8]
#endif
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001314 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012e2:	e003      	b.n	80012ec <LoopCopyDataInit>

080012e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012ea:	3104      	adds	r1, #4

080012ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012ec:	480b      	ldr	r0, [pc, #44]	; (800131c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012f4:	d3f6      	bcc.n	80012e4 <CopyDataInit>
  ldr  r2, =_sbss
 80012f6:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012f8:	e002      	b.n	8001300 <LoopFillZerobss>

080012fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012fc:	f842 3b04 	str.w	r3, [r2], #4

08001300 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001302:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001304:	d3f9      	bcc.n	80012fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001306:	f7ff ffd3 	bl	80012b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130a:	f007 fe97 	bl	800903c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130e:	f7ff f955 	bl	80005bc <main>
  bx  lr    
 8001312:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001314:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001318:	08009aa8 	.word	0x08009aa8
  ldr  r0, =_sdata
 800131c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001320:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001324:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001328:	20000990 	.word	0x20000990

0800132c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC_IRQHandler>
	...

08001330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <HAL_Init+0x40>)
 800133a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <HAL_Init+0x40>)
 8001346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800134a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_Init+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <HAL_Init+0x40>)
 8001352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001356:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001358:	2003      	movs	r0, #3
 800135a:	f000 f94d 	bl	80015f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135e:	2000      	movs	r0, #0
 8001360:	f000 f808 	bl	8001374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001364:	f7ff fd8e 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023c00 	.word	0x40023c00

08001374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_InitTick+0x54>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_InitTick+0x58>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f965 	bl	8001662 <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e00e      	b.n	80013c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d80a      	bhi.n	80013be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f000 f92d 	bl	800160e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b4:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_InitTick+0x5c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000008 	.word	0x20000008
 80013d0:	20000004 	.word	0x20000004

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008
 80013f8:	200002ec 	.word	0x200002ec

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	200002ec 	.word	0x200002ec

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff ffee 	bl	80013fc <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_Delay+0x40>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffde 	bl	80013fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000008 	.word	0x20000008

08001458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001474:	4013      	ands	r3, r2
 8001476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148a:	4a04      	ldr	r2, [pc, #16]	; (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	60d3      	str	r3, [r2, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <__NVIC_GetPriorityGrouping+0x18>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	f003 0307 	and.w	r3, r3, #7
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	db0b      	blt.n	80014e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	f003 021f 	and.w	r2, r3, #31
 80014d4:	4907      	ldr	r1, [pc, #28]	; (80014f4 <__NVIC_EnableIRQ+0x38>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	2001      	movs	r0, #1
 80014de:	fa00 f202 	lsl.w	r2, r0, r2
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000e100 	.word	0xe000e100

080014f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db0a      	blt.n	8001522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	490c      	ldr	r1, [pc, #48]	; (8001544 <__NVIC_SetPriority+0x4c>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	0112      	lsls	r2, r2, #4
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	440b      	add	r3, r1
 800151c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001520:	e00a      	b.n	8001538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4908      	ldr	r1, [pc, #32]	; (8001548 <__NVIC_SetPriority+0x50>)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	3b04      	subs	r3, #4
 8001530:	0112      	lsls	r2, r2, #4
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	440b      	add	r3, r1
 8001536:	761a      	strb	r2, [r3, #24]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000e100 	.word	0xe000e100
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f1c3 0307 	rsb	r3, r3, #7
 8001566:	2b04      	cmp	r3, #4
 8001568:	bf28      	it	cs
 800156a:	2304      	movcs	r3, #4
 800156c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3304      	adds	r3, #4
 8001572:	2b06      	cmp	r3, #6
 8001574:	d902      	bls.n	800157c <NVIC_EncodePriority+0x30>
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3b03      	subs	r3, #3
 800157a:	e000      	b.n	800157e <NVIC_EncodePriority+0x32>
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	401a      	ands	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43d9      	mvns	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	4313      	orrs	r3, r2
         );
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3724      	adds	r7, #36	; 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c4:	d301      	bcc.n	80015ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00f      	b.n	80015ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <SysTick_Config+0x40>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d2:	210f      	movs	r1, #15
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f7ff ff8e 	bl	80014f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <SysTick_Config+0x40>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <SysTick_Config+0x40>)
 80015e4:	2207      	movs	r2, #7
 80015e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010

080015f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff29 	bl	8001458 <__NVIC_SetPriorityGrouping>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001620:	f7ff ff3e 	bl	80014a0 <__NVIC_GetPriorityGrouping>
 8001624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	6978      	ldr	r0, [r7, #20]
 800162c:	f7ff ff8e 	bl	800154c <NVIC_EncodePriority>
 8001630:	4602      	mov	r2, r0
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff5d 	bl	80014f8 <__NVIC_SetPriority>
}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff31 	bl	80014bc <__NVIC_EnableIRQ>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ffa2 	bl	80015b4 <SysTick_Config>
 8001670:	4603      	mov	r3, r0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d004      	beq.n	8001698 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2280      	movs	r2, #128	; 0x80
 8001692:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e00c      	b.n	80016b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2205      	movs	r2, #5
 800169c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0201 	bic.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	e16b      	b.n	80019b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	f040 815a 	bne.w	80019ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d00b      	beq.n	800171a <HAL_GPIO_Init+0x5a>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d007      	beq.n	800171a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800170e:	2b11      	cmp	r3, #17
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b12      	cmp	r3, #18
 8001718:	d130      	bne.n	800177c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	2203      	movs	r2, #3
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001750:	2201      	movs	r2, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	f003 0201 	and.w	r2, r3, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0xfc>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b12      	cmp	r3, #18
 80017ba:	d123      	bne.n	8001804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	08da      	lsrs	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3208      	adds	r2, #8
 80017c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	220f      	movs	r2, #15
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	08da      	lsrs	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3208      	adds	r2, #8
 80017fe:	69b9      	ldr	r1, [r7, #24]
 8001800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0203 	and.w	r2, r3, #3
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80b4 	beq.w	80019ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b5f      	ldr	r3, [pc, #380]	; (80019c8 <HAL_GPIO_Init+0x308>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a5e      	ldr	r2, [pc, #376]	; (80019c8 <HAL_GPIO_Init+0x308>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b5c      	ldr	r3, [pc, #368]	; (80019c8 <HAL_GPIO_Init+0x308>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001862:	4a5a      	ldr	r2, [pc, #360]	; (80019cc <HAL_GPIO_Init+0x30c>)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a51      	ldr	r2, [pc, #324]	; (80019d0 <HAL_GPIO_Init+0x310>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d02b      	beq.n	80018e6 <HAL_GPIO_Init+0x226>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a50      	ldr	r2, [pc, #320]	; (80019d4 <HAL_GPIO_Init+0x314>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d025      	beq.n	80018e2 <HAL_GPIO_Init+0x222>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4f      	ldr	r2, [pc, #316]	; (80019d8 <HAL_GPIO_Init+0x318>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d01f      	beq.n	80018de <HAL_GPIO_Init+0x21e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4e      	ldr	r2, [pc, #312]	; (80019dc <HAL_GPIO_Init+0x31c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d019      	beq.n	80018da <HAL_GPIO_Init+0x21a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a4d      	ldr	r2, [pc, #308]	; (80019e0 <HAL_GPIO_Init+0x320>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d013      	beq.n	80018d6 <HAL_GPIO_Init+0x216>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4c      	ldr	r2, [pc, #304]	; (80019e4 <HAL_GPIO_Init+0x324>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d00d      	beq.n	80018d2 <HAL_GPIO_Init+0x212>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4b      	ldr	r2, [pc, #300]	; (80019e8 <HAL_GPIO_Init+0x328>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d007      	beq.n	80018ce <HAL_GPIO_Init+0x20e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4a      	ldr	r2, [pc, #296]	; (80019ec <HAL_GPIO_Init+0x32c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_GPIO_Init+0x20a>
 80018c6:	2307      	movs	r3, #7
 80018c8:	e00e      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018ca:	2308      	movs	r3, #8
 80018cc:	e00c      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018ce:	2306      	movs	r3, #6
 80018d0:	e00a      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018d2:	2305      	movs	r3, #5
 80018d4:	e008      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018d6:	2304      	movs	r3, #4
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018da:	2303      	movs	r3, #3
 80018dc:	e004      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018de:	2302      	movs	r3, #2
 80018e0:	e002      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018e6:	2300      	movs	r3, #0
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	f002 0203 	and.w	r2, r2, #3
 80018ee:	0092      	lsls	r2, r2, #2
 80018f0:	4093      	lsls	r3, r2
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f8:	4934      	ldr	r1, [pc, #208]	; (80019cc <HAL_GPIO_Init+0x30c>)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001906:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <HAL_GPIO_Init+0x330>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800192a:	4a31      	ldr	r2, [pc, #196]	; (80019f0 <HAL_GPIO_Init+0x330>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001930:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <HAL_GPIO_Init+0x330>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001954:	4a26      	ldr	r2, [pc, #152]	; (80019f0 <HAL_GPIO_Init+0x330>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195a:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <HAL_GPIO_Init+0x330>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197e:	4a1c      	ldr	r2, [pc, #112]	; (80019f0 <HAL_GPIO_Init+0x330>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <HAL_GPIO_Init+0x330>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a8:	4a11      	ldr	r2, [pc, #68]	; (80019f0 <HAL_GPIO_Init+0x330>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3301      	adds	r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	2b0f      	cmp	r3, #15
 80019b8:	f67f ae90 	bls.w	80016dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019bc:	bf00      	nop
 80019be:	3724      	adds	r7, #36	; 0x24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40013800 	.word	0x40013800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020c00 	.word	0x40020c00
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40021400 	.word	0x40021400
 80019e8:	40021800 	.word	0x40021800
 80019ec:	40021c00 	.word	0x40021c00
 80019f0:	40013c00 	.word	0x40013c00

080019f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
 8001a00:	4613      	mov	r3, r2
 8001a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a04:	787b      	ldrb	r3, [r7, #1]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a10:	e003      	b.n	8001a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	041a      	lsls	r2, r3, #16
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	619a      	str	r2, [r3, #24]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695a      	ldr	r2, [r3, #20]
 8001a36:	887b      	ldrh	r3, [r7, #2]
 8001a38:	401a      	ands	r2, r3
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d104      	bne.n	8001a4a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	041a      	lsls	r2, r3, #16
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001a48:	e002      	b.n	8001a50 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	619a      	str	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	b08f      	sub	sp, #60	; 0x3c
 8001a60:	af0a      	add	r7, sp, #40	; 0x28
 8001a62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e054      	b.n	8001b18 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d106      	bne.n	8001a8e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f007 f827 	bl	8008adc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2203      	movs	r2, #3
 8001a92:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d102      	bne.n	8001aa8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f004 f9e3 	bl	8005e78 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	687e      	ldr	r6, [r7, #4]
 8001aba:	466d      	mov	r5, sp
 8001abc:	f106 0410 	add.w	r4, r6, #16
 8001ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001acc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ad0:	1d33      	adds	r3, r6, #4
 8001ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ad4:	6838      	ldr	r0, [r7, #0]
 8001ad6:	f004 f95d 	bl	8005d94 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2101      	movs	r1, #1
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f004 f9da 	bl	8005e9a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	687e      	ldr	r6, [r7, #4]
 8001aee:	466d      	mov	r5, sp
 8001af0:	f106 0410 	add.w	r4, r6, #16
 8001af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001afc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b00:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b04:	1d33      	adds	r3, r6, #4
 8001b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b08:	6838      	ldr	r0, [r7, #0]
 8001b0a:	f004 faed 	bl	80060e8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b20 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	af04      	add	r7, sp, #16
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	4608      	mov	r0, r1
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4603      	mov	r3, r0
 8001b30:	70fb      	strb	r3, [r7, #3]
 8001b32:	460b      	mov	r3, r1
 8001b34:	70bb      	strb	r3, [r7, #2]
 8001b36:	4613      	mov	r3, r2
 8001b38:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_HCD_HC_Init+0x28>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e07f      	b.n	8001c48 <HAL_HCD_HC_Init+0x128>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	333d      	adds	r3, #61	; 0x3d
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	3338      	adds	r3, #56	; 0x38
 8001b74:	787a      	ldrb	r2, [r7, #1]
 8001b76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	440b      	add	r3, r1
 8001b86:	3340      	adds	r3, #64	; 0x40
 8001b88:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b8a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	3339      	adds	r3, #57	; 0x39
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001ba0:	78fa      	ldrb	r2, [r7, #3]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	333f      	adds	r3, #63	; 0x3f
 8001bb0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001bb4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	78bb      	ldrb	r3, [r7, #2]
 8001bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bbe:	b2d8      	uxtb	r0, r3
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	333a      	adds	r3, #58	; 0x3a
 8001bce:	4602      	mov	r2, r0
 8001bd0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001bd2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	da0a      	bge.n	8001bf0 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001bda:	78fa      	ldrb	r2, [r7, #3]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	333b      	adds	r3, #59	; 0x3b
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
 8001bee:	e009      	b.n	8001c04 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	440b      	add	r3, r1
 8001bfe:	333b      	adds	r3, #59	; 0x3b
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001c04:	78fa      	ldrb	r2, [r7, #3]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	440b      	add	r3, r1
 8001c12:	333c      	adds	r3, #60	; 0x3c
 8001c14:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c18:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	787c      	ldrb	r4, [r7, #1]
 8001c20:	78ba      	ldrb	r2, [r7, #2]
 8001c22:	78f9      	ldrb	r1, [r7, #3]
 8001c24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c26:	9302      	str	r3, [sp, #8]
 8001c28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	4623      	mov	r3, r4
 8001c36:	f004 fbd9 	bl	80063ec <USB_HC_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd90      	pop	{r4, r7, pc}

08001c50 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_HCD_HC_Halt+0x1e>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e00f      	b.n	8001c8e <HAL_HCD_HC_Halt+0x3e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	78fa      	ldrb	r2, [r7, #3]
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f004 fe15 	bl	80068ae <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	4608      	mov	r0, r1
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	70fb      	strb	r3, [r7, #3]
 8001caa:	460b      	mov	r3, r1
 8001cac:	70bb      	strb	r3, [r7, #2]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001cb2:	78fa      	ldrb	r2, [r7, #3]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	440b      	add	r3, r1
 8001cc0:	333b      	adds	r3, #59	; 0x3b
 8001cc2:	78ba      	ldrb	r2, [r7, #2]
 8001cc4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001cc6:	78fa      	ldrb	r2, [r7, #3]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	333f      	adds	r3, #63	; 0x3f
 8001cd6:	787a      	ldrb	r2, [r7, #1]
 8001cd8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001cda:	7c3b      	ldrb	r3, [r7, #16]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d114      	bne.n	8001d0a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ce0:	78fa      	ldrb	r2, [r7, #3]
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	440b      	add	r3, r1
 8001cee:	3342      	adds	r3, #66	; 0x42
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	440b      	add	r3, r1
 8001d02:	333d      	adds	r3, #61	; 0x3d
 8001d04:	7f3a      	ldrb	r2, [r7, #28]
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	e009      	b.n	8001d1e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d0a:	78fa      	ldrb	r2, [r7, #3]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	440b      	add	r3, r1
 8001d18:	3342      	adds	r3, #66	; 0x42
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001d1e:	787b      	ldrb	r3, [r7, #1]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	f200 80d6 	bhi.w	8001ed2 <HAL_HCD_HC_SubmitRequest+0x23a>
 8001d26:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2c:	08001d3d 	.word	0x08001d3d
 8001d30:	08001ebd 	.word	0x08001ebd
 8001d34:	08001da9 	.word	0x08001da9
 8001d38:	08001e33 	.word	0x08001e33
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001d3c:	7c3b      	ldrb	r3, [r7, #16]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	f040 80c9 	bne.w	8001ed6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001d44:	78bb      	ldrb	r3, [r7, #2]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f040 80c5 	bne.w	8001ed6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001d4c:	8b3b      	ldrh	r3, [r7, #24]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d109      	bne.n	8001d66 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001d52:	78fa      	ldrb	r2, [r7, #3]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	440b      	add	r3, r1
 8001d60:	3351      	adds	r3, #81	; 0x51
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d66:	78fa      	ldrb	r2, [r7, #3]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	440b      	add	r3, r1
 8001d74:	3351      	adds	r3, #81	; 0x51
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10a      	bne.n	8001d92 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d7c:	78fa      	ldrb	r2, [r7, #3]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	440b      	add	r3, r1
 8001d8a:	3342      	adds	r3, #66	; 0x42
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d90:	e0a1      	b.n	8001ed6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d92:	78fa      	ldrb	r2, [r7, #3]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	440b      	add	r3, r1
 8001da0:	3342      	adds	r3, #66	; 0x42
 8001da2:	2202      	movs	r2, #2
 8001da4:	701a      	strb	r2, [r3, #0]
      break;
 8001da6:	e096      	b.n	8001ed6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001da8:	78bb      	ldrb	r3, [r7, #2]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d120      	bne.n	8001df0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001dae:	78fa      	ldrb	r2, [r7, #3]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	440b      	add	r3, r1
 8001dbc:	3351      	adds	r3, #81	; 0x51
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10a      	bne.n	8001dda <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dc4:	78fa      	ldrb	r2, [r7, #3]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3342      	adds	r3, #66	; 0x42
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001dd8:	e07e      	b.n	8001ed8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	440b      	add	r3, r1
 8001de8:	3342      	adds	r3, #66	; 0x42
 8001dea:	2202      	movs	r2, #2
 8001dec:	701a      	strb	r2, [r3, #0]
      break;
 8001dee:	e073      	b.n	8001ed8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3350      	adds	r3, #80	; 0x50
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10a      	bne.n	8001e1c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e06:	78fa      	ldrb	r2, [r7, #3]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	440b      	add	r3, r1
 8001e14:	3342      	adds	r3, #66	; 0x42
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
      break;
 8001e1a:	e05d      	b.n	8001ed8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	3342      	adds	r3, #66	; 0x42
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	701a      	strb	r2, [r3, #0]
      break;
 8001e30:	e052      	b.n	8001ed8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001e32:	78bb      	ldrb	r3, [r7, #2]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d120      	bne.n	8001e7a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e38:	78fa      	ldrb	r2, [r7, #3]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	3351      	adds	r3, #81	; 0x51
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10a      	bne.n	8001e64 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e4e:	78fa      	ldrb	r2, [r7, #3]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	3342      	adds	r3, #66	; 0x42
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e62:	e039      	b.n	8001ed8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e64:	78fa      	ldrb	r2, [r7, #3]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	440b      	add	r3, r1
 8001e72:	3342      	adds	r3, #66	; 0x42
 8001e74:	2202      	movs	r2, #2
 8001e76:	701a      	strb	r2, [r3, #0]
      break;
 8001e78:	e02e      	b.n	8001ed8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	3350      	adds	r3, #80	; 0x50
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10a      	bne.n	8001ea6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	3342      	adds	r3, #66	; 0x42
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
      break;
 8001ea4:	e018      	b.n	8001ed8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	3342      	adds	r3, #66	; 0x42
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	701a      	strb	r2, [r3, #0]
      break;
 8001eba:	e00d      	b.n	8001ed8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ebc:	78fa      	ldrb	r2, [r7, #3]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	440b      	add	r3, r1
 8001eca:	3342      	adds	r3, #66	; 0x42
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
      break;
 8001ed0:	e002      	b.n	8001ed8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001ed2:	bf00      	nop
 8001ed4:	e000      	b.n	8001ed8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001ed6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3344      	adds	r3, #68	; 0x44
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	8b39      	ldrh	r1, [r7, #24]
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4403      	add	r3, r0
 8001efc:	3348      	adds	r3, #72	; 0x48
 8001efe:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	440b      	add	r3, r1
 8001f0e:	335c      	adds	r3, #92	; 0x5c
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	440b      	add	r3, r1
 8001f22:	334c      	adds	r3, #76	; 0x4c
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	440b      	add	r3, r1
 8001f36:	3339      	adds	r3, #57	; 0x39
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	440b      	add	r3, r1
 8001f4a:	335d      	adds	r3, #93	; 0x5d
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	78fa      	ldrb	r2, [r7, #3]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	3338      	adds	r3, #56	; 0x38
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	18d1      	adds	r1, r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	f004 fb48 	bl	8006600 <USB_HC_StartXfer>
 8001f70:	4603      	mov	r3, r0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop

08001f7c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f004 f865 	bl	8006062 <USB_GetMode>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	f040 80ef 	bne.w	800217e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 f849 	bl	800603c <USB_ReadInterrupts>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80e5 	beq.w	800217c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f004 f840 	bl	800603c <USB_ReadInterrupts>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fc6:	d104      	bne.n	8001fd2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001fd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f004 f830 	bl	800603c <USB_ReadInterrupts>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fe6:	d104      	bne.n	8001ff2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ff0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f004 f820 	bl	800603c <USB_ReadInterrupts>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002002:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002006:	d104      	bne.n	8002012 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002010:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f004 f810 	bl	800603c <USB_ReadInterrupts>
 800201c:	4603      	mov	r3, r0
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b02      	cmp	r3, #2
 8002024:	d103      	bne.n	800202e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2202      	movs	r2, #2
 800202c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f004 f802 	bl	800603c <USB_ReadInterrupts>
 8002038:	4603      	mov	r3, r0
 800203a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800203e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002042:	d115      	bne.n	8002070 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800204c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d108      	bne.n	8002070 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f006 fdba 	bl	8008bd8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2101      	movs	r1, #1
 800206a:	4618      	mov	r0, r3
 800206c:	f004 f8f8 	bl	8006260 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f003 ffe1 	bl	800603c <USB_ReadInterrupts>
 800207a:	4603      	mov	r3, r0
 800207c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002084:	d102      	bne.n	800208c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f001 f966 	bl	8003358 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f003 ffd3 	bl	800603c <USB_ReadInterrupts>
 8002096:	4603      	mov	r3, r0
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b08      	cmp	r3, #8
 800209e:	d106      	bne.n	80020ae <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f006 fd7d 	bl	8008ba0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2208      	movs	r2, #8
 80020ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f003 ffc2 	bl	800603c <USB_ReadInterrupts>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020c2:	d138      	bne.n	8002136 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 fbdf 	bl	800688c <USB_HC_ReadInterrupt>
 80020ce:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	e025      	b.n	8002122 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	fa22 f303 	lsr.w	r3, r2, r3
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d018      	beq.n	800211c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002100:	d106      	bne.n	8002110 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	4619      	mov	r1, r3
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f8cf 	bl	80022ac <HCD_HC_IN_IRQHandler>
 800210e:	e005      	b.n	800211c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	4619      	mov	r1, r3
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fcfd 	bl	8002b16 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	429a      	cmp	r2, r3
 800212a:	d3d4      	bcc.n	80020d6 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f003 ff7e 	bl	800603c <USB_ReadInterrupts>
 8002140:	4603      	mov	r3, r0
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b10      	cmp	r3, #16
 8002148:	d101      	bne.n	800214e <HAL_HCD_IRQHandler+0x1d2>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_HCD_IRQHandler+0x1d4>
 800214e:	2300      	movs	r3, #0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d014      	beq.n	800217e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0210 	bic.w	r2, r2, #16
 8002162:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f001 f84b 	bl	8003200 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699a      	ldr	r2, [r3, #24]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0210 	orr.w	r2, r2, #16
 8002178:	619a      	str	r2, [r3, #24]
 800217a:	e000      	b.n	800217e <HAL_HCD_IRQHandler+0x202>
      return;
 800217c:	bf00      	nop
    }
  }
}
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_HCD_Start+0x16>
 8002196:	2302      	movs	r3, #2
 8002198:	e013      	b.n	80021c2 <HAL_HCD_Start+0x3e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f003 fe55 	bl	8005e56 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2101      	movs	r1, #1
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 f8b8 	bl	8006328 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_HCD_Stop+0x16>
 80021dc:	2302      	movs	r3, #2
 80021de:	e00d      	b.n	80021fc <HAL_HCD_Stop+0x32>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f004 fc99 	bl	8006b24 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f004 f85f 	bl	80062d4 <USB_ResetPort>
 8002216:	4603      	mov	r3, r0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	440b      	add	r3, r1
 800223a:	335c      	adds	r3, #92	; 0x5c
 800223c:	781b      	ldrb	r3, [r3, #0]
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	460b      	mov	r3, r1
 8002254:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	334c      	adds	r3, #76	; 0x4c
 8002266:	681b      	ldr	r3, [r3, #0]
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f004 f8a1 	bl	80063c8 <USB_GetCurrentFrame>
 8002286:	4603      	mov	r3, r0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f004 f87c 	bl	800639a <USB_GetHostSpeed>
 80022a2:	4603      	mov	r3, r0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d119      	bne.n	8002310 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e8:	461a      	mov	r2, r3
 80022ea:	2304      	movs	r3, #4
 80022ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	0151      	lsls	r1, r2, #5
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	440a      	add	r2, r1
 8002304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	60d3      	str	r3, [r2, #12]
 800230e:	e0ce      	b.n	80024ae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4413      	add	r3, r2
 8002318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002326:	d12c      	bne.n	8002382 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4413      	add	r3, r2
 8002330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002334:	461a      	mov	r2, r3
 8002336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800233a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	335d      	adds	r3, #93	; 0x5d
 800234c:	2207      	movs	r2, #7
 800234e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	0151      	lsls	r1, r2, #5
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	440a      	add	r2, r1
 8002366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800236a:	f043 0302 	orr.w	r3, r3, #2
 800236e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f004 fa97 	bl	80068ae <USB_HC_Halt>
 8002380:	e095      	b.n	80024ae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4413      	add	r3, r2
 800238a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0320 	and.w	r3, r3, #32
 8002394:	2b20      	cmp	r3, #32
 8002396:	d109      	bne.n	80023ac <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	461a      	mov	r2, r3
 80023a6:	2320      	movs	r3, #32
 80023a8:	6093      	str	r3, [r2, #8]
 80023aa:	e080      	b.n	80024ae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d134      	bne.n	800242c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	0151      	lsls	r1, r2, #5
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	440a      	add	r2, r1
 80023d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023dc:	f043 0302 	orr.w	r3, r3, #2
 80023e0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	440b      	add	r3, r1
 80023f0:	335d      	adds	r3, #93	; 0x5d
 80023f2:	2205      	movs	r2, #5
 80023f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002402:	461a      	mov	r2, r3
 8002404:	2310      	movs	r3, #16
 8002406:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	461a      	mov	r2, r3
 8002416:	2308      	movs	r3, #8
 8002418:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f004 fa42 	bl	80068ae <USB_HC_Halt>
 800242a:	e040      	b.n	80024ae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4413      	add	r3, r2
 8002434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002442:	d134      	bne.n	80024ae <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4413      	add	r3, r2
 800244c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	0151      	lsls	r1, r2, #5
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	440a      	add	r2, r1
 800245a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800245e:	f043 0302 	orr.w	r3, r3, #2
 8002462:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	4611      	mov	r1, r2
 800246e:	4618      	mov	r0, r3
 8002470:	f004 fa1d 	bl	80068ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4413      	add	r3, r2
 800247c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002480:	461a      	mov	r2, r3
 8002482:	2310      	movs	r3, #16
 8002484:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	440b      	add	r3, r1
 8002494:	335d      	adds	r3, #93	; 0x5d
 8002496:	2208      	movs	r2, #8
 8002498:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a6:	461a      	mov	r2, r3
 80024a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ac:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c4:	d122      	bne.n	800250c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	0151      	lsls	r1, r2, #5
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	440a      	add	r2, r1
 80024dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f004 f9dc 	bl	80068ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002502:	461a      	mov	r2, r3
 8002504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002508:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800250a:	e300      	b.n	8002b0e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4413      	add	r3, r2
 8002514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	f040 80fd 	bne.w	800271e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d01b      	beq.n	8002564 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	440b      	add	r3, r1
 800253a:	3348      	adds	r3, #72	; 0x48
 800253c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	0159      	lsls	r1, r3, #5
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	440b      	add	r3, r1
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002550:	1ad1      	subs	r1, r2, r3
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4403      	add	r3, r0
 8002560:	334c      	adds	r3, #76	; 0x4c
 8002562:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	335d      	adds	r3, #93	; 0x5d
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	3358      	adds	r3, #88	; 0x58
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	461a      	mov	r2, r3
 800259a:	2301      	movs	r3, #1
 800259c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	440b      	add	r3, r1
 80025ac:	333f      	adds	r3, #63	; 0x3f
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	333f      	adds	r3, #63	; 0x3f
 80025c4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d121      	bne.n	800260e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	0151      	lsls	r1, r2, #5
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	440a      	add	r2, r1
 80025e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f004 f95a 	bl	80068ae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002606:	461a      	mov	r2, r3
 8002608:	2310      	movs	r3, #16
 800260a:	6093      	str	r3, [r2, #8]
 800260c:	e070      	b.n	80026f0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	440b      	add	r3, r1
 800261c:	333f      	adds	r3, #63	; 0x3f
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d12a      	bne.n	800267a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4413      	add	r3, r2
 800262c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	0151      	lsls	r1, r2, #5
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	440a      	add	r2, r1
 800263a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800263e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002642:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	335c      	adds	r3, #92	; 0x5c
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	b2d8      	uxtb	r0, r3
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	335c      	adds	r3, #92	; 0x5c
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	4601      	mov	r1, r0
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f006 fabe 	bl	8008bf4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002678:	e03a      	b.n	80026f0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	440b      	add	r3, r1
 8002688:	333f      	adds	r3, #63	; 0x3f
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d12f      	bne.n	80026f0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	335c      	adds	r3, #92	; 0x5c
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	440b      	add	r3, r1
 80026b2:	3350      	adds	r3, #80	; 0x50
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	f083 0301 	eor.w	r3, r3, #1
 80026ba:	b2d8      	uxtb	r0, r3
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	3350      	adds	r3, #80	; 0x50
 80026cc:	4602      	mov	r2, r0
 80026ce:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	b2d8      	uxtb	r0, r3
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	440b      	add	r3, r1
 80026e2:	335c      	adds	r3, #92	; 0x5c
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	4601      	mov	r1, r0
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f006 fa82 	bl	8008bf4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	440b      	add	r3, r1
 80026fe:	3350      	adds	r3, #80	; 0x50
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	f083 0301 	eor.w	r3, r3, #1
 8002706:	b2d8      	uxtb	r0, r3
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	440b      	add	r3, r1
 8002716:	3350      	adds	r3, #80	; 0x50
 8002718:	4602      	mov	r2, r0
 800271a:	701a      	strb	r2, [r3, #0]
}
 800271c:	e1f7      	b.n	8002b0e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4413      	add	r3, r2
 8002726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	f040 811a 	bne.w	800296a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	0151      	lsls	r1, r2, #5
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	440a      	add	r2, r1
 800274c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002750:	f023 0302 	bic.w	r3, r3, #2
 8002754:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	440b      	add	r3, r1
 8002764:	335d      	adds	r3, #93	; 0x5d
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d10a      	bne.n	8002782 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	335c      	adds	r3, #92	; 0x5c
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]
 8002780:	e0d9      	b.n	8002936 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	440b      	add	r3, r1
 8002790:	335d      	adds	r3, #93	; 0x5d
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b05      	cmp	r3, #5
 8002796:	d10a      	bne.n	80027ae <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	440b      	add	r3, r1
 80027a6:	335c      	adds	r3, #92	; 0x5c
 80027a8:	2205      	movs	r2, #5
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	e0c3      	b.n	8002936 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	440b      	add	r3, r1
 80027bc:	335d      	adds	r3, #93	; 0x5d
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b06      	cmp	r3, #6
 80027c2:	d00a      	beq.n	80027da <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	335d      	adds	r3, #93	; 0x5d
 80027d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d156      	bne.n	8002888 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	440b      	add	r3, r1
 80027e8:	3358      	adds	r3, #88	; 0x58
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	1c59      	adds	r1, r3, #1
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4403      	add	r3, r0
 80027fc:	3358      	adds	r3, #88	; 0x58
 80027fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	440b      	add	r3, r1
 800280e:	3358      	adds	r3, #88	; 0x58
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d914      	bls.n	8002840 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	440b      	add	r3, r1
 8002824:	3358      	adds	r3, #88	; 0x58
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	335c      	adds	r3, #92	; 0x5c
 800283a:	2204      	movs	r2, #4
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	e009      	b.n	8002854 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	335c      	adds	r3, #92	; 0x5c
 8002850:	2202      	movs	r2, #2
 8002852:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800286a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002872:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	461a      	mov	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e056      	b.n	8002936 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	440b      	add	r3, r1
 8002896:	335d      	adds	r3, #93	; 0x5d
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d123      	bne.n	80028e6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	440b      	add	r3, r1
 80028ac:	335c      	adds	r3, #92	; 0x5c
 80028ae:	2202      	movs	r2, #2
 80028b0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028c8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028d0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028de:	461a      	mov	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	e027      	b.n	8002936 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	440b      	add	r3, r1
 80028f4:	335d      	adds	r3, #93	; 0x5d
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b07      	cmp	r3, #7
 80028fa:	d11c      	bne.n	8002936 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	440b      	add	r3, r1
 800290a:	3358      	adds	r3, #88	; 0x58
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	1c59      	adds	r1, r3, #1
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4403      	add	r3, r0
 800291e:	3358      	adds	r3, #88	; 0x58
 8002920:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	440b      	add	r3, r1
 8002930:	335c      	adds	r3, #92	; 0x5c
 8002932:	2204      	movs	r2, #4
 8002934:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4413      	add	r3, r2
 800293e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002942:	461a      	mov	r2, r3
 8002944:	2302      	movs	r3, #2
 8002946:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	b2d8      	uxtb	r0, r3
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	440b      	add	r3, r1
 800295a:	335c      	adds	r3, #92	; 0x5c
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	4601      	mov	r1, r0
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f006 f946 	bl	8008bf4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002968:	e0d1      	b.n	8002b0e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4413      	add	r3, r2
 8002972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297c:	2b80      	cmp	r3, #128	; 0x80
 800297e:	d13e      	bne.n	80029fe <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4413      	add	r3, r2
 8002988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	0151      	lsls	r1, r2, #5
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	440a      	add	r2, r1
 8002996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800299a:	f043 0302 	orr.w	r3, r3, #2
 800299e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	440b      	add	r3, r1
 80029ae:	3358      	adds	r3, #88	; 0x58
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	1c59      	adds	r1, r3, #1
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4403      	add	r3, r0
 80029c2:	3358      	adds	r3, #88	; 0x58
 80029c4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	335d      	adds	r3, #93	; 0x5d
 80029d6:	2206      	movs	r2, #6
 80029d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f003 ff62 	bl	80068ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f6:	461a      	mov	r2, r3
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	6093      	str	r3, [r2, #8]
}
 80029fc:	e087      	b.n	8002b0e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d17c      	bne.n	8002b0e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	440b      	add	r3, r1
 8002a22:	333f      	adds	r3, #63	; 0x3f
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d122      	bne.n	8002a70 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	440b      	add	r3, r1
 8002a38:	3358      	adds	r3, #88	; 0x58
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	0151      	lsls	r1, r2, #5
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	440a      	add	r2, r1
 8002a54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a58:	f043 0302 	orr.w	r3, r3, #2
 8002a5c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f003 ff20 	bl	80068ae <USB_HC_Halt>
 8002a6e:	e045      	b.n	8002afc <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	440b      	add	r3, r1
 8002a7e:	333f      	adds	r3, #63	; 0x3f
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	440b      	add	r3, r1
 8002a94:	333f      	adds	r3, #63	; 0x3f
 8002a96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d12f      	bne.n	8002afc <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3358      	adds	r3, #88	; 0x58
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d121      	bne.n	8002afc <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	335d      	adds	r3, #93	; 0x5d
 8002ac8:	2203      	movs	r2, #3
 8002aca:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	0151      	lsls	r1, r2, #5
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	440a      	add	r2, r1
 8002ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ae6:	f043 0302 	orr.w	r3, r3, #2
 8002aea:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	4611      	mov	r1, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f003 fed9 	bl	80068ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2310      	movs	r3, #16
 8002b0c:	6093      	str	r3, [r2, #8]
}
 8002b0e:	bf00      	nop
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d119      	bne.n	8002b7a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b52:	461a      	mov	r2, r3
 8002b54:	2304      	movs	r3, #4
 8002b56:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	0151      	lsls	r1, r2, #5
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	440a      	add	r2, r1
 8002b6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b72:	f043 0302 	orr.w	r3, r3, #2
 8002b76:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002b78:	e33e      	b.n	80031f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d141      	bne.n	8002c14 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	440b      	add	r3, r1
 8002bb0:	333d      	adds	r3, #61	; 0x3d
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	f040 831f 	bne.w	80031f8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	333d      	adds	r3, #61	; 0x3d
 8002bca:	2200      	movs	r2, #0
 8002bcc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	440b      	add	r3, r1
 8002bdc:	335c      	adds	r3, #92	; 0x5c
 8002bde:	2202      	movs	r2, #2
 8002be0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	0151      	lsls	r1, r2, #5
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	440a      	add	r2, r1
 8002bf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bfc:	f043 0302 	orr.w	r3, r3, #2
 8002c00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 fe4e 	bl	80068ae <USB_HC_Halt>
}
 8002c12:	e2f1      	b.n	80031f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	2b40      	cmp	r3, #64	; 0x40
 8002c28:	d13f      	bne.n	8002caa <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	335d      	adds	r3, #93	; 0x5d
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	440b      	add	r3, r1
 8002c4c:	333d      	adds	r3, #61	; 0x3d
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	440b      	add	r3, r1
 8002c60:	3358      	adds	r3, #88	; 0x58
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	0151      	lsls	r1, r2, #5
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	440a      	add	r2, r1
 8002c7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 fe0c 	bl	80068ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2340      	movs	r3, #64	; 0x40
 8002ca6:	6093      	str	r3, [r2, #8]
}
 8002ca8:	e2a6      	b.n	80031f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc0:	d122      	bne.n	8002d08 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	0151      	lsls	r1, r2, #5
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	440a      	add	r2, r1
 8002cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 fdde 	bl	80068ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d04:	6093      	str	r3, [r2, #8]
}
 8002d06:	e277      	b.n	80031f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d135      	bne.n	8002d8a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3358      	adds	r3, #88	; 0x58
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	0151      	lsls	r1, r2, #5
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	440a      	add	r2, r1
 8002d48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d4c:	f043 0302 	orr.w	r3, r3, #2
 8002d50:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f003 fda6 	bl	80068ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2301      	movs	r3, #1
 8002d72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	335d      	adds	r3, #93	; 0x5d
 8002d84:	2201      	movs	r2, #1
 8002d86:	701a      	strb	r2, [r3, #0]
}
 8002d88:	e236      	b.n	80031f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d12b      	bne.n	8002df8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dac:	461a      	mov	r2, r3
 8002dae:	2308      	movs	r3, #8
 8002db0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	0151      	lsls	r1, r2, #5
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	440a      	add	r2, r1
 8002dc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dcc:	f043 0302 	orr.w	r3, r3, #2
 8002dd0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f003 fd66 	bl	80068ae <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	440b      	add	r3, r1
 8002df0:	335d      	adds	r3, #93	; 0x5d
 8002df2:	2205      	movs	r2, #5
 8002df4:	701a      	strb	r2, [r3, #0]
}
 8002df6:	e1ff      	b.n	80031f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b10      	cmp	r3, #16
 8002e0c:	d155      	bne.n	8002eba <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	440b      	add	r3, r1
 8002e1c:	3358      	adds	r3, #88	; 0x58
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	440b      	add	r3, r1
 8002e30:	335d      	adds	r3, #93	; 0x5d
 8002e32:	2203      	movs	r2, #3
 8002e34:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	440b      	add	r3, r1
 8002e44:	333d      	adds	r3, #61	; 0x3d
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d114      	bne.n	8002e76 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	440b      	add	r3, r1
 8002e5a:	333c      	adds	r3, #60	; 0x3c
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	333d      	adds	r3, #61	; 0x3d
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	0151      	lsls	r1, r2, #5
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	440a      	add	r2, r1
 8002e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f003 fd04 	bl	80068ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	6093      	str	r3, [r2, #8]
}
 8002eb8:	e19e      	b.n	80031f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ecc:	2b80      	cmp	r3, #128	; 0x80
 8002ece:	d12b      	bne.n	8002f28 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	0151      	lsls	r1, r2, #5
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	440a      	add	r2, r1
 8002ee6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eea:	f043 0302 	orr.w	r3, r3, #2
 8002eee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f003 fcd7 	bl	80068ae <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	440b      	add	r3, r1
 8002f0e:	335d      	adds	r3, #93	; 0x5d
 8002f10:	2206      	movs	r2, #6
 8002f12:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f20:	461a      	mov	r2, r3
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	6093      	str	r3, [r2, #8]
}
 8002f26:	e167      	b.n	80031f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3e:	d135      	bne.n	8002fac <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	0151      	lsls	r1, r2, #5
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	440a      	add	r2, r1
 8002f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f5a:	f043 0302 	orr.w	r3, r3, #2
 8002f5e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f003 fc9f 	bl	80068ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2310      	movs	r3, #16
 8002f80:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f94:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	440b      	add	r3, r1
 8002fa4:	335d      	adds	r3, #93	; 0x5d
 8002fa6:	2208      	movs	r2, #8
 8002fa8:	701a      	strb	r2, [r3, #0]
}
 8002faa:	e125      	b.n	80031f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	f040 811a 	bne.w	80031f8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	0151      	lsls	r1, r2, #5
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	440a      	add	r2, r1
 8002fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fde:	f023 0302 	bic.w	r3, r3, #2
 8002fe2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	440b      	add	r3, r1
 8002ff2:	335d      	adds	r3, #93	; 0x5d
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d137      	bne.n	800306a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	440b      	add	r3, r1
 8003008:	335c      	adds	r3, #92	; 0x5c
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	440b      	add	r3, r1
 800301c:	333f      	adds	r3, #63	; 0x3f
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d00b      	beq.n	800303c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	333f      	adds	r3, #63	; 0x3f
 8003034:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003036:	2b03      	cmp	r3, #3
 8003038:	f040 80c5 	bne.w	80031c6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	440b      	add	r3, r1
 800304a:	3351      	adds	r3, #81	; 0x51
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	f083 0301 	eor.w	r3, r3, #1
 8003052:	b2d8      	uxtb	r0, r3
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	3351      	adds	r3, #81	; 0x51
 8003064:	4602      	mov	r2, r0
 8003066:	701a      	strb	r2, [r3, #0]
 8003068:	e0ad      	b.n	80031c6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	440b      	add	r3, r1
 8003078:	335d      	adds	r3, #93	; 0x5d
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d10a      	bne.n	8003096 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	335c      	adds	r3, #92	; 0x5c
 8003090:	2202      	movs	r2, #2
 8003092:	701a      	strb	r2, [r3, #0]
 8003094:	e097      	b.n	80031c6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	335d      	adds	r3, #93	; 0x5d
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d10a      	bne.n	80030c2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	335c      	adds	r3, #92	; 0x5c
 80030bc:	2202      	movs	r2, #2
 80030be:	701a      	strb	r2, [r3, #0]
 80030c0:	e081      	b.n	80031c6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	440b      	add	r3, r1
 80030d0:	335d      	adds	r3, #93	; 0x5d
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b05      	cmp	r3, #5
 80030d6:	d10a      	bne.n	80030ee <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	440b      	add	r3, r1
 80030e6:	335c      	adds	r3, #92	; 0x5c
 80030e8:	2205      	movs	r2, #5
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	e06b      	b.n	80031c6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	440b      	add	r3, r1
 80030fc:	335d      	adds	r3, #93	; 0x5d
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b06      	cmp	r3, #6
 8003102:	d00a      	beq.n	800311a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	440b      	add	r3, r1
 8003112:	335d      	adds	r3, #93	; 0x5d
 8003114:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003116:	2b08      	cmp	r3, #8
 8003118:	d155      	bne.n	80031c6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	440b      	add	r3, r1
 8003128:	3358      	adds	r3, #88	; 0x58
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	1c59      	adds	r1, r3, #1
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4403      	add	r3, r0
 800313c:	3358      	adds	r3, #88	; 0x58
 800313e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	440b      	add	r3, r1
 800314e:	3358      	adds	r3, #88	; 0x58
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d914      	bls.n	8003180 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	440b      	add	r3, r1
 8003164:	3358      	adds	r3, #88	; 0x58
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	440b      	add	r3, r1
 8003178:	335c      	adds	r3, #92	; 0x5c
 800317a:	2204      	movs	r2, #4
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	e009      	b.n	8003194 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	440b      	add	r3, r1
 800318e:	335c      	adds	r3, #92	; 0x5c
 8003190:	2202      	movs	r2, #2
 8003192:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4413      	add	r3, r2
 800319c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031aa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031b2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c0:	461a      	mov	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d2:	461a      	mov	r2, r3
 80031d4:	2302      	movs	r3, #2
 80031d6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	b2d8      	uxtb	r0, r3
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	440b      	add	r3, r1
 80031ea:	335c      	adds	r3, #92	; 0x5c
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	4601      	mov	r1, r0
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f005 fcfe 	bl	8008bf4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80031f8:	bf00      	nop
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08a      	sub	sp, #40	; 0x28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	0c5b      	lsrs	r3, r3, #17
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003234:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d003      	beq.n	8003244 <HCD_RXQLVL_IRQHandler+0x44>
 800323c:	2b05      	cmp	r3, #5
 800323e:	f000 8082 	beq.w	8003346 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003242:	e083      	b.n	800334c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d07f      	beq.n	800334a <HCD_RXQLVL_IRQHandler+0x14a>
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	440b      	add	r3, r1
 8003258:	3344      	adds	r3, #68	; 0x44
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d074      	beq.n	800334a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	440b      	add	r3, r1
 8003272:	3344      	adds	r3, #68	; 0x44
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	b292      	uxth	r2, r2
 800327a:	4619      	mov	r1, r3
 800327c:	f002 feb5 	bl	8005fea <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	440b      	add	r3, r1
 800328e:	3344      	adds	r3, #68	; 0x44
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	18d1      	adds	r1, r2, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4403      	add	r3, r0
 80032a4:	3344      	adds	r3, #68	; 0x44
 80032a6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	440b      	add	r3, r1
 80032b6:	334c      	adds	r3, #76	; 0x4c
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	18d1      	adds	r1, r2, r3
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4403      	add	r3, r0
 80032cc:	334c      	adds	r3, #76	; 0x4c
 80032ce:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HCD_RXQLVL_IRQHandler+0x154>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d031      	beq.n	800334a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032fc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003304:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003312:	461a      	mov	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	440b      	add	r3, r1
 8003326:	3350      	adds	r3, #80	; 0x50
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	f083 0301 	eor.w	r3, r3, #1
 800332e:	b2d8      	uxtb	r0, r3
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	440b      	add	r3, r1
 800333e:	3350      	adds	r3, #80	; 0x50
 8003340:	4602      	mov	r2, r0
 8003342:	701a      	strb	r2, [r3, #0]
      break;
 8003344:	e001      	b.n	800334a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003346:	bf00      	nop
 8003348:	e000      	b.n	800334c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800334a:	bf00      	nop
  }
}
 800334c:	bf00      	nop
 800334e:	3728      	adds	r7, #40	; 0x28
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	1ff80000 	.word	0x1ff80000

08003358 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003384:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b02      	cmp	r3, #2
 800338e:	d10b      	bne.n	80033a8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	d102      	bne.n	80033a0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f005 fc0e 	bl	8008bbc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f043 0302 	orr.w	r3, r3, #2
 80033a6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d132      	bne.n	8003418 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f043 0308 	orr.w	r3, r3, #8
 80033b8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d126      	bne.n	8003412 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d113      	bne.n	80033f4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80033d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033d6:	d106      	bne.n	80033e6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2102      	movs	r1, #2
 80033de:	4618      	mov	r0, r3
 80033e0:	f002 ff3e 	bl	8006260 <USB_InitFSLSPClkSel>
 80033e4:	e011      	b.n	800340a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2101      	movs	r1, #1
 80033ec:	4618      	mov	r0, r3
 80033ee:	f002 ff37 	bl	8006260 <USB_InitFSLSPClkSel>
 80033f2:	e00a      	b.n	800340a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d106      	bne.n	800340a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003402:	461a      	mov	r2, r3
 8003404:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003408:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f005 fc00 	bl	8008c10 <HAL_HCD_PortEnabled_Callback>
 8003410:	e002      	b.n	8003418 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f005 fc0a 	bl	8008c2c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b20      	cmp	r3, #32
 8003420:	d103      	bne.n	800342a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f043 0320 	orr.w	r3, r3, #32
 8003428:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003430:	461a      	mov	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	6013      	str	r3, [r2, #0]
}
 8003436:	bf00      	nop
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e11f      	b.n	8003692 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd fd34 	bl	8000ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	; 0x24
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034a4:	f001 f9de 	bl	8004864 <HAL_RCC_GetPCLK1Freq>
 80034a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4a7b      	ldr	r2, [pc, #492]	; (800369c <HAL_I2C_Init+0x25c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d807      	bhi.n	80034c4 <HAL_I2C_Init+0x84>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4a7a      	ldr	r2, [pc, #488]	; (80036a0 <HAL_I2C_Init+0x260>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	bf94      	ite	ls
 80034bc:	2301      	movls	r3, #1
 80034be:	2300      	movhi	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e006      	b.n	80034d2 <HAL_I2C_Init+0x92>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a77      	ldr	r2, [pc, #476]	; (80036a4 <HAL_I2C_Init+0x264>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	bf94      	ite	ls
 80034cc:	2301      	movls	r3, #1
 80034ce:	2300      	movhi	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0db      	b.n	8003692 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4a72      	ldr	r2, [pc, #456]	; (80036a8 <HAL_I2C_Init+0x268>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	0c9b      	lsrs	r3, r3, #18
 80034e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	4a64      	ldr	r2, [pc, #400]	; (800369c <HAL_I2C_Init+0x25c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d802      	bhi.n	8003514 <HAL_I2C_Init+0xd4>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	3301      	adds	r3, #1
 8003512:	e009      	b.n	8003528 <HAL_I2C_Init+0xe8>
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800351a:	fb02 f303 	mul.w	r3, r2, r3
 800351e:	4a63      	ldr	r2, [pc, #396]	; (80036ac <HAL_I2C_Init+0x26c>)
 8003520:	fba2 2303 	umull	r2, r3, r2, r3
 8003524:	099b      	lsrs	r3, r3, #6
 8003526:	3301      	adds	r3, #1
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	430b      	orrs	r3, r1
 800352e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800353a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	4956      	ldr	r1, [pc, #344]	; (800369c <HAL_I2C_Init+0x25c>)
 8003544:	428b      	cmp	r3, r1
 8003546:	d80d      	bhi.n	8003564 <HAL_I2C_Init+0x124>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	1e59      	subs	r1, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	fbb1 f3f3 	udiv	r3, r1, r3
 8003556:	3301      	adds	r3, #1
 8003558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800355c:	2b04      	cmp	r3, #4
 800355e:	bf38      	it	cc
 8003560:	2304      	movcc	r3, #4
 8003562:	e04f      	b.n	8003604 <HAL_I2C_Init+0x1c4>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d111      	bne.n	8003590 <HAL_I2C_Init+0x150>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1e58      	subs	r0, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6859      	ldr	r1, [r3, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	440b      	add	r3, r1
 800357a:	fbb0 f3f3 	udiv	r3, r0, r3
 800357e:	3301      	adds	r3, #1
 8003580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	e012      	b.n	80035b6 <HAL_I2C_Init+0x176>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1e58      	subs	r0, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6859      	ldr	r1, [r3, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	0099      	lsls	r1, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a6:	3301      	adds	r3, #1
 80035a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_I2C_Init+0x17e>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e022      	b.n	8003604 <HAL_I2C_Init+0x1c4>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10e      	bne.n	80035e4 <HAL_I2C_Init+0x1a4>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1e58      	subs	r0, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6859      	ldr	r1, [r3, #4]
 80035ce:	460b      	mov	r3, r1
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	440b      	add	r3, r1
 80035d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d8:	3301      	adds	r3, #1
 80035da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035e2:	e00f      	b.n	8003604 <HAL_I2C_Init+0x1c4>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1e58      	subs	r0, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	0099      	lsls	r1, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035fa:	3301      	adds	r3, #1
 80035fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	6809      	ldr	r1, [r1, #0]
 8003608:	4313      	orrs	r3, r2
 800360a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69da      	ldr	r2, [r3, #28]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003632:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6911      	ldr	r1, [r2, #16]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68d2      	ldr	r2, [r2, #12]
 800363e:	4311      	orrs	r1, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	430b      	orrs	r3, r1
 8003646:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	000186a0 	.word	0x000186a0
 80036a0:	001e847f 	.word	0x001e847f
 80036a4:	003d08ff 	.word	0x003d08ff
 80036a8:	431bde83 	.word	0x431bde83
 80036ac:	10624dd3 	.word	0x10624dd3

080036b0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e128      	b.n	8003914 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a90      	ldr	r2, [pc, #576]	; (800391c <HAL_I2S_Init+0x26c>)
 80036da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7fd fc41 	bl	8000f64 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036f8:	f023 030f 	bic.w	r3, r3, #15
 80036fc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2202      	movs	r2, #2
 8003704:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d060      	beq.n	80037d0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003716:	2310      	movs	r3, #16
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	e001      	b.n	8003720 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800371c:	2320      	movs	r3, #32
 800371e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b20      	cmp	r3, #32
 8003726:	d802      	bhi.n	800372e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800372e:	2001      	movs	r0, #1
 8003730:	f001 f9a2 	bl	8004a78 <HAL_RCCEx_GetPeriphCLKFreq>
 8003734:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800373e:	d125      	bne.n	800378c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d010      	beq.n	800376a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	461a      	mov	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	fbb2 f3f3 	udiv	r3, r2, r3
 8003764:	3305      	adds	r3, #5
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	e01f      	b.n	80037aa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	fbb2 f2f3 	udiv	r2, r2, r3
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	461a      	mov	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	fbb2 f3f3 	udiv	r3, r2, r3
 8003786:	3305      	adds	r3, #5
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	e00e      	b.n	80037aa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	fbb2 f2f3 	udiv	r2, r2, r3
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	461a      	mov	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a6:	3305      	adds	r3, #5
 80037a8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4a5c      	ldr	r2, [pc, #368]	; (8003920 <HAL_I2S_Init+0x270>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	08db      	lsrs	r3, r3, #3
 80037b4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	e003      	b.n	80037d8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80037d0:	2302      	movs	r3, #2
 80037d2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d902      	bls.n	80037e4 <HAL_I2S_Init+0x134>
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	2bff      	cmp	r3, #255	; 0xff
 80037e2:	d907      	bls.n	80037f4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e8:	f043 0210 	orr.w	r2, r3, #16
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e08f      	b.n	8003914 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	ea42 0103 	orr.w	r1, r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	430a      	orrs	r2, r1
 8003806:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003812:	f023 030f 	bic.w	r3, r3, #15
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6851      	ldr	r1, [r2, #4]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6892      	ldr	r2, [r2, #8]
 800381e:	4311      	orrs	r1, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	68d2      	ldr	r2, [r2, #12]
 8003824:	4311      	orrs	r1, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6992      	ldr	r2, [r2, #24]
 800382a:	430a      	orrs	r2, r1
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003836:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d161      	bne.n	8003904 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a38      	ldr	r2, [pc, #224]	; (8003924 <HAL_I2S_Init+0x274>)
 8003844:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a37      	ldr	r2, [pc, #220]	; (8003928 <HAL_I2S_Init+0x278>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d101      	bne.n	8003854 <HAL_I2S_Init+0x1a4>
 8003850:	4b36      	ldr	r3, [pc, #216]	; (800392c <HAL_I2S_Init+0x27c>)
 8003852:	e001      	b.n	8003858 <HAL_I2S_Init+0x1a8>
 8003854:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6812      	ldr	r2, [r2, #0]
 800385e:	4932      	ldr	r1, [pc, #200]	; (8003928 <HAL_I2S_Init+0x278>)
 8003860:	428a      	cmp	r2, r1
 8003862:	d101      	bne.n	8003868 <HAL_I2S_Init+0x1b8>
 8003864:	4a31      	ldr	r2, [pc, #196]	; (800392c <HAL_I2S_Init+0x27c>)
 8003866:	e001      	b.n	800386c <HAL_I2S_Init+0x1bc>
 8003868:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800386c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003870:	f023 030f 	bic.w	r3, r3, #15
 8003874:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a2b      	ldr	r2, [pc, #172]	; (8003928 <HAL_I2S_Init+0x278>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d101      	bne.n	8003884 <HAL_I2S_Init+0x1d4>
 8003880:	4b2a      	ldr	r3, [pc, #168]	; (800392c <HAL_I2S_Init+0x27c>)
 8003882:	e001      	b.n	8003888 <HAL_I2S_Init+0x1d8>
 8003884:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003888:	2202      	movs	r2, #2
 800388a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a25      	ldr	r2, [pc, #148]	; (8003928 <HAL_I2S_Init+0x278>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <HAL_I2S_Init+0x1ea>
 8003896:	4b25      	ldr	r3, [pc, #148]	; (800392c <HAL_I2S_Init+0x27c>)
 8003898:	e001      	b.n	800389e <HAL_I2S_Init+0x1ee>
 800389a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038aa:	d003      	beq.n	80038b4 <HAL_I2S_Init+0x204>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d103      	bne.n	80038bc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80038b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	e001      	b.n	80038c0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80038bc:	2300      	movs	r3, #0
 80038be:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	b299      	uxth	r1, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80038d6:	4303      	orrs	r3, r0
 80038d8:	b29b      	uxth	r3, r3
 80038da:	430b      	orrs	r3, r1
 80038dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80038de:	4313      	orrs	r3, r2
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	897b      	ldrh	r3, [r7, #10]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038ec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a0d      	ldr	r2, [pc, #52]	; (8003928 <HAL_I2S_Init+0x278>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d101      	bne.n	80038fc <HAL_I2S_Init+0x24c>
 80038f8:	4b0c      	ldr	r3, [pc, #48]	; (800392c <HAL_I2S_Init+0x27c>)
 80038fa:	e001      	b.n	8003900 <HAL_I2S_Init+0x250>
 80038fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003900:	897a      	ldrh	r2, [r7, #10]
 8003902:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3720      	adds	r7, #32
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	08003a27 	.word	0x08003a27
 8003920:	cccccccd 	.word	0xcccccccd
 8003924:	08003b3d 	.word	0x08003b3d
 8003928:	40003800 	.word	0x40003800
 800392c:	40003400 	.word	0x40003400

08003930 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	881a      	ldrh	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	1c9a      	adds	r2, r3, #2
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10e      	bne.n	80039c0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039b0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ffb8 	bl	8003930 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	b292      	uxth	r2, r2
 80039dc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	1c9a      	adds	r2, r3, #2
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10e      	bne.n	8003a1e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a0e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff ff93 	bl	8003944 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b086      	sub	sp, #24
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d13a      	bne.n	8003ab8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d109      	bne.n	8003a60 <I2S_IRQHandler+0x3a>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a56:	2b40      	cmp	r3, #64	; 0x40
 8003a58:	d102      	bne.n	8003a60 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff ffb4 	bl	80039c8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a66:	2b40      	cmp	r3, #64	; 0x40
 8003a68:	d126      	bne.n	8003ab8 <I2S_IRQHandler+0x92>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d11f      	bne.n	8003ab8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a86:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f043 0202 	orr.w	r2, r3, #2
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff ff50 	bl	8003958 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d136      	bne.n	8003b32 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d109      	bne.n	8003ae2 <I2S_IRQHandler+0xbc>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad8:	2b80      	cmp	r3, #128	; 0x80
 8003ada:	d102      	bne.n	8003ae2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff ff45 	bl	800396c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d122      	bne.n	8003b32 <I2S_IRQHandler+0x10c>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	d11b      	bne.n	8003b32 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b08:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	f043 0204 	orr.w	r2, r3, #4
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff ff13 	bl	8003958 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b32:	bf00      	nop
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4aa2      	ldr	r2, [pc, #648]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d101      	bne.n	8003b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b56:	4ba2      	ldr	r3, [pc, #648]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b58:	e001      	b.n	8003b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a9b      	ldr	r2, [pc, #620]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d101      	bne.n	8003b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003b74:	4b9a      	ldr	r3, [pc, #616]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b76:	e001      	b.n	8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003b78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b88:	d004      	beq.n	8003b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f040 8099 	bne.w	8003cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d107      	bne.n	8003bae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f925 	bl	8003df8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d107      	bne.n	8003bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f9c8 	bl	8003f58 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d13a      	bne.n	8003c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d035      	beq.n	8003c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a7e      	ldr	r2, [pc, #504]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d101      	bne.n	8003bea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003be6:	4b7e      	ldr	r3, [pc, #504]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003be8:	e001      	b.n	8003bee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003bea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4979      	ldr	r1, [pc, #484]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bf6:	428b      	cmp	r3, r1
 8003bf8:	d101      	bne.n	8003bfe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003bfa:	4b79      	ldr	r3, [pc, #484]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bfc:	e001      	b.n	8003c02 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003bfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c06:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c16:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	f043 0202 	orr.w	r2, r3, #2
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff fe88 	bl	8003958 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	f040 80be 	bne.w	8003dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 80b8 	beq.w	8003dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c6e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a59      	ldr	r2, [pc, #356]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d101      	bne.n	8003c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003c7a:	4b59      	ldr	r3, [pc, #356]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c7c:	e001      	b.n	8003c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003c7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4954      	ldr	r1, [pc, #336]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c8a:	428b      	cmp	r3, r1
 8003c8c:	d101      	bne.n	8003c92 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003c8e:	4b54      	ldr	r3, [pc, #336]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c90:	e001      	b.n	8003c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003c92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c9a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	f043 0204 	orr.w	r2, r3, #4
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff fe4a 	bl	8003958 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cc4:	e084      	b.n	8003dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d107      	bne.n	8003ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f8be 	bl	8003e5c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d107      	bne.n	8003cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f8fd 	bl	8003ef4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d12f      	bne.n	8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d02a      	beq.n	8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d1c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2e      	ldr	r2, [pc, #184]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d101      	bne.n	8003d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003d28:	4b2d      	ldr	r3, [pc, #180]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d2a:	e001      	b.n	8003d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003d2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4929      	ldr	r1, [pc, #164]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d38:	428b      	cmp	r3, r1
 8003d3a:	d101      	bne.n	8003d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d3c:	4b28      	ldr	r3, [pc, #160]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d3e:	e001      	b.n	8003d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d48:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	f043 0202 	orr.w	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff fdfa 	bl	8003958 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d131      	bne.n	8003dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d02c      	beq.n	8003dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a17      	ldr	r2, [pc, #92]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d101      	bne.n	8003d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003d82:	4b17      	ldr	r3, [pc, #92]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d84:	e001      	b.n	8003d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003d86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4912      	ldr	r1, [pc, #72]	; (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d92:	428b      	cmp	r3, r1
 8003d94:	d101      	bne.n	8003d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d98:	e001      	b.n	8003d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003d9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003da2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003db2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc0:	f043 0204 	orr.w	r2, r3, #4
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff fdc5 	bl	8003958 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dce:	e000      	b.n	8003dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003dd0:	bf00      	nop
}
 8003dd2:	bf00      	nop
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40003800 	.word	0x40003800
 8003de0:	40003400 	.word	0x40003400

08003de4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	1c99      	adds	r1, r3, #2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6251      	str	r1, [r2, #36]	; 0x24
 8003e0a:	881a      	ldrh	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d113      	bne.n	8003e52 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e38:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ffc9 	bl	8003de4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	1c99      	adds	r1, r3, #2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6251      	str	r1, [r2, #36]	; 0x24
 8003e6e:	8819      	ldrh	r1, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1d      	ldr	r2, [pc, #116]	; (8003eec <I2SEx_TxISR_I2SExt+0x90>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <I2SEx_TxISR_I2SExt+0x22>
 8003e7a:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <I2SEx_TxISR_I2SExt+0x94>)
 8003e7c:	e001      	b.n	8003e82 <I2SEx_TxISR_I2SExt+0x26>
 8003e7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e82:	460a      	mov	r2, r1
 8003e84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d121      	bne.n	8003ee2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a12      	ldr	r2, [pc, #72]	; (8003eec <I2SEx_TxISR_I2SExt+0x90>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d101      	bne.n	8003eac <I2SEx_TxISR_I2SExt+0x50>
 8003ea8:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <I2SEx_TxISR_I2SExt+0x94>)
 8003eaa:	e001      	b.n	8003eb0 <I2SEx_TxISR_I2SExt+0x54>
 8003eac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	490d      	ldr	r1, [pc, #52]	; (8003eec <I2SEx_TxISR_I2SExt+0x90>)
 8003eb8:	428b      	cmp	r3, r1
 8003eba:	d101      	bne.n	8003ec0 <I2SEx_TxISR_I2SExt+0x64>
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <I2SEx_TxISR_I2SExt+0x94>)
 8003ebe:	e001      	b.n	8003ec4 <I2SEx_TxISR_I2SExt+0x68>
 8003ec0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ec8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d106      	bne.n	8003ee2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff ff81 	bl	8003de4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40003800 	.word	0x40003800
 8003ef0:	40003400 	.word	0x40003400

08003ef4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68d8      	ldr	r0, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	1c99      	adds	r1, r3, #2
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f0c:	b282      	uxth	r2, r0
 8003f0e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d113      	bne.n	8003f50 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f36:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff ff4a 	bl	8003de4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a20      	ldr	r2, [pc, #128]	; (8003fe8 <I2SEx_RxISR_I2SExt+0x90>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d101      	bne.n	8003f6e <I2SEx_RxISR_I2SExt+0x16>
 8003f6a:	4b20      	ldr	r3, [pc, #128]	; (8003fec <I2SEx_RxISR_I2SExt+0x94>)
 8003f6c:	e001      	b.n	8003f72 <I2SEx_RxISR_I2SExt+0x1a>
 8003f6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f72:	68d8      	ldr	r0, [r3, #12]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	1c99      	adds	r1, r3, #2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f7e:	b282      	uxth	r2, r0
 8003f80:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d121      	bne.n	8003fde <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a12      	ldr	r2, [pc, #72]	; (8003fe8 <I2SEx_RxISR_I2SExt+0x90>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d101      	bne.n	8003fa8 <I2SEx_RxISR_I2SExt+0x50>
 8003fa4:	4b11      	ldr	r3, [pc, #68]	; (8003fec <I2SEx_RxISR_I2SExt+0x94>)
 8003fa6:	e001      	b.n	8003fac <I2SEx_RxISR_I2SExt+0x54>
 8003fa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	490d      	ldr	r1, [pc, #52]	; (8003fe8 <I2SEx_RxISR_I2SExt+0x90>)
 8003fb4:	428b      	cmp	r3, r1
 8003fb6:	d101      	bne.n	8003fbc <I2SEx_RxISR_I2SExt+0x64>
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <I2SEx_RxISR_I2SExt+0x94>)
 8003fba:	e001      	b.n	8003fc0 <I2SEx_RxISR_I2SExt+0x68>
 8003fbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fc0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fc4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff ff03 	bl	8003de4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40003800 	.word	0x40003800
 8003fec:	40003400 	.word	0x40003400

08003ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e25b      	b.n	80044ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d075      	beq.n	80040fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800400e:	4ba3      	ldr	r3, [pc, #652]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	2b04      	cmp	r3, #4
 8004018:	d00c      	beq.n	8004034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800401a:	4ba0      	ldr	r3, [pc, #640]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004022:	2b08      	cmp	r3, #8
 8004024:	d112      	bne.n	800404c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004026:	4b9d      	ldr	r3, [pc, #628]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004032:	d10b      	bne.n	800404c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004034:	4b99      	ldr	r3, [pc, #612]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d05b      	beq.n	80040f8 <HAL_RCC_OscConfig+0x108>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d157      	bne.n	80040f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e236      	b.n	80044ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004054:	d106      	bne.n	8004064 <HAL_RCC_OscConfig+0x74>
 8004056:	4b91      	ldr	r3, [pc, #580]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a90      	ldr	r2, [pc, #576]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800405c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e01d      	b.n	80040a0 <HAL_RCC_OscConfig+0xb0>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800406c:	d10c      	bne.n	8004088 <HAL_RCC_OscConfig+0x98>
 800406e:	4b8b      	ldr	r3, [pc, #556]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a8a      	ldr	r2, [pc, #552]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	4b88      	ldr	r3, [pc, #544]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a87      	ldr	r2, [pc, #540]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e00b      	b.n	80040a0 <HAL_RCC_OscConfig+0xb0>
 8004088:	4b84      	ldr	r3, [pc, #528]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a83      	ldr	r2, [pc, #524]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800408e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	4b81      	ldr	r3, [pc, #516]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a80      	ldr	r2, [pc, #512]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800409a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d013      	beq.n	80040d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fd f9a8 	bl	80013fc <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b0:	f7fd f9a4 	bl	80013fc <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	; 0x64
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e1fb      	b.n	80044ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c2:	4b76      	ldr	r3, [pc, #472]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0xc0>
 80040ce:	e014      	b.n	80040fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7fd f994 	bl	80013fc <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d8:	f7fd f990 	bl	80013fc <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	; 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e1e7      	b.n	80044ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ea:	4b6c      	ldr	r3, [pc, #432]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0xe8>
 80040f6:	e000      	b.n	80040fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d063      	beq.n	80041ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004106:	4b65      	ldr	r3, [pc, #404]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00b      	beq.n	800412a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004112:	4b62      	ldr	r3, [pc, #392]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800411a:	2b08      	cmp	r3, #8
 800411c:	d11c      	bne.n	8004158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411e:	4b5f      	ldr	r3, [pc, #380]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d116      	bne.n	8004158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412a:	4b5c      	ldr	r3, [pc, #368]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_RCC_OscConfig+0x152>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d001      	beq.n	8004142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e1bb      	b.n	80044ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004142:	4b56      	ldr	r3, [pc, #344]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4952      	ldr	r1, [pc, #328]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004152:	4313      	orrs	r3, r2
 8004154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004156:	e03a      	b.n	80041ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d020      	beq.n	80041a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004160:	4b4f      	ldr	r3, [pc, #316]	; (80042a0 <HAL_RCC_OscConfig+0x2b0>)
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004166:	f7fd f949 	bl	80013fc <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800416e:	f7fd f945 	bl	80013fc <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e19c      	b.n	80044ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004180:	4b46      	ldr	r3, [pc, #280]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f0      	beq.n	800416e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418c:	4b43      	ldr	r3, [pc, #268]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4940      	ldr	r1, [pc, #256]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800419c:	4313      	orrs	r3, r2
 800419e:	600b      	str	r3, [r1, #0]
 80041a0:	e015      	b.n	80041ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041a2:	4b3f      	ldr	r3, [pc, #252]	; (80042a0 <HAL_RCC_OscConfig+0x2b0>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fd f928 	bl	80013fc <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041b0:	f7fd f924 	bl	80013fc <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e17b      	b.n	80044ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c2:	4b36      	ldr	r3, [pc, #216]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d030      	beq.n	800423c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d016      	beq.n	8004210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041e2:	4b30      	ldr	r3, [pc, #192]	; (80042a4 <HAL_RCC_OscConfig+0x2b4>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e8:	f7fd f908 	bl	80013fc <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041f0:	f7fd f904 	bl	80013fc <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e15b      	b.n	80044ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004202:	4b26      	ldr	r3, [pc, #152]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCC_OscConfig+0x200>
 800420e:	e015      	b.n	800423c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004210:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <HAL_RCC_OscConfig+0x2b4>)
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004216:	f7fd f8f1 	bl	80013fc <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800421e:	f7fd f8ed 	bl	80013fc <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e144      	b.n	80044ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004230:	4b1a      	ldr	r3, [pc, #104]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f0      	bne.n	800421e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80a0 	beq.w	800438a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800424a:	2300      	movs	r3, #0
 800424c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800424e:	4b13      	ldr	r3, [pc, #76]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10f      	bne.n	800427a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800425a:	2300      	movs	r3, #0
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	4b0f      	ldr	r3, [pc, #60]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	4a0e      	ldr	r2, [pc, #56]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004268:	6413      	str	r3, [r2, #64]	; 0x40
 800426a:	4b0c      	ldr	r3, [pc, #48]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004276:	2301      	movs	r3, #1
 8004278:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427a:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_RCC_OscConfig+0x2b8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004282:	2b00      	cmp	r3, #0
 8004284:	d121      	bne.n	80042ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004286:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <HAL_RCC_OscConfig+0x2b8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <HAL_RCC_OscConfig+0x2b8>)
 800428c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004292:	f7fd f8b3 	bl	80013fc <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004298:	e011      	b.n	80042be <HAL_RCC_OscConfig+0x2ce>
 800429a:	bf00      	nop
 800429c:	40023800 	.word	0x40023800
 80042a0:	42470000 	.word	0x42470000
 80042a4:	42470e80 	.word	0x42470e80
 80042a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ac:	f7fd f8a6 	bl	80013fc <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e0fd      	b.n	80044ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042be:	4b81      	ldr	r3, [pc, #516]	; (80044c4 <HAL_RCC_OscConfig+0x4d4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d106      	bne.n	80042e0 <HAL_RCC_OscConfig+0x2f0>
 80042d2:	4b7d      	ldr	r3, [pc, #500]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	4a7c      	ldr	r2, [pc, #496]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	6713      	str	r3, [r2, #112]	; 0x70
 80042de:	e01c      	b.n	800431a <HAL_RCC_OscConfig+0x32a>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b05      	cmp	r3, #5
 80042e6:	d10c      	bne.n	8004302 <HAL_RCC_OscConfig+0x312>
 80042e8:	4b77      	ldr	r3, [pc, #476]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	4a76      	ldr	r2, [pc, #472]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 80042ee:	f043 0304 	orr.w	r3, r3, #4
 80042f2:	6713      	str	r3, [r2, #112]	; 0x70
 80042f4:	4b74      	ldr	r3, [pc, #464]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f8:	4a73      	ldr	r2, [pc, #460]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004300:	e00b      	b.n	800431a <HAL_RCC_OscConfig+0x32a>
 8004302:	4b71      	ldr	r3, [pc, #452]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	4a70      	ldr	r2, [pc, #448]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	6713      	str	r3, [r2, #112]	; 0x70
 800430e:	4b6e      	ldr	r3, [pc, #440]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	4a6d      	ldr	r2, [pc, #436]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 8004314:	f023 0304 	bic.w	r3, r3, #4
 8004318:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d015      	beq.n	800434e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004322:	f7fd f86b 	bl	80013fc <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004328:	e00a      	b.n	8004340 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800432a:	f7fd f867 	bl	80013fc <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f241 3288 	movw	r2, #5000	; 0x1388
 8004338:	4293      	cmp	r3, r2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e0bc      	b.n	80044ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004340:	4b61      	ldr	r3, [pc, #388]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0ee      	beq.n	800432a <HAL_RCC_OscConfig+0x33a>
 800434c:	e014      	b.n	8004378 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800434e:	f7fd f855 	bl	80013fc <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004354:	e00a      	b.n	800436c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7fd f851 	bl	80013fc <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	f241 3288 	movw	r2, #5000	; 0x1388
 8004364:	4293      	cmp	r3, r2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e0a6      	b.n	80044ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800436c:	4b56      	ldr	r3, [pc, #344]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1ee      	bne.n	8004356 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004378:	7dfb      	ldrb	r3, [r7, #23]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d105      	bne.n	800438a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800437e:	4b52      	ldr	r3, [pc, #328]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	4a51      	ldr	r2, [pc, #324]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 8004384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004388:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8092 	beq.w	80044b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004394:	4b4c      	ldr	r3, [pc, #304]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 030c 	and.w	r3, r3, #12
 800439c:	2b08      	cmp	r3, #8
 800439e:	d05c      	beq.n	800445a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d141      	bne.n	800442c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a8:	4b48      	ldr	r3, [pc, #288]	; (80044cc <HAL_RCC_OscConfig+0x4dc>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ae:	f7fd f825 	bl	80013fc <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b6:	f7fd f821 	bl	80013fc <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e078      	b.n	80044ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c8:	4b3f      	ldr	r3, [pc, #252]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f0      	bne.n	80043b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69da      	ldr	r2, [r3, #28]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	019b      	lsls	r3, r3, #6
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	085b      	lsrs	r3, r3, #1
 80043ec:	3b01      	subs	r3, #1
 80043ee:	041b      	lsls	r3, r3, #16
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	061b      	lsls	r3, r3, #24
 80043f8:	4933      	ldr	r1, [pc, #204]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043fe:	4b33      	ldr	r3, [pc, #204]	; (80044cc <HAL_RCC_OscConfig+0x4dc>)
 8004400:	2201      	movs	r2, #1
 8004402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004404:	f7fc fffa 	bl	80013fc <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800440c:	f7fc fff6 	bl	80013fc <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e04d      	b.n	80044ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441e:	4b2a      	ldr	r3, [pc, #168]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0x41c>
 800442a:	e045      	b.n	80044b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442c:	4b27      	ldr	r3, [pc, #156]	; (80044cc <HAL_RCC_OscConfig+0x4dc>)
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004432:	f7fc ffe3 	bl	80013fc <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443a:	f7fc ffdf 	bl	80013fc <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e036      	b.n	80044ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444c:	4b1e      	ldr	r3, [pc, #120]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1f0      	bne.n	800443a <HAL_RCC_OscConfig+0x44a>
 8004458:	e02e      	b.n	80044b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e029      	b.n	80044ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004466:	4b18      	ldr	r3, [pc, #96]	; (80044c8 <HAL_RCC_OscConfig+0x4d8>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	429a      	cmp	r2, r3
 8004478:	d11c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	d115      	bne.n	80044b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800448e:	4013      	ands	r3, r2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004494:	4293      	cmp	r3, r2
 8004496:	d10d      	bne.n	80044b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d106      	bne.n	80044b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40007000 	.word	0x40007000
 80044c8:	40023800 	.word	0x40023800
 80044cc:	42470060 	.word	0x42470060

080044d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0cc      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044e4:	4b68      	ldr	r3, [pc, #416]	; (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d90c      	bls.n	800450c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f2:	4b65      	ldr	r3, [pc, #404]	; (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fa:	4b63      	ldr	r3, [pc, #396]	; (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d001      	beq.n	800450c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0b8      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d020      	beq.n	800455a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004524:	4b59      	ldr	r3, [pc, #356]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	4a58      	ldr	r2, [pc, #352]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800452e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800453c:	4b53      	ldr	r3, [pc, #332]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4a52      	ldr	r2, [pc, #328]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004548:	4b50      	ldr	r3, [pc, #320]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	494d      	ldr	r1, [pc, #308]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	4313      	orrs	r3, r2
 8004558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d044      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d107      	bne.n	800457e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456e:	4b47      	ldr	r3, [pc, #284]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d119      	bne.n	80045ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e07f      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d003      	beq.n	800458e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800458a:	2b03      	cmp	r3, #3
 800458c:	d107      	bne.n	800459e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800458e:	4b3f      	ldr	r3, [pc, #252]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d109      	bne.n	80045ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e06f      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459e:	4b3b      	ldr	r3, [pc, #236]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e067      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ae:	4b37      	ldr	r3, [pc, #220]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f023 0203 	bic.w	r2, r3, #3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	4934      	ldr	r1, [pc, #208]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045c0:	f7fc ff1c 	bl	80013fc <HAL_GetTick>
 80045c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c6:	e00a      	b.n	80045de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c8:	f7fc ff18 	bl	80013fc <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e04f      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045de:	4b2b      	ldr	r3, [pc, #172]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 020c 	and.w	r2, r3, #12
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d1eb      	bne.n	80045c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045f0:	4b25      	ldr	r3, [pc, #148]	; (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d20c      	bcs.n	8004618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fe:	4b22      	ldr	r3, [pc, #136]	; (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004606:	4b20      	ldr	r3, [pc, #128]	; (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d001      	beq.n	8004618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e032      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004624:	4b19      	ldr	r3, [pc, #100]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4916      	ldr	r1, [pc, #88]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	4313      	orrs	r3, r2
 8004634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d009      	beq.n	8004656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004642:	4b12      	ldr	r3, [pc, #72]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	490e      	ldr	r1, [pc, #56]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004656:	f000 f821 	bl	800469c <HAL_RCC_GetSysClockFreq>
 800465a:	4601      	mov	r1, r0
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	4a0a      	ldr	r2, [pc, #40]	; (8004690 <HAL_RCC_ClockConfig+0x1c0>)
 8004668:	5cd3      	ldrb	r3, [r2, r3]
 800466a:	fa21 f303 	lsr.w	r3, r1, r3
 800466e:	4a09      	ldr	r2, [pc, #36]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 8004670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004672:	4b09      	ldr	r3, [pc, #36]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7fc fe7c 	bl	8001374 <HAL_InitTick>

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40023c00 	.word	0x40023c00
 800468c:	40023800 	.word	0x40023800
 8004690:	08009a4c 	.word	0x08009a4c
 8004694:	20000000 	.word	0x20000000
 8004698:	20000004 	.word	0x20000004

0800469c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800469c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	607b      	str	r3, [r7, #4]
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	2300      	movs	r3, #0
 80046ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046b2:	4b63      	ldr	r3, [pc, #396]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 030c 	and.w	r3, r3, #12
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d007      	beq.n	80046ce <HAL_RCC_GetSysClockFreq+0x32>
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d008      	beq.n	80046d4 <HAL_RCC_GetSysClockFreq+0x38>
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f040 80b4 	bne.w	8004830 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046c8:	4b5e      	ldr	r3, [pc, #376]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80046ca:	60bb      	str	r3, [r7, #8]
       break;
 80046cc:	e0b3      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ce:	4b5e      	ldr	r3, [pc, #376]	; (8004848 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80046d0:	60bb      	str	r3, [r7, #8]
      break;
 80046d2:	e0b0      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046d4:	4b5a      	ldr	r3, [pc, #360]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046de:	4b58      	ldr	r3, [pc, #352]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d04a      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ea:	4b55      	ldr	r3, [pc, #340]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	099b      	lsrs	r3, r3, #6
 80046f0:	f04f 0400 	mov.w	r4, #0
 80046f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	ea03 0501 	and.w	r5, r3, r1
 8004700:	ea04 0602 	and.w	r6, r4, r2
 8004704:	4629      	mov	r1, r5
 8004706:	4632      	mov	r2, r6
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	f04f 0400 	mov.w	r4, #0
 8004710:	0154      	lsls	r4, r2, #5
 8004712:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004716:	014b      	lsls	r3, r1, #5
 8004718:	4619      	mov	r1, r3
 800471a:	4622      	mov	r2, r4
 800471c:	1b49      	subs	r1, r1, r5
 800471e:	eb62 0206 	sbc.w	r2, r2, r6
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	f04f 0400 	mov.w	r4, #0
 800472a:	0194      	lsls	r4, r2, #6
 800472c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004730:	018b      	lsls	r3, r1, #6
 8004732:	1a5b      	subs	r3, r3, r1
 8004734:	eb64 0402 	sbc.w	r4, r4, r2
 8004738:	f04f 0100 	mov.w	r1, #0
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	00e2      	lsls	r2, r4, #3
 8004742:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004746:	00d9      	lsls	r1, r3, #3
 8004748:	460b      	mov	r3, r1
 800474a:	4614      	mov	r4, r2
 800474c:	195b      	adds	r3, r3, r5
 800474e:	eb44 0406 	adc.w	r4, r4, r6
 8004752:	f04f 0100 	mov.w	r1, #0
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	0262      	lsls	r2, r4, #9
 800475c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004760:	0259      	lsls	r1, r3, #9
 8004762:	460b      	mov	r3, r1
 8004764:	4614      	mov	r4, r2
 8004766:	4618      	mov	r0, r3
 8004768:	4621      	mov	r1, r4
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f04f 0400 	mov.w	r4, #0
 8004770:	461a      	mov	r2, r3
 8004772:	4623      	mov	r3, r4
 8004774:	f7fb fd7c 	bl	8000270 <__aeabi_uldivmod>
 8004778:	4603      	mov	r3, r0
 800477a:	460c      	mov	r4, r1
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	e049      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004780:	4b2f      	ldr	r3, [pc, #188]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	099b      	lsrs	r3, r3, #6
 8004786:	f04f 0400 	mov.w	r4, #0
 800478a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	ea03 0501 	and.w	r5, r3, r1
 8004796:	ea04 0602 	and.w	r6, r4, r2
 800479a:	4629      	mov	r1, r5
 800479c:	4632      	mov	r2, r6
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	f04f 0400 	mov.w	r4, #0
 80047a6:	0154      	lsls	r4, r2, #5
 80047a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047ac:	014b      	lsls	r3, r1, #5
 80047ae:	4619      	mov	r1, r3
 80047b0:	4622      	mov	r2, r4
 80047b2:	1b49      	subs	r1, r1, r5
 80047b4:	eb62 0206 	sbc.w	r2, r2, r6
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	f04f 0400 	mov.w	r4, #0
 80047c0:	0194      	lsls	r4, r2, #6
 80047c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047c6:	018b      	lsls	r3, r1, #6
 80047c8:	1a5b      	subs	r3, r3, r1
 80047ca:	eb64 0402 	sbc.w	r4, r4, r2
 80047ce:	f04f 0100 	mov.w	r1, #0
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	00e2      	lsls	r2, r4, #3
 80047d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047dc:	00d9      	lsls	r1, r3, #3
 80047de:	460b      	mov	r3, r1
 80047e0:	4614      	mov	r4, r2
 80047e2:	195b      	adds	r3, r3, r5
 80047e4:	eb44 0406 	adc.w	r4, r4, r6
 80047e8:	f04f 0100 	mov.w	r1, #0
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	02a2      	lsls	r2, r4, #10
 80047f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80047f6:	0299      	lsls	r1, r3, #10
 80047f8:	460b      	mov	r3, r1
 80047fa:	4614      	mov	r4, r2
 80047fc:	4618      	mov	r0, r3
 80047fe:	4621      	mov	r1, r4
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f04f 0400 	mov.w	r4, #0
 8004806:	461a      	mov	r2, r3
 8004808:	4623      	mov	r3, r4
 800480a:	f7fb fd31 	bl	8000270 <__aeabi_uldivmod>
 800480e:	4603      	mov	r3, r0
 8004810:	460c      	mov	r4, r1
 8004812:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004814:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	0c1b      	lsrs	r3, r3, #16
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	3301      	adds	r3, #1
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	fbb2 f3f3 	udiv	r3, r2, r3
 800482c:	60bb      	str	r3, [r7, #8]
      break;
 800482e:	e002      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004832:	60bb      	str	r3, [r7, #8]
      break;
 8004834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004836:	68bb      	ldr	r3, [r7, #8]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004840:	40023800 	.word	0x40023800
 8004844:	00f42400 	.word	0x00f42400
 8004848:	007a1200 	.word	0x007a1200

0800484c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004850:	4b03      	ldr	r3, [pc, #12]	; (8004860 <HAL_RCC_GetHCLKFreq+0x14>)
 8004852:	681b      	ldr	r3, [r3, #0]
}
 8004854:	4618      	mov	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	20000000 	.word	0x20000000

08004864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004868:	f7ff fff0 	bl	800484c <HAL_RCC_GetHCLKFreq>
 800486c:	4601      	mov	r1, r0
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	0a9b      	lsrs	r3, r3, #10
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	4a03      	ldr	r2, [pc, #12]	; (8004888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800487a:	5cd3      	ldrb	r3, [r2, r3]
 800487c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004880:	4618      	mov	r0, r3
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40023800 	.word	0x40023800
 8004888:	08009a5c 	.word	0x08009a5c

0800488c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004890:	f7ff ffdc 	bl	800484c <HAL_RCC_GetHCLKFreq>
 8004894:	4601      	mov	r1, r0
 8004896:	4b05      	ldr	r3, [pc, #20]	; (80048ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	0b5b      	lsrs	r3, r3, #13
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	4a03      	ldr	r2, [pc, #12]	; (80048b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048a2:	5cd3      	ldrb	r3, [r2, r3]
 80048a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40023800 	.word	0x40023800
 80048b0:	08009a5c 	.word	0x08009a5c

080048b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d105      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d035      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048dc:	4b62      	ldr	r3, [pc, #392]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048e2:	f7fc fd8b 	bl	80013fc <HAL_GetTick>
 80048e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048e8:	e008      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048ea:	f7fc fd87 	bl	80013fc <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e0b0      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048fc:	4b5b      	ldr	r3, [pc, #364]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1f0      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	019a      	lsls	r2, r3, #6
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	071b      	lsls	r3, r3, #28
 8004914:	4955      	ldr	r1, [pc, #340]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800491c:	4b52      	ldr	r3, [pc, #328]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800491e:	2201      	movs	r2, #1
 8004920:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004922:	f7fc fd6b 	bl	80013fc <HAL_GetTick>
 8004926:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004928:	e008      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800492a:	f7fc fd67 	bl	80013fc <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e090      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800493c:	4b4b      	ldr	r3, [pc, #300]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f0      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8083 	beq.w	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	4b44      	ldr	r3, [pc, #272]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	4a43      	ldr	r2, [pc, #268]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004964:	6413      	str	r3, [r2, #64]	; 0x40
 8004966:	4b41      	ldr	r3, [pc, #260]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004972:	4b3f      	ldr	r3, [pc, #252]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a3e      	ldr	r2, [pc, #248]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800497e:	f7fc fd3d 	bl	80013fc <HAL_GetTick>
 8004982:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004984:	e008      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004986:	f7fc fd39 	bl	80013fc <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e062      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004998:	4b35      	ldr	r3, [pc, #212]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049a4:	4b31      	ldr	r3, [pc, #196]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d02f      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d028      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049c2:	4b2a      	ldr	r3, [pc, #168]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049cc:	4b29      	ldr	r3, [pc, #164]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049d2:	4b28      	ldr	r3, [pc, #160]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80049d8:	4a24      	ldr	r2, [pc, #144]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049de:	4b23      	ldr	r3, [pc, #140]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d114      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80049ea:	f7fc fd07 	bl	80013fc <HAL_GetTick>
 80049ee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f0:	e00a      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f2:	f7fc fd03 	bl	80013fc <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e02a      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a08:	4b18      	ldr	r3, [pc, #96]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0ee      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a20:	d10d      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004a22:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a36:	490d      	ldr	r1, [pc, #52]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	608b      	str	r3, [r1, #8]
 8004a3c:	e005      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a3e:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a44:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a48:	6093      	str	r3, [r2, #8]
 8004a4a:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a56:	4905      	ldr	r1, [pc, #20]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	42470068 	.word	0x42470068
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	40007000 	.word	0x40007000
 8004a74:	42470e40 	.word	0x42470e40

08004a78 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d13d      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004a96:	4b22      	ldr	r3, [pc, #136]	; (8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a9e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d004      	beq.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d12f      	bne.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004aaa:	4b1e      	ldr	r3, [pc, #120]	; (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004aac:	617b      	str	r3, [r7, #20]
          break;
 8004aae:	e02f      	b.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ab0:	4b1b      	ldr	r3, [pc, #108]	; (8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004abc:	d108      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004abe:	4b18      	ldr	r3, [pc, #96]	; (8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ac6:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	e007      	b.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ad0:	4b13      	ldr	r3, [pc, #76]	; (8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad8:	4a14      	ldr	r2, [pc, #80]	; (8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ade:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae6:	099b      	lsrs	r3, r3, #6
 8004ae8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	fb02 f303 	mul.w	r3, r2, r3
 8004af2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004afa:	0f1b      	lsrs	r3, r3, #28
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b06:	617b      	str	r3, [r7, #20]
          break;
 8004b08:	e002      	b.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]
          break;
 8004b0e:	bf00      	nop
        }
      }
      break;
 8004b10:	bf00      	nop
    }
  }
  return frequency;
 8004b12:	697b      	ldr	r3, [r7, #20]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	371c      	adds	r7, #28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	40023800 	.word	0x40023800
 8004b24:	00bb8000 	.word	0x00bb8000
 8004b28:	007a1200 	.word	0x007a1200
 8004b2c:	00f42400 	.word	0x00f42400

08004b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e056      	b.n	8004bf0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d106      	bne.n	8004b62 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7fc fa69 	bl	8001034 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2202      	movs	r2, #2
 8004b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b78:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	ea42 0103 	orr.w	r1, r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	0c1b      	lsrs	r3, r3, #16
 8004bc0:	f003 0104 	and.w	r1, r3, #4
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	69da      	ldr	r2, [r3, #28]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bde:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e01d      	b.n	8004c46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d106      	bne.n	8004c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fc fa50 	bl	80010c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3304      	adds	r3, #4
 8004c34:	4619      	mov	r1, r3
 8004c36:	4610      	mov	r0, r2
 8004c38:	f000 f95e 	bl	8004ef8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0201 	orr.w	r2, r2, #1
 8004c64:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b06      	cmp	r3, #6
 8004c76:	d007      	beq.n	8004c88 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0201 	orr.w	r2, r2, #1
 8004c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d122      	bne.n	8004cf2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d11b      	bne.n	8004cf2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f06f 0202 	mvn.w	r2, #2
 8004cc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f8ee 	bl	8004eba <HAL_TIM_IC_CaptureCallback>
 8004cde:	e005      	b.n	8004cec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f8e0 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f8f1 	bl	8004ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d122      	bne.n	8004d46 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d11b      	bne.n	8004d46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f06f 0204 	mvn.w	r2, #4
 8004d16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f8c4 	bl	8004eba <HAL_TIM_IC_CaptureCallback>
 8004d32:	e005      	b.n	8004d40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f8b6 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f8c7 	bl	8004ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d122      	bne.n	8004d9a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d11b      	bne.n	8004d9a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f06f 0208 	mvn.w	r2, #8
 8004d6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2204      	movs	r2, #4
 8004d70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	f003 0303 	and.w	r3, r3, #3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f89a 	bl	8004eba <HAL_TIM_IC_CaptureCallback>
 8004d86:	e005      	b.n	8004d94 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f88c 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f89d 	bl	8004ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	2b10      	cmp	r3, #16
 8004da6:	d122      	bne.n	8004dee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	2b10      	cmp	r3, #16
 8004db4:	d11b      	bne.n	8004dee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f06f 0210 	mvn.w	r2, #16
 8004dbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2208      	movs	r2, #8
 8004dc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f870 	bl	8004eba <HAL_TIM_IC_CaptureCallback>
 8004dda:	e005      	b.n	8004de8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f862 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f873 	bl	8004ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d10e      	bne.n	8004e1a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d107      	bne.n	8004e1a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f06f 0201 	mvn.w	r2, #1
 8004e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7fb fbab 	bl	8000570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e24:	2b80      	cmp	r3, #128	; 0x80
 8004e26:	d10e      	bne.n	8004e46 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e32:	2b80      	cmp	r3, #128	; 0x80
 8004e34:	d107      	bne.n	8004e46 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f903 	bl	800504c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b40      	cmp	r3, #64	; 0x40
 8004e52:	d10e      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b40      	cmp	r3, #64	; 0x40
 8004e60:	d107      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f838 	bl	8004ee2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	d10e      	bne.n	8004e9e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	d107      	bne.n	8004e9e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f06f 0220 	mvn.w	r2, #32
 8004e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f8cd 	bl	8005038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a40      	ldr	r2, [pc, #256]	; (800500c <TIM_Base_SetConfig+0x114>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f16:	d00f      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a3d      	ldr	r2, [pc, #244]	; (8005010 <TIM_Base_SetConfig+0x118>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00b      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a3c      	ldr	r2, [pc, #240]	; (8005014 <TIM_Base_SetConfig+0x11c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d007      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a3b      	ldr	r2, [pc, #236]	; (8005018 <TIM_Base_SetConfig+0x120>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d003      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a3a      	ldr	r2, [pc, #232]	; (800501c <TIM_Base_SetConfig+0x124>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d108      	bne.n	8004f4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a2f      	ldr	r2, [pc, #188]	; (800500c <TIM_Base_SetConfig+0x114>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d02b      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f58:	d027      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2c      	ldr	r2, [pc, #176]	; (8005010 <TIM_Base_SetConfig+0x118>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d023      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a2b      	ldr	r2, [pc, #172]	; (8005014 <TIM_Base_SetConfig+0x11c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d01f      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2a      	ldr	r2, [pc, #168]	; (8005018 <TIM_Base_SetConfig+0x120>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01b      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a29      	ldr	r2, [pc, #164]	; (800501c <TIM_Base_SetConfig+0x124>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d017      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a28      	ldr	r2, [pc, #160]	; (8005020 <TIM_Base_SetConfig+0x128>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d013      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a27      	ldr	r2, [pc, #156]	; (8005024 <TIM_Base_SetConfig+0x12c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00f      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a26      	ldr	r2, [pc, #152]	; (8005028 <TIM_Base_SetConfig+0x130>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00b      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a25      	ldr	r2, [pc, #148]	; (800502c <TIM_Base_SetConfig+0x134>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d007      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a24      	ldr	r2, [pc, #144]	; (8005030 <TIM_Base_SetConfig+0x138>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d003      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a23      	ldr	r2, [pc, #140]	; (8005034 <TIM_Base_SetConfig+0x13c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d108      	bne.n	8004fbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a0a      	ldr	r2, [pc, #40]	; (800500c <TIM_Base_SetConfig+0x114>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_Base_SetConfig+0xf8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a0c      	ldr	r2, [pc, #48]	; (800501c <TIM_Base_SetConfig+0x124>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d103      	bne.n	8004ff8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	615a      	str	r2, [r3, #20]
}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40010000 	.word	0x40010000
 8005010:	40000400 	.word	0x40000400
 8005014:	40000800 	.word	0x40000800
 8005018:	40000c00 	.word	0x40000c00
 800501c:	40010400 	.word	0x40010400
 8005020:	40014000 	.word	0x40014000
 8005024:	40014400 	.word	0x40014400
 8005028:	40014800 	.word	0x40014800
 800502c:	40001800 	.word	0x40001800
 8005030:	40001c00 	.word	0x40001c00
 8005034:	40002000 	.word	0x40002000

08005038 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e03f      	b.n	80050f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d106      	bne.n	800508c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fc f844 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2224      	movs	r2, #36	; 0x24
 8005090:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 faf9 	bl	800569c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695a      	ldr	r2, [r3, #20]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b085      	sub	sp, #20
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	4613      	mov	r3, r2
 8005106:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b20      	cmp	r3, #32
 8005112:	d130      	bne.n	8005176 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <HAL_UART_Transmit_IT+0x26>
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e029      	b.n	8005178 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_UART_Transmit_IT+0x38>
 800512e:	2302      	movs	r3, #2
 8005130:	e022      	b.n	8005178 <HAL_UART_Transmit_IT+0x7e>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	88fa      	ldrh	r2, [r7, #6]
 8005144:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	88fa      	ldrh	r2, [r7, #6]
 800514a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2221      	movs	r2, #33	; 0x21
 8005156:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005170:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	e000      	b.n	8005178 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005176:	2302      	movs	r3, #2
  }
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	4613      	mov	r3, r2
 8005190:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b20      	cmp	r3, #32
 800519c:	d140      	bne.n	8005220 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <HAL_UART_Receive_IT+0x26>
 80051a4:	88fb      	ldrh	r3, [r7, #6]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e039      	b.n	8005222 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_UART_Receive_IT+0x38>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e032      	b.n	8005222 <HAL_UART_Receive_IT+0x9e>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	88fa      	ldrh	r2, [r7, #6]
 80051ce:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2222      	movs	r2, #34	; 0x22
 80051e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051fa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0201 	orr.w	r2, r2, #1
 800520a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0220 	orr.w	r2, r2, #32
 800521a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	e000      	b.n	8005222 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005220:	2302      	movs	r3, #2
  }
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
	...

08005230 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005250:	2300      	movs	r3, #0
 8005252:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10d      	bne.n	8005282 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_UART_IRQHandler+0x52>
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f98c 	bl	8005598 <UART_Receive_IT>
      return;
 8005280:	e0d1      	b.n	8005426 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 80b0 	beq.w	80053ea <HAL_UART_IRQHandler+0x1ba>
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d105      	bne.n	80052a0 <HAL_UART_IRQHandler+0x70>
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 80a5 	beq.w	80053ea <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_UART_IRQHandler+0x90>
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b8:	f043 0201 	orr.w	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <HAL_UART_IRQHandler+0xb0>
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d8:	f043 0202 	orr.w	r2, r3, #2
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <HAL_UART_IRQHandler+0xd0>
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f8:	f043 0204 	orr.w	r2, r3, #4
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00f      	beq.n	800532a <HAL_UART_IRQHandler+0xfa>
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b00      	cmp	r3, #0
 8005312:	d104      	bne.n	800531e <HAL_UART_IRQHandler+0xee>
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005322:	f043 0208 	orr.w	r2, r3, #8
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d078      	beq.n	8005424 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f003 0320 	and.w	r3, r3, #32
 8005338:	2b00      	cmp	r3, #0
 800533a:	d007      	beq.n	800534c <HAL_UART_IRQHandler+0x11c>
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f926 	bl	8005598 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005356:	2b40      	cmp	r3, #64	; 0x40
 8005358:	bf0c      	ite	eq
 800535a:	2301      	moveq	r3, #1
 800535c:	2300      	movne	r3, #0
 800535e:	b2db      	uxtb	r3, r3
 8005360:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d102      	bne.n	8005374 <HAL_UART_IRQHandler+0x144>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d031      	beq.n	80053d8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f86f 	bl	8005458 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b40      	cmp	r3, #64	; 0x40
 8005386:	d123      	bne.n	80053d0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695a      	ldr	r2, [r3, #20]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005396:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539c:	2b00      	cmp	r3, #0
 800539e:	d013      	beq.n	80053c8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a4:	4a21      	ldr	r2, [pc, #132]	; (800542c <HAL_UART_IRQHandler+0x1fc>)
 80053a6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fc f964 	bl	800167a <HAL_DMA_Abort_IT>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d016      	beq.n	80053e6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053c2:	4610      	mov	r0, r2
 80053c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c6:	e00e      	b.n	80053e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f83b 	bl	8005444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ce:	e00a      	b.n	80053e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f837 	bl	8005444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d6:	e006      	b.n	80053e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f833 	bl	8005444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80053e4:	e01e      	b.n	8005424 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e6:	bf00      	nop
    return;
 80053e8:	e01c      	b.n	8005424 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d008      	beq.n	8005406 <HAL_UART_IRQHandler+0x1d6>
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f85c 	bl	80054bc <UART_Transmit_IT>
    return;
 8005404:	e00f      	b.n	8005426 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <HAL_UART_IRQHandler+0x1f6>
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f8a4 	bl	8005568 <UART_EndTransmit_IT>
    return;
 8005420:	bf00      	nop
 8005422:	e000      	b.n	8005426 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005424:	bf00      	nop
  }
}
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	08005495 	.word	0x08005495

08005430 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800546e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695a      	ldr	r2, [r3, #20]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0201 	bic.w	r2, r2, #1
 800547e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f7ff ffc8 	bl	8005444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054b4:	bf00      	nop
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b21      	cmp	r3, #33	; 0x21
 80054ce:	d144      	bne.n	800555a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d8:	d11a      	bne.n	8005510 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054ee:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d105      	bne.n	8005504 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	1c9a      	adds	r2, r3, #2
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	621a      	str	r2, [r3, #32]
 8005502:	e00e      	b.n	8005522 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	621a      	str	r2, [r3, #32]
 800550e:	e008      	b.n	8005522 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	1c59      	adds	r1, r3, #1
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6211      	str	r1, [r2, #32]
 800551a:	781a      	ldrb	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29b      	uxth	r3, r3
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	4619      	mov	r1, r3
 8005530:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10f      	bne.n	8005556 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005544:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005554:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	e000      	b.n	800555c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800555a:	2302      	movs	r3, #2
  }
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800557e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff ff51 	bl	8005430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b22      	cmp	r3, #34	; 0x22
 80055aa:	d171      	bne.n	8005690 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b4:	d123      	bne.n	80055fe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ba:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10e      	bne.n	80055e2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055da:	1c9a      	adds	r2, r3, #2
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	629a      	str	r2, [r3, #40]	; 0x28
 80055e0:	e029      	b.n	8005636 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	629a      	str	r2, [r3, #40]	; 0x28
 80055fc:	e01b      	b.n	8005636 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10a      	bne.n	800561c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6858      	ldr	r0, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	1c59      	adds	r1, r3, #1
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6291      	str	r1, [r2, #40]	; 0x28
 8005616:	b2c2      	uxtb	r2, r0
 8005618:	701a      	strb	r2, [r3, #0]
 800561a:	e00c      	b.n	8005636 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	b2da      	uxtb	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	1c58      	adds	r0, r3, #1
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	6288      	str	r0, [r1, #40]	; 0x28
 800562e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29b      	uxth	r3, r3
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	4619      	mov	r1, r3
 8005644:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005646:	2b00      	cmp	r3, #0
 8005648:	d120      	bne.n	800568c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0220 	bic.w	r2, r2, #32
 8005658:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005668:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695a      	ldr	r2, [r3, #20]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0201 	bic.w	r2, r2, #1
 8005678:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fa ff8a 	bl	800059c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005688:	2300      	movs	r3, #0
 800568a:	e002      	b.n	8005692 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800568c:	2300      	movs	r3, #0
 800568e:	e000      	b.n	8005692 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005690:	2302      	movs	r3, #2
  }
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800569c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80056de:	f023 030c 	bic.w	r3, r3, #12
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6812      	ldr	r2, [r2, #0]
 80056e6:	68f9      	ldr	r1, [r7, #12]
 80056e8:	430b      	orrs	r3, r1
 80056ea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699a      	ldr	r2, [r3, #24]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800570a:	f040 818b 	bne.w	8005a24 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4ac1      	ldr	r2, [pc, #772]	; (8005a18 <UART_SetConfig+0x37c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d005      	beq.n	8005724 <UART_SetConfig+0x88>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4abf      	ldr	r2, [pc, #764]	; (8005a1c <UART_SetConfig+0x380>)
 800571e:	4293      	cmp	r3, r2
 8005720:	f040 80bd 	bne.w	800589e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005724:	f7ff f8b2 	bl	800488c <HAL_RCC_GetPCLK2Freq>
 8005728:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	461d      	mov	r5, r3
 800572e:	f04f 0600 	mov.w	r6, #0
 8005732:	46a8      	mov	r8, r5
 8005734:	46b1      	mov	r9, r6
 8005736:	eb18 0308 	adds.w	r3, r8, r8
 800573a:	eb49 0409 	adc.w	r4, r9, r9
 800573e:	4698      	mov	r8, r3
 8005740:	46a1      	mov	r9, r4
 8005742:	eb18 0805 	adds.w	r8, r8, r5
 8005746:	eb49 0906 	adc.w	r9, r9, r6
 800574a:	f04f 0100 	mov.w	r1, #0
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005756:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800575a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800575e:	4688      	mov	r8, r1
 8005760:	4691      	mov	r9, r2
 8005762:	eb18 0005 	adds.w	r0, r8, r5
 8005766:	eb49 0106 	adc.w	r1, r9, r6
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	461d      	mov	r5, r3
 8005770:	f04f 0600 	mov.w	r6, #0
 8005774:	196b      	adds	r3, r5, r5
 8005776:	eb46 0406 	adc.w	r4, r6, r6
 800577a:	461a      	mov	r2, r3
 800577c:	4623      	mov	r3, r4
 800577e:	f7fa fd77 	bl	8000270 <__aeabi_uldivmod>
 8005782:	4603      	mov	r3, r0
 8005784:	460c      	mov	r4, r1
 8005786:	461a      	mov	r2, r3
 8005788:	4ba5      	ldr	r3, [pc, #660]	; (8005a20 <UART_SetConfig+0x384>)
 800578a:	fba3 2302 	umull	r2, r3, r3, r2
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	461d      	mov	r5, r3
 8005798:	f04f 0600 	mov.w	r6, #0
 800579c:	46a9      	mov	r9, r5
 800579e:	46b2      	mov	sl, r6
 80057a0:	eb19 0309 	adds.w	r3, r9, r9
 80057a4:	eb4a 040a 	adc.w	r4, sl, sl
 80057a8:	4699      	mov	r9, r3
 80057aa:	46a2      	mov	sl, r4
 80057ac:	eb19 0905 	adds.w	r9, r9, r5
 80057b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80057b4:	f04f 0100 	mov.w	r1, #0
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057c8:	4689      	mov	r9, r1
 80057ca:	4692      	mov	sl, r2
 80057cc:	eb19 0005 	adds.w	r0, r9, r5
 80057d0:	eb4a 0106 	adc.w	r1, sl, r6
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	461d      	mov	r5, r3
 80057da:	f04f 0600 	mov.w	r6, #0
 80057de:	196b      	adds	r3, r5, r5
 80057e0:	eb46 0406 	adc.w	r4, r6, r6
 80057e4:	461a      	mov	r2, r3
 80057e6:	4623      	mov	r3, r4
 80057e8:	f7fa fd42 	bl	8000270 <__aeabi_uldivmod>
 80057ec:	4603      	mov	r3, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	461a      	mov	r2, r3
 80057f2:	4b8b      	ldr	r3, [pc, #556]	; (8005a20 <UART_SetConfig+0x384>)
 80057f4:	fba3 1302 	umull	r1, r3, r3, r2
 80057f8:	095b      	lsrs	r3, r3, #5
 80057fa:	2164      	movs	r1, #100	; 0x64
 80057fc:	fb01 f303 	mul.w	r3, r1, r3
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	3332      	adds	r3, #50	; 0x32
 8005806:	4a86      	ldr	r2, [pc, #536]	; (8005a20 <UART_SetConfig+0x384>)
 8005808:	fba2 2303 	umull	r2, r3, r2, r3
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005814:	4498      	add	r8, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	461d      	mov	r5, r3
 800581a:	f04f 0600 	mov.w	r6, #0
 800581e:	46a9      	mov	r9, r5
 8005820:	46b2      	mov	sl, r6
 8005822:	eb19 0309 	adds.w	r3, r9, r9
 8005826:	eb4a 040a 	adc.w	r4, sl, sl
 800582a:	4699      	mov	r9, r3
 800582c:	46a2      	mov	sl, r4
 800582e:	eb19 0905 	adds.w	r9, r9, r5
 8005832:	eb4a 0a06 	adc.w	sl, sl, r6
 8005836:	f04f 0100 	mov.w	r1, #0
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005842:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005846:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800584a:	4689      	mov	r9, r1
 800584c:	4692      	mov	sl, r2
 800584e:	eb19 0005 	adds.w	r0, r9, r5
 8005852:	eb4a 0106 	adc.w	r1, sl, r6
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	461d      	mov	r5, r3
 800585c:	f04f 0600 	mov.w	r6, #0
 8005860:	196b      	adds	r3, r5, r5
 8005862:	eb46 0406 	adc.w	r4, r6, r6
 8005866:	461a      	mov	r2, r3
 8005868:	4623      	mov	r3, r4
 800586a:	f7fa fd01 	bl	8000270 <__aeabi_uldivmod>
 800586e:	4603      	mov	r3, r0
 8005870:	460c      	mov	r4, r1
 8005872:	461a      	mov	r2, r3
 8005874:	4b6a      	ldr	r3, [pc, #424]	; (8005a20 <UART_SetConfig+0x384>)
 8005876:	fba3 1302 	umull	r1, r3, r3, r2
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	2164      	movs	r1, #100	; 0x64
 800587e:	fb01 f303 	mul.w	r3, r1, r3
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	3332      	adds	r3, #50	; 0x32
 8005888:	4a65      	ldr	r2, [pc, #404]	; (8005a20 <UART_SetConfig+0x384>)
 800588a:	fba2 2303 	umull	r2, r3, r2, r3
 800588e:	095b      	lsrs	r3, r3, #5
 8005890:	f003 0207 	and.w	r2, r3, #7
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4442      	add	r2, r8
 800589a:	609a      	str	r2, [r3, #8]
 800589c:	e26f      	b.n	8005d7e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800589e:	f7fe ffe1 	bl	8004864 <HAL_RCC_GetPCLK1Freq>
 80058a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	461d      	mov	r5, r3
 80058a8:	f04f 0600 	mov.w	r6, #0
 80058ac:	46a8      	mov	r8, r5
 80058ae:	46b1      	mov	r9, r6
 80058b0:	eb18 0308 	adds.w	r3, r8, r8
 80058b4:	eb49 0409 	adc.w	r4, r9, r9
 80058b8:	4698      	mov	r8, r3
 80058ba:	46a1      	mov	r9, r4
 80058bc:	eb18 0805 	adds.w	r8, r8, r5
 80058c0:	eb49 0906 	adc.w	r9, r9, r6
 80058c4:	f04f 0100 	mov.w	r1, #0
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058d8:	4688      	mov	r8, r1
 80058da:	4691      	mov	r9, r2
 80058dc:	eb18 0005 	adds.w	r0, r8, r5
 80058e0:	eb49 0106 	adc.w	r1, r9, r6
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	461d      	mov	r5, r3
 80058ea:	f04f 0600 	mov.w	r6, #0
 80058ee:	196b      	adds	r3, r5, r5
 80058f0:	eb46 0406 	adc.w	r4, r6, r6
 80058f4:	461a      	mov	r2, r3
 80058f6:	4623      	mov	r3, r4
 80058f8:	f7fa fcba 	bl	8000270 <__aeabi_uldivmod>
 80058fc:	4603      	mov	r3, r0
 80058fe:	460c      	mov	r4, r1
 8005900:	461a      	mov	r2, r3
 8005902:	4b47      	ldr	r3, [pc, #284]	; (8005a20 <UART_SetConfig+0x384>)
 8005904:	fba3 2302 	umull	r2, r3, r3, r2
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	461d      	mov	r5, r3
 8005912:	f04f 0600 	mov.w	r6, #0
 8005916:	46a9      	mov	r9, r5
 8005918:	46b2      	mov	sl, r6
 800591a:	eb19 0309 	adds.w	r3, r9, r9
 800591e:	eb4a 040a 	adc.w	r4, sl, sl
 8005922:	4699      	mov	r9, r3
 8005924:	46a2      	mov	sl, r4
 8005926:	eb19 0905 	adds.w	r9, r9, r5
 800592a:	eb4a 0a06 	adc.w	sl, sl, r6
 800592e:	f04f 0100 	mov.w	r1, #0
 8005932:	f04f 0200 	mov.w	r2, #0
 8005936:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800593a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800593e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005942:	4689      	mov	r9, r1
 8005944:	4692      	mov	sl, r2
 8005946:	eb19 0005 	adds.w	r0, r9, r5
 800594a:	eb4a 0106 	adc.w	r1, sl, r6
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	461d      	mov	r5, r3
 8005954:	f04f 0600 	mov.w	r6, #0
 8005958:	196b      	adds	r3, r5, r5
 800595a:	eb46 0406 	adc.w	r4, r6, r6
 800595e:	461a      	mov	r2, r3
 8005960:	4623      	mov	r3, r4
 8005962:	f7fa fc85 	bl	8000270 <__aeabi_uldivmod>
 8005966:	4603      	mov	r3, r0
 8005968:	460c      	mov	r4, r1
 800596a:	461a      	mov	r2, r3
 800596c:	4b2c      	ldr	r3, [pc, #176]	; (8005a20 <UART_SetConfig+0x384>)
 800596e:	fba3 1302 	umull	r1, r3, r3, r2
 8005972:	095b      	lsrs	r3, r3, #5
 8005974:	2164      	movs	r1, #100	; 0x64
 8005976:	fb01 f303 	mul.w	r3, r1, r3
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	3332      	adds	r3, #50	; 0x32
 8005980:	4a27      	ldr	r2, [pc, #156]	; (8005a20 <UART_SetConfig+0x384>)
 8005982:	fba2 2303 	umull	r2, r3, r2, r3
 8005986:	095b      	lsrs	r3, r3, #5
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800598e:	4498      	add	r8, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	461d      	mov	r5, r3
 8005994:	f04f 0600 	mov.w	r6, #0
 8005998:	46a9      	mov	r9, r5
 800599a:	46b2      	mov	sl, r6
 800599c:	eb19 0309 	adds.w	r3, r9, r9
 80059a0:	eb4a 040a 	adc.w	r4, sl, sl
 80059a4:	4699      	mov	r9, r3
 80059a6:	46a2      	mov	sl, r4
 80059a8:	eb19 0905 	adds.w	r9, r9, r5
 80059ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80059b0:	f04f 0100 	mov.w	r1, #0
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059c4:	4689      	mov	r9, r1
 80059c6:	4692      	mov	sl, r2
 80059c8:	eb19 0005 	adds.w	r0, r9, r5
 80059cc:	eb4a 0106 	adc.w	r1, sl, r6
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	461d      	mov	r5, r3
 80059d6:	f04f 0600 	mov.w	r6, #0
 80059da:	196b      	adds	r3, r5, r5
 80059dc:	eb46 0406 	adc.w	r4, r6, r6
 80059e0:	461a      	mov	r2, r3
 80059e2:	4623      	mov	r3, r4
 80059e4:	f7fa fc44 	bl	8000270 <__aeabi_uldivmod>
 80059e8:	4603      	mov	r3, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	461a      	mov	r2, r3
 80059ee:	4b0c      	ldr	r3, [pc, #48]	; (8005a20 <UART_SetConfig+0x384>)
 80059f0:	fba3 1302 	umull	r1, r3, r3, r2
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	2164      	movs	r1, #100	; 0x64
 80059f8:	fb01 f303 	mul.w	r3, r1, r3
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	3332      	adds	r3, #50	; 0x32
 8005a02:	4a07      	ldr	r2, [pc, #28]	; (8005a20 <UART_SetConfig+0x384>)
 8005a04:	fba2 2303 	umull	r2, r3, r2, r3
 8005a08:	095b      	lsrs	r3, r3, #5
 8005a0a:	f003 0207 	and.w	r2, r3, #7
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4442      	add	r2, r8
 8005a14:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005a16:	e1b2      	b.n	8005d7e <UART_SetConfig+0x6e2>
 8005a18:	40011000 	.word	0x40011000
 8005a1c:	40011400 	.word	0x40011400
 8005a20:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4ad7      	ldr	r2, [pc, #860]	; (8005d88 <UART_SetConfig+0x6ec>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d005      	beq.n	8005a3a <UART_SetConfig+0x39e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4ad6      	ldr	r2, [pc, #856]	; (8005d8c <UART_SetConfig+0x6f0>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	f040 80d1 	bne.w	8005bdc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a3a:	f7fe ff27 	bl	800488c <HAL_RCC_GetPCLK2Freq>
 8005a3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	469a      	mov	sl, r3
 8005a44:	f04f 0b00 	mov.w	fp, #0
 8005a48:	46d0      	mov	r8, sl
 8005a4a:	46d9      	mov	r9, fp
 8005a4c:	eb18 0308 	adds.w	r3, r8, r8
 8005a50:	eb49 0409 	adc.w	r4, r9, r9
 8005a54:	4698      	mov	r8, r3
 8005a56:	46a1      	mov	r9, r4
 8005a58:	eb18 080a 	adds.w	r8, r8, sl
 8005a5c:	eb49 090b 	adc.w	r9, r9, fp
 8005a60:	f04f 0100 	mov.w	r1, #0
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a74:	4688      	mov	r8, r1
 8005a76:	4691      	mov	r9, r2
 8005a78:	eb1a 0508 	adds.w	r5, sl, r8
 8005a7c:	eb4b 0609 	adc.w	r6, fp, r9
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	4619      	mov	r1, r3
 8005a86:	f04f 0200 	mov.w	r2, #0
 8005a8a:	f04f 0300 	mov.w	r3, #0
 8005a8e:	f04f 0400 	mov.w	r4, #0
 8005a92:	0094      	lsls	r4, r2, #2
 8005a94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a98:	008b      	lsls	r3, r1, #2
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	4623      	mov	r3, r4
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	4631      	mov	r1, r6
 8005aa2:	f7fa fbe5 	bl	8000270 <__aeabi_uldivmod>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	460c      	mov	r4, r1
 8005aaa:	461a      	mov	r2, r3
 8005aac:	4bb8      	ldr	r3, [pc, #736]	; (8005d90 <UART_SetConfig+0x6f4>)
 8005aae:	fba3 2302 	umull	r2, r3, r3, r2
 8005ab2:	095b      	lsrs	r3, r3, #5
 8005ab4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	469b      	mov	fp, r3
 8005abc:	f04f 0c00 	mov.w	ip, #0
 8005ac0:	46d9      	mov	r9, fp
 8005ac2:	46e2      	mov	sl, ip
 8005ac4:	eb19 0309 	adds.w	r3, r9, r9
 8005ac8:	eb4a 040a 	adc.w	r4, sl, sl
 8005acc:	4699      	mov	r9, r3
 8005ace:	46a2      	mov	sl, r4
 8005ad0:	eb19 090b 	adds.w	r9, r9, fp
 8005ad4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ad8:	f04f 0100 	mov.w	r1, #0
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ae4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ae8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005aec:	4689      	mov	r9, r1
 8005aee:	4692      	mov	sl, r2
 8005af0:	eb1b 0509 	adds.w	r5, fp, r9
 8005af4:	eb4c 060a 	adc.w	r6, ip, sl
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	4619      	mov	r1, r3
 8005afe:	f04f 0200 	mov.w	r2, #0
 8005b02:	f04f 0300 	mov.w	r3, #0
 8005b06:	f04f 0400 	mov.w	r4, #0
 8005b0a:	0094      	lsls	r4, r2, #2
 8005b0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b10:	008b      	lsls	r3, r1, #2
 8005b12:	461a      	mov	r2, r3
 8005b14:	4623      	mov	r3, r4
 8005b16:	4628      	mov	r0, r5
 8005b18:	4631      	mov	r1, r6
 8005b1a:	f7fa fba9 	bl	8000270 <__aeabi_uldivmod>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	460c      	mov	r4, r1
 8005b22:	461a      	mov	r2, r3
 8005b24:	4b9a      	ldr	r3, [pc, #616]	; (8005d90 <UART_SetConfig+0x6f4>)
 8005b26:	fba3 1302 	umull	r1, r3, r3, r2
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	2164      	movs	r1, #100	; 0x64
 8005b2e:	fb01 f303 	mul.w	r3, r1, r3
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	3332      	adds	r3, #50	; 0x32
 8005b38:	4a95      	ldr	r2, [pc, #596]	; (8005d90 <UART_SetConfig+0x6f4>)
 8005b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b44:	4498      	add	r8, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	469b      	mov	fp, r3
 8005b4a:	f04f 0c00 	mov.w	ip, #0
 8005b4e:	46d9      	mov	r9, fp
 8005b50:	46e2      	mov	sl, ip
 8005b52:	eb19 0309 	adds.w	r3, r9, r9
 8005b56:	eb4a 040a 	adc.w	r4, sl, sl
 8005b5a:	4699      	mov	r9, r3
 8005b5c:	46a2      	mov	sl, r4
 8005b5e:	eb19 090b 	adds.w	r9, r9, fp
 8005b62:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b66:	f04f 0100 	mov.w	r1, #0
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b7a:	4689      	mov	r9, r1
 8005b7c:	4692      	mov	sl, r2
 8005b7e:	eb1b 0509 	adds.w	r5, fp, r9
 8005b82:	eb4c 060a 	adc.w	r6, ip, sl
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	f04f 0400 	mov.w	r4, #0
 8005b98:	0094      	lsls	r4, r2, #2
 8005b9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b9e:	008b      	lsls	r3, r1, #2
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	4623      	mov	r3, r4
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	f7fa fb62 	bl	8000270 <__aeabi_uldivmod>
 8005bac:	4603      	mov	r3, r0
 8005bae:	460c      	mov	r4, r1
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4b77      	ldr	r3, [pc, #476]	; (8005d90 <UART_SetConfig+0x6f4>)
 8005bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	2164      	movs	r1, #100	; 0x64
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	3332      	adds	r3, #50	; 0x32
 8005bc6:	4a72      	ldr	r2, [pc, #456]	; (8005d90 <UART_SetConfig+0x6f4>)
 8005bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	f003 020f 	and.w	r2, r3, #15
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4442      	add	r2, r8
 8005bd8:	609a      	str	r2, [r3, #8]
 8005bda:	e0d0      	b.n	8005d7e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bdc:	f7fe fe42 	bl	8004864 <HAL_RCC_GetPCLK1Freq>
 8005be0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	469a      	mov	sl, r3
 8005be6:	f04f 0b00 	mov.w	fp, #0
 8005bea:	46d0      	mov	r8, sl
 8005bec:	46d9      	mov	r9, fp
 8005bee:	eb18 0308 	adds.w	r3, r8, r8
 8005bf2:	eb49 0409 	adc.w	r4, r9, r9
 8005bf6:	4698      	mov	r8, r3
 8005bf8:	46a1      	mov	r9, r4
 8005bfa:	eb18 080a 	adds.w	r8, r8, sl
 8005bfe:	eb49 090b 	adc.w	r9, r9, fp
 8005c02:	f04f 0100 	mov.w	r1, #0
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c16:	4688      	mov	r8, r1
 8005c18:	4691      	mov	r9, r2
 8005c1a:	eb1a 0508 	adds.w	r5, sl, r8
 8005c1e:	eb4b 0609 	adc.w	r6, fp, r9
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	4619      	mov	r1, r3
 8005c28:	f04f 0200 	mov.w	r2, #0
 8005c2c:	f04f 0300 	mov.w	r3, #0
 8005c30:	f04f 0400 	mov.w	r4, #0
 8005c34:	0094      	lsls	r4, r2, #2
 8005c36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c3a:	008b      	lsls	r3, r1, #2
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4623      	mov	r3, r4
 8005c40:	4628      	mov	r0, r5
 8005c42:	4631      	mov	r1, r6
 8005c44:	f7fa fb14 	bl	8000270 <__aeabi_uldivmod>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	4b50      	ldr	r3, [pc, #320]	; (8005d90 <UART_SetConfig+0x6f4>)
 8005c50:	fba3 2302 	umull	r2, r3, r3, r2
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	469b      	mov	fp, r3
 8005c5e:	f04f 0c00 	mov.w	ip, #0
 8005c62:	46d9      	mov	r9, fp
 8005c64:	46e2      	mov	sl, ip
 8005c66:	eb19 0309 	adds.w	r3, r9, r9
 8005c6a:	eb4a 040a 	adc.w	r4, sl, sl
 8005c6e:	4699      	mov	r9, r3
 8005c70:	46a2      	mov	sl, r4
 8005c72:	eb19 090b 	adds.w	r9, r9, fp
 8005c76:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c7a:	f04f 0100 	mov.w	r1, #0
 8005c7e:	f04f 0200 	mov.w	r2, #0
 8005c82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c8e:	4689      	mov	r9, r1
 8005c90:	4692      	mov	sl, r2
 8005c92:	eb1b 0509 	adds.w	r5, fp, r9
 8005c96:	eb4c 060a 	adc.w	r6, ip, sl
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	f04f 0400 	mov.w	r4, #0
 8005cac:	0094      	lsls	r4, r2, #2
 8005cae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cb2:	008b      	lsls	r3, r1, #2
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	4623      	mov	r3, r4
 8005cb8:	4628      	mov	r0, r5
 8005cba:	4631      	mov	r1, r6
 8005cbc:	f7fa fad8 	bl	8000270 <__aeabi_uldivmod>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4b32      	ldr	r3, [pc, #200]	; (8005d90 <UART_SetConfig+0x6f4>)
 8005cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	2164      	movs	r1, #100	; 0x64
 8005cd0:	fb01 f303 	mul.w	r3, r1, r3
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	3332      	adds	r3, #50	; 0x32
 8005cda:	4a2d      	ldr	r2, [pc, #180]	; (8005d90 <UART_SetConfig+0x6f4>)
 8005cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ce6:	4498      	add	r8, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	469b      	mov	fp, r3
 8005cec:	f04f 0c00 	mov.w	ip, #0
 8005cf0:	46d9      	mov	r9, fp
 8005cf2:	46e2      	mov	sl, ip
 8005cf4:	eb19 0309 	adds.w	r3, r9, r9
 8005cf8:	eb4a 040a 	adc.w	r4, sl, sl
 8005cfc:	4699      	mov	r9, r3
 8005cfe:	46a2      	mov	sl, r4
 8005d00:	eb19 090b 	adds.w	r9, r9, fp
 8005d04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d08:	f04f 0100 	mov.w	r1, #0
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d1c:	4689      	mov	r9, r1
 8005d1e:	4692      	mov	sl, r2
 8005d20:	eb1b 0509 	adds.w	r5, fp, r9
 8005d24:	eb4c 060a 	adc.w	r6, ip, sl
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	f04f 0300 	mov.w	r3, #0
 8005d36:	f04f 0400 	mov.w	r4, #0
 8005d3a:	0094      	lsls	r4, r2, #2
 8005d3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d40:	008b      	lsls	r3, r1, #2
 8005d42:	461a      	mov	r2, r3
 8005d44:	4623      	mov	r3, r4
 8005d46:	4628      	mov	r0, r5
 8005d48:	4631      	mov	r1, r6
 8005d4a:	f7fa fa91 	bl	8000270 <__aeabi_uldivmod>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	460c      	mov	r4, r1
 8005d52:	461a      	mov	r2, r3
 8005d54:	4b0e      	ldr	r3, [pc, #56]	; (8005d90 <UART_SetConfig+0x6f4>)
 8005d56:	fba3 1302 	umull	r1, r3, r3, r2
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	2164      	movs	r1, #100	; 0x64
 8005d5e:	fb01 f303 	mul.w	r3, r1, r3
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	3332      	adds	r3, #50	; 0x32
 8005d68:	4a09      	ldr	r2, [pc, #36]	; (8005d90 <UART_SetConfig+0x6f4>)
 8005d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6e:	095b      	lsrs	r3, r3, #5
 8005d70:	f003 020f 	and.w	r2, r3, #15
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4442      	add	r2, r8
 8005d7a:	609a      	str	r2, [r3, #8]
}
 8005d7c:	e7ff      	b.n	8005d7e <UART_SetConfig+0x6e2>
 8005d7e:	bf00      	nop
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d88:	40011000 	.word	0x40011000
 8005d8c:	40011400 	.word	0x40011400
 8005d90:	51eb851f 	.word	0x51eb851f

08005d94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d94:	b084      	sub	sp, #16
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b084      	sub	sp, #16
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	f107 001c 	add.w	r0, r7, #28
 8005da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d122      	bne.n	8005df2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d105      	bne.n	8005de6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f94a 	bl	8006080 <USB_CoreReset>
 8005dec:	4603      	mov	r3, r0
 8005dee:	73fb      	strb	r3, [r7, #15]
 8005df0:	e01a      	b.n	8005e28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f93e 	bl	8006080 <USB_CoreReset>
 8005e04:	4603      	mov	r3, r0
 8005e06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d106      	bne.n	8005e1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	639a      	str	r2, [r3, #56]	; 0x38
 8005e1a:	e005      	b.n	8005e28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d10b      	bne.n	8005e46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f043 0206 	orr.w	r2, r3, #6
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f043 0220 	orr.w	r2, r3, #32
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e52:	b004      	add	sp, #16
 8005e54:	4770      	bx	lr

08005e56 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f043 0201 	orr.w	r2, r3, #1
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f023 0201 	bic.w	r2, r3, #1
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b082      	sub	sp, #8
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005eb2:	78fb      	ldrb	r3, [r7, #3]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d106      	bne.n	8005ec6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	60da      	str	r2, [r3, #12]
 8005ec4:	e00b      	b.n	8005ede <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	60da      	str	r2, [r3, #12]
 8005ed8:	e001      	b.n	8005ede <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e003      	b.n	8005ee6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005ede:	2032      	movs	r0, #50	; 0x32
 8005ee0:	f7fb fa98 	bl	8001414 <HAL_Delay>

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	019b      	lsls	r3, r3, #6
 8005f02:	f043 0220 	orr.w	r2, r3, #32
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4a09      	ldr	r2, [pc, #36]	; (8005f38 <USB_FlushTxFifo+0x48>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d901      	bls.n	8005f1c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e006      	b.n	8005f2a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f003 0320 	and.w	r3, r3, #32
 8005f24:	2b20      	cmp	r3, #32
 8005f26:	d0f0      	beq.n	8005f0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	00030d40 	.word	0x00030d40

08005f3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2210      	movs	r2, #16
 8005f4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3301      	adds	r3, #1
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4a09      	ldr	r2, [pc, #36]	; (8005f7c <USB_FlushRxFifo+0x40>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d901      	bls.n	8005f60 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e006      	b.n	8005f6e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f003 0310 	and.w	r3, r3, #16
 8005f68:	2b10      	cmp	r3, #16
 8005f6a:	d0f0      	beq.n	8005f4e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	00030d40 	.word	0x00030d40

08005f80 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b089      	sub	sp, #36	; 0x24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	460b      	mov	r3, r1
 8005f90:	71fb      	strb	r3, [r7, #7]
 8005f92:	4613      	mov	r3, r2
 8005f94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005f9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d11a      	bne.n	8005fdc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005fa6:	88bb      	ldrh	r3, [r7, #4]
 8005fa8:	3303      	adds	r3, #3
 8005faa:	089b      	lsrs	r3, r3, #2
 8005fac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fae:	2300      	movs	r3, #0
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	e00f      	b.n	8005fd4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fb4:	79fb      	ldrb	r3, [r7, #7]
 8005fb6:	031a      	lsls	r2, r3, #12
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	61bb      	str	r3, [r7, #24]
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d3eb      	bcc.n	8005fb4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3724      	adds	r7, #36	; 0x24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b089      	sub	sp, #36	; 0x24
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	60b9      	str	r1, [r7, #8]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006000:	88fb      	ldrh	r3, [r7, #6]
 8006002:	3303      	adds	r3, #3
 8006004:	089b      	lsrs	r3, r3, #2
 8006006:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006008:	2300      	movs	r3, #0
 800600a:	61bb      	str	r3, [r7, #24]
 800600c:	e00b      	b.n	8006026 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	601a      	str	r2, [r3, #0]
    pDest++;
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	3304      	adds	r3, #4
 800601e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	3301      	adds	r3, #1
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	429a      	cmp	r2, r3
 800602c:	d3ef      	bcc.n	800600e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800602e:	69fb      	ldr	r3, [r7, #28]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3724      	adds	r7, #36	; 0x24
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4013      	ands	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006054:	68fb      	ldr	r3, [r7, #12]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f003 0301 	and.w	r3, r3, #1
}
 8006072:	4618      	mov	r0, r3
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
	...

08006080 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3301      	adds	r3, #1
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4a13      	ldr	r2, [pc, #76]	; (80060e4 <USB_CoreReset+0x64>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d901      	bls.n	800609e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e01b      	b.n	80060d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	daf2      	bge.n	800608c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f043 0201 	orr.w	r2, r3, #1
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3301      	adds	r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4a09      	ldr	r2, [pc, #36]	; (80060e4 <USB_CoreReset+0x64>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d901      	bls.n	80060c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e006      	b.n	80060d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d0f0      	beq.n	80060b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	00030d40 	.word	0x00030d40

080060e8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060e8:	b084      	sub	sp, #16
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	f107 001c 	add.w	r0, r7, #28
 80060f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006104:	461a      	mov	r2, r3
 8006106:	2300      	movs	r3, #0
 8006108:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006126:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006136:	2b00      	cmp	r3, #0
 8006138:	d018      	beq.n	800616c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	2b01      	cmp	r3, #1
 800613e:	d10a      	bne.n	8006156 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800614e:	f043 0304 	orr.w	r3, r3, #4
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	e014      	b.n	8006180 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006164:	f023 0304 	bic.w	r3, r3, #4
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	e009      	b.n	8006180 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800617a:	f023 0304 	bic.w	r3, r3, #4
 800617e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006180:	2110      	movs	r1, #16
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff feb4 	bl	8005ef0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff fed7 	bl	8005f3c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800618e:	2300      	movs	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	e015      	b.n	80061c0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4413      	add	r3, r2
 800619c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a0:	461a      	mov	r2, r3
 80061a2:	f04f 33ff 	mov.w	r3, #4294967295
 80061a6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b4:	461a      	mov	r2, r3
 80061b6:	2300      	movs	r3, #0
 80061b8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3301      	adds	r3, #1
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d3e5      	bcc.n	8006194 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80061c8:	2101      	movs	r1, #1
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f8ac 	bl	8006328 <USB_DriveVbus>

  HAL_Delay(200U);
 80061d0:	20c8      	movs	r0, #200	; 0xc8
 80061d2:	f7fb f91f 	bl	8001414 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f04f 32ff 	mov.w	r2, #4294967295
 80061e2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00b      	beq.n	8006208 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a14      	ldr	r2, [pc, #80]	; (800624c <USB_HostInit+0x164>)
 80061fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a13      	ldr	r2, [pc, #76]	; (8006250 <USB_HostInit+0x168>)
 8006202:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006206:	e009      	b.n	800621c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2280      	movs	r2, #128	; 0x80
 800620c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a10      	ldr	r2, [pc, #64]	; (8006254 <USB_HostInit+0x16c>)
 8006212:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a10      	ldr	r2, [pc, #64]	; (8006258 <USB_HostInit+0x170>)
 8006218:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	2b00      	cmp	r3, #0
 8006220:	d105      	bne.n	800622e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f043 0210 	orr.w	r2, r3, #16
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	4b0a      	ldr	r3, [pc, #40]	; (800625c <USB_HostInit+0x174>)
 8006234:	4313      	orrs	r3, r2
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006246:	b004      	add	sp, #16
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	01000200 	.word	0x01000200
 8006250:	00e00300 	.word	0x00e00300
 8006254:	00600080 	.word	0x00600080
 8006258:	004000e0 	.word	0x004000e0
 800625c:	a3200008 	.word	0xa3200008

08006260 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800627e:	f023 0303 	bic.w	r3, r3, #3
 8006282:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	68f9      	ldr	r1, [r7, #12]
 8006294:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006298:	4313      	orrs	r3, r2
 800629a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d107      	bne.n	80062b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062a8:	461a      	mov	r2, r3
 80062aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80062ae:	6053      	str	r3, [r2, #4]
 80062b0:	e009      	b.n	80062c6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d106      	bne.n	80062c6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062be:	461a      	mov	r2, r3
 80062c0:	f241 7370 	movw	r3, #6000	; 0x1770
 80062c4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80062f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006302:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006304:	2064      	movs	r0, #100	; 0x64
 8006306:	f7fb f885 	bl	8001414 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006312:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006316:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006318:	200a      	movs	r0, #10
 800631a:	f7fb f87b 	bl	8001414 <HAL_Delay>

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800634c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d109      	bne.n	800636c <USB_DriveVbus+0x44>
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d106      	bne.n	800636c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006366:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800636a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006376:	d109      	bne.n	800638c <USB_DriveVbus+0x64>
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800638a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800639a:	b480      	push	{r7}
 800639c:	b085      	sub	sp, #20
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	0c5b      	lsrs	r3, r3, #17
 80063b8:	f003 0303 	and.w	r3, r3, #3
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	b29b      	uxth	r3, r3
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
	...

080063ec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	4608      	mov	r0, r1
 80063f6:	4611      	mov	r1, r2
 80063f8:	461a      	mov	r2, r3
 80063fa:	4603      	mov	r3, r0
 80063fc:	70fb      	strb	r3, [r7, #3]
 80063fe:	460b      	mov	r3, r1
 8006400:	70bb      	strb	r3, [r7, #2]
 8006402:	4613      	mov	r3, r2
 8006404:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800640e:	78fb      	ldrb	r3, [r7, #3]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4413      	add	r3, r2
 8006416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641a:	461a      	mov	r2, r3
 800641c:	f04f 33ff 	mov.w	r3, #4294967295
 8006420:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006422:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006426:	2b03      	cmp	r3, #3
 8006428:	d87e      	bhi.n	8006528 <USB_HC_Init+0x13c>
 800642a:	a201      	add	r2, pc, #4	; (adr r2, 8006430 <USB_HC_Init+0x44>)
 800642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006430:	08006441 	.word	0x08006441
 8006434:	080064eb 	.word	0x080064eb
 8006438:	08006441 	.word	0x08006441
 800643c:	080064ad 	.word	0x080064ad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4413      	add	r3, r2
 8006448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644c:	461a      	mov	r2, r3
 800644e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006452:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006454:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006458:	2b00      	cmp	r3, #0
 800645a:	da10      	bge.n	800647e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4413      	add	r3, r2
 8006464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	78fa      	ldrb	r2, [r7, #3]
 800646c:	0151      	lsls	r1, r2, #5
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	440a      	add	r2, r1
 8006472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800647a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800647c:	e057      	b.n	800652e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006486:	2b00      	cmp	r3, #0
 8006488:	d051      	beq.n	800652e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800648a:	78fb      	ldrb	r3, [r7, #3]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	78fa      	ldrb	r2, [r7, #3]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80064a8:	60d3      	str	r3, [r2, #12]
      break;
 80064aa:	e040      	b.n	800652e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064ac:	78fb      	ldrb	r3, [r7, #3]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b8:	461a      	mov	r2, r3
 80064ba:	f240 639d 	movw	r3, #1693	; 0x69d
 80064be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80064c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	da34      	bge.n	8006532 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	78fa      	ldrb	r2, [r7, #3]
 80064d8:	0151      	lsls	r1, r2, #5
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	440a      	add	r2, r1
 80064de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80064e8:	e023      	b.n	8006532 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064ea:	78fb      	ldrb	r3, [r7, #3]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f6:	461a      	mov	r2, r3
 80064f8:	f240 2325 	movw	r3, #549	; 0x225
 80064fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80064fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006502:	2b00      	cmp	r3, #0
 8006504:	da17      	bge.n	8006536 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006506:	78fb      	ldrb	r3, [r7, #3]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	4413      	add	r3, r2
 800650e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	78fa      	ldrb	r2, [r7, #3]
 8006516:	0151      	lsls	r1, r2, #5
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	440a      	add	r2, r1
 800651c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006520:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006524:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006526:	e006      	b.n	8006536 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	75fb      	strb	r3, [r7, #23]
      break;
 800652c:	e004      	b.n	8006538 <USB_HC_Init+0x14c>
      break;
 800652e:	bf00      	nop
 8006530:	e002      	b.n	8006538 <USB_HC_Init+0x14c>
      break;
 8006532:	bf00      	nop
 8006534:	e000      	b.n	8006538 <USB_HC_Init+0x14c>
      break;
 8006536:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800653e:	699a      	ldr	r2, [r3, #24]
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	f003 030f 	and.w	r3, r3, #15
 8006546:	2101      	movs	r1, #1
 8006548:	fa01 f303 	lsl.w	r3, r1, r3
 800654c:	68b9      	ldr	r1, [r7, #8]
 800654e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006552:	4313      	orrs	r3, r2
 8006554:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006562:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006566:	2b00      	cmp	r3, #0
 8006568:	da03      	bge.n	8006572 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800656a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800656e:	613b      	str	r3, [r7, #16]
 8006570:	e001      	b.n	8006576 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006576:	f897 3020 	ldrb.w	r3, [r7, #32]
 800657a:	2b02      	cmp	r3, #2
 800657c:	d103      	bne.n	8006586 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800657e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	e001      	b.n	800658a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800658a:	787b      	ldrb	r3, [r7, #1]
 800658c:	059b      	lsls	r3, r3, #22
 800658e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006592:	78bb      	ldrb	r3, [r7, #2]
 8006594:	02db      	lsls	r3, r3, #11
 8006596:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800659a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800659c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80065a0:	049b      	lsls	r3, r3, #18
 80065a2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80065a6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80065a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80065aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80065ae:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	0159      	lsls	r1, r3, #5
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	440b      	add	r3, r1
 80065bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065c6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80065c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d10f      	bne.n	80065f0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	78fa      	ldrb	r2, [r7, #3]
 80065e0:	0151      	lsls	r1, r2, #5
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	440a      	add	r2, r1
 80065e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065ee:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	371c      	adds	r7, #28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop

08006600 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08c      	sub	sp, #48	; 0x30
 8006604:	af02      	add	r7, sp, #8
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	4613      	mov	r3, r2
 800660c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	785b      	ldrb	r3, [r3, #1]
 8006616:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800661c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006626:	2b00      	cmp	r3, #0
 8006628:	d028      	beq.n	800667c <USB_HC_StartXfer+0x7c>
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	791b      	ldrb	r3, [r3, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d124      	bne.n	800667c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006632:	79fb      	ldrb	r3, [r7, #7]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10b      	bne.n	8006650 <USB_HC_StartXfer+0x50>
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	795b      	ldrb	r3, [r3, #5]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d107      	bne.n	8006650 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	4619      	mov	r1, r3
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 fa30 	bl	8006aac <USB_DoPing>
      return HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	e114      	b.n	800687a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006650:	79fb      	ldrb	r3, [r7, #7]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d112      	bne.n	800667c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	4413      	add	r3, r2
 800665e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	69fa      	ldr	r2, [r7, #28]
 8006666:	0151      	lsls	r1, r2, #5
 8006668:	6a3a      	ldr	r2, [r7, #32]
 800666a:	440a      	add	r2, r1
 800666c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006670:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006674:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2200      	movs	r2, #0
 800667a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d018      	beq.n	80066b6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	8912      	ldrh	r2, [r2, #8]
 800668c:	4413      	add	r3, r2
 800668e:	3b01      	subs	r3, #1
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	8912      	ldrh	r2, [r2, #8]
 8006694:	fbb3 f3f2 	udiv	r3, r3, r2
 8006698:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800669a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800669c:	8b7b      	ldrh	r3, [r7, #26]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d90b      	bls.n	80066ba <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80066a2:	8b7b      	ldrh	r3, [r7, #26]
 80066a4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80066a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	8912      	ldrh	r2, [r2, #8]
 80066ac:	fb02 f203 	mul.w	r2, r2, r3
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	611a      	str	r2, [r3, #16]
 80066b4:	e001      	b.n	80066ba <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80066b6:	2301      	movs	r3, #1
 80066b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	78db      	ldrb	r3, [r3, #3]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d006      	beq.n	80066d0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80066c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	8912      	ldrh	r2, [r2, #8]
 80066c8:	fb02 f203 	mul.w	r2, r2, r3
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066da:	04d9      	lsls	r1, r3, #19
 80066dc:	4b69      	ldr	r3, [pc, #420]	; (8006884 <USB_HC_StartXfer+0x284>)
 80066de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80066e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	7a9b      	ldrb	r3, [r3, #10]
 80066e6:	075b      	lsls	r3, r3, #29
 80066e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80066ec:	69f9      	ldr	r1, [r7, #28]
 80066ee:	0148      	lsls	r0, r1, #5
 80066f0:	6a39      	ldr	r1, [r7, #32]
 80066f2:	4401      	add	r1, r0
 80066f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80066fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d009      	beq.n	8006716 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	68d9      	ldr	r1, [r3, #12]
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	4413      	add	r3, r2
 800670e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006712:	460a      	mov	r2, r1
 8006714:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	bf0c      	ite	eq
 8006726:	2301      	moveq	r3, #1
 8006728:	2300      	movne	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	4413      	add	r3, r2
 8006736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	0151      	lsls	r1, r2, #5
 8006740:	6a3a      	ldr	r2, [r7, #32]
 8006742:	440a      	add	r2, r1
 8006744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006748:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800674c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	4413      	add	r3, r2
 8006756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	7e7b      	ldrb	r3, [r7, #25]
 800675e:	075b      	lsls	r3, r3, #29
 8006760:	69f9      	ldr	r1, [r7, #28]
 8006762:	0148      	lsls	r0, r1, #5
 8006764:	6a39      	ldr	r1, [r7, #32]
 8006766:	4401      	add	r1, r0
 8006768:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800676c:	4313      	orrs	r3, r2
 800676e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	4413      	add	r3, r2
 8006778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a42      	ldr	r2, [pc, #264]	; (8006888 <USB_HC_StartXfer+0x288>)
 8006780:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006782:	4b41      	ldr	r3, [pc, #260]	; (8006888 <USB_HC_StartXfer+0x288>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800678a:	4a3f      	ldr	r2, [pc, #252]	; (8006888 <USB_HC_StartXfer+0x288>)
 800678c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	78db      	ldrb	r3, [r3, #3]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d006      	beq.n	80067a4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006796:	4b3c      	ldr	r3, [pc, #240]	; (8006888 <USB_HC_StartXfer+0x288>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800679e:	4a3a      	ldr	r2, [pc, #232]	; (8006888 <USB_HC_StartXfer+0x288>)
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	e005      	b.n	80067b0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80067a4:	4b38      	ldr	r3, [pc, #224]	; (8006888 <USB_HC_StartXfer+0x288>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067ac:	4a36      	ldr	r2, [pc, #216]	; (8006888 <USB_HC_StartXfer+0x288>)
 80067ae:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80067b0:	4b35      	ldr	r3, [pc, #212]	; (8006888 <USB_HC_StartXfer+0x288>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067b8:	4a33      	ldr	r2, [pc, #204]	; (8006888 <USB_HC_StartXfer+0x288>)
 80067ba:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c8:	461a      	mov	r2, r3
 80067ca:	4b2f      	ldr	r3, [pc, #188]	; (8006888 <USB_HC_StartXfer+0x288>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	e04f      	b.n	800687a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	78db      	ldrb	r3, [r3, #3]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d14a      	bne.n	8006878 <USB_HC_StartXfer+0x278>
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d046      	beq.n	8006878 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	79db      	ldrb	r3, [r3, #7]
 80067ee:	2b03      	cmp	r3, #3
 80067f0:	d830      	bhi.n	8006854 <USB_HC_StartXfer+0x254>
 80067f2:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <USB_HC_StartXfer+0x1f8>)
 80067f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f8:	08006809 	.word	0x08006809
 80067fc:	0800682d 	.word	0x0800682d
 8006800:	08006809 	.word	0x08006809
 8006804:	0800682d 	.word	0x0800682d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	3303      	adds	r3, #3
 800680e:	089b      	lsrs	r3, r3, #2
 8006810:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006812:	8afa      	ldrh	r2, [r7, #22]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	b29b      	uxth	r3, r3
 800681a:	429a      	cmp	r2, r3
 800681c:	d91c      	bls.n	8006858 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f043 0220 	orr.w	r2, r3, #32
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	619a      	str	r2, [r3, #24]
        }
        break;
 800682a:	e015      	b.n	8006858 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	3303      	adds	r3, #3
 8006832:	089b      	lsrs	r3, r3, #2
 8006834:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006836:	8afa      	ldrh	r2, [r7, #22]
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	b29b      	uxth	r3, r3
 8006842:	429a      	cmp	r2, r3
 8006844:	d90a      	bls.n	800685c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	619a      	str	r2, [r3, #24]
        }
        break;
 8006852:	e003      	b.n	800685c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006854:	bf00      	nop
 8006856:	e002      	b.n	800685e <USB_HC_StartXfer+0x25e>
        break;
 8006858:	bf00      	nop
 800685a:	e000      	b.n	800685e <USB_HC_StartXfer+0x25e>
        break;
 800685c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	68d9      	ldr	r1, [r3, #12]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	785a      	ldrb	r2, [r3, #1]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	b298      	uxth	r0, r3
 800686c:	2300      	movs	r3, #0
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	4603      	mov	r3, r0
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f7ff fb84 	bl	8005f80 <USB_WritePacket>
  }

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3728      	adds	r7, #40	; 0x28
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	1ff80000 	.word	0x1ff80000
 8006888:	200000b8 	.word	0x200000b8

0800688c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	b29b      	uxth	r3, r3
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b087      	sub	sp, #28
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	460b      	mov	r3, r1
 80068b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80068be:	78fb      	ldrb	r3, [r7, #3]
 80068c0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	0c9b      	lsrs	r3, r3, #18
 80068d6:	f003 0303 	and.w	r3, r3, #3
 80068da:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <USB_HC_Halt+0x3a>
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d16c      	bne.n	80069c2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	0151      	lsls	r1, r2, #5
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	440a      	add	r2, r1
 80068fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006902:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006906:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d143      	bne.n	800699c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	4413      	add	r3, r2
 800691c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	0151      	lsls	r1, r2, #5
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	440a      	add	r2, r1
 800692a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800692e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006932:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	4413      	add	r3, r2
 800693c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	0151      	lsls	r1, r2, #5
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	440a      	add	r2, r1
 800694a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800694e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006952:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	4413      	add	r3, r2
 800695c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	0151      	lsls	r1, r2, #5
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	440a      	add	r2, r1
 800696a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800696e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006972:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	3301      	adds	r3, #1
 8006978:	617b      	str	r3, [r7, #20]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006980:	d81d      	bhi.n	80069be <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	4413      	add	r3, r2
 800698a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006998:	d0ec      	beq.n	8006974 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800699a:	e080      	b.n	8006a9e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	0151      	lsls	r1, r2, #5
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	440a      	add	r2, r1
 80069b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069ba:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80069bc:	e06f      	b.n	8006a9e <USB_HC_Halt+0x1f0>
          break;
 80069be:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80069c0:	e06d      	b.n	8006a9e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	0151      	lsls	r1, r2, #5
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	440a      	add	r2, r1
 80069d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069e0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d143      	bne.n	8006a7a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	0151      	lsls	r1, r2, #5
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	440a      	add	r2, r1
 8006a08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a10:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	0151      	lsls	r1, r2, #5
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	440a      	add	r2, r1
 8006a28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a30:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	0151      	lsls	r1, r2, #5
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	440a      	add	r2, r1
 8006a48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a50:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	3301      	adds	r3, #1
 8006a56:	617b      	str	r3, [r7, #20]
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a5e:	d81d      	bhi.n	8006a9c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a76:	d0ec      	beq.n	8006a52 <USB_HC_Halt+0x1a4>
 8006a78:	e011      	b.n	8006a9e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	0151      	lsls	r1, r2, #5
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	440a      	add	r2, r1
 8006a90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	e000      	b.n	8006a9e <USB_HC_Halt+0x1f0>
          break;
 8006a9c:	bf00      	nop
    }
  }

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	04da      	lsls	r2, r3, #19
 8006ac8:	4b15      	ldr	r3, [pc, #84]	; (8006b20 <USB_DoPing+0x74>)
 8006aca:	4013      	ands	r3, r2
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	0151      	lsls	r1, r2, #5
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	440a      	add	r2, r1
 8006ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ad8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006adc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006af4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006afc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	371c      	adds	r7, #28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	1ff80000 	.word	0x1ff80000

08006b24 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7ff f99f 	bl	8005e78 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006b3a:	2110      	movs	r1, #16
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff f9d7 	bl	8005ef0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7ff f9fa 	bl	8005f3c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	e01f      	b.n	8006b8e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b64:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b6c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b74:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b82:	461a      	mov	r2, r3
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	613b      	str	r3, [r7, #16]
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b0f      	cmp	r3, #15
 8006b92:	d9dc      	bls.n	8006b4e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006b94:	2300      	movs	r3, #0
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	e034      	b.n	8006c04 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bb0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bb8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bc0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bce:	461a      	mov	r2, r3
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006be0:	d80c      	bhi.n	8006bfc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bf8:	d0ec      	beq.n	8006bd4 <USB_StopHost+0xb0>
 8006bfa:	e000      	b.n	8006bfe <USB_StopHost+0xda>
        break;
 8006bfc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	3301      	adds	r3, #1
 8006c02:	613b      	str	r3, [r7, #16]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	2b0f      	cmp	r3, #15
 8006c08:	d9c7      	bls.n	8006b9a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c10:	461a      	mov	r2, r3
 8006c12:	f04f 33ff 	mov.w	r3, #4294967295
 8006c16:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c1e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7ff f918 	bl	8005e56 <USB_EnableGlobalInt>

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006c30:	b590      	push	{r4, r7, lr}
 8006c32:	b089      	sub	sp, #36	; 0x24
 8006c34:	af04      	add	r7, sp, #16
 8006c36:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006c38:	2301      	movs	r3, #1
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	2102      	movs	r1, #2
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fc68 	bl	8007514 <USBH_FindInterface>
 8006c44:	4603      	mov	r3, r0
 8006c46:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	2bff      	cmp	r3, #255	; 0xff
 8006c4c:	d002      	beq.n	8006c54 <USBH_CDC_InterfaceInit+0x24>
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d901      	bls.n	8006c58 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c54:	2302      	movs	r3, #2
 8006c56:	e13d      	b.n	8006ed4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fc3d 	bl	80074dc <USBH_SelectInterface>
 8006c62:	4603      	mov	r3, r0
 8006c64:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006c66:	7bbb      	ldrb	r3, [r7, #14]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e131      	b.n	8006ed4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006c76:	2050      	movs	r0, #80	; 0x50
 8006c78:	f002 fa04 	bl	8009084 <malloc>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006c90:	2302      	movs	r3, #2
 8006c92:	e11f      	b.n	8006ed4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006c94:	2250      	movs	r2, #80	; 0x50
 8006c96:	2100      	movs	r1, #0
 8006c98:	68b8      	ldr	r0, [r7, #8]
 8006c9a:	f002 fa0e 	bl	80090ba <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	211a      	movs	r1, #26
 8006ca4:	fb01 f303 	mul.w	r3, r1, r3
 8006ca8:	4413      	add	r3, r2
 8006caa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	b25b      	sxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	da15      	bge.n	8006ce2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	211a      	movs	r1, #26
 8006cbc:	fb01 f303 	mul.w	r3, r1, r3
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006cc6:	781a      	ldrb	r2, [r3, #0]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	211a      	movs	r1, #26
 8006cd2:	fb01 f303 	mul.w	r3, r1, r3
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006cdc:	881a      	ldrh	r2, [r3, #0]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	785b      	ldrb	r3, [r3, #1]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 fe36 	bl	800895a <USBH_AllocPipe>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	7819      	ldrb	r1, [r3, #0]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	7858      	ldrb	r0, [r3, #1]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	8952      	ldrh	r2, [r2, #10]
 8006d0e:	9202      	str	r2, [sp, #8]
 8006d10:	2203      	movs	r2, #3
 8006d12:	9201      	str	r2, [sp, #4]
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	4623      	mov	r3, r4
 8006d18:	4602      	mov	r2, r0
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 fdee 	bl	80088fc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	2200      	movs	r2, #0
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f002 f8fb 	bl	8008f24 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006d2e:	2300      	movs	r3, #0
 8006d30:	2200      	movs	r2, #0
 8006d32:	210a      	movs	r1, #10
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fbed 	bl	8007514 <USBH_FindInterface>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
 8006d40:	2bff      	cmp	r3, #255	; 0xff
 8006d42:	d002      	beq.n	8006d4a <USBH_CDC_InterfaceInit+0x11a>
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d901      	bls.n	8006d4e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	e0c2      	b.n	8006ed4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	211a      	movs	r1, #26
 8006d54:	fb01 f303 	mul.w	r3, r1, r3
 8006d58:	4413      	add	r3, r2
 8006d5a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	b25b      	sxtb	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	da16      	bge.n	8006d94 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	211a      	movs	r1, #26
 8006d6c:	fb01 f303 	mul.w	r3, r1, r3
 8006d70:	4413      	add	r3, r2
 8006d72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d76:	781a      	ldrb	r2, [r3, #0]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	211a      	movs	r1, #26
 8006d82:	fb01 f303 	mul.w	r3, r1, r3
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d8c:	881a      	ldrh	r2, [r3, #0]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	835a      	strh	r2, [r3, #26]
 8006d92:	e015      	b.n	8006dc0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	211a      	movs	r1, #26
 8006d9a:	fb01 f303 	mul.w	r3, r1, r3
 8006d9e:	4413      	add	r3, r2
 8006da0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006da4:	781a      	ldrb	r2, [r3, #0]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	211a      	movs	r1, #26
 8006db0:	fb01 f303 	mul.w	r3, r1, r3
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006dba:	881a      	ldrh	r2, [r3, #0]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	211a      	movs	r1, #26
 8006dc6:	fb01 f303 	mul.w	r3, r1, r3
 8006dca:	4413      	add	r3, r2
 8006dcc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	b25b      	sxtb	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	da16      	bge.n	8006e06 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	211a      	movs	r1, #26
 8006dde:	fb01 f303 	mul.w	r3, r1, r3
 8006de2:	4413      	add	r3, r2
 8006de4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006de8:	781a      	ldrb	r2, [r3, #0]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	211a      	movs	r1, #26
 8006df4:	fb01 f303 	mul.w	r3, r1, r3
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006dfe:	881a      	ldrh	r2, [r3, #0]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	835a      	strh	r2, [r3, #26]
 8006e04:	e015      	b.n	8006e32 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	211a      	movs	r1, #26
 8006e0c:	fb01 f303 	mul.w	r3, r1, r3
 8006e10:	4413      	add	r3, r2
 8006e12:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e16:	781a      	ldrb	r2, [r3, #0]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	211a      	movs	r1, #26
 8006e22:	fb01 f303 	mul.w	r3, r1, r3
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006e2c:	881a      	ldrh	r2, [r3, #0]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	7b9b      	ldrb	r3, [r3, #14]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 fd8e 	bl	800895a <USBH_AllocPipe>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	461a      	mov	r2, r3
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	7bdb      	ldrb	r3, [r3, #15]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 fd84 	bl	800895a <USBH_AllocPipe>
 8006e52:	4603      	mov	r3, r0
 8006e54:	461a      	mov	r2, r3
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	7b59      	ldrb	r1, [r3, #13]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	7b98      	ldrb	r0, [r3, #14]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	8b12      	ldrh	r2, [r2, #24]
 8006e72:	9202      	str	r2, [sp, #8]
 8006e74:	2202      	movs	r2, #2
 8006e76:	9201      	str	r2, [sp, #4]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	4623      	mov	r3, r4
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 fd3c 	bl	80088fc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	7b19      	ldrb	r1, [r3, #12]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	7bd8      	ldrb	r0, [r3, #15]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	8b52      	ldrh	r2, [r2, #26]
 8006e9c:	9202      	str	r2, [sp, #8]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	9201      	str	r2, [sp, #4]
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	4623      	mov	r3, r4
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 fd27 	bl	80088fc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	7b5b      	ldrb	r3, [r3, #13]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f002 f830 	bl	8008f24 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	7b1b      	ldrb	r3, [r3, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f002 f829 	bl	8008f24 <USBH_LL_SetToggle>

  return USBH_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd90      	pop	{r4, r7, pc}

08006edc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00e      	beq.n	8006f14 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 fd1c 	bl	800893a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	4619      	mov	r1, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f001 fd47 	bl	800899c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	7b1b      	ldrb	r3, [r3, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00e      	beq.n	8006f3a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	7b1b      	ldrb	r3, [r3, #12]
 8006f20:	4619      	mov	r1, r3
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f001 fd09 	bl	800893a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	7b1b      	ldrb	r3, [r3, #12]
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f001 fd34 	bl	800899c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	7b5b      	ldrb	r3, [r3, #13]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00e      	beq.n	8006f60 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	7b5b      	ldrb	r3, [r3, #13]
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 fcf6 	bl	800893a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	7b5b      	ldrb	r3, [r3, #13]
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 fd21 	bl	800899c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00b      	beq.n	8006f84 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f002 f88d 	bl	8009094 <free>
    phost->pActiveClass->pData = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f80:	2200      	movs	r2, #0
 8006f82:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3340      	adds	r3, #64	; 0x40
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f8b1 	bl	800710e <GetLineCoding>
 8006fac:	4603      	mov	r3, r0
 8006fae:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006fb0:	7afb      	ldrb	r3, [r7, #11]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d105      	bne.n	8006fc2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fbc:	2102      	movs	r1, #2
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006fc2:	7afb      	ldrb	r3, [r7, #11]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d877      	bhi.n	80070e0 <USBH_CDC_Process+0x114>
 8006ff0:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <USBH_CDC_Process+0x2c>)
 8006ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff6:	bf00      	nop
 8006ff8:	0800700d 	.word	0x0800700d
 8006ffc:	08007013 	.word	0x08007013
 8007000:	08007043 	.word	0x08007043
 8007004:	080070b7 	.word	0x080070b7
 8007008:	080070c5 	.word	0x080070c5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	73fb      	strb	r3, [r7, #15]
      break;
 8007010:	e06d      	b.n	80070ee <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f897 	bl	800714c <SetLineCoding>
 800701e:	4603      	mov	r3, r0
 8007020:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007022:	7bbb      	ldrb	r3, [r7, #14]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d104      	bne.n	8007032 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007030:	e058      	b.n	80070e4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007032:	7bbb      	ldrb	r3, [r7, #14]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d055      	beq.n	80070e4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2204      	movs	r2, #4
 800703c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007040:	e050      	b.n	80070e4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	3340      	adds	r3, #64	; 0x40
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f860 	bl	800710e <GetLineCoding>
 800704e:	4603      	mov	r3, r0
 8007050:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007052:	7bbb      	ldrb	r3, [r7, #14]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d126      	bne.n	80070a6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800706a:	791b      	ldrb	r3, [r3, #4]
 800706c:	429a      	cmp	r2, r3
 800706e:	d13b      	bne.n	80070e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800707a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800707c:	429a      	cmp	r2, r3
 800707e:	d133      	bne.n	80070e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800708a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800708c:	429a      	cmp	r2, r3
 800708e:	d12b      	bne.n	80070e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007098:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800709a:	429a      	cmp	r2, r3
 800709c:	d124      	bne.n	80070e8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f95a 	bl	8007358 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80070a4:	e020      	b.n	80070e8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d01d      	beq.n	80070e8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2204      	movs	r2, #4
 80070b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80070b4:	e018      	b.n	80070e8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f867 	bl	800718a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f8dc 	bl	800727a <CDC_ProcessReception>
      break;
 80070c2:	e014      	b.n	80070ee <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80070c4:	2100      	movs	r1, #0
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 ffe5 	bl	8008096 <USBH_ClrFeature>
 80070cc:	4603      	mov	r3, r0
 80070ce:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10a      	bne.n	80070ec <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80070de:	e005      	b.n	80070ec <USBH_CDC_Process+0x120>

    default:
      break;
 80070e0:	bf00      	nop
 80070e2:	e004      	b.n	80070ee <USBH_CDC_Process+0x122>
      break;
 80070e4:	bf00      	nop
 80070e6:	e002      	b.n	80070ee <USBH_CDC_Process+0x122>
      break;
 80070e8:	bf00      	nop
 80070ea:	e000      	b.n	80070ee <USBH_CDC_Process+0x122>
      break;
 80070ec:	bf00      	nop

  }

  return status;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b082      	sub	sp, #8
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	22a1      	movs	r2, #161	; 0xa1
 800711c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2221      	movs	r2, #33	; 0x21
 8007122:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2207      	movs	r2, #7
 8007134:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2207      	movs	r2, #7
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 f98a 	bl	8008456 <USBH_CtlReq>
 8007142:	4603      	mov	r3, r0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2221      	movs	r2, #33	; 0x21
 800715a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2207      	movs	r2, #7
 8007172:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2207      	movs	r2, #7
 8007178:	4619      	mov	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 f96b 	bl	8008456 <USBH_CtlReq>
 8007180:	4603      	mov	r3, r0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b086      	sub	sp, #24
 800718e:	af02      	add	r7, sp, #8
 8007190:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800719c:	2300      	movs	r3, #0
 800719e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d002      	beq.n	80071b0 <CDC_ProcessTransmission+0x26>
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d025      	beq.n	80071fa <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80071ae:	e060      	b.n	8007272 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	8b12      	ldrh	r2, [r2, #24]
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d90c      	bls.n	80071d6 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	69d9      	ldr	r1, [r3, #28]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8b1a      	ldrh	r2, [r3, #24]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	7b58      	ldrb	r0, [r3, #13]
 80071c8:	2301      	movs	r3, #1
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	4603      	mov	r3, r0
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f001 fb51 	bl	8008876 <USBH_BulkSendData>
 80071d4:	e00c      	b.n	80071f0 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80071de:	b29a      	uxth	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	7b58      	ldrb	r0, [r3, #13]
 80071e4:	2301      	movs	r3, #1
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	4603      	mov	r3, r0
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f001 fb43 	bl	8008876 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80071f8:	e03b      	b.n	8007272 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	7b5b      	ldrb	r3, [r3, #13]
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f001 fe65 	bl	8008ed0 <USBH_LL_GetURBState>
 8007206:	4603      	mov	r3, r0
 8007208:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800720a:	7afb      	ldrb	r3, [r7, #11]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d128      	bne.n	8007262 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	8b12      	ldrh	r2, [r2, #24]
 8007218:	4293      	cmp	r3, r2
 800721a:	d90e      	bls.n	800723a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	8b12      	ldrh	r2, [r2, #24]
 8007224:	1a9a      	subs	r2, r3, r2
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	8b12      	ldrh	r2, [r2, #24]
 8007232:	441a      	add	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	61da      	str	r2, [r3, #28]
 8007238:	e002      	b.n	8007240 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	2b00      	cmp	r3, #0
 8007246:	d004      	beq.n	8007252 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007250:	e00e      	b.n	8007270 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f868 	bl	8007330 <USBH_CDC_TransmitCallback>
      break;
 8007260:	e006      	b.n	8007270 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8007262:	7afb      	ldrb	r3, [r7, #11]
 8007264:	2b02      	cmp	r3, #2
 8007266:	d103      	bne.n	8007270 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007270:	bf00      	nop
  }
}
 8007272:	bf00      	nop
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b086      	sub	sp, #24
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800728c:	2300      	movs	r3, #0
 800728e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007296:	2b03      	cmp	r3, #3
 8007298:	d002      	beq.n	80072a0 <CDC_ProcessReception+0x26>
 800729a:	2b04      	cmp	r3, #4
 800729c:	d00e      	beq.n	80072bc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800729e:	e043      	b.n	8007328 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	6a19      	ldr	r1, [r3, #32]
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	8b5a      	ldrh	r2, [r3, #26]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	7b1b      	ldrb	r3, [r3, #12]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f001 fb07 	bl	80088c0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2204      	movs	r2, #4
 80072b6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80072ba:	e035      	b.n	8007328 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	7b1b      	ldrb	r3, [r3, #12]
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 fe04 	bl	8008ed0 <USBH_LL_GetURBState>
 80072c8:	4603      	mov	r3, r0
 80072ca:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80072cc:	7cfb      	ldrb	r3, [r7, #19]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d129      	bne.n	8007326 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	7b1b      	ldrb	r3, [r3, #12]
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f001 fd67 	bl	8008dac <USBH_LL_GetLastXferSize>
 80072de:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d016      	beq.n	8007318 <CDC_ProcessReception+0x9e>
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	8b5b      	ldrh	r3, [r3, #26]
 80072ee:	461a      	mov	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d910      	bls.n	8007318 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	1ad2      	subs	r2, r2, r3
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	6a1a      	ldr	r2, [r3, #32]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	441a      	add	r2, r3
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2203      	movs	r2, #3
 8007312:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007316:	e006      	b.n	8007326 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f80f 	bl	8007344 <USBH_CDC_ReceiveCallback>
      break;
 8007326:	bf00      	nop
  }
}
 8007328:	bf00      	nop
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007380:	2302      	movs	r3, #2
 8007382:	e029      	b.n	80073d8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	79fa      	ldrb	r2, [r7, #7]
 8007388:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 f81f 	bl	80073e0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f001 fc39 	bl	8008c48 <USBH_LL_Init>

  return USBH_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80073ec:	2300      	movs	r3, #0
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	e009      	b.n	8007406 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	33e0      	adds	r3, #224	; 0xe0
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	2200      	movs	r2, #0
 80073fe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3301      	adds	r3, #1
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2b0e      	cmp	r3, #14
 800740a:	d9f2      	bls.n	80073f2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]
 8007410:	e009      	b.n	8007426 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4413      	add	r3, r2
 8007418:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800741c:	2200      	movs	r2, #0
 800741e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3301      	adds	r3, #1
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800742c:	d3f1      	bcc.n	8007412 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2240      	movs	r2, #64	; 0x40
 8007452:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d016      	beq.n	80074ca <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10e      	bne.n	80074c4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80074ac:	1c59      	adds	r1, r3, #1
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	33de      	adds	r3, #222	; 0xde
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	73fb      	strb	r3, [r7, #15]
 80074c2:	e004      	b.n	80074ce <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80074c4:	2302      	movs	r3, #2
 80074c6:	73fb      	strb	r3, [r7, #15]
 80074c8:	e001      	b.n	80074ce <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80074ca:	2302      	movs	r3, #2
 80074cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80074f2:	78fa      	ldrb	r2, [r7, #3]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d204      	bcs.n	8007502 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	78fa      	ldrb	r2, [r7, #3]
 80074fc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007500:	e001      	b.n	8007506 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007502:	2302      	movs	r3, #2
 8007504:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007506:	7bfb      	ldrb	r3, [r7, #15]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	4608      	mov	r0, r1
 800751e:	4611      	mov	r1, r2
 8007520:	461a      	mov	r2, r3
 8007522:	4603      	mov	r3, r0
 8007524:	70fb      	strb	r3, [r7, #3]
 8007526:	460b      	mov	r3, r1
 8007528:	70bb      	strb	r3, [r7, #2]
 800752a:	4613      	mov	r3, r2
 800752c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007532:	2300      	movs	r3, #0
 8007534:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800753c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800753e:	e025      	b.n	800758c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007540:	7dfb      	ldrb	r3, [r7, #23]
 8007542:	221a      	movs	r2, #26
 8007544:	fb02 f303 	mul.w	r3, r2, r3
 8007548:	3308      	adds	r3, #8
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	4413      	add	r3, r2
 800754e:	3302      	adds	r3, #2
 8007550:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	795b      	ldrb	r3, [r3, #5]
 8007556:	78fa      	ldrb	r2, [r7, #3]
 8007558:	429a      	cmp	r2, r3
 800755a:	d002      	beq.n	8007562 <USBH_FindInterface+0x4e>
 800755c:	78fb      	ldrb	r3, [r7, #3]
 800755e:	2bff      	cmp	r3, #255	; 0xff
 8007560:	d111      	bne.n	8007586 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007566:	78ba      	ldrb	r2, [r7, #2]
 8007568:	429a      	cmp	r2, r3
 800756a:	d002      	beq.n	8007572 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800756c:	78bb      	ldrb	r3, [r7, #2]
 800756e:	2bff      	cmp	r3, #255	; 0xff
 8007570:	d109      	bne.n	8007586 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007576:	787a      	ldrb	r2, [r7, #1]
 8007578:	429a      	cmp	r2, r3
 800757a:	d002      	beq.n	8007582 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800757c:	787b      	ldrb	r3, [r7, #1]
 800757e:	2bff      	cmp	r3, #255	; 0xff
 8007580:	d101      	bne.n	8007586 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007582:	7dfb      	ldrb	r3, [r7, #23]
 8007584:	e006      	b.n	8007594 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007586:	7dfb      	ldrb	r3, [r7, #23]
 8007588:	3301      	adds	r3, #1
 800758a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800758c:	7dfb      	ldrb	r3, [r7, #23]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d9d6      	bls.n	8007540 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007592:	23ff      	movs	r3, #255	; 0xff
}
 8007594:	4618      	mov	r0, r3
 8007596:	371c      	adds	r7, #28
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f001 fb89 	bl	8008cc0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80075ae:	2101      	movs	r1, #1
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f001 fca0 	bl	8008ef6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b088      	sub	sp, #32
 80075c4:	af04      	add	r7, sp, #16
 80075c6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80075c8:	2302      	movs	r3, #2
 80075ca:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d102      	bne.n	80075e2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2203      	movs	r2, #3
 80075e0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b0b      	cmp	r3, #11
 80075ea:	f200 81b3 	bhi.w	8007954 <USBH_Process+0x394>
 80075ee:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <USBH_Process+0x34>)
 80075f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f4:	08007625 	.word	0x08007625
 80075f8:	08007657 	.word	0x08007657
 80075fc:	080076bf 	.word	0x080076bf
 8007600:	080078ef 	.word	0x080078ef
 8007604:	08007955 	.word	0x08007955
 8007608:	08007763 	.word	0x08007763
 800760c:	08007895 	.word	0x08007895
 8007610:	08007799 	.word	0x08007799
 8007614:	080077b9 	.word	0x080077b9
 8007618:	080077d9 	.word	0x080077d9
 800761c:	08007807 	.word	0x08007807
 8007620:	080078d7 	.word	0x080078d7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 8193 	beq.w	8007958 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007638:	20c8      	movs	r0, #200	; 0xc8
 800763a:	f001 fca6 	bl	8008f8a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 fb99 	bl	8008d76 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007654:	e180      	b.n	8007958 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800765c:	2b01      	cmp	r3, #1
 800765e:	d107      	bne.n	8007670 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800766e:	e182      	b.n	8007976 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800767a:	d914      	bls.n	80076a6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007682:	3301      	adds	r3, #1
 8007684:	b2da      	uxtb	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007692:	2b03      	cmp	r3, #3
 8007694:	d903      	bls.n	800769e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	220d      	movs	r2, #13
 800769a:	701a      	strb	r2, [r3, #0]
      break;
 800769c:	e16b      	b.n	8007976 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	701a      	strb	r2, [r3, #0]
      break;
 80076a4:	e167      	b.n	8007976 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076ac:	f103 020a 	add.w	r2, r3, #10
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80076b6:	200a      	movs	r0, #10
 80076b8:	f001 fc67 	bl	8008f8a <USBH_Delay>
      break;
 80076bc:	e15b      	b.n	8007976 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d005      	beq.n	80076d4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076ce:	2104      	movs	r1, #4
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80076d4:	2064      	movs	r0, #100	; 0x64
 80076d6:	f001 fc58 	bl	8008f8a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 fb26 	bl	8008d2c <USBH_LL_GetSpeed>
 80076e0:	4603      	mov	r3, r0
 80076e2:	461a      	mov	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2205      	movs	r2, #5
 80076ee:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80076f0:	2100      	movs	r1, #0
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 f931 	bl	800895a <USBH_AllocPipe>
 80076f8:	4603      	mov	r3, r0
 80076fa:	461a      	mov	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007700:	2180      	movs	r1, #128	; 0x80
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f001 f929 	bl	800895a <USBH_AllocPipe>
 8007708:	4603      	mov	r3, r0
 800770a:	461a      	mov	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	7919      	ldrb	r1, [r3, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007724:	b292      	uxth	r2, r2
 8007726:	9202      	str	r2, [sp, #8]
 8007728:	2200      	movs	r2, #0
 800772a:	9201      	str	r2, [sp, #4]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	4603      	mov	r3, r0
 8007730:	2280      	movs	r2, #128	; 0x80
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 f8e2 	bl	80088fc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	7959      	ldrb	r1, [r3, #5]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800774c:	b292      	uxth	r2, r2
 800774e:	9202      	str	r2, [sp, #8]
 8007750:	2200      	movs	r2, #0
 8007752:	9201      	str	r2, [sp, #4]
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	4603      	mov	r3, r0
 8007758:	2200      	movs	r2, #0
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f001 f8ce 	bl	80088fc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007760:	e109      	b.n	8007976 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f90c 	bl	8007980 <USBH_HandleEnum>
 8007768:	4603      	mov	r3, r0
 800776a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	f040 80f3 	bne.w	800795c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007784:	2b01      	cmp	r3, #1
 8007786:	d103      	bne.n	8007790 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2208      	movs	r2, #8
 800778c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800778e:	e0e5      	b.n	800795c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2207      	movs	r2, #7
 8007794:	701a      	strb	r2, [r3, #0]
      break;
 8007796:	e0e1      	b.n	800795c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 80de 	beq.w	8007960 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077aa:	2101      	movs	r1, #1
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2208      	movs	r2, #8
 80077b4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80077b6:	e0d3      	b.n	8007960 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80077be:	b29b      	uxth	r3, r3
 80077c0:	4619      	mov	r1, r3
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fc20 	bl	8008008 <USBH_SetCfg>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f040 80ca 	bne.w	8007964 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2209      	movs	r2, #9
 80077d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077d6:	e0c5      	b.n	8007964 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00b      	beq.n	80077fe <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80077e6:	2101      	movs	r1, #1
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fc30 	bl	800804e <USBH_SetFeature>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f040 80b9 	bne.w	8007968 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	220a      	movs	r2, #10
 80077fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077fc:	e0b4      	b.n	8007968 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	220a      	movs	r2, #10
 8007802:	701a      	strb	r2, [r3, #0]
      break;
 8007804:	e0b0      	b.n	8007968 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 80ad 	beq.w	800796c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]
 800781e:	e016      	b.n	800784e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007820:	7bfa      	ldrb	r2, [r7, #15]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	32de      	adds	r2, #222	; 0xde
 8007826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800782a:	791a      	ldrb	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007832:	429a      	cmp	r2, r3
 8007834:	d108      	bne.n	8007848 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007836:	7bfa      	ldrb	r2, [r7, #15]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	32de      	adds	r2, #222	; 0xde
 800783c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007846:	e005      	b.n	8007854 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007848:	7bfb      	ldrb	r3, [r7, #15]
 800784a:	3301      	adds	r3, #1
 800784c:	73fb      	strb	r3, [r7, #15]
 800784e:	7bfb      	ldrb	r3, [r7, #15]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0e5      	beq.n	8007820 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d016      	beq.n	800788c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	4798      	blx	r3
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d109      	bne.n	8007884 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2206      	movs	r2, #6
 8007874:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800787c:	2103      	movs	r1, #3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007882:	e073      	b.n	800796c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	220d      	movs	r2, #13
 8007888:	701a      	strb	r2, [r3, #0]
      break;
 800788a:	e06f      	b.n	800796c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	220d      	movs	r2, #13
 8007890:	701a      	strb	r2, [r3, #0]
      break;
 8007892:	e06b      	b.n	800796c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d017      	beq.n	80078ce <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
 80078aa:	4603      	mov	r3, r0
 80078ac:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d103      	bne.n	80078be <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	220b      	movs	r2, #11
 80078ba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078bc:	e058      	b.n	8007970 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d154      	bne.n	8007970 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	220d      	movs	r2, #13
 80078ca:	701a      	strb	r2, [r3, #0]
      break;
 80078cc:	e050      	b.n	8007970 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	220d      	movs	r2, #13
 80078d2:	701a      	strb	r2, [r3, #0]
      break;
 80078d4:	e04c      	b.n	8007970 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d049      	beq.n	8007974 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	4798      	blx	r3
      }
      break;
 80078ec:	e042      	b.n	8007974 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff fd72 	bl	80073e0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007902:	2b00      	cmp	r3, #0
 8007904:	d009      	beq.n	800791a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d005      	beq.n	8007930 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800792a:	2105      	movs	r1, #5
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b01      	cmp	r3, #1
 800793a:	d107      	bne.n	800794c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff fe2b 	bl	80075a0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800794a:	e014      	b.n	8007976 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f001 f9b7 	bl	8008cc0 <USBH_LL_Start>
      break;
 8007952:	e010      	b.n	8007976 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007954:	bf00      	nop
 8007956:	e00e      	b.n	8007976 <USBH_Process+0x3b6>
      break;
 8007958:	bf00      	nop
 800795a:	e00c      	b.n	8007976 <USBH_Process+0x3b6>
      break;
 800795c:	bf00      	nop
 800795e:	e00a      	b.n	8007976 <USBH_Process+0x3b6>
    break;
 8007960:	bf00      	nop
 8007962:	e008      	b.n	8007976 <USBH_Process+0x3b6>
      break;
 8007964:	bf00      	nop
 8007966:	e006      	b.n	8007976 <USBH_Process+0x3b6>
      break;
 8007968:	bf00      	nop
 800796a:	e004      	b.n	8007976 <USBH_Process+0x3b6>
      break;
 800796c:	bf00      	nop
 800796e:	e002      	b.n	8007976 <USBH_Process+0x3b6>
      break;
 8007970:	bf00      	nop
 8007972:	e000      	b.n	8007976 <USBH_Process+0x3b6>
      break;
 8007974:	bf00      	nop
  }
  return USBH_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af04      	add	r7, sp, #16
 8007986:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007988:	2301      	movs	r3, #1
 800798a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800798c:	2301      	movs	r3, #1
 800798e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	785b      	ldrb	r3, [r3, #1]
 8007994:	2b07      	cmp	r3, #7
 8007996:	f200 81c1 	bhi.w	8007d1c <USBH_HandleEnum+0x39c>
 800799a:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <USBH_HandleEnum+0x20>)
 800799c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a0:	080079c1 	.word	0x080079c1
 80079a4:	08007a7f 	.word	0x08007a7f
 80079a8:	08007ae9 	.word	0x08007ae9
 80079ac:	08007b77 	.word	0x08007b77
 80079b0:	08007be1 	.word	0x08007be1
 80079b4:	08007c51 	.word	0x08007c51
 80079b8:	08007c97 	.word	0x08007c97
 80079bc:	08007cdd 	.word	0x08007cdd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80079c0:	2108      	movs	r1, #8
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa50 	bl	8007e68 <USBH_Get_DevDesc>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d130      	bne.n	8007a34 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	7919      	ldrb	r1, [r3, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079f6:	b292      	uxth	r2, r2
 80079f8:	9202      	str	r2, [sp, #8]
 80079fa:	2200      	movs	r2, #0
 80079fc:	9201      	str	r2, [sp, #4]
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	4603      	mov	r3, r0
 8007a02:	2280      	movs	r2, #128	; 0x80
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 ff79 	bl	80088fc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	7959      	ldrb	r1, [r3, #5]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a1e:	b292      	uxth	r2, r2
 8007a20:	9202      	str	r2, [sp, #8]
 8007a22:	2200      	movs	r2, #0
 8007a24:	9201      	str	r2, [sp, #4]
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 ff65 	bl	80088fc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a32:	e175      	b.n	8007d20 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	f040 8172 	bne.w	8007d20 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a42:	3301      	adds	r3, #1
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d903      	bls.n	8007a5e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	220d      	movs	r2, #13
 8007a5a:	701a      	strb	r2, [r3, #0]
      break;
 8007a5c:	e160      	b.n	8007d20 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	795b      	ldrb	r3, [r3, #5]
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 ff99 	bl	800899c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	791b      	ldrb	r3, [r3, #4]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 ff93 	bl	800899c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	701a      	strb	r2, [r3, #0]
      break;
 8007a7c:	e150      	b.n	8007d20 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007a7e:	2112      	movs	r1, #18
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f9f1 	bl	8007e68 <USBH_Get_DevDesc>
 8007a86:	4603      	mov	r3, r0
 8007a88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d103      	bne.n	8007a98 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2202      	movs	r2, #2
 8007a94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a96:	e145      	b.n	8007d24 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	f040 8142 	bne.w	8007d24 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d903      	bls.n	8007ac2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	220d      	movs	r2, #13
 8007abe:	701a      	strb	r2, [r3, #0]
      break;
 8007ac0:	e130      	b.n	8007d24 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	795b      	ldrb	r3, [r3, #5]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 ff67 	bl	800899c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	791b      	ldrb	r3, [r3, #4]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 ff61 	bl	800899c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	701a      	strb	r2, [r3, #0]
      break;
 8007ae6:	e11d      	b.n	8007d24 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007ae8:	2101      	movs	r1, #1
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fa68 	bl	8007fc0 <USBH_SetAddress>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d132      	bne.n	8007b60 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007afa:	2002      	movs	r0, #2
 8007afc:	f001 fa45 	bl	8008f8a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2203      	movs	r2, #3
 8007b0c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	7919      	ldrb	r1, [r3, #4]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b22:	b292      	uxth	r2, r2
 8007b24:	9202      	str	r2, [sp, #8]
 8007b26:	2200      	movs	r2, #0
 8007b28:	9201      	str	r2, [sp, #4]
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2280      	movs	r2, #128	; 0x80
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fee3 	bl	80088fc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	7959      	ldrb	r1, [r3, #5]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b4a:	b292      	uxth	r2, r2
 8007b4c:	9202      	str	r2, [sp, #8]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	9201      	str	r2, [sp, #4]
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	4603      	mov	r3, r0
 8007b56:	2200      	movs	r2, #0
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fecf 	bl	80088fc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b5e:	e0e3      	b.n	8007d28 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	f040 80e0 	bne.w	8007d28 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	220d      	movs	r2, #13
 8007b6c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	705a      	strb	r2, [r3, #1]
      break;
 8007b74:	e0d8      	b.n	8007d28 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007b76:	2109      	movs	r1, #9
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f99d 	bl	8007eb8 <USBH_Get_CfgDesc>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d103      	bne.n	8007b90 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2204      	movs	r2, #4
 8007b8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b8e:	e0cd      	b.n	8007d2c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	f040 80ca 	bne.w	8007d2c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d903      	bls.n	8007bba <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	220d      	movs	r2, #13
 8007bb6:	701a      	strb	r2, [r3, #0]
      break;
 8007bb8:	e0b8      	b.n	8007d2c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	795b      	ldrb	r3, [r3, #5]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 feeb 	bl	800899c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	791b      	ldrb	r3, [r3, #4]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fee5 	bl	800899c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	701a      	strb	r2, [r3, #0]
      break;
 8007bde:	e0a5      	b.n	8007d2c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f965 	bl	8007eb8 <USBH_Get_CfgDesc>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bf2:	7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d103      	bne.n	8007c00 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2205      	movs	r2, #5
 8007bfc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bfe:	e097      	b.n	8007d30 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	f040 8094 	bne.w	8007d30 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c0e:	3301      	adds	r3, #1
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d903      	bls.n	8007c2a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	220d      	movs	r2, #13
 8007c26:	701a      	strb	r2, [r3, #0]
      break;
 8007c28:	e082      	b.n	8007d30 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	795b      	ldrb	r3, [r3, #5]
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 feb3 	bl	800899c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	791b      	ldrb	r3, [r3, #4]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fead 	bl	800899c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	701a      	strb	r2, [r3, #0]
      break;
 8007c4e:	e06f      	b.n	8007d30 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d019      	beq.n	8007c8e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c66:	23ff      	movs	r3, #255	; 0xff
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f949 	bl	8007f00 <USBH_Get_StringDesc>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d103      	bne.n	8007c80 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2206      	movs	r2, #6
 8007c7c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007c7e:	e059      	b.n	8007d34 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d156      	bne.n	8007d34 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2206      	movs	r2, #6
 8007c8a:	705a      	strb	r2, [r3, #1]
      break;
 8007c8c:	e052      	b.n	8007d34 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2206      	movs	r2, #6
 8007c92:	705a      	strb	r2, [r3, #1]
      break;
 8007c94:	e04e      	b.n	8007d34 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d019      	beq.n	8007cd4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007cac:	23ff      	movs	r3, #255	; 0xff
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f926 	bl	8007f00 <USBH_Get_StringDesc>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cb8:	7bbb      	ldrb	r3, [r7, #14]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d103      	bne.n	8007cc6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2207      	movs	r2, #7
 8007cc2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007cc4:	e038      	b.n	8007d38 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d135      	bne.n	8007d38 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2207      	movs	r2, #7
 8007cd0:	705a      	strb	r2, [r3, #1]
      break;
 8007cd2:	e031      	b.n	8007d38 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2207      	movs	r2, #7
 8007cd8:	705a      	strb	r2, [r3, #1]
      break;
 8007cda:	e02d      	b.n	8007d38 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d017      	beq.n	8007d16 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cf2:	23ff      	movs	r3, #255	; 0xff
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f903 	bl	8007f00 <USBH_Get_StringDesc>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cfe:	7bbb      	ldrb	r3, [r7, #14]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d102      	bne.n	8007d0a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007d08:	e018      	b.n	8007d3c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d115      	bne.n	8007d3c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]
      break;
 8007d14:	e012      	b.n	8007d3c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	73fb      	strb	r3, [r7, #15]
      break;
 8007d1a:	e00f      	b.n	8007d3c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007d1c:	bf00      	nop
 8007d1e:	e00e      	b.n	8007d3e <USBH_HandleEnum+0x3be>
      break;
 8007d20:	bf00      	nop
 8007d22:	e00c      	b.n	8007d3e <USBH_HandleEnum+0x3be>
      break;
 8007d24:	bf00      	nop
 8007d26:	e00a      	b.n	8007d3e <USBH_HandleEnum+0x3be>
      break;
 8007d28:	bf00      	nop
 8007d2a:	e008      	b.n	8007d3e <USBH_HandleEnum+0x3be>
      break;
 8007d2c:	bf00      	nop
 8007d2e:	e006      	b.n	8007d3e <USBH_HandleEnum+0x3be>
      break;
 8007d30:	bf00      	nop
 8007d32:	e004      	b.n	8007d3e <USBH_HandleEnum+0x3be>
      break;
 8007d34:	bf00      	nop
 8007d36:	e002      	b.n	8007d3e <USBH_HandleEnum+0x3be>
      break;
 8007d38:	bf00      	nop
 8007d3a:	e000      	b.n	8007d3e <USBH_HandleEnum+0x3be>
      break;
 8007d3c:	bf00      	nop
  }
  return Status;
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b082      	sub	sp, #8
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f804 	bl	8007d8a <USBH_HandleSof>
}
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b0b      	cmp	r3, #11
 8007d9a:	d10a      	bne.n	8007db2 <USBH_HandleSof+0x28>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d005      	beq.n	8007db2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	4798      	blx	r3
  }
}
 8007db2:	bf00      	nop
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007dca:	bf00      	nop
}
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b083      	sub	sp, #12
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007de6:	bf00      	nop
}
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 ff58 	bl	8008cf6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	791b      	ldrb	r3, [r3, #4]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fda5 	bl	800899c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	795b      	ldrb	r3, [r3, #5]
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fd9f 	bl	800899c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007e7a:	78fb      	ldrb	r3, [r7, #3]
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	4613      	mov	r3, r2
 8007e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e86:	2100      	movs	r1, #0
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f864 	bl	8007f56 <USBH_GetDescriptor>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	73fb      	strb	r3, [r7, #15]
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10a      	bne.n	8007eae <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ea4:	78fa      	ldrb	r2, [r7, #3]
 8007ea6:	b292      	uxth	r2, r2
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	f000 f918 	bl	80080de <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af02      	add	r7, sp, #8
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	331c      	adds	r3, #28
 8007ec8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007eca:	887b      	ldrh	r3, [r7, #2]
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f83d 	bl	8007f56 <USBH_GetDescriptor>
 8007edc:	4603      	mov	r3, r0
 8007ede:	72fb      	strb	r3, [r7, #11]
 8007ee0:	7afb      	ldrb	r3, [r7, #11]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d107      	bne.n	8007ef6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007eec:	887a      	ldrh	r2, [r7, #2]
 8007eee:	68f9      	ldr	r1, [r7, #12]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 f964 	bl	80081be <USBH_ParseCfgDesc>
  }

  return status;
 8007ef6:	7afb      	ldrb	r3, [r7, #11]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b088      	sub	sp, #32
 8007f04:	af02      	add	r7, sp, #8
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	607a      	str	r2, [r7, #4]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	72fb      	strb	r3, [r7, #11]
 8007f10:	4613      	mov	r3, r2
 8007f12:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007f14:	7afb      	ldrb	r3, [r7, #11]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007f1c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007f24:	893b      	ldrh	r3, [r7, #8]
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 f812 	bl	8007f56 <USBH_GetDescriptor>
 8007f32:	4603      	mov	r3, r0
 8007f34:	75fb      	strb	r3, [r7, #23]
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d107      	bne.n	8007f4c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f42:	893a      	ldrh	r2, [r7, #8]
 8007f44:	6879      	ldr	r1, [r7, #4]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 fa37 	bl	80083ba <USBH_ParseStringDesc>
  }

  return status;
 8007f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3718      	adds	r7, #24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b084      	sub	sp, #16
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	60f8      	str	r0, [r7, #12]
 8007f5e:	607b      	str	r3, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	72fb      	strb	r3, [r7, #11]
 8007f64:	4613      	mov	r3, r2
 8007f66:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	789b      	ldrb	r3, [r3, #2]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d11c      	bne.n	8007faa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007f70:	7afb      	ldrb	r3, [r7, #11]
 8007f72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2206      	movs	r2, #6
 8007f80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	893a      	ldrh	r2, [r7, #8]
 8007f86:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007f88:	893b      	ldrh	r3, [r7, #8]
 8007f8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f92:	d104      	bne.n	8007f9e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f240 4209 	movw	r2, #1033	; 0x409
 8007f9a:	829a      	strh	r2, [r3, #20]
 8007f9c:	e002      	b.n	8007fa4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8b3a      	ldrh	r2, [r7, #24]
 8007fa8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007faa:	8b3b      	ldrh	r3, [r7, #24]
 8007fac:	461a      	mov	r2, r3
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 fa50 	bl	8008456 <USBH_CtlReq>
 8007fb6:	4603      	mov	r3, r0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	789b      	ldrb	r3, [r3, #2]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d10f      	bne.n	8007ff4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2205      	movs	r2, #5
 8007fde:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fa2c 	bl	8008456 <USBH_CtlReq>
 8007ffe:	4603      	mov	r3, r0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	789b      	ldrb	r3, [r3, #2]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d10e      	bne.n	800803a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2209      	movs	r2, #9
 8008026:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	887a      	ldrh	r2, [r7, #2]
 800802c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800803a:	2200      	movs	r2, #0
 800803c:	2100      	movs	r1, #0
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fa09 	bl	8008456 <USBH_CtlReq>
 8008044:	4603      	mov	r3, r0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	460b      	mov	r3, r1
 8008058:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	789b      	ldrb	r3, [r3, #2]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d10f      	bne.n	8008082 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2203      	movs	r2, #3
 800806c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	b29a      	uxth	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008082:	2200      	movs	r2, #0
 8008084:	2100      	movs	r1, #0
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f9e5 	bl	8008456 <USBH_CtlReq>
 800808c:	4603      	mov	r3, r0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b082      	sub	sp, #8
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	789b      	ldrb	r3, [r3, #2]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d10f      	bne.n	80080ca <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2202      	movs	r2, #2
 80080ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	b29a      	uxth	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80080ca:	2200      	movs	r2, #0
 80080cc:	2100      	movs	r1, #0
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f9c1 	bl	8008456 <USBH_CtlReq>
 80080d4:	4603      	mov	r3, r0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80080de:	b480      	push	{r7}
 80080e0:	b085      	sub	sp, #20
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	4613      	mov	r3, r2
 80080ea:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	781a      	ldrb	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	785a      	ldrb	r2, [r3, #1]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	3302      	adds	r3, #2
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	b29a      	uxth	r2, r3
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	3303      	adds	r3, #3
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	b29b      	uxth	r3, r3
 800810c:	021b      	lsls	r3, r3, #8
 800810e:	b29b      	uxth	r3, r3
 8008110:	4313      	orrs	r3, r2
 8008112:	b29a      	uxth	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	791a      	ldrb	r2, [r3, #4]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	795a      	ldrb	r2, [r3, #5]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	799a      	ldrb	r2, [r3, #6]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	79da      	ldrb	r2, [r3, #7]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008138:	88fb      	ldrh	r3, [r7, #6]
 800813a:	2b08      	cmp	r3, #8
 800813c:	d939      	bls.n	80081b2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	3308      	adds	r3, #8
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	b29a      	uxth	r2, r3
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	3309      	adds	r3, #9
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	b29b      	uxth	r3, r3
 800814e:	021b      	lsls	r3, r3, #8
 8008150:	b29b      	uxth	r3, r3
 8008152:	4313      	orrs	r3, r2
 8008154:	b29a      	uxth	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	330a      	adds	r3, #10
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	b29a      	uxth	r2, r3
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	330b      	adds	r3, #11
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	b29b      	uxth	r3, r3
 800816a:	021b      	lsls	r3, r3, #8
 800816c:	b29b      	uxth	r3, r3
 800816e:	4313      	orrs	r3, r2
 8008170:	b29a      	uxth	r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	330c      	adds	r3, #12
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	b29a      	uxth	r2, r3
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	330d      	adds	r3, #13
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	b29b      	uxth	r3, r3
 8008186:	021b      	lsls	r3, r3, #8
 8008188:	b29b      	uxth	r3, r3
 800818a:	4313      	orrs	r3, r2
 800818c:	b29a      	uxth	r2, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	7b9a      	ldrb	r2, [r3, #14]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	7bda      	ldrb	r2, [r3, #15]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	7c1a      	ldrb	r2, [r3, #16]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	7c5a      	ldrb	r2, [r3, #17]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	745a      	strb	r2, [r3, #17]
  }
}
 80081b2:	bf00      	nop
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b08a      	sub	sp, #40	; 0x28
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	4613      	mov	r3, r2
 80081ca:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	781a      	ldrb	r2, [r3, #0]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	785a      	ldrb	r2, [r3, #1]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	3302      	adds	r3, #2
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	3303      	adds	r3, #3
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	021b      	lsls	r3, r3, #8
 8008202:	b29b      	uxth	r3, r3
 8008204:	4313      	orrs	r3, r2
 8008206:	b29a      	uxth	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	791a      	ldrb	r2, [r3, #4]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	795a      	ldrb	r2, [r3, #5]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	799a      	ldrb	r2, [r3, #6]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	79da      	ldrb	r2, [r3, #7]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	7a1a      	ldrb	r2, [r3, #8]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008234:	88fb      	ldrh	r3, [r7, #6]
 8008236:	2b09      	cmp	r3, #9
 8008238:	d95f      	bls.n	80082fa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800823a:	2309      	movs	r3, #9
 800823c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800823e:	2300      	movs	r3, #0
 8008240:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008242:	e051      	b.n	80082e8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008244:	f107 0316 	add.w	r3, r7, #22
 8008248:	4619      	mov	r1, r3
 800824a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800824c:	f000 f8e8 	bl	8008420 <USBH_GetNextDesc>
 8008250:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	785b      	ldrb	r3, [r3, #1]
 8008256:	2b04      	cmp	r3, #4
 8008258:	d146      	bne.n	80082e8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800825a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800825e:	221a      	movs	r2, #26
 8008260:	fb02 f303 	mul.w	r3, r2, r3
 8008264:	3308      	adds	r3, #8
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	4413      	add	r3, r2
 800826a:	3302      	adds	r3, #2
 800826c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800826e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008270:	69f8      	ldr	r0, [r7, #28]
 8008272:	f000 f846 	bl	8008302 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800827c:	2300      	movs	r3, #0
 800827e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008280:	e022      	b.n	80082c8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008282:	f107 0316 	add.w	r3, r7, #22
 8008286:	4619      	mov	r1, r3
 8008288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800828a:	f000 f8c9 	bl	8008420 <USBH_GetNextDesc>
 800828e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	785b      	ldrb	r3, [r3, #1]
 8008294:	2b05      	cmp	r3, #5
 8008296:	d117      	bne.n	80082c8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800829c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80082a0:	3201      	adds	r2, #1
 80082a2:	00d2      	lsls	r2, r2, #3
 80082a4:	211a      	movs	r1, #26
 80082a6:	fb01 f303 	mul.w	r3, r1, r3
 80082aa:	4413      	add	r3, r2
 80082ac:	3308      	adds	r3, #8
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	4413      	add	r3, r2
 80082b2:	3304      	adds	r3, #4
 80082b4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80082b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082b8:	69b8      	ldr	r0, [r7, #24]
 80082ba:	f000 f851 	bl	8008360 <USBH_ParseEPDesc>
            ep_ix++;
 80082be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80082c2:	3301      	adds	r3, #1
 80082c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	791b      	ldrb	r3, [r3, #4]
 80082cc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d204      	bcs.n	80082de <USBH_ParseCfgDesc+0x120>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	885a      	ldrh	r2, [r3, #2]
 80082d8:	8afb      	ldrh	r3, [r7, #22]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d8d1      	bhi.n	8008282 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80082de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082e2:	3301      	adds	r3, #1
 80082e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d804      	bhi.n	80082fa <USBH_ParseCfgDesc+0x13c>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	885a      	ldrh	r2, [r3, #2]
 80082f4:	8afb      	ldrh	r3, [r7, #22]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d8a4      	bhi.n	8008244 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80082fa:	bf00      	nop
 80082fc:	3728      	adds	r7, #40	; 0x28
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781a      	ldrb	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	785a      	ldrb	r2, [r3, #1]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	789a      	ldrb	r2, [r3, #2]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	78da      	ldrb	r2, [r3, #3]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	791a      	ldrb	r2, [r3, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	795a      	ldrb	r2, [r3, #5]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	799a      	ldrb	r2, [r3, #6]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	79da      	ldrb	r2, [r3, #7]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	7a1a      	ldrb	r2, [r3, #8]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	721a      	strb	r2, [r3, #8]
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781a      	ldrb	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	785a      	ldrb	r2, [r3, #1]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	789a      	ldrb	r2, [r3, #2]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	78da      	ldrb	r2, [r3, #3]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	3304      	adds	r3, #4
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	b29a      	uxth	r2, r3
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	3305      	adds	r3, #5
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	b29b      	uxth	r3, r3
 800839a:	021b      	lsls	r3, r3, #8
 800839c:	b29b      	uxth	r3, r3
 800839e:	4313      	orrs	r3, r2
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	799a      	ldrb	r2, [r3, #6]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	719a      	strb	r2, [r3, #6]
}
 80083ae:	bf00      	nop
 80083b0:	370c      	adds	r7, #12
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b087      	sub	sp, #28
 80083be:	af00      	add	r7, sp, #0
 80083c0:	60f8      	str	r0, [r7, #12]
 80083c2:	60b9      	str	r1, [r7, #8]
 80083c4:	4613      	mov	r3, r2
 80083c6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	3301      	adds	r3, #1
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	d120      	bne.n	8008414 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	1e9a      	subs	r2, r3, #2
 80083d8:	88fb      	ldrh	r3, [r7, #6]
 80083da:	4293      	cmp	r3, r2
 80083dc:	bf28      	it	cs
 80083de:	4613      	movcs	r3, r2
 80083e0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3302      	adds	r3, #2
 80083e6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80083e8:	2300      	movs	r3, #0
 80083ea:	82fb      	strh	r3, [r7, #22]
 80083ec:	e00b      	b.n	8008406 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80083ee:	8afb      	ldrh	r3, [r7, #22]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	4413      	add	r3, r2
 80083f4:	781a      	ldrb	r2, [r3, #0]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	701a      	strb	r2, [r3, #0]
      pdest++;
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	3301      	adds	r3, #1
 80083fe:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008400:	8afb      	ldrh	r3, [r7, #22]
 8008402:	3302      	adds	r3, #2
 8008404:	82fb      	strh	r3, [r7, #22]
 8008406:	8afa      	ldrh	r2, [r7, #22]
 8008408:	8abb      	ldrh	r3, [r7, #20]
 800840a:	429a      	cmp	r2, r3
 800840c:	d3ef      	bcc.n	80083ee <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2200      	movs	r2, #0
 8008412:	701a      	strb	r2, [r3, #0]
  }
}
 8008414:	bf00      	nop
 8008416:	371c      	adds	r7, #28
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	881a      	ldrh	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	b29b      	uxth	r3, r3
 8008434:	4413      	add	r3, r2
 8008436:	b29a      	uxth	r2, r3
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4413      	add	r3, r2
 8008446:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008448:	68fb      	ldr	r3, [r7, #12]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b086      	sub	sp, #24
 800845a:	af00      	add	r7, sp, #0
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	4613      	mov	r3, r2
 8008462:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008464:	2301      	movs	r3, #1
 8008466:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	789b      	ldrb	r3, [r3, #2]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d002      	beq.n	8008476 <USBH_CtlReq+0x20>
 8008470:	2b02      	cmp	r3, #2
 8008472:	d00f      	beq.n	8008494 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008474:	e027      	b.n	80084c6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	88fa      	ldrh	r2, [r7, #6]
 8008480:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2201      	movs	r2, #1
 8008486:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2202      	movs	r2, #2
 800848c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800848e:	2301      	movs	r3, #1
 8008490:	75fb      	strb	r3, [r7, #23]
      break;
 8008492:	e018      	b.n	80084c6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 f81b 	bl	80084d0 <USBH_HandleControl>
 800849a:	4603      	mov	r3, r0
 800849c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800849e:	7dfb      	ldrb	r3, [r7, #23]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d002      	beq.n	80084aa <USBH_CtlReq+0x54>
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d106      	bne.n	80084b8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2201      	movs	r2, #1
 80084ae:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	761a      	strb	r2, [r3, #24]
      break;
 80084b6:	e005      	b.n	80084c4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d102      	bne.n	80084c4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2201      	movs	r2, #1
 80084c2:	709a      	strb	r2, [r3, #2]
      break;
 80084c4:	bf00      	nop
  }
  return status;
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af02      	add	r7, sp, #8
 80084d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80084d8:	2301      	movs	r3, #1
 80084da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80084dc:	2300      	movs	r3, #0
 80084de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	7e1b      	ldrb	r3, [r3, #24]
 80084e4:	3b01      	subs	r3, #1
 80084e6:	2b0a      	cmp	r3, #10
 80084e8:	f200 8158 	bhi.w	800879c <USBH_HandleControl+0x2cc>
 80084ec:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <USBH_HandleControl+0x24>)
 80084ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f2:	bf00      	nop
 80084f4:	08008521 	.word	0x08008521
 80084f8:	0800853b 	.word	0x0800853b
 80084fc:	080085a5 	.word	0x080085a5
 8008500:	080085cb 	.word	0x080085cb
 8008504:	08008603 	.word	0x08008603
 8008508:	0800862f 	.word	0x0800862f
 800850c:	08008681 	.word	0x08008681
 8008510:	080086a3 	.word	0x080086a3
 8008514:	080086df 	.word	0x080086df
 8008518:	08008707 	.word	0x08008707
 800851c:	08008745 	.word	0x08008745
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f103 0110 	add.w	r1, r3, #16
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	795b      	ldrb	r3, [r3, #5]
 800852a:	461a      	mov	r2, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f945 	bl	80087bc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2202      	movs	r2, #2
 8008536:	761a      	strb	r2, [r3, #24]
      break;
 8008538:	e13b      	b.n	80087b2 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	795b      	ldrb	r3, [r3, #5]
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fcc5 	bl	8008ed0 <USBH_LL_GetURBState>
 8008546:	4603      	mov	r3, r0
 8008548:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800854a:	7bbb      	ldrb	r3, [r7, #14]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d11e      	bne.n	800858e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	7c1b      	ldrb	r3, [r3, #16]
 8008554:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008558:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	8adb      	ldrh	r3, [r3, #22]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008562:	7b7b      	ldrb	r3, [r7, #13]
 8008564:	2b80      	cmp	r3, #128	; 0x80
 8008566:	d103      	bne.n	8008570 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2203      	movs	r2, #3
 800856c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800856e:	e117      	b.n	80087a0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2205      	movs	r2, #5
 8008574:	761a      	strb	r2, [r3, #24]
      break;
 8008576:	e113      	b.n	80087a0 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008578:	7b7b      	ldrb	r3, [r7, #13]
 800857a:	2b80      	cmp	r3, #128	; 0x80
 800857c:	d103      	bne.n	8008586 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2209      	movs	r2, #9
 8008582:	761a      	strb	r2, [r3, #24]
      break;
 8008584:	e10c      	b.n	80087a0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2207      	movs	r2, #7
 800858a:	761a      	strb	r2, [r3, #24]
      break;
 800858c:	e108      	b.n	80087a0 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	2b04      	cmp	r3, #4
 8008592:	d003      	beq.n	800859c <USBH_HandleControl+0xcc>
 8008594:	7bbb      	ldrb	r3, [r7, #14]
 8008596:	2b02      	cmp	r3, #2
 8008598:	f040 8102 	bne.w	80087a0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	220b      	movs	r2, #11
 80085a0:	761a      	strb	r2, [r3, #24]
      break;
 80085a2:	e0fd      	b.n	80087a0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6899      	ldr	r1, [r3, #8]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	899a      	ldrh	r2, [r3, #12]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	791b      	ldrb	r3, [r3, #4]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f93c 	bl	800883a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2204      	movs	r2, #4
 80085c6:	761a      	strb	r2, [r3, #24]
      break;
 80085c8:	e0f3      	b.n	80087b2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	791b      	ldrb	r3, [r3, #4]
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fc7d 	bl	8008ed0 <USBH_LL_GetURBState>
 80085d6:	4603      	mov	r3, r0
 80085d8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80085da:	7bbb      	ldrb	r3, [r7, #14]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d102      	bne.n	80085e6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2209      	movs	r2, #9
 80085e4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	2b05      	cmp	r3, #5
 80085ea:	d102      	bne.n	80085f2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80085ec:	2303      	movs	r3, #3
 80085ee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80085f0:	e0d8      	b.n	80087a4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	f040 80d5 	bne.w	80087a4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	220b      	movs	r2, #11
 80085fe:	761a      	strb	r2, [r3, #24]
      break;
 8008600:	e0d0      	b.n	80087a4 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6899      	ldr	r1, [r3, #8]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	899a      	ldrh	r2, [r3, #12]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	7958      	ldrb	r0, [r3, #5]
 800860e:	2301      	movs	r3, #1
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	4603      	mov	r3, r0
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f8eb 	bl	80087f0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008620:	b29a      	uxth	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2206      	movs	r2, #6
 800862a:	761a      	strb	r2, [r3, #24]
      break;
 800862c:	e0c1      	b.n	80087b2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	795b      	ldrb	r3, [r3, #5]
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fc4b 	bl	8008ed0 <USBH_LL_GetURBState>
 800863a:	4603      	mov	r3, r0
 800863c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d103      	bne.n	800864c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2207      	movs	r2, #7
 8008648:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800864a:	e0ad      	b.n	80087a8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800864c:	7bbb      	ldrb	r3, [r7, #14]
 800864e:	2b05      	cmp	r3, #5
 8008650:	d105      	bne.n	800865e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	220c      	movs	r2, #12
 8008656:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008658:	2303      	movs	r3, #3
 800865a:	73fb      	strb	r3, [r7, #15]
      break;
 800865c:	e0a4      	b.n	80087a8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	2b02      	cmp	r3, #2
 8008662:	d103      	bne.n	800866c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2205      	movs	r2, #5
 8008668:	761a      	strb	r2, [r3, #24]
      break;
 800866a:	e09d      	b.n	80087a8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	2b04      	cmp	r3, #4
 8008670:	f040 809a 	bne.w	80087a8 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	220b      	movs	r2, #11
 8008678:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800867a:	2302      	movs	r3, #2
 800867c:	73fb      	strb	r3, [r7, #15]
      break;
 800867e:	e093      	b.n	80087a8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	791b      	ldrb	r3, [r3, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	2100      	movs	r1, #0
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f8d6 	bl	800883a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008694:	b29a      	uxth	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2208      	movs	r2, #8
 800869e:	761a      	strb	r2, [r3, #24]

      break;
 80086a0:	e087      	b.n	80087b2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	791b      	ldrb	r3, [r3, #4]
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fc11 	bl	8008ed0 <USBH_LL_GetURBState>
 80086ae:	4603      	mov	r3, r0
 80086b0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d105      	bne.n	80086c4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	220d      	movs	r2, #13
 80086bc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80086c2:	e073      	b.n	80087ac <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	d103      	bne.n	80086d2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	220b      	movs	r2, #11
 80086ce:	761a      	strb	r2, [r3, #24]
      break;
 80086d0:	e06c      	b.n	80087ac <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b05      	cmp	r3, #5
 80086d6:	d169      	bne.n	80087ac <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 80086d8:	2303      	movs	r3, #3
 80086da:	73fb      	strb	r3, [r7, #15]
      break;
 80086dc:	e066      	b.n	80087ac <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	795a      	ldrb	r2, [r3, #5]
 80086e2:	2301      	movs	r3, #1
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	4613      	mov	r3, r2
 80086e8:	2200      	movs	r2, #0
 80086ea:	2100      	movs	r1, #0
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f87f 	bl	80087f0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	220a      	movs	r2, #10
 8008702:	761a      	strb	r2, [r3, #24]
      break;
 8008704:	e055      	b.n	80087b2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	795b      	ldrb	r3, [r3, #5]
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fbdf 	bl	8008ed0 <USBH_LL_GetURBState>
 8008712:	4603      	mov	r3, r0
 8008714:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d105      	bne.n	8008728 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	220d      	movs	r2, #13
 8008724:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008726:	e043      	b.n	80087b0 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	2b02      	cmp	r3, #2
 800872c:	d103      	bne.n	8008736 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2209      	movs	r2, #9
 8008732:	761a      	strb	r2, [r3, #24]
      break;
 8008734:	e03c      	b.n	80087b0 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	2b04      	cmp	r3, #4
 800873a:	d139      	bne.n	80087b0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	220b      	movs	r2, #11
 8008740:	761a      	strb	r2, [r3, #24]
      break;
 8008742:	e035      	b.n	80087b0 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	7e5b      	ldrb	r3, [r3, #25]
 8008748:	3301      	adds	r3, #1
 800874a:	b2da      	uxtb	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	765a      	strb	r2, [r3, #25]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7e5b      	ldrb	r3, [r3, #25]
 8008754:	2b02      	cmp	r3, #2
 8008756:	d806      	bhi.n	8008766 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008764:	e025      	b.n	80087b2 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800876c:	2106      	movs	r1, #6
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	795b      	ldrb	r3, [r3, #5]
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f90c 	bl	800899c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	791b      	ldrb	r3, [r3, #4]
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f906 	bl	800899c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008796:	2302      	movs	r3, #2
 8008798:	73fb      	strb	r3, [r7, #15]
      break;
 800879a:	e00a      	b.n	80087b2 <USBH_HandleControl+0x2e2>

    default:
      break;
 800879c:	bf00      	nop
 800879e:	e008      	b.n	80087b2 <USBH_HandleControl+0x2e2>
      break;
 80087a0:	bf00      	nop
 80087a2:	e006      	b.n	80087b2 <USBH_HandleControl+0x2e2>
      break;
 80087a4:	bf00      	nop
 80087a6:	e004      	b.n	80087b2 <USBH_HandleControl+0x2e2>
      break;
 80087a8:	bf00      	nop
 80087aa:	e002      	b.n	80087b2 <USBH_HandleControl+0x2e2>
      break;
 80087ac:	bf00      	nop
 80087ae:	e000      	b.n	80087b2 <USBH_HandleControl+0x2e2>
      break;
 80087b0:	bf00      	nop
  }

  return status;
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af04      	add	r7, sp, #16
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	4613      	mov	r3, r2
 80087c8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80087ca:	79f9      	ldrb	r1, [r7, #7]
 80087cc:	2300      	movs	r3, #0
 80087ce:	9303      	str	r3, [sp, #12]
 80087d0:	2308      	movs	r3, #8
 80087d2:	9302      	str	r3, [sp, #8]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	2300      	movs	r3, #0
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	2300      	movs	r3, #0
 80087de:	2200      	movs	r2, #0
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f000 fb44 	bl	8008e6e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b088      	sub	sp, #32
 80087f4:	af04      	add	r7, sp, #16
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4611      	mov	r1, r2
 80087fc:	461a      	mov	r2, r3
 80087fe:	460b      	mov	r3, r1
 8008800:	80fb      	strh	r3, [r7, #6]
 8008802:	4613      	mov	r3, r2
 8008804:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800880c:	2b00      	cmp	r3, #0
 800880e:	d001      	beq.n	8008814 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008814:	7979      	ldrb	r1, [r7, #5]
 8008816:	7e3b      	ldrb	r3, [r7, #24]
 8008818:	9303      	str	r3, [sp, #12]
 800881a:	88fb      	ldrh	r3, [r7, #6]
 800881c:	9302      	str	r3, [sp, #8]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	9301      	str	r3, [sp, #4]
 8008822:	2301      	movs	r3, #1
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	2300      	movs	r3, #0
 8008828:	2200      	movs	r2, #0
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f000 fb1f 	bl	8008e6e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b088      	sub	sp, #32
 800883e:	af04      	add	r7, sp, #16
 8008840:	60f8      	str	r0, [r7, #12]
 8008842:	60b9      	str	r1, [r7, #8]
 8008844:	4611      	mov	r1, r2
 8008846:	461a      	mov	r2, r3
 8008848:	460b      	mov	r3, r1
 800884a:	80fb      	strh	r3, [r7, #6]
 800884c:	4613      	mov	r3, r2
 800884e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008850:	7979      	ldrb	r1, [r7, #5]
 8008852:	2300      	movs	r3, #0
 8008854:	9303      	str	r3, [sp, #12]
 8008856:	88fb      	ldrh	r3, [r7, #6]
 8008858:	9302      	str	r3, [sp, #8]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	9301      	str	r3, [sp, #4]
 800885e:	2301      	movs	r3, #1
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	2300      	movs	r3, #0
 8008864:	2201      	movs	r2, #1
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f000 fb01 	bl	8008e6e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800886c:	2300      	movs	r3, #0

}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b088      	sub	sp, #32
 800887a:	af04      	add	r7, sp, #16
 800887c:	60f8      	str	r0, [r7, #12]
 800887e:	60b9      	str	r1, [r7, #8]
 8008880:	4611      	mov	r1, r2
 8008882:	461a      	mov	r2, r3
 8008884:	460b      	mov	r3, r1
 8008886:	80fb      	strh	r3, [r7, #6]
 8008888:	4613      	mov	r3, r2
 800888a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800889a:	7979      	ldrb	r1, [r7, #5]
 800889c:	7e3b      	ldrb	r3, [r7, #24]
 800889e:	9303      	str	r3, [sp, #12]
 80088a0:	88fb      	ldrh	r3, [r7, #6]
 80088a2:	9302      	str	r3, [sp, #8]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	9301      	str	r3, [sp, #4]
 80088a8:	2301      	movs	r3, #1
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	2302      	movs	r3, #2
 80088ae:	2200      	movs	r2, #0
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 fadc 	bl	8008e6e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af04      	add	r7, sp, #16
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	4611      	mov	r1, r2
 80088cc:	461a      	mov	r2, r3
 80088ce:	460b      	mov	r3, r1
 80088d0:	80fb      	strh	r3, [r7, #6]
 80088d2:	4613      	mov	r3, r2
 80088d4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80088d6:	7979      	ldrb	r1, [r7, #5]
 80088d8:	2300      	movs	r3, #0
 80088da:	9303      	str	r3, [sp, #12]
 80088dc:	88fb      	ldrh	r3, [r7, #6]
 80088de:	9302      	str	r3, [sp, #8]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	9301      	str	r3, [sp, #4]
 80088e4:	2301      	movs	r3, #1
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	2302      	movs	r3, #2
 80088ea:	2201      	movs	r2, #1
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 fabe 	bl	8008e6e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af04      	add	r7, sp, #16
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	4608      	mov	r0, r1
 8008906:	4611      	mov	r1, r2
 8008908:	461a      	mov	r2, r3
 800890a:	4603      	mov	r3, r0
 800890c:	70fb      	strb	r3, [r7, #3]
 800890e:	460b      	mov	r3, r1
 8008910:	70bb      	strb	r3, [r7, #2]
 8008912:	4613      	mov	r3, r2
 8008914:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008916:	7878      	ldrb	r0, [r7, #1]
 8008918:	78ba      	ldrb	r2, [r7, #2]
 800891a:	78f9      	ldrb	r1, [r7, #3]
 800891c:	8b3b      	ldrh	r3, [r7, #24]
 800891e:	9302      	str	r3, [sp, #8]
 8008920:	7d3b      	ldrb	r3, [r7, #20]
 8008922:	9301      	str	r3, [sp, #4]
 8008924:	7c3b      	ldrb	r3, [r7, #16]
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	4603      	mov	r3, r0
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fa51 	bl	8008dd2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b082      	sub	sp, #8
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	460b      	mov	r3, r1
 8008944:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008946:	78fb      	ldrb	r3, [r7, #3]
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fa70 	bl	8008e30 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	460b      	mov	r3, r1
 8008964:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f836 	bl	80089d8 <USBH_GetFreePipe>
 800896c:	4603      	mov	r3, r0
 800896e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008970:	89fb      	ldrh	r3, [r7, #14]
 8008972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008976:	4293      	cmp	r3, r2
 8008978:	d00a      	beq.n	8008990 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800897a:	78fa      	ldrb	r2, [r7, #3]
 800897c:	89fb      	ldrh	r3, [r7, #14]
 800897e:	f003 030f 	and.w	r3, r3, #15
 8008982:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008986:	6879      	ldr	r1, [r7, #4]
 8008988:	33e0      	adds	r3, #224	; 0xe0
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	440b      	add	r3, r1
 800898e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008990:	89fb      	ldrh	r3, [r7, #14]
 8008992:	b2db      	uxtb	r3, r3
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80089a8:	78fb      	ldrb	r3, [r7, #3]
 80089aa:	2b0a      	cmp	r3, #10
 80089ac:	d80d      	bhi.n	80089ca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80089ae:	78fb      	ldrb	r3, [r7, #3]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	33e0      	adds	r3, #224	; 0xe0
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	78fb      	ldrb	r3, [r7, #3]
 80089bc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80089c0:	6879      	ldr	r1, [r7, #4]
 80089c2:	33e0      	adds	r3, #224	; 0xe0
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	440b      	add	r3, r1
 80089c8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80089e0:	2300      	movs	r3, #0
 80089e2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]
 80089e8:	e00f      	b.n	8008a0a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	33e0      	adds	r3, #224	; 0xe0
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d102      	bne.n	8008a04 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	e007      	b.n	8008a14 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	3301      	adds	r3, #1
 8008a08:	73fb      	strb	r3, [r7, #15]
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
 8008a0c:	2b0a      	cmp	r3, #10
 8008a0e:	d9ec      	bls.n	80089ea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008a24:	2201      	movs	r2, #1
 8008a26:	490e      	ldr	r1, [pc, #56]	; (8008a60 <MX_USB_HOST_Init+0x40>)
 8008a28:	480e      	ldr	r0, [pc, #56]	; (8008a64 <MX_USB_HOST_Init+0x44>)
 8008a2a:	f7fe fc9f 	bl	800736c <USBH_Init>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008a34:	f7f8 fa22 	bl	8000e7c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008a38:	490b      	ldr	r1, [pc, #44]	; (8008a68 <MX_USB_HOST_Init+0x48>)
 8008a3a:	480a      	ldr	r0, [pc, #40]	; (8008a64 <MX_USB_HOST_Init+0x44>)
 8008a3c:	f7fe fd24 	bl	8007488 <USBH_RegisterClass>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008a46:	f7f8 fa19 	bl	8000e7c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008a4a:	4806      	ldr	r0, [pc, #24]	; (8008a64 <MX_USB_HOST_Init+0x44>)
 8008a4c:	f7fe fda8 	bl	80075a0 <USBH_Start>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008a56:	f7f8 fa11 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008a5a:	bf00      	nop
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	08008a81 	.word	0x08008a81
 8008a64:	200002f0 	.word	0x200002f0
 8008a68:	2000000c 	.word	0x2000000c

08008a6c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008a70:	4802      	ldr	r0, [pc, #8]	; (8008a7c <MX_USB_HOST_Process+0x10>)
 8008a72:	f7fe fda5 	bl	80075c0 <USBH_Process>
}
 8008a76:	bf00      	nop
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	200002f0 	.word	0x200002f0

08008a80 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008a8c:	78fb      	ldrb	r3, [r7, #3]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	2b04      	cmp	r3, #4
 8008a92:	d819      	bhi.n	8008ac8 <USBH_UserProcess+0x48>
 8008a94:	a201      	add	r2, pc, #4	; (adr r2, 8008a9c <USBH_UserProcess+0x1c>)
 8008a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9a:	bf00      	nop
 8008a9c:	08008ac9 	.word	0x08008ac9
 8008aa0:	08008ab9 	.word	0x08008ab9
 8008aa4:	08008ac9 	.word	0x08008ac9
 8008aa8:	08008ac1 	.word	0x08008ac1
 8008aac:	08008ab1 	.word	0x08008ab1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008ab0:	4b09      	ldr	r3, [pc, #36]	; (8008ad8 <USBH_UserProcess+0x58>)
 8008ab2:	2203      	movs	r2, #3
 8008ab4:	701a      	strb	r2, [r3, #0]
  break;
 8008ab6:	e008      	b.n	8008aca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008ab8:	4b07      	ldr	r3, [pc, #28]	; (8008ad8 <USBH_UserProcess+0x58>)
 8008aba:	2202      	movs	r2, #2
 8008abc:	701a      	strb	r2, [r3, #0]
  break;
 8008abe:	e004      	b.n	8008aca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008ac0:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <USBH_UserProcess+0x58>)
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	701a      	strb	r2, [r3, #0]
  break;
 8008ac6:	e000      	b.n	8008aca <USBH_UserProcess+0x4a>

  default:
  break;
 8008ac8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	200000bc 	.word	0x200000bc

08008adc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08a      	sub	sp, #40	; 0x28
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ae4:	f107 0314 	add.w	r3, r7, #20
 8008ae8:	2200      	movs	r2, #0
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	605a      	str	r2, [r3, #4]
 8008aee:	609a      	str	r2, [r3, #8]
 8008af0:	60da      	str	r2, [r3, #12]
 8008af2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008afc:	d147      	bne.n	8008b8e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008afe:	2300      	movs	r3, #0
 8008b00:	613b      	str	r3, [r7, #16]
 8008b02:	4b25      	ldr	r3, [pc, #148]	; (8008b98 <HAL_HCD_MspInit+0xbc>)
 8008b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b06:	4a24      	ldr	r2, [pc, #144]	; (8008b98 <HAL_HCD_MspInit+0xbc>)
 8008b08:	f043 0301 	orr.w	r3, r3, #1
 8008b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8008b0e:	4b22      	ldr	r3, [pc, #136]	; (8008b98 <HAL_HCD_MspInit+0xbc>)
 8008b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	613b      	str	r3, [r7, #16]
 8008b18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b20:	2300      	movs	r3, #0
 8008b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b24:	2300      	movs	r3, #0
 8008b26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008b28:	f107 0314 	add.w	r3, r7, #20
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	481b      	ldr	r0, [pc, #108]	; (8008b9c <HAL_HCD_MspInit+0xc0>)
 8008b30:	f7f8 fdc6 	bl	80016c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008b34:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b42:	2300      	movs	r3, #0
 8008b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b46:	230a      	movs	r3, #10
 8008b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b4a:	f107 0314 	add.w	r3, r7, #20
 8008b4e:	4619      	mov	r1, r3
 8008b50:	4812      	ldr	r0, [pc, #72]	; (8008b9c <HAL_HCD_MspInit+0xc0>)
 8008b52:	f7f8 fdb5 	bl	80016c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b56:	4b10      	ldr	r3, [pc, #64]	; (8008b98 <HAL_HCD_MspInit+0xbc>)
 8008b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5a:	4a0f      	ldr	r2, [pc, #60]	; (8008b98 <HAL_HCD_MspInit+0xbc>)
 8008b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b60:	6353      	str	r3, [r2, #52]	; 0x34
 8008b62:	2300      	movs	r3, #0
 8008b64:	60fb      	str	r3, [r7, #12]
 8008b66:	4b0c      	ldr	r3, [pc, #48]	; (8008b98 <HAL_HCD_MspInit+0xbc>)
 8008b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b6a:	4a0b      	ldr	r2, [pc, #44]	; (8008b98 <HAL_HCD_MspInit+0xbc>)
 8008b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b70:	6453      	str	r3, [r2, #68]	; 0x44
 8008b72:	4b09      	ldr	r3, [pc, #36]	; (8008b98 <HAL_HCD_MspInit+0xbc>)
 8008b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b7a:	60fb      	str	r3, [r7, #12]
 8008b7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008b7e:	2200      	movs	r2, #0
 8008b80:	2100      	movs	r1, #0
 8008b82:	2043      	movs	r0, #67	; 0x43
 8008b84:	f7f8 fd43 	bl	800160e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b88:	2043      	movs	r0, #67	; 0x43
 8008b8a:	f7f8 fd5c 	bl	8001646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b8e:	bf00      	nop
 8008b90:	3728      	adds	r7, #40	; 0x28
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	40023800 	.word	0x40023800
 8008b9c:	40020000 	.word	0x40020000

08008ba0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7ff f8d9 	bl	8007d66 <USBH_LL_IncTimer>
}
 8008bb4:	bf00      	nop
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff f911 	bl	8007df2 <USBH_LL_Connect>
}
 8008bd0:	bf00      	nop
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7ff f91a 	bl	8007e20 <USBH_LL_Disconnect>
}
 8008bec:	bf00      	nop
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
 8008c00:	4613      	mov	r3, r2
 8008c02:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7ff f8cb 	bl	8007dba <USBH_LL_PortEnabled>
}
 8008c24:	bf00      	nop
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7ff f8cb 	bl	8007dd6 <USBH_LL_PortDisabled>
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d12a      	bne.n	8008cb0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008c5a:	4a18      	ldr	r2, [pc, #96]	; (8008cbc <USBH_LL_Init+0x74>)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a15      	ldr	r2, [pc, #84]	; (8008cbc <USBH_LL_Init+0x74>)
 8008c66:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c6a:	4b14      	ldr	r3, [pc, #80]	; (8008cbc <USBH_LL_Init+0x74>)
 8008c6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c70:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008c72:	4b12      	ldr	r3, [pc, #72]	; (8008cbc <USBH_LL_Init+0x74>)
 8008c74:	2208      	movs	r2, #8
 8008c76:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008c78:	4b10      	ldr	r3, [pc, #64]	; (8008cbc <USBH_LL_Init+0x74>)
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c7e:	4b0f      	ldr	r3, [pc, #60]	; (8008cbc <USBH_LL_Init+0x74>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008c84:	4b0d      	ldr	r3, [pc, #52]	; (8008cbc <USBH_LL_Init+0x74>)
 8008c86:	2202      	movs	r2, #2
 8008c88:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c8a:	4b0c      	ldr	r3, [pc, #48]	; (8008cbc <USBH_LL_Init+0x74>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008c90:	480a      	ldr	r0, [pc, #40]	; (8008cbc <USBH_LL_Init+0x74>)
 8008c92:	f7f8 fee3 	bl	8001a5c <HAL_HCD_Init>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008c9c:	f7f8 f8ee 	bl	8000e7c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ca0:	4806      	ldr	r0, [pc, #24]	; (8008cbc <USBH_LL_Init+0x74>)
 8008ca2:	f7f9 fae7 	bl	8002274 <HAL_HCD_GetCurrentFrame>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7ff f84c 	bl	8007d48 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	200006c8 	.word	0x200006c8

08008cc0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7f9 fa54 	bl	8002184 <HAL_HCD_Start>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 f95c 	bl	8008fa0 <USBH_Get_USB_Status>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7f9 fa5c 	bl	80021ca <HAL_HCD_Stop>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 f941 	bl	8008fa0 <USBH_Get_USB_Status>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008d34:	2301      	movs	r3, #1
 8008d36:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7f9 faa6 	bl	8002290 <HAL_HCD_GetCurrentSpeed>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d007      	beq.n	8008d5a <USBH_LL_GetSpeed+0x2e>
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d302      	bcc.n	8008d54 <USBH_LL_GetSpeed+0x28>
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d006      	beq.n	8008d60 <USBH_LL_GetSpeed+0x34>
 8008d52:	e008      	b.n	8008d66 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]
    break;
 8008d58:	e008      	b.n	8008d6c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d5e:	e005      	b.n	8008d6c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008d60:	2302      	movs	r3, #2
 8008d62:	73fb      	strb	r3, [r7, #15]
    break;
 8008d64:	e002      	b.n	8008d6c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008d66:	2301      	movs	r3, #1
 8008d68:	73fb      	strb	r3, [r7, #15]
    break;
 8008d6a:	bf00      	nop
  }
  return  speed;
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b084      	sub	sp, #16
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7f9 fa39 	bl	8002204 <HAL_HCD_ResetPort>
 8008d92:	4603      	mov	r3, r0
 8008d94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 f901 	bl	8008fa0 <USBH_Get_USB_Status>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	460b      	mov	r3, r1
 8008db6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dbe:	78fa      	ldrb	r2, [r7, #3]
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7f9 fa41 	bl	800224a <HAL_HCD_HC_GetXferCount>
 8008dc8:	4603      	mov	r3, r0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008dd2:	b590      	push	{r4, r7, lr}
 8008dd4:	b089      	sub	sp, #36	; 0x24
 8008dd6:	af04      	add	r7, sp, #16
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	4608      	mov	r0, r1
 8008ddc:	4611      	mov	r1, r2
 8008dde:	461a      	mov	r2, r3
 8008de0:	4603      	mov	r3, r0
 8008de2:	70fb      	strb	r3, [r7, #3]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70bb      	strb	r3, [r7, #2]
 8008de8:	4613      	mov	r3, r2
 8008dea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008dfa:	787c      	ldrb	r4, [r7, #1]
 8008dfc:	78ba      	ldrb	r2, [r7, #2]
 8008dfe:	78f9      	ldrb	r1, [r7, #3]
 8008e00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e02:	9302      	str	r3, [sp, #8]
 8008e04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e08:	9301      	str	r3, [sp, #4]
 8008e0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	4623      	mov	r3, r4
 8008e12:	f7f8 fe85 	bl	8001b20 <HAL_HCD_HC_Init>
 8008e16:	4603      	mov	r3, r0
 8008e18:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 f8bf 	bl	8008fa0 <USBH_Get_USB_Status>
 8008e22:	4603      	mov	r3, r0
 8008e24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd90      	pop	{r4, r7, pc}

08008e30 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e4a:	78fa      	ldrb	r2, [r7, #3]
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7f8 fefe 	bl	8001c50 <HAL_HCD_HC_Halt>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 f8a0 	bl	8008fa0 <USBH_Get_USB_Status>
 8008e60:	4603      	mov	r3, r0
 8008e62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008e6e:	b590      	push	{r4, r7, lr}
 8008e70:	b089      	sub	sp, #36	; 0x24
 8008e72:	af04      	add	r7, sp, #16
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	4608      	mov	r0, r1
 8008e78:	4611      	mov	r1, r2
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	70fb      	strb	r3, [r7, #3]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70bb      	strb	r3, [r7, #2]
 8008e84:	4613      	mov	r3, r2
 8008e86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008e96:	787c      	ldrb	r4, [r7, #1]
 8008e98:	78ba      	ldrb	r2, [r7, #2]
 8008e9a:	78f9      	ldrb	r1, [r7, #3]
 8008e9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ea0:	9303      	str	r3, [sp, #12]
 8008ea2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ea4:	9302      	str	r3, [sp, #8]
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	4623      	mov	r3, r4
 8008eb2:	f7f8 fef1 	bl	8001c98 <HAL_HCD_HC_SubmitRequest>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 f86f 	bl	8008fa0 <USBH_Get_USB_Status>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd90      	pop	{r4, r7, pc}

08008ed0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ee2:	78fa      	ldrb	r2, [r7, #3]
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7f9 f99a 	bl	8002220 <HAL_HCD_HC_GetURBState>
 8008eec:	4603      	mov	r3, r0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	460b      	mov	r3, r1
 8008f00:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d103      	bne.n	8008f14 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008f0c:	78fb      	ldrb	r3, [r7, #3]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 f872 	bl	8008ff8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008f14:	20c8      	movs	r0, #200	; 0xc8
 8008f16:	f7f8 fa7d 	bl	8001414 <HAL_Delay>
  return USBH_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	70fb      	strb	r3, [r7, #3]
 8008f30:	4613      	mov	r3, r2
 8008f32:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f3a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008f3c:	78fa      	ldrb	r2, [r7, #3]
 8008f3e:	68f9      	ldr	r1, [r7, #12]
 8008f40:	4613      	mov	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4413      	add	r3, r2
 8008f46:	00db      	lsls	r3, r3, #3
 8008f48:	440b      	add	r3, r1
 8008f4a:	333b      	adds	r3, #59	; 0x3b
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00a      	beq.n	8008f68 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008f52:	78fa      	ldrb	r2, [r7, #3]
 8008f54:	68f9      	ldr	r1, [r7, #12]
 8008f56:	4613      	mov	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	00db      	lsls	r3, r3, #3
 8008f5e:	440b      	add	r3, r1
 8008f60:	3350      	adds	r3, #80	; 0x50
 8008f62:	78ba      	ldrb	r2, [r7, #2]
 8008f64:	701a      	strb	r2, [r3, #0]
 8008f66:	e009      	b.n	8008f7c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008f68:	78fa      	ldrb	r2, [r7, #3]
 8008f6a:	68f9      	ldr	r1, [r7, #12]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	00db      	lsls	r3, r3, #3
 8008f74:	440b      	add	r3, r1
 8008f76:	3351      	adds	r3, #81	; 0x51
 8008f78:	78ba      	ldrb	r2, [r7, #2]
 8008f7a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b082      	sub	sp, #8
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7f8 fa3e 	bl	8001414 <HAL_Delay>
}
 8008f98:	bf00      	nop
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fae:	79fb      	ldrb	r3, [r7, #7]
 8008fb0:	2b03      	cmp	r3, #3
 8008fb2:	d817      	bhi.n	8008fe4 <USBH_Get_USB_Status+0x44>
 8008fb4:	a201      	add	r2, pc, #4	; (adr r2, 8008fbc <USBH_Get_USB_Status+0x1c>)
 8008fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fba:	bf00      	nop
 8008fbc:	08008fcd 	.word	0x08008fcd
 8008fc0:	08008fd3 	.word	0x08008fd3
 8008fc4:	08008fd9 	.word	0x08008fd9
 8008fc8:	08008fdf 	.word	0x08008fdf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd0:	e00b      	b.n	8008fea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd6:	e008      	b.n	8008fea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	73fb      	strb	r3, [r7, #15]
    break;
 8008fdc:	e005      	b.n	8008fea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008fde:	2302      	movs	r3, #2
 8008fe0:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe2:	e002      	b.n	8008fea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe8:	bf00      	nop
  }
  return usb_status;
 8008fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4603      	mov	r3, r0
 8009000:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d102      	bne.n	8009012 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800900c:	2301      	movs	r3, #1
 800900e:	73fb      	strb	r3, [r7, #15]
 8009010:	e001      	b.n	8009016 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009012:	2300      	movs	r3, #0
 8009014:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009016:	7bfb      	ldrb	r3, [r7, #15]
 8009018:	461a      	mov	r2, r3
 800901a:	2101      	movs	r1, #1
 800901c:	4803      	ldr	r0, [pc, #12]	; (800902c <MX_DriverVbusFS+0x34>)
 800901e:	f7f8 fce9 	bl	80019f4 <HAL_GPIO_WritePin>
}
 8009022:	bf00      	nop
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	40020800 	.word	0x40020800

08009030 <__errno>:
 8009030:	4b01      	ldr	r3, [pc, #4]	; (8009038 <__errno+0x8>)
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	2000002c 	.word	0x2000002c

0800903c <__libc_init_array>:
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	4e0d      	ldr	r6, [pc, #52]	; (8009074 <__libc_init_array+0x38>)
 8009040:	4c0d      	ldr	r4, [pc, #52]	; (8009078 <__libc_init_array+0x3c>)
 8009042:	1ba4      	subs	r4, r4, r6
 8009044:	10a4      	asrs	r4, r4, #2
 8009046:	2500      	movs	r5, #0
 8009048:	42a5      	cmp	r5, r4
 800904a:	d109      	bne.n	8009060 <__libc_init_array+0x24>
 800904c:	4e0b      	ldr	r6, [pc, #44]	; (800907c <__libc_init_array+0x40>)
 800904e:	4c0c      	ldr	r4, [pc, #48]	; (8009080 <__libc_init_array+0x44>)
 8009050:	f000 fc38 	bl	80098c4 <_init>
 8009054:	1ba4      	subs	r4, r4, r6
 8009056:	10a4      	asrs	r4, r4, #2
 8009058:	2500      	movs	r5, #0
 800905a:	42a5      	cmp	r5, r4
 800905c:	d105      	bne.n	800906a <__libc_init_array+0x2e>
 800905e:	bd70      	pop	{r4, r5, r6, pc}
 8009060:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009064:	4798      	blx	r3
 8009066:	3501      	adds	r5, #1
 8009068:	e7ee      	b.n	8009048 <__libc_init_array+0xc>
 800906a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800906e:	4798      	blx	r3
 8009070:	3501      	adds	r5, #1
 8009072:	e7f2      	b.n	800905a <__libc_init_array+0x1e>
 8009074:	08009aa0 	.word	0x08009aa0
 8009078:	08009aa0 	.word	0x08009aa0
 800907c:	08009aa0 	.word	0x08009aa0
 8009080:	08009aa4 	.word	0x08009aa4

08009084 <malloc>:
 8009084:	4b02      	ldr	r3, [pc, #8]	; (8009090 <malloc+0xc>)
 8009086:	4601      	mov	r1, r0
 8009088:	6818      	ldr	r0, [r3, #0]
 800908a:	f000 b86d 	b.w	8009168 <_malloc_r>
 800908e:	bf00      	nop
 8009090:	2000002c 	.word	0x2000002c

08009094 <free>:
 8009094:	4b02      	ldr	r3, [pc, #8]	; (80090a0 <free+0xc>)
 8009096:	4601      	mov	r1, r0
 8009098:	6818      	ldr	r0, [r3, #0]
 800909a:	f000 b817 	b.w	80090cc <_free_r>
 800909e:	bf00      	nop
 80090a0:	2000002c 	.word	0x2000002c

080090a4 <memcpy>:
 80090a4:	b510      	push	{r4, lr}
 80090a6:	1e43      	subs	r3, r0, #1
 80090a8:	440a      	add	r2, r1
 80090aa:	4291      	cmp	r1, r2
 80090ac:	d100      	bne.n	80090b0 <memcpy+0xc>
 80090ae:	bd10      	pop	{r4, pc}
 80090b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090b8:	e7f7      	b.n	80090aa <memcpy+0x6>

080090ba <memset>:
 80090ba:	4402      	add	r2, r0
 80090bc:	4603      	mov	r3, r0
 80090be:	4293      	cmp	r3, r2
 80090c0:	d100      	bne.n	80090c4 <memset+0xa>
 80090c2:	4770      	bx	lr
 80090c4:	f803 1b01 	strb.w	r1, [r3], #1
 80090c8:	e7f9      	b.n	80090be <memset+0x4>
	...

080090cc <_free_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	4605      	mov	r5, r0
 80090d0:	2900      	cmp	r1, #0
 80090d2:	d045      	beq.n	8009160 <_free_r+0x94>
 80090d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090d8:	1f0c      	subs	r4, r1, #4
 80090da:	2b00      	cmp	r3, #0
 80090dc:	bfb8      	it	lt
 80090de:	18e4      	addlt	r4, r4, r3
 80090e0:	f000 f8cc 	bl	800927c <__malloc_lock>
 80090e4:	4a1f      	ldr	r2, [pc, #124]	; (8009164 <_free_r+0x98>)
 80090e6:	6813      	ldr	r3, [r2, #0]
 80090e8:	4610      	mov	r0, r2
 80090ea:	b933      	cbnz	r3, 80090fa <_free_r+0x2e>
 80090ec:	6063      	str	r3, [r4, #4]
 80090ee:	6014      	str	r4, [r2, #0]
 80090f0:	4628      	mov	r0, r5
 80090f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090f6:	f000 b8c2 	b.w	800927e <__malloc_unlock>
 80090fa:	42a3      	cmp	r3, r4
 80090fc:	d90c      	bls.n	8009118 <_free_r+0x4c>
 80090fe:	6821      	ldr	r1, [r4, #0]
 8009100:	1862      	adds	r2, r4, r1
 8009102:	4293      	cmp	r3, r2
 8009104:	bf04      	itt	eq
 8009106:	681a      	ldreq	r2, [r3, #0]
 8009108:	685b      	ldreq	r3, [r3, #4]
 800910a:	6063      	str	r3, [r4, #4]
 800910c:	bf04      	itt	eq
 800910e:	1852      	addeq	r2, r2, r1
 8009110:	6022      	streq	r2, [r4, #0]
 8009112:	6004      	str	r4, [r0, #0]
 8009114:	e7ec      	b.n	80090f0 <_free_r+0x24>
 8009116:	4613      	mov	r3, r2
 8009118:	685a      	ldr	r2, [r3, #4]
 800911a:	b10a      	cbz	r2, 8009120 <_free_r+0x54>
 800911c:	42a2      	cmp	r2, r4
 800911e:	d9fa      	bls.n	8009116 <_free_r+0x4a>
 8009120:	6819      	ldr	r1, [r3, #0]
 8009122:	1858      	adds	r0, r3, r1
 8009124:	42a0      	cmp	r0, r4
 8009126:	d10b      	bne.n	8009140 <_free_r+0x74>
 8009128:	6820      	ldr	r0, [r4, #0]
 800912a:	4401      	add	r1, r0
 800912c:	1858      	adds	r0, r3, r1
 800912e:	4282      	cmp	r2, r0
 8009130:	6019      	str	r1, [r3, #0]
 8009132:	d1dd      	bne.n	80090f0 <_free_r+0x24>
 8009134:	6810      	ldr	r0, [r2, #0]
 8009136:	6852      	ldr	r2, [r2, #4]
 8009138:	605a      	str	r2, [r3, #4]
 800913a:	4401      	add	r1, r0
 800913c:	6019      	str	r1, [r3, #0]
 800913e:	e7d7      	b.n	80090f0 <_free_r+0x24>
 8009140:	d902      	bls.n	8009148 <_free_r+0x7c>
 8009142:	230c      	movs	r3, #12
 8009144:	602b      	str	r3, [r5, #0]
 8009146:	e7d3      	b.n	80090f0 <_free_r+0x24>
 8009148:	6820      	ldr	r0, [r4, #0]
 800914a:	1821      	adds	r1, r4, r0
 800914c:	428a      	cmp	r2, r1
 800914e:	bf04      	itt	eq
 8009150:	6811      	ldreq	r1, [r2, #0]
 8009152:	6852      	ldreq	r2, [r2, #4]
 8009154:	6062      	str	r2, [r4, #4]
 8009156:	bf04      	itt	eq
 8009158:	1809      	addeq	r1, r1, r0
 800915a:	6021      	streq	r1, [r4, #0]
 800915c:	605c      	str	r4, [r3, #4]
 800915e:	e7c7      	b.n	80090f0 <_free_r+0x24>
 8009160:	bd38      	pop	{r3, r4, r5, pc}
 8009162:	bf00      	nop
 8009164:	200000c0 	.word	0x200000c0

08009168 <_malloc_r>:
 8009168:	b570      	push	{r4, r5, r6, lr}
 800916a:	1ccd      	adds	r5, r1, #3
 800916c:	f025 0503 	bic.w	r5, r5, #3
 8009170:	3508      	adds	r5, #8
 8009172:	2d0c      	cmp	r5, #12
 8009174:	bf38      	it	cc
 8009176:	250c      	movcc	r5, #12
 8009178:	2d00      	cmp	r5, #0
 800917a:	4606      	mov	r6, r0
 800917c:	db01      	blt.n	8009182 <_malloc_r+0x1a>
 800917e:	42a9      	cmp	r1, r5
 8009180:	d903      	bls.n	800918a <_malloc_r+0x22>
 8009182:	230c      	movs	r3, #12
 8009184:	6033      	str	r3, [r6, #0]
 8009186:	2000      	movs	r0, #0
 8009188:	bd70      	pop	{r4, r5, r6, pc}
 800918a:	f000 f877 	bl	800927c <__malloc_lock>
 800918e:	4a21      	ldr	r2, [pc, #132]	; (8009214 <_malloc_r+0xac>)
 8009190:	6814      	ldr	r4, [r2, #0]
 8009192:	4621      	mov	r1, r4
 8009194:	b991      	cbnz	r1, 80091bc <_malloc_r+0x54>
 8009196:	4c20      	ldr	r4, [pc, #128]	; (8009218 <_malloc_r+0xb0>)
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	b91b      	cbnz	r3, 80091a4 <_malloc_r+0x3c>
 800919c:	4630      	mov	r0, r6
 800919e:	f000 f83d 	bl	800921c <_sbrk_r>
 80091a2:	6020      	str	r0, [r4, #0]
 80091a4:	4629      	mov	r1, r5
 80091a6:	4630      	mov	r0, r6
 80091a8:	f000 f838 	bl	800921c <_sbrk_r>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d124      	bne.n	80091fa <_malloc_r+0x92>
 80091b0:	230c      	movs	r3, #12
 80091b2:	6033      	str	r3, [r6, #0]
 80091b4:	4630      	mov	r0, r6
 80091b6:	f000 f862 	bl	800927e <__malloc_unlock>
 80091ba:	e7e4      	b.n	8009186 <_malloc_r+0x1e>
 80091bc:	680b      	ldr	r3, [r1, #0]
 80091be:	1b5b      	subs	r3, r3, r5
 80091c0:	d418      	bmi.n	80091f4 <_malloc_r+0x8c>
 80091c2:	2b0b      	cmp	r3, #11
 80091c4:	d90f      	bls.n	80091e6 <_malloc_r+0x7e>
 80091c6:	600b      	str	r3, [r1, #0]
 80091c8:	50cd      	str	r5, [r1, r3]
 80091ca:	18cc      	adds	r4, r1, r3
 80091cc:	4630      	mov	r0, r6
 80091ce:	f000 f856 	bl	800927e <__malloc_unlock>
 80091d2:	f104 000b 	add.w	r0, r4, #11
 80091d6:	1d23      	adds	r3, r4, #4
 80091d8:	f020 0007 	bic.w	r0, r0, #7
 80091dc:	1ac3      	subs	r3, r0, r3
 80091de:	d0d3      	beq.n	8009188 <_malloc_r+0x20>
 80091e0:	425a      	negs	r2, r3
 80091e2:	50e2      	str	r2, [r4, r3]
 80091e4:	e7d0      	b.n	8009188 <_malloc_r+0x20>
 80091e6:	428c      	cmp	r4, r1
 80091e8:	684b      	ldr	r3, [r1, #4]
 80091ea:	bf16      	itet	ne
 80091ec:	6063      	strne	r3, [r4, #4]
 80091ee:	6013      	streq	r3, [r2, #0]
 80091f0:	460c      	movne	r4, r1
 80091f2:	e7eb      	b.n	80091cc <_malloc_r+0x64>
 80091f4:	460c      	mov	r4, r1
 80091f6:	6849      	ldr	r1, [r1, #4]
 80091f8:	e7cc      	b.n	8009194 <_malloc_r+0x2c>
 80091fa:	1cc4      	adds	r4, r0, #3
 80091fc:	f024 0403 	bic.w	r4, r4, #3
 8009200:	42a0      	cmp	r0, r4
 8009202:	d005      	beq.n	8009210 <_malloc_r+0xa8>
 8009204:	1a21      	subs	r1, r4, r0
 8009206:	4630      	mov	r0, r6
 8009208:	f000 f808 	bl	800921c <_sbrk_r>
 800920c:	3001      	adds	r0, #1
 800920e:	d0cf      	beq.n	80091b0 <_malloc_r+0x48>
 8009210:	6025      	str	r5, [r4, #0]
 8009212:	e7db      	b.n	80091cc <_malloc_r+0x64>
 8009214:	200000c0 	.word	0x200000c0
 8009218:	200000c4 	.word	0x200000c4

0800921c <_sbrk_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	4c06      	ldr	r4, [pc, #24]	; (8009238 <_sbrk_r+0x1c>)
 8009220:	2300      	movs	r3, #0
 8009222:	4605      	mov	r5, r0
 8009224:	4608      	mov	r0, r1
 8009226:	6023      	str	r3, [r4, #0]
 8009228:	f7f8 f80c 	bl	8001244 <_sbrk>
 800922c:	1c43      	adds	r3, r0, #1
 800922e:	d102      	bne.n	8009236 <_sbrk_r+0x1a>
 8009230:	6823      	ldr	r3, [r4, #0]
 8009232:	b103      	cbz	r3, 8009236 <_sbrk_r+0x1a>
 8009234:	602b      	str	r3, [r5, #0]
 8009236:	bd38      	pop	{r3, r4, r5, pc}
 8009238:	2000098c 	.word	0x2000098c

0800923c <siprintf>:
 800923c:	b40e      	push	{r1, r2, r3}
 800923e:	b500      	push	{lr}
 8009240:	b09c      	sub	sp, #112	; 0x70
 8009242:	ab1d      	add	r3, sp, #116	; 0x74
 8009244:	9002      	str	r0, [sp, #8]
 8009246:	9006      	str	r0, [sp, #24]
 8009248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800924c:	4809      	ldr	r0, [pc, #36]	; (8009274 <siprintf+0x38>)
 800924e:	9107      	str	r1, [sp, #28]
 8009250:	9104      	str	r1, [sp, #16]
 8009252:	4909      	ldr	r1, [pc, #36]	; (8009278 <siprintf+0x3c>)
 8009254:	f853 2b04 	ldr.w	r2, [r3], #4
 8009258:	9105      	str	r1, [sp, #20]
 800925a:	6800      	ldr	r0, [r0, #0]
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	a902      	add	r1, sp, #8
 8009260:	f000 f868 	bl	8009334 <_svfiprintf_r>
 8009264:	9b02      	ldr	r3, [sp, #8]
 8009266:	2200      	movs	r2, #0
 8009268:	701a      	strb	r2, [r3, #0]
 800926a:	b01c      	add	sp, #112	; 0x70
 800926c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009270:	b003      	add	sp, #12
 8009272:	4770      	bx	lr
 8009274:	2000002c 	.word	0x2000002c
 8009278:	ffff0208 	.word	0xffff0208

0800927c <__malloc_lock>:
 800927c:	4770      	bx	lr

0800927e <__malloc_unlock>:
 800927e:	4770      	bx	lr

08009280 <__ssputs_r>:
 8009280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009284:	688e      	ldr	r6, [r1, #8]
 8009286:	429e      	cmp	r6, r3
 8009288:	4682      	mov	sl, r0
 800928a:	460c      	mov	r4, r1
 800928c:	4690      	mov	r8, r2
 800928e:	4699      	mov	r9, r3
 8009290:	d837      	bhi.n	8009302 <__ssputs_r+0x82>
 8009292:	898a      	ldrh	r2, [r1, #12]
 8009294:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009298:	d031      	beq.n	80092fe <__ssputs_r+0x7e>
 800929a:	6825      	ldr	r5, [r4, #0]
 800929c:	6909      	ldr	r1, [r1, #16]
 800929e:	1a6f      	subs	r7, r5, r1
 80092a0:	6965      	ldr	r5, [r4, #20]
 80092a2:	2302      	movs	r3, #2
 80092a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80092ac:	f109 0301 	add.w	r3, r9, #1
 80092b0:	443b      	add	r3, r7
 80092b2:	429d      	cmp	r5, r3
 80092b4:	bf38      	it	cc
 80092b6:	461d      	movcc	r5, r3
 80092b8:	0553      	lsls	r3, r2, #21
 80092ba:	d530      	bpl.n	800931e <__ssputs_r+0x9e>
 80092bc:	4629      	mov	r1, r5
 80092be:	f7ff ff53 	bl	8009168 <_malloc_r>
 80092c2:	4606      	mov	r6, r0
 80092c4:	b950      	cbnz	r0, 80092dc <__ssputs_r+0x5c>
 80092c6:	230c      	movs	r3, #12
 80092c8:	f8ca 3000 	str.w	r3, [sl]
 80092cc:	89a3      	ldrh	r3, [r4, #12]
 80092ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d2:	81a3      	strh	r3, [r4, #12]
 80092d4:	f04f 30ff 	mov.w	r0, #4294967295
 80092d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092dc:	463a      	mov	r2, r7
 80092de:	6921      	ldr	r1, [r4, #16]
 80092e0:	f7ff fee0 	bl	80090a4 <memcpy>
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092ee:	81a3      	strh	r3, [r4, #12]
 80092f0:	6126      	str	r6, [r4, #16]
 80092f2:	6165      	str	r5, [r4, #20]
 80092f4:	443e      	add	r6, r7
 80092f6:	1bed      	subs	r5, r5, r7
 80092f8:	6026      	str	r6, [r4, #0]
 80092fa:	60a5      	str	r5, [r4, #8]
 80092fc:	464e      	mov	r6, r9
 80092fe:	454e      	cmp	r6, r9
 8009300:	d900      	bls.n	8009304 <__ssputs_r+0x84>
 8009302:	464e      	mov	r6, r9
 8009304:	4632      	mov	r2, r6
 8009306:	4641      	mov	r1, r8
 8009308:	6820      	ldr	r0, [r4, #0]
 800930a:	f000 fa93 	bl	8009834 <memmove>
 800930e:	68a3      	ldr	r3, [r4, #8]
 8009310:	1b9b      	subs	r3, r3, r6
 8009312:	60a3      	str	r3, [r4, #8]
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	441e      	add	r6, r3
 8009318:	6026      	str	r6, [r4, #0]
 800931a:	2000      	movs	r0, #0
 800931c:	e7dc      	b.n	80092d8 <__ssputs_r+0x58>
 800931e:	462a      	mov	r2, r5
 8009320:	f000 faa1 	bl	8009866 <_realloc_r>
 8009324:	4606      	mov	r6, r0
 8009326:	2800      	cmp	r0, #0
 8009328:	d1e2      	bne.n	80092f0 <__ssputs_r+0x70>
 800932a:	6921      	ldr	r1, [r4, #16]
 800932c:	4650      	mov	r0, sl
 800932e:	f7ff fecd 	bl	80090cc <_free_r>
 8009332:	e7c8      	b.n	80092c6 <__ssputs_r+0x46>

08009334 <_svfiprintf_r>:
 8009334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009338:	461d      	mov	r5, r3
 800933a:	898b      	ldrh	r3, [r1, #12]
 800933c:	061f      	lsls	r7, r3, #24
 800933e:	b09d      	sub	sp, #116	; 0x74
 8009340:	4680      	mov	r8, r0
 8009342:	460c      	mov	r4, r1
 8009344:	4616      	mov	r6, r2
 8009346:	d50f      	bpl.n	8009368 <_svfiprintf_r+0x34>
 8009348:	690b      	ldr	r3, [r1, #16]
 800934a:	b96b      	cbnz	r3, 8009368 <_svfiprintf_r+0x34>
 800934c:	2140      	movs	r1, #64	; 0x40
 800934e:	f7ff ff0b 	bl	8009168 <_malloc_r>
 8009352:	6020      	str	r0, [r4, #0]
 8009354:	6120      	str	r0, [r4, #16]
 8009356:	b928      	cbnz	r0, 8009364 <_svfiprintf_r+0x30>
 8009358:	230c      	movs	r3, #12
 800935a:	f8c8 3000 	str.w	r3, [r8]
 800935e:	f04f 30ff 	mov.w	r0, #4294967295
 8009362:	e0c8      	b.n	80094f6 <_svfiprintf_r+0x1c2>
 8009364:	2340      	movs	r3, #64	; 0x40
 8009366:	6163      	str	r3, [r4, #20]
 8009368:	2300      	movs	r3, #0
 800936a:	9309      	str	r3, [sp, #36]	; 0x24
 800936c:	2320      	movs	r3, #32
 800936e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009372:	2330      	movs	r3, #48	; 0x30
 8009374:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009378:	9503      	str	r5, [sp, #12]
 800937a:	f04f 0b01 	mov.w	fp, #1
 800937e:	4637      	mov	r7, r6
 8009380:	463d      	mov	r5, r7
 8009382:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009386:	b10b      	cbz	r3, 800938c <_svfiprintf_r+0x58>
 8009388:	2b25      	cmp	r3, #37	; 0x25
 800938a:	d13e      	bne.n	800940a <_svfiprintf_r+0xd6>
 800938c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009390:	d00b      	beq.n	80093aa <_svfiprintf_r+0x76>
 8009392:	4653      	mov	r3, sl
 8009394:	4632      	mov	r2, r6
 8009396:	4621      	mov	r1, r4
 8009398:	4640      	mov	r0, r8
 800939a:	f7ff ff71 	bl	8009280 <__ssputs_r>
 800939e:	3001      	adds	r0, #1
 80093a0:	f000 80a4 	beq.w	80094ec <_svfiprintf_r+0x1b8>
 80093a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a6:	4453      	add	r3, sl
 80093a8:	9309      	str	r3, [sp, #36]	; 0x24
 80093aa:	783b      	ldrb	r3, [r7, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f000 809d 	beq.w	80094ec <_svfiprintf_r+0x1b8>
 80093b2:	2300      	movs	r3, #0
 80093b4:	f04f 32ff 	mov.w	r2, #4294967295
 80093b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093bc:	9304      	str	r3, [sp, #16]
 80093be:	9307      	str	r3, [sp, #28]
 80093c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093c4:	931a      	str	r3, [sp, #104]	; 0x68
 80093c6:	462f      	mov	r7, r5
 80093c8:	2205      	movs	r2, #5
 80093ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80093ce:	4850      	ldr	r0, [pc, #320]	; (8009510 <_svfiprintf_r+0x1dc>)
 80093d0:	f7f6 fefe 	bl	80001d0 <memchr>
 80093d4:	9b04      	ldr	r3, [sp, #16]
 80093d6:	b9d0      	cbnz	r0, 800940e <_svfiprintf_r+0xda>
 80093d8:	06d9      	lsls	r1, r3, #27
 80093da:	bf44      	itt	mi
 80093dc:	2220      	movmi	r2, #32
 80093de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80093e2:	071a      	lsls	r2, r3, #28
 80093e4:	bf44      	itt	mi
 80093e6:	222b      	movmi	r2, #43	; 0x2b
 80093e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80093ec:	782a      	ldrb	r2, [r5, #0]
 80093ee:	2a2a      	cmp	r2, #42	; 0x2a
 80093f0:	d015      	beq.n	800941e <_svfiprintf_r+0xea>
 80093f2:	9a07      	ldr	r2, [sp, #28]
 80093f4:	462f      	mov	r7, r5
 80093f6:	2000      	movs	r0, #0
 80093f8:	250a      	movs	r5, #10
 80093fa:	4639      	mov	r1, r7
 80093fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009400:	3b30      	subs	r3, #48	; 0x30
 8009402:	2b09      	cmp	r3, #9
 8009404:	d94d      	bls.n	80094a2 <_svfiprintf_r+0x16e>
 8009406:	b1b8      	cbz	r0, 8009438 <_svfiprintf_r+0x104>
 8009408:	e00f      	b.n	800942a <_svfiprintf_r+0xf6>
 800940a:	462f      	mov	r7, r5
 800940c:	e7b8      	b.n	8009380 <_svfiprintf_r+0x4c>
 800940e:	4a40      	ldr	r2, [pc, #256]	; (8009510 <_svfiprintf_r+0x1dc>)
 8009410:	1a80      	subs	r0, r0, r2
 8009412:	fa0b f000 	lsl.w	r0, fp, r0
 8009416:	4318      	orrs	r0, r3
 8009418:	9004      	str	r0, [sp, #16]
 800941a:	463d      	mov	r5, r7
 800941c:	e7d3      	b.n	80093c6 <_svfiprintf_r+0x92>
 800941e:	9a03      	ldr	r2, [sp, #12]
 8009420:	1d11      	adds	r1, r2, #4
 8009422:	6812      	ldr	r2, [r2, #0]
 8009424:	9103      	str	r1, [sp, #12]
 8009426:	2a00      	cmp	r2, #0
 8009428:	db01      	blt.n	800942e <_svfiprintf_r+0xfa>
 800942a:	9207      	str	r2, [sp, #28]
 800942c:	e004      	b.n	8009438 <_svfiprintf_r+0x104>
 800942e:	4252      	negs	r2, r2
 8009430:	f043 0302 	orr.w	r3, r3, #2
 8009434:	9207      	str	r2, [sp, #28]
 8009436:	9304      	str	r3, [sp, #16]
 8009438:	783b      	ldrb	r3, [r7, #0]
 800943a:	2b2e      	cmp	r3, #46	; 0x2e
 800943c:	d10c      	bne.n	8009458 <_svfiprintf_r+0x124>
 800943e:	787b      	ldrb	r3, [r7, #1]
 8009440:	2b2a      	cmp	r3, #42	; 0x2a
 8009442:	d133      	bne.n	80094ac <_svfiprintf_r+0x178>
 8009444:	9b03      	ldr	r3, [sp, #12]
 8009446:	1d1a      	adds	r2, r3, #4
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	9203      	str	r2, [sp, #12]
 800944c:	2b00      	cmp	r3, #0
 800944e:	bfb8      	it	lt
 8009450:	f04f 33ff 	movlt.w	r3, #4294967295
 8009454:	3702      	adds	r7, #2
 8009456:	9305      	str	r3, [sp, #20]
 8009458:	4d2e      	ldr	r5, [pc, #184]	; (8009514 <_svfiprintf_r+0x1e0>)
 800945a:	7839      	ldrb	r1, [r7, #0]
 800945c:	2203      	movs	r2, #3
 800945e:	4628      	mov	r0, r5
 8009460:	f7f6 feb6 	bl	80001d0 <memchr>
 8009464:	b138      	cbz	r0, 8009476 <_svfiprintf_r+0x142>
 8009466:	2340      	movs	r3, #64	; 0x40
 8009468:	1b40      	subs	r0, r0, r5
 800946a:	fa03 f000 	lsl.w	r0, r3, r0
 800946e:	9b04      	ldr	r3, [sp, #16]
 8009470:	4303      	orrs	r3, r0
 8009472:	3701      	adds	r7, #1
 8009474:	9304      	str	r3, [sp, #16]
 8009476:	7839      	ldrb	r1, [r7, #0]
 8009478:	4827      	ldr	r0, [pc, #156]	; (8009518 <_svfiprintf_r+0x1e4>)
 800947a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800947e:	2206      	movs	r2, #6
 8009480:	1c7e      	adds	r6, r7, #1
 8009482:	f7f6 fea5 	bl	80001d0 <memchr>
 8009486:	2800      	cmp	r0, #0
 8009488:	d038      	beq.n	80094fc <_svfiprintf_r+0x1c8>
 800948a:	4b24      	ldr	r3, [pc, #144]	; (800951c <_svfiprintf_r+0x1e8>)
 800948c:	bb13      	cbnz	r3, 80094d4 <_svfiprintf_r+0x1a0>
 800948e:	9b03      	ldr	r3, [sp, #12]
 8009490:	3307      	adds	r3, #7
 8009492:	f023 0307 	bic.w	r3, r3, #7
 8009496:	3308      	adds	r3, #8
 8009498:	9303      	str	r3, [sp, #12]
 800949a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800949c:	444b      	add	r3, r9
 800949e:	9309      	str	r3, [sp, #36]	; 0x24
 80094a0:	e76d      	b.n	800937e <_svfiprintf_r+0x4a>
 80094a2:	fb05 3202 	mla	r2, r5, r2, r3
 80094a6:	2001      	movs	r0, #1
 80094a8:	460f      	mov	r7, r1
 80094aa:	e7a6      	b.n	80093fa <_svfiprintf_r+0xc6>
 80094ac:	2300      	movs	r3, #0
 80094ae:	3701      	adds	r7, #1
 80094b0:	9305      	str	r3, [sp, #20]
 80094b2:	4619      	mov	r1, r3
 80094b4:	250a      	movs	r5, #10
 80094b6:	4638      	mov	r0, r7
 80094b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094bc:	3a30      	subs	r2, #48	; 0x30
 80094be:	2a09      	cmp	r2, #9
 80094c0:	d903      	bls.n	80094ca <_svfiprintf_r+0x196>
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d0c8      	beq.n	8009458 <_svfiprintf_r+0x124>
 80094c6:	9105      	str	r1, [sp, #20]
 80094c8:	e7c6      	b.n	8009458 <_svfiprintf_r+0x124>
 80094ca:	fb05 2101 	mla	r1, r5, r1, r2
 80094ce:	2301      	movs	r3, #1
 80094d0:	4607      	mov	r7, r0
 80094d2:	e7f0      	b.n	80094b6 <_svfiprintf_r+0x182>
 80094d4:	ab03      	add	r3, sp, #12
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	4622      	mov	r2, r4
 80094da:	4b11      	ldr	r3, [pc, #68]	; (8009520 <_svfiprintf_r+0x1ec>)
 80094dc:	a904      	add	r1, sp, #16
 80094de:	4640      	mov	r0, r8
 80094e0:	f3af 8000 	nop.w
 80094e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80094e8:	4681      	mov	r9, r0
 80094ea:	d1d6      	bne.n	800949a <_svfiprintf_r+0x166>
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	065b      	lsls	r3, r3, #25
 80094f0:	f53f af35 	bmi.w	800935e <_svfiprintf_r+0x2a>
 80094f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094f6:	b01d      	add	sp, #116	; 0x74
 80094f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fc:	ab03      	add	r3, sp, #12
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	4622      	mov	r2, r4
 8009502:	4b07      	ldr	r3, [pc, #28]	; (8009520 <_svfiprintf_r+0x1ec>)
 8009504:	a904      	add	r1, sp, #16
 8009506:	4640      	mov	r0, r8
 8009508:	f000 f882 	bl	8009610 <_printf_i>
 800950c:	e7ea      	b.n	80094e4 <_svfiprintf_r+0x1b0>
 800950e:	bf00      	nop
 8009510:	08009a64 	.word	0x08009a64
 8009514:	08009a6a 	.word	0x08009a6a
 8009518:	08009a6e 	.word	0x08009a6e
 800951c:	00000000 	.word	0x00000000
 8009520:	08009281 	.word	0x08009281

08009524 <_printf_common>:
 8009524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009528:	4691      	mov	r9, r2
 800952a:	461f      	mov	r7, r3
 800952c:	688a      	ldr	r2, [r1, #8]
 800952e:	690b      	ldr	r3, [r1, #16]
 8009530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009534:	4293      	cmp	r3, r2
 8009536:	bfb8      	it	lt
 8009538:	4613      	movlt	r3, r2
 800953a:	f8c9 3000 	str.w	r3, [r9]
 800953e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009542:	4606      	mov	r6, r0
 8009544:	460c      	mov	r4, r1
 8009546:	b112      	cbz	r2, 800954e <_printf_common+0x2a>
 8009548:	3301      	adds	r3, #1
 800954a:	f8c9 3000 	str.w	r3, [r9]
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	0699      	lsls	r1, r3, #26
 8009552:	bf42      	ittt	mi
 8009554:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009558:	3302      	addmi	r3, #2
 800955a:	f8c9 3000 	strmi.w	r3, [r9]
 800955e:	6825      	ldr	r5, [r4, #0]
 8009560:	f015 0506 	ands.w	r5, r5, #6
 8009564:	d107      	bne.n	8009576 <_printf_common+0x52>
 8009566:	f104 0a19 	add.w	sl, r4, #25
 800956a:	68e3      	ldr	r3, [r4, #12]
 800956c:	f8d9 2000 	ldr.w	r2, [r9]
 8009570:	1a9b      	subs	r3, r3, r2
 8009572:	42ab      	cmp	r3, r5
 8009574:	dc28      	bgt.n	80095c8 <_printf_common+0xa4>
 8009576:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800957a:	6822      	ldr	r2, [r4, #0]
 800957c:	3300      	adds	r3, #0
 800957e:	bf18      	it	ne
 8009580:	2301      	movne	r3, #1
 8009582:	0692      	lsls	r2, r2, #26
 8009584:	d42d      	bmi.n	80095e2 <_printf_common+0xbe>
 8009586:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800958a:	4639      	mov	r1, r7
 800958c:	4630      	mov	r0, r6
 800958e:	47c0      	blx	r8
 8009590:	3001      	adds	r0, #1
 8009592:	d020      	beq.n	80095d6 <_printf_common+0xb2>
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	68e5      	ldr	r5, [r4, #12]
 8009598:	f8d9 2000 	ldr.w	r2, [r9]
 800959c:	f003 0306 	and.w	r3, r3, #6
 80095a0:	2b04      	cmp	r3, #4
 80095a2:	bf08      	it	eq
 80095a4:	1aad      	subeq	r5, r5, r2
 80095a6:	68a3      	ldr	r3, [r4, #8]
 80095a8:	6922      	ldr	r2, [r4, #16]
 80095aa:	bf0c      	ite	eq
 80095ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095b0:	2500      	movne	r5, #0
 80095b2:	4293      	cmp	r3, r2
 80095b4:	bfc4      	itt	gt
 80095b6:	1a9b      	subgt	r3, r3, r2
 80095b8:	18ed      	addgt	r5, r5, r3
 80095ba:	f04f 0900 	mov.w	r9, #0
 80095be:	341a      	adds	r4, #26
 80095c0:	454d      	cmp	r5, r9
 80095c2:	d11a      	bne.n	80095fa <_printf_common+0xd6>
 80095c4:	2000      	movs	r0, #0
 80095c6:	e008      	b.n	80095da <_printf_common+0xb6>
 80095c8:	2301      	movs	r3, #1
 80095ca:	4652      	mov	r2, sl
 80095cc:	4639      	mov	r1, r7
 80095ce:	4630      	mov	r0, r6
 80095d0:	47c0      	blx	r8
 80095d2:	3001      	adds	r0, #1
 80095d4:	d103      	bne.n	80095de <_printf_common+0xba>
 80095d6:	f04f 30ff 	mov.w	r0, #4294967295
 80095da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095de:	3501      	adds	r5, #1
 80095e0:	e7c3      	b.n	800956a <_printf_common+0x46>
 80095e2:	18e1      	adds	r1, r4, r3
 80095e4:	1c5a      	adds	r2, r3, #1
 80095e6:	2030      	movs	r0, #48	; 0x30
 80095e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095ec:	4422      	add	r2, r4
 80095ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095f6:	3302      	adds	r3, #2
 80095f8:	e7c5      	b.n	8009586 <_printf_common+0x62>
 80095fa:	2301      	movs	r3, #1
 80095fc:	4622      	mov	r2, r4
 80095fe:	4639      	mov	r1, r7
 8009600:	4630      	mov	r0, r6
 8009602:	47c0      	blx	r8
 8009604:	3001      	adds	r0, #1
 8009606:	d0e6      	beq.n	80095d6 <_printf_common+0xb2>
 8009608:	f109 0901 	add.w	r9, r9, #1
 800960c:	e7d8      	b.n	80095c0 <_printf_common+0x9c>
	...

08009610 <_printf_i>:
 8009610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009614:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009618:	460c      	mov	r4, r1
 800961a:	7e09      	ldrb	r1, [r1, #24]
 800961c:	b085      	sub	sp, #20
 800961e:	296e      	cmp	r1, #110	; 0x6e
 8009620:	4617      	mov	r7, r2
 8009622:	4606      	mov	r6, r0
 8009624:	4698      	mov	r8, r3
 8009626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009628:	f000 80b3 	beq.w	8009792 <_printf_i+0x182>
 800962c:	d822      	bhi.n	8009674 <_printf_i+0x64>
 800962e:	2963      	cmp	r1, #99	; 0x63
 8009630:	d036      	beq.n	80096a0 <_printf_i+0x90>
 8009632:	d80a      	bhi.n	800964a <_printf_i+0x3a>
 8009634:	2900      	cmp	r1, #0
 8009636:	f000 80b9 	beq.w	80097ac <_printf_i+0x19c>
 800963a:	2958      	cmp	r1, #88	; 0x58
 800963c:	f000 8083 	beq.w	8009746 <_printf_i+0x136>
 8009640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009644:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009648:	e032      	b.n	80096b0 <_printf_i+0xa0>
 800964a:	2964      	cmp	r1, #100	; 0x64
 800964c:	d001      	beq.n	8009652 <_printf_i+0x42>
 800964e:	2969      	cmp	r1, #105	; 0x69
 8009650:	d1f6      	bne.n	8009640 <_printf_i+0x30>
 8009652:	6820      	ldr	r0, [r4, #0]
 8009654:	6813      	ldr	r3, [r2, #0]
 8009656:	0605      	lsls	r5, r0, #24
 8009658:	f103 0104 	add.w	r1, r3, #4
 800965c:	d52a      	bpl.n	80096b4 <_printf_i+0xa4>
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6011      	str	r1, [r2, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	da03      	bge.n	800966e <_printf_i+0x5e>
 8009666:	222d      	movs	r2, #45	; 0x2d
 8009668:	425b      	negs	r3, r3
 800966a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800966e:	486f      	ldr	r0, [pc, #444]	; (800982c <_printf_i+0x21c>)
 8009670:	220a      	movs	r2, #10
 8009672:	e039      	b.n	80096e8 <_printf_i+0xd8>
 8009674:	2973      	cmp	r1, #115	; 0x73
 8009676:	f000 809d 	beq.w	80097b4 <_printf_i+0x1a4>
 800967a:	d808      	bhi.n	800968e <_printf_i+0x7e>
 800967c:	296f      	cmp	r1, #111	; 0x6f
 800967e:	d020      	beq.n	80096c2 <_printf_i+0xb2>
 8009680:	2970      	cmp	r1, #112	; 0x70
 8009682:	d1dd      	bne.n	8009640 <_printf_i+0x30>
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	f043 0320 	orr.w	r3, r3, #32
 800968a:	6023      	str	r3, [r4, #0]
 800968c:	e003      	b.n	8009696 <_printf_i+0x86>
 800968e:	2975      	cmp	r1, #117	; 0x75
 8009690:	d017      	beq.n	80096c2 <_printf_i+0xb2>
 8009692:	2978      	cmp	r1, #120	; 0x78
 8009694:	d1d4      	bne.n	8009640 <_printf_i+0x30>
 8009696:	2378      	movs	r3, #120	; 0x78
 8009698:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800969c:	4864      	ldr	r0, [pc, #400]	; (8009830 <_printf_i+0x220>)
 800969e:	e055      	b.n	800974c <_printf_i+0x13c>
 80096a0:	6813      	ldr	r3, [r2, #0]
 80096a2:	1d19      	adds	r1, r3, #4
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6011      	str	r1, [r2, #0]
 80096a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096b0:	2301      	movs	r3, #1
 80096b2:	e08c      	b.n	80097ce <_printf_i+0x1be>
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6011      	str	r1, [r2, #0]
 80096b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80096bc:	bf18      	it	ne
 80096be:	b21b      	sxthne	r3, r3
 80096c0:	e7cf      	b.n	8009662 <_printf_i+0x52>
 80096c2:	6813      	ldr	r3, [r2, #0]
 80096c4:	6825      	ldr	r5, [r4, #0]
 80096c6:	1d18      	adds	r0, r3, #4
 80096c8:	6010      	str	r0, [r2, #0]
 80096ca:	0628      	lsls	r0, r5, #24
 80096cc:	d501      	bpl.n	80096d2 <_printf_i+0xc2>
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	e002      	b.n	80096d8 <_printf_i+0xc8>
 80096d2:	0668      	lsls	r0, r5, #25
 80096d4:	d5fb      	bpl.n	80096ce <_printf_i+0xbe>
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	4854      	ldr	r0, [pc, #336]	; (800982c <_printf_i+0x21c>)
 80096da:	296f      	cmp	r1, #111	; 0x6f
 80096dc:	bf14      	ite	ne
 80096de:	220a      	movne	r2, #10
 80096e0:	2208      	moveq	r2, #8
 80096e2:	2100      	movs	r1, #0
 80096e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096e8:	6865      	ldr	r5, [r4, #4]
 80096ea:	60a5      	str	r5, [r4, #8]
 80096ec:	2d00      	cmp	r5, #0
 80096ee:	f2c0 8095 	blt.w	800981c <_printf_i+0x20c>
 80096f2:	6821      	ldr	r1, [r4, #0]
 80096f4:	f021 0104 	bic.w	r1, r1, #4
 80096f8:	6021      	str	r1, [r4, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d13d      	bne.n	800977a <_printf_i+0x16a>
 80096fe:	2d00      	cmp	r5, #0
 8009700:	f040 808e 	bne.w	8009820 <_printf_i+0x210>
 8009704:	4665      	mov	r5, ip
 8009706:	2a08      	cmp	r2, #8
 8009708:	d10b      	bne.n	8009722 <_printf_i+0x112>
 800970a:	6823      	ldr	r3, [r4, #0]
 800970c:	07db      	lsls	r3, r3, #31
 800970e:	d508      	bpl.n	8009722 <_printf_i+0x112>
 8009710:	6923      	ldr	r3, [r4, #16]
 8009712:	6862      	ldr	r2, [r4, #4]
 8009714:	429a      	cmp	r2, r3
 8009716:	bfde      	ittt	le
 8009718:	2330      	movle	r3, #48	; 0x30
 800971a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800971e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009722:	ebac 0305 	sub.w	r3, ip, r5
 8009726:	6123      	str	r3, [r4, #16]
 8009728:	f8cd 8000 	str.w	r8, [sp]
 800972c:	463b      	mov	r3, r7
 800972e:	aa03      	add	r2, sp, #12
 8009730:	4621      	mov	r1, r4
 8009732:	4630      	mov	r0, r6
 8009734:	f7ff fef6 	bl	8009524 <_printf_common>
 8009738:	3001      	adds	r0, #1
 800973a:	d14d      	bne.n	80097d8 <_printf_i+0x1c8>
 800973c:	f04f 30ff 	mov.w	r0, #4294967295
 8009740:	b005      	add	sp, #20
 8009742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009746:	4839      	ldr	r0, [pc, #228]	; (800982c <_printf_i+0x21c>)
 8009748:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800974c:	6813      	ldr	r3, [r2, #0]
 800974e:	6821      	ldr	r1, [r4, #0]
 8009750:	1d1d      	adds	r5, r3, #4
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6015      	str	r5, [r2, #0]
 8009756:	060a      	lsls	r2, r1, #24
 8009758:	d50b      	bpl.n	8009772 <_printf_i+0x162>
 800975a:	07ca      	lsls	r2, r1, #31
 800975c:	bf44      	itt	mi
 800975e:	f041 0120 	orrmi.w	r1, r1, #32
 8009762:	6021      	strmi	r1, [r4, #0]
 8009764:	b91b      	cbnz	r3, 800976e <_printf_i+0x15e>
 8009766:	6822      	ldr	r2, [r4, #0]
 8009768:	f022 0220 	bic.w	r2, r2, #32
 800976c:	6022      	str	r2, [r4, #0]
 800976e:	2210      	movs	r2, #16
 8009770:	e7b7      	b.n	80096e2 <_printf_i+0xd2>
 8009772:	064d      	lsls	r5, r1, #25
 8009774:	bf48      	it	mi
 8009776:	b29b      	uxthmi	r3, r3
 8009778:	e7ef      	b.n	800975a <_printf_i+0x14a>
 800977a:	4665      	mov	r5, ip
 800977c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009780:	fb02 3311 	mls	r3, r2, r1, r3
 8009784:	5cc3      	ldrb	r3, [r0, r3]
 8009786:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800978a:	460b      	mov	r3, r1
 800978c:	2900      	cmp	r1, #0
 800978e:	d1f5      	bne.n	800977c <_printf_i+0x16c>
 8009790:	e7b9      	b.n	8009706 <_printf_i+0xf6>
 8009792:	6813      	ldr	r3, [r2, #0]
 8009794:	6825      	ldr	r5, [r4, #0]
 8009796:	6961      	ldr	r1, [r4, #20]
 8009798:	1d18      	adds	r0, r3, #4
 800979a:	6010      	str	r0, [r2, #0]
 800979c:	0628      	lsls	r0, r5, #24
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	d501      	bpl.n	80097a6 <_printf_i+0x196>
 80097a2:	6019      	str	r1, [r3, #0]
 80097a4:	e002      	b.n	80097ac <_printf_i+0x19c>
 80097a6:	066a      	lsls	r2, r5, #25
 80097a8:	d5fb      	bpl.n	80097a2 <_printf_i+0x192>
 80097aa:	8019      	strh	r1, [r3, #0]
 80097ac:	2300      	movs	r3, #0
 80097ae:	6123      	str	r3, [r4, #16]
 80097b0:	4665      	mov	r5, ip
 80097b2:	e7b9      	b.n	8009728 <_printf_i+0x118>
 80097b4:	6813      	ldr	r3, [r2, #0]
 80097b6:	1d19      	adds	r1, r3, #4
 80097b8:	6011      	str	r1, [r2, #0]
 80097ba:	681d      	ldr	r5, [r3, #0]
 80097bc:	6862      	ldr	r2, [r4, #4]
 80097be:	2100      	movs	r1, #0
 80097c0:	4628      	mov	r0, r5
 80097c2:	f7f6 fd05 	bl	80001d0 <memchr>
 80097c6:	b108      	cbz	r0, 80097cc <_printf_i+0x1bc>
 80097c8:	1b40      	subs	r0, r0, r5
 80097ca:	6060      	str	r0, [r4, #4]
 80097cc:	6863      	ldr	r3, [r4, #4]
 80097ce:	6123      	str	r3, [r4, #16]
 80097d0:	2300      	movs	r3, #0
 80097d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097d6:	e7a7      	b.n	8009728 <_printf_i+0x118>
 80097d8:	6923      	ldr	r3, [r4, #16]
 80097da:	462a      	mov	r2, r5
 80097dc:	4639      	mov	r1, r7
 80097de:	4630      	mov	r0, r6
 80097e0:	47c0      	blx	r8
 80097e2:	3001      	adds	r0, #1
 80097e4:	d0aa      	beq.n	800973c <_printf_i+0x12c>
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	079b      	lsls	r3, r3, #30
 80097ea:	d413      	bmi.n	8009814 <_printf_i+0x204>
 80097ec:	68e0      	ldr	r0, [r4, #12]
 80097ee:	9b03      	ldr	r3, [sp, #12]
 80097f0:	4298      	cmp	r0, r3
 80097f2:	bfb8      	it	lt
 80097f4:	4618      	movlt	r0, r3
 80097f6:	e7a3      	b.n	8009740 <_printf_i+0x130>
 80097f8:	2301      	movs	r3, #1
 80097fa:	464a      	mov	r2, r9
 80097fc:	4639      	mov	r1, r7
 80097fe:	4630      	mov	r0, r6
 8009800:	47c0      	blx	r8
 8009802:	3001      	adds	r0, #1
 8009804:	d09a      	beq.n	800973c <_printf_i+0x12c>
 8009806:	3501      	adds	r5, #1
 8009808:	68e3      	ldr	r3, [r4, #12]
 800980a:	9a03      	ldr	r2, [sp, #12]
 800980c:	1a9b      	subs	r3, r3, r2
 800980e:	42ab      	cmp	r3, r5
 8009810:	dcf2      	bgt.n	80097f8 <_printf_i+0x1e8>
 8009812:	e7eb      	b.n	80097ec <_printf_i+0x1dc>
 8009814:	2500      	movs	r5, #0
 8009816:	f104 0919 	add.w	r9, r4, #25
 800981a:	e7f5      	b.n	8009808 <_printf_i+0x1f8>
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1ac      	bne.n	800977a <_printf_i+0x16a>
 8009820:	7803      	ldrb	r3, [r0, #0]
 8009822:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009826:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800982a:	e76c      	b.n	8009706 <_printf_i+0xf6>
 800982c:	08009a75 	.word	0x08009a75
 8009830:	08009a86 	.word	0x08009a86

08009834 <memmove>:
 8009834:	4288      	cmp	r0, r1
 8009836:	b510      	push	{r4, lr}
 8009838:	eb01 0302 	add.w	r3, r1, r2
 800983c:	d807      	bhi.n	800984e <memmove+0x1a>
 800983e:	1e42      	subs	r2, r0, #1
 8009840:	4299      	cmp	r1, r3
 8009842:	d00a      	beq.n	800985a <memmove+0x26>
 8009844:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009848:	f802 4f01 	strb.w	r4, [r2, #1]!
 800984c:	e7f8      	b.n	8009840 <memmove+0xc>
 800984e:	4283      	cmp	r3, r0
 8009850:	d9f5      	bls.n	800983e <memmove+0xa>
 8009852:	1881      	adds	r1, r0, r2
 8009854:	1ad2      	subs	r2, r2, r3
 8009856:	42d3      	cmn	r3, r2
 8009858:	d100      	bne.n	800985c <memmove+0x28>
 800985a:	bd10      	pop	{r4, pc}
 800985c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009860:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009864:	e7f7      	b.n	8009856 <memmove+0x22>

08009866 <_realloc_r>:
 8009866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009868:	4607      	mov	r7, r0
 800986a:	4614      	mov	r4, r2
 800986c:	460e      	mov	r6, r1
 800986e:	b921      	cbnz	r1, 800987a <_realloc_r+0x14>
 8009870:	4611      	mov	r1, r2
 8009872:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009876:	f7ff bc77 	b.w	8009168 <_malloc_r>
 800987a:	b922      	cbnz	r2, 8009886 <_realloc_r+0x20>
 800987c:	f7ff fc26 	bl	80090cc <_free_r>
 8009880:	4625      	mov	r5, r4
 8009882:	4628      	mov	r0, r5
 8009884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009886:	f000 f814 	bl	80098b2 <_malloc_usable_size_r>
 800988a:	42a0      	cmp	r0, r4
 800988c:	d20f      	bcs.n	80098ae <_realloc_r+0x48>
 800988e:	4621      	mov	r1, r4
 8009890:	4638      	mov	r0, r7
 8009892:	f7ff fc69 	bl	8009168 <_malloc_r>
 8009896:	4605      	mov	r5, r0
 8009898:	2800      	cmp	r0, #0
 800989a:	d0f2      	beq.n	8009882 <_realloc_r+0x1c>
 800989c:	4631      	mov	r1, r6
 800989e:	4622      	mov	r2, r4
 80098a0:	f7ff fc00 	bl	80090a4 <memcpy>
 80098a4:	4631      	mov	r1, r6
 80098a6:	4638      	mov	r0, r7
 80098a8:	f7ff fc10 	bl	80090cc <_free_r>
 80098ac:	e7e9      	b.n	8009882 <_realloc_r+0x1c>
 80098ae:	4635      	mov	r5, r6
 80098b0:	e7e7      	b.n	8009882 <_realloc_r+0x1c>

080098b2 <_malloc_usable_size_r>:
 80098b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098b6:	1f18      	subs	r0, r3, #4
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	bfbc      	itt	lt
 80098bc:	580b      	ldrlt	r3, [r1, r0]
 80098be:	18c0      	addlt	r0, r0, r3
 80098c0:	4770      	bx	lr
	...

080098c4 <_init>:
 80098c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c6:	bf00      	nop
 80098c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ca:	bc08      	pop	{r3}
 80098cc:	469e      	mov	lr, r3
 80098ce:	4770      	bx	lr

080098d0 <_fini>:
 80098d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d2:	bf00      	nop
 80098d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098d6:	bc08      	pop	{r3}
 80098d8:	469e      	mov	lr, r3
 80098da:	4770      	bx	lr
