
uart_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000980c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  0800999c  0800999c  0001999c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ba8  08009ba8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009ba8  08009ba8  00019ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bb0  08009bb0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bb0  08009bb0  00019bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bb4  08009bb4  00019bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c8  20000090  08009c48  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a58  08009c48  00020a58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4f5  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f37  00000000  00000000  0003f5b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018b0  00000000  00000000  000434f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001710  00000000  00000000  00044da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000257f7  00000000  00000000  000464b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015bfd  00000000  00000000  0006bca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4f16  00000000  00000000  000818a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001567ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c64  00000000  00000000  00156838  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009984 	.word	0x08009984

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009984 	.word	0x08009984

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_TIM_PeriodElapsedCallback>:
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){ // Jeżeli przerwanie pochodzi od timera 10
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a05      	ldr	r2, [pc, #20]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d102      	bne.n	8000588 <HAL_TIM_PeriodElapsedCallback+0x18>
		timer_state=1;
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40014400 	.word	0x40014400
 8000598:	200000ac 	.word	0x200000ac

0800059c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]


	receive_flag=1;
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <HAL_UART_RxCpltCallback+0x1c>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]

}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	200000ad 	.word	0x200000ad

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b5b0      	push	{r4, r5, r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 ff15 	bl	80013f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 fa55 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fbb9 	bl	8000d40 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ce:	f000 fad3 	bl	8000b78 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005d2:	f000 faff 	bl	8000bd4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005d6:	f000 fb2d 	bl	8000c34 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005da:	f008 fa81 	bl	8008ae0 <MX_USB_HOST_Init>
  MX_TIM10_Init();
 80005de:	f000 fb5f 	bl	8000ca0 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 fb83 	bl	8000cec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim10);
 80005e6:	4894      	ldr	r0, [pc, #592]	; (8000838 <main+0x27c>)
 80005e8:	f004 fb91 	bl	8004d0e <HAL_TIM_Base_Start_IT>

HAL_UART_Receive_IT(&huart2, &Received, 1);
 80005ec:	2201      	movs	r2, #1
 80005ee:	4993      	ldr	r1, [pc, #588]	; (800083c <main+0x280>)
 80005f0:	4893      	ldr	r0, [pc, #588]	; (8000840 <main+0x284>)
 80005f2:	f004 fe27 	bl	8005244 <HAL_UART_Receive_IT>
  while (1)
  {



	  if(timer_state==1)
 80005f6:	4b93      	ldr	r3, [pc, #588]	; (8000844 <main+0x288>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d123      	bne.n	8000646 <main+0x8a>
	  {
			 ++cnt; // Zwiekszenie licznika wyslanych wiadomosci.
 80005fe:	4b92      	ldr	r3, [pc, #584]	; (8000848 <main+0x28c>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	b29a      	uxth	r2, r3
 8000606:	4b90      	ldr	r3, [pc, #576]	; (8000848 <main+0x28c>)
 8000608:	801a      	strh	r2, [r3, #0]
			 size = sprintf(data, "						message nr: %d.\n\r", cnt); // Stworzenie wiadomosci do wyslania oraz przypisanie ilosci wysylanych znakow do zmiennej size.
 800060a:	4b8f      	ldr	r3, [pc, #572]	; (8000848 <main+0x28c>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	498e      	ldr	r1, [pc, #568]	; (800084c <main+0x290>)
 8000612:	488f      	ldr	r0, [pc, #572]	; (8000850 <main+0x294>)
 8000614:	f008 fe72 	bl	80092fc <siprintf>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	4b8d      	ldr	r3, [pc, #564]	; (8000854 <main+0x298>)
 800061e:	801a      	strh	r2, [r3, #0]
			 if(monitor_flag==true)
 8000620:	4b8d      	ldr	r3, [pc, #564]	; (8000858 <main+0x29c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d006      	beq.n	8000636 <main+0x7a>
			 {
			 HAL_UART_Transmit_IT(&huart2, data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 8000628:	4b8a      	ldr	r3, [pc, #552]	; (8000854 <main+0x298>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4988      	ldr	r1, [pc, #544]	; (8000850 <main+0x294>)
 8000630:	4883      	ldr	r0, [pc, #524]	; (8000840 <main+0x284>)
 8000632:	f004 fdc2 	bl	80051ba <HAL_UART_Transmit_IT>
			 }

			 HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin); // Zmiana stanu pinu na diodzie LED
 8000636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063a:	4888      	ldr	r0, [pc, #544]	; (800085c <main+0x2a0>)
 800063c:	f001 fa53 	bl	8001ae6 <HAL_GPIO_TogglePin>
			 timer_state=0;
 8000640:	4b80      	ldr	r3, [pc, #512]	; (8000844 <main+0x288>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
	  }

	  if(receive_flag==1)
 8000646:	4b86      	ldr	r3, [pc, #536]	; (8000860 <main+0x2a4>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	f040 81f5 	bne.w	8000a3a <main+0x47e>
	  {

		    static uint8_t i=0;
		  	uint16_t size = 0; // Rozmiar wysylanej wiadomosci
 8000650:	2300      	movs	r3, #0
 8000652:	80fb      	strh	r3, [r7, #6]



			//size = sprintf(receive_data, "%s",Received);
			if (Received[0] == 13 || Received[0]== 10)
 8000654:	4b79      	ldr	r3, [pc, #484]	; (800083c <main+0x280>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b0d      	cmp	r3, #13
 800065a:	d004      	beq.n	8000666 <main+0xaa>
 800065c:	4b77      	ldr	r3, [pc, #476]	; (800083c <main+0x280>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b0a      	cmp	r3, #10
 8000662:	f040 81b0 	bne.w	80009c6 <main+0x40a>
			{
			size = sprintf(receive_data, "\n\r>>");
 8000666:	4b7f      	ldr	r3, [pc, #508]	; (8000864 <main+0x2a8>)
 8000668:	4a7f      	ldr	r2, [pc, #508]	; (8000868 <main+0x2ac>)
 800066a:	6810      	ldr	r0, [r2, #0]
 800066c:	6018      	str	r0, [r3, #0]
 800066e:	7912      	ldrb	r2, [r2, #4]
 8000670:	711a      	strb	r2, [r3, #4]
 8000672:	2304      	movs	r3, #4
 8000674:	80fb      	strh	r3, [r7, #6]
			i=0;
 8000676:	4b7d      	ldr	r3, [pc, #500]	; (800086c <main+0x2b0>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]

			//RLON/RLOFF
			//HELP
				if(data_buffer[0]=='h' && data_buffer[1]=='e' && data_buffer[2]=='l' && data_buffer[3]=='p')
 800067c:	4b7c      	ldr	r3, [pc, #496]	; (8000870 <main+0x2b4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b68      	cmp	r3, #104	; 0x68
 8000682:	d11c      	bne.n	80006be <main+0x102>
 8000684:	4b7a      	ldr	r3, [pc, #488]	; (8000870 <main+0x2b4>)
 8000686:	785b      	ldrb	r3, [r3, #1]
 8000688:	2b65      	cmp	r3, #101	; 0x65
 800068a:	d118      	bne.n	80006be <main+0x102>
 800068c:	4b78      	ldr	r3, [pc, #480]	; (8000870 <main+0x2b4>)
 800068e:	789b      	ldrb	r3, [r3, #2]
 8000690:	2b6c      	cmp	r3, #108	; 0x6c
 8000692:	d114      	bne.n	80006be <main+0x102>
 8000694:	4b76      	ldr	r3, [pc, #472]	; (8000870 <main+0x2b4>)
 8000696:	78db      	ldrb	r3, [r3, #3]
 8000698:	2b70      	cmp	r3, #112	; 0x70
 800069a:	d110      	bne.n	80006be <main+0x102>
				{
					size = sprintf(data,"\r\n s - show terminal monitor\r\n e - hide terminal monitor\r\n rlon - turns red led on\r\n rloff - turns led red off\r\n blon - turns blue led on\r\n bloff - turns blue led off\r\n olon - turns orange led on\r\n oloff - turns orange led off\r\n");
 800069c:	4a6c      	ldr	r2, [pc, #432]	; (8000850 <main+0x294>)
 800069e:	4b75      	ldr	r3, [pc, #468]	; (8000874 <main+0x2b8>)
 80006a0:	4610      	mov	r0, r2
 80006a2:	4619      	mov	r1, r3
 80006a4:	23e5      	movs	r3, #229	; 0xe5
 80006a6:	461a      	mov	r2, r3
 80006a8:	f008 fd5c 	bl	8009164 <memcpy>
 80006ac:	23e4      	movs	r3, #228	; 0xe4
 80006ae:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	461a      	mov	r2, r3
 80006b4:	4966      	ldr	r1, [pc, #408]	; (8000850 <main+0x294>)
 80006b6:	4862      	ldr	r0, [pc, #392]	; (8000840 <main+0x284>)
 80006b8:	f004 fd7f 	bl	80051ba <HAL_UART_Transmit_IT>
 80006bc:	e173      	b.n	80009a6 <main+0x3ea>


				}

				else if(data_buffer[0]=='r' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='n')
 80006be:	4b6c      	ldr	r3, [pc, #432]	; (8000870 <main+0x2b4>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b72      	cmp	r3, #114	; 0x72
 80006c4:	d127      	bne.n	8000716 <main+0x15a>
 80006c6:	4b6a      	ldr	r3, [pc, #424]	; (8000870 <main+0x2b4>)
 80006c8:	785b      	ldrb	r3, [r3, #1]
 80006ca:	2b6c      	cmp	r3, #108	; 0x6c
 80006cc:	d123      	bne.n	8000716 <main+0x15a>
 80006ce:	4b68      	ldr	r3, [pc, #416]	; (8000870 <main+0x2b4>)
 80006d0:	789b      	ldrb	r3, [r3, #2]
 80006d2:	2b6f      	cmp	r3, #111	; 0x6f
 80006d4:	d11f      	bne.n	8000716 <main+0x15a>
 80006d6:	4b66      	ldr	r3, [pc, #408]	; (8000870 <main+0x2b4>)
 80006d8:	78db      	ldrb	r3, [r3, #3]
 80006da:	2b6e      	cmp	r3, #110	; 0x6e
 80006dc:	d11b      	bne.n	8000716 <main+0x15a>
				{
					HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e4:	485d      	ldr	r0, [pc, #372]	; (800085c <main+0x2a0>)
 80006e6:	f001 f9e5 	bl	8001ab4 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\nred led turned ON\r\n");
 80006ea:	4a59      	ldr	r2, [pc, #356]	; (8000850 <main+0x294>)
 80006ec:	4b62      	ldr	r3, [pc, #392]	; (8000878 <main+0x2bc>)
 80006ee:	4615      	mov	r5, r2
 80006f0:	461c      	mov	r4, r3
 80006f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006f4:	6028      	str	r0, [r5, #0]
 80006f6:	6069      	str	r1, [r5, #4]
 80006f8:	60aa      	str	r2, [r5, #8]
 80006fa:	60eb      	str	r3, [r5, #12]
 80006fc:	6820      	ldr	r0, [r4, #0]
 80006fe:	6128      	str	r0, [r5, #16]
 8000700:	88a3      	ldrh	r3, [r4, #4]
 8000702:	82ab      	strh	r3, [r5, #20]
 8000704:	2315      	movs	r3, #21
 8000706:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	461a      	mov	r2, r3
 800070c:	4950      	ldr	r1, [pc, #320]	; (8000850 <main+0x294>)
 800070e:	484c      	ldr	r0, [pc, #304]	; (8000840 <main+0x284>)
 8000710:	f004 fd53 	bl	80051ba <HAL_UART_Transmit_IT>
 8000714:	e147      	b.n	80009a6 <main+0x3ea>

				}

				else if(data_buffer[0]=='r' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='f' && data_buffer[4]=='f')
 8000716:	4b56      	ldr	r3, [pc, #344]	; (8000870 <main+0x2b4>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b72      	cmp	r3, #114	; 0x72
 800071c:	d12e      	bne.n	800077c <main+0x1c0>
 800071e:	4b54      	ldr	r3, [pc, #336]	; (8000870 <main+0x2b4>)
 8000720:	785b      	ldrb	r3, [r3, #1]
 8000722:	2b6c      	cmp	r3, #108	; 0x6c
 8000724:	d12a      	bne.n	800077c <main+0x1c0>
 8000726:	4b52      	ldr	r3, [pc, #328]	; (8000870 <main+0x2b4>)
 8000728:	789b      	ldrb	r3, [r3, #2]
 800072a:	2b6f      	cmp	r3, #111	; 0x6f
 800072c:	d126      	bne.n	800077c <main+0x1c0>
 800072e:	4b50      	ldr	r3, [pc, #320]	; (8000870 <main+0x2b4>)
 8000730:	78db      	ldrb	r3, [r3, #3]
 8000732:	2b66      	cmp	r3, #102	; 0x66
 8000734:	d122      	bne.n	800077c <main+0x1c0>
 8000736:	4b4e      	ldr	r3, [pc, #312]	; (8000870 <main+0x2b4>)
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	2b66      	cmp	r3, #102	; 0x66
 800073c:	d11e      	bne.n	800077c <main+0x1c0>
				{
					HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000744:	4845      	ldr	r0, [pc, #276]	; (800085c <main+0x2a0>)
 8000746:	f001 f9b5 	bl	8001ab4 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\nred led turned OFF\r\n");
 800074a:	4a41      	ldr	r2, [pc, #260]	; (8000850 <main+0x294>)
 800074c:	4b4b      	ldr	r3, [pc, #300]	; (800087c <main+0x2c0>)
 800074e:	4614      	mov	r4, r2
 8000750:	461d      	mov	r5, r3
 8000752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000754:	6020      	str	r0, [r4, #0]
 8000756:	6061      	str	r1, [r4, #4]
 8000758:	60a2      	str	r2, [r4, #8]
 800075a:	60e3      	str	r3, [r4, #12]
 800075c:	6828      	ldr	r0, [r5, #0]
 800075e:	6120      	str	r0, [r4, #16]
 8000760:	88ab      	ldrh	r3, [r5, #4]
 8000762:	79aa      	ldrb	r2, [r5, #6]
 8000764:	82a3      	strh	r3, [r4, #20]
 8000766:	4613      	mov	r3, r2
 8000768:	75a3      	strb	r3, [r4, #22]
 800076a:	2316      	movs	r3, #22
 800076c:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 800076e:	88fb      	ldrh	r3, [r7, #6]
 8000770:	461a      	mov	r2, r3
 8000772:	4937      	ldr	r1, [pc, #220]	; (8000850 <main+0x294>)
 8000774:	4832      	ldr	r0, [pc, #200]	; (8000840 <main+0x284>)
 8000776:	f004 fd20 	bl	80051ba <HAL_UART_Transmit_IT>
 800077a:	e114      	b.n	80009a6 <main+0x3ea>

				}

				else if(data_buffer[0]=='o' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='n')
 800077c:	4b3c      	ldr	r3, [pc, #240]	; (8000870 <main+0x2b4>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b6f      	cmp	r3, #111	; 0x6f
 8000782:	d128      	bne.n	80007d6 <main+0x21a>
 8000784:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <main+0x2b4>)
 8000786:	785b      	ldrb	r3, [r3, #1]
 8000788:	2b6c      	cmp	r3, #108	; 0x6c
 800078a:	d124      	bne.n	80007d6 <main+0x21a>
 800078c:	4b38      	ldr	r3, [pc, #224]	; (8000870 <main+0x2b4>)
 800078e:	789b      	ldrb	r3, [r3, #2]
 8000790:	2b6f      	cmp	r3, #111	; 0x6f
 8000792:	d120      	bne.n	80007d6 <main+0x21a>
 8000794:	4b36      	ldr	r3, [pc, #216]	; (8000870 <main+0x2b4>)
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	2b6e      	cmp	r3, #110	; 0x6e
 800079a:	d11c      	bne.n	80007d6 <main+0x21a>
				{
					HAL_GPIO_WritePin(LED_Orange_GPIO_Port, LED_Orange_Pin, SET);
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a2:	482e      	ldr	r0, [pc, #184]	; (800085c <main+0x2a0>)
 80007a4:	f001 f986 	bl	8001ab4 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\norange led turned ON\r\n");
 80007a8:	4a29      	ldr	r2, [pc, #164]	; (8000850 <main+0x294>)
 80007aa:	4b35      	ldr	r3, [pc, #212]	; (8000880 <main+0x2c4>)
 80007ac:	4615      	mov	r5, r2
 80007ae:	461c      	mov	r4, r3
 80007b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007b2:	6028      	str	r0, [r5, #0]
 80007b4:	6069      	str	r1, [r5, #4]
 80007b6:	60aa      	str	r2, [r5, #8]
 80007b8:	60eb      	str	r3, [r5, #12]
 80007ba:	cc03      	ldmia	r4!, {r0, r1}
 80007bc:	6128      	str	r0, [r5, #16]
 80007be:	6169      	str	r1, [r5, #20]
 80007c0:	7823      	ldrb	r3, [r4, #0]
 80007c2:	762b      	strb	r3, [r5, #24]
 80007c4:	2318      	movs	r3, #24
 80007c6:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 80007c8:	88fb      	ldrh	r3, [r7, #6]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4920      	ldr	r1, [pc, #128]	; (8000850 <main+0x294>)
 80007ce:	481c      	ldr	r0, [pc, #112]	; (8000840 <main+0x284>)
 80007d0:	f004 fcf3 	bl	80051ba <HAL_UART_Transmit_IT>
 80007d4:	e0e7      	b.n	80009a6 <main+0x3ea>

				}

				else if(data_buffer[0]=='o' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='f' && data_buffer[4]=='f')
 80007d6:	4b26      	ldr	r3, [pc, #152]	; (8000870 <main+0x2b4>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b6f      	cmp	r3, #111	; 0x6f
 80007dc:	d154      	bne.n	8000888 <main+0x2cc>
 80007de:	4b24      	ldr	r3, [pc, #144]	; (8000870 <main+0x2b4>)
 80007e0:	785b      	ldrb	r3, [r3, #1]
 80007e2:	2b6c      	cmp	r3, #108	; 0x6c
 80007e4:	d150      	bne.n	8000888 <main+0x2cc>
 80007e6:	4b22      	ldr	r3, [pc, #136]	; (8000870 <main+0x2b4>)
 80007e8:	789b      	ldrb	r3, [r3, #2]
 80007ea:	2b6f      	cmp	r3, #111	; 0x6f
 80007ec:	d14c      	bne.n	8000888 <main+0x2cc>
 80007ee:	4b20      	ldr	r3, [pc, #128]	; (8000870 <main+0x2b4>)
 80007f0:	78db      	ldrb	r3, [r3, #3]
 80007f2:	2b66      	cmp	r3, #102	; 0x66
 80007f4:	d148      	bne.n	8000888 <main+0x2cc>
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <main+0x2b4>)
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	2b66      	cmp	r3, #102	; 0x66
 80007fc:	d144      	bne.n	8000888 <main+0x2cc>
				{
					HAL_GPIO_WritePin(LED_Orange_GPIO_Port, LED_Orange_Pin, RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000804:	4815      	ldr	r0, [pc, #84]	; (800085c <main+0x2a0>)
 8000806:	f001 f955 	bl	8001ab4 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\norange led turned OFF\r\n");
 800080a:	4a11      	ldr	r2, [pc, #68]	; (8000850 <main+0x294>)
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <main+0x2c8>)
 800080e:	4615      	mov	r5, r2
 8000810:	461c      	mov	r4, r3
 8000812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000814:	6028      	str	r0, [r5, #0]
 8000816:	6069      	str	r1, [r5, #4]
 8000818:	60aa      	str	r2, [r5, #8]
 800081a:	60eb      	str	r3, [r5, #12]
 800081c:	cc03      	ldmia	r4!, {r0, r1}
 800081e:	6128      	str	r0, [r5, #16]
 8000820:	6169      	str	r1, [r5, #20]
 8000822:	8823      	ldrh	r3, [r4, #0]
 8000824:	832b      	strh	r3, [r5, #24]
 8000826:	2319      	movs	r3, #25
 8000828:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	461a      	mov	r2, r3
 800082e:	4908      	ldr	r1, [pc, #32]	; (8000850 <main+0x294>)
 8000830:	4803      	ldr	r0, [pc, #12]	; (8000840 <main+0x284>)
 8000832:	f004 fcc2 	bl	80051ba <HAL_UART_Transmit_IT>
 8000836:	e0b6      	b.n	80009a6 <main+0x3ea>
 8000838:	20000128 	.word	0x20000128
 800083c:	200000c8 	.word	0x200000c8
 8000840:	20000320 	.word	0x20000320
 8000844:	200000ac 	.word	0x200000ac
 8000848:	200000ae 	.word	0x200000ae
 800084c:	0800999c 	.word	0x0800999c
 8000850:	20000200 	.word	0x20000200
 8000854:	200000b0 	.word	0x200000b0
 8000858:	200000b2 	.word	0x200000b2
 800085c:	40020c00 	.word	0x40020c00
 8000860:	200000ad 	.word	0x200000ad
 8000864:	20000168 	.word	0x20000168
 8000868:	080099b4 	.word	0x080099b4
 800086c:	200000b3 	.word	0x200000b3
 8000870:	20000360 	.word	0x20000360
 8000874:	080099bc 	.word	0x080099bc
 8000878:	08009aa4 	.word	0x08009aa4
 800087c:	08009abc 	.word	0x08009abc
 8000880:	08009ad4 	.word	0x08009ad4
 8000884:	08009af0 	.word	0x08009af0

				}


				else if(data_buffer[0]=='b' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='n')
 8000888:	4b6d      	ldr	r3, [pc, #436]	; (8000a40 <main+0x484>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b62      	cmp	r3, #98	; 0x62
 800088e:	d12a      	bne.n	80008e6 <main+0x32a>
 8000890:	4b6b      	ldr	r3, [pc, #428]	; (8000a40 <main+0x484>)
 8000892:	785b      	ldrb	r3, [r3, #1]
 8000894:	2b6c      	cmp	r3, #108	; 0x6c
 8000896:	d126      	bne.n	80008e6 <main+0x32a>
 8000898:	4b69      	ldr	r3, [pc, #420]	; (8000a40 <main+0x484>)
 800089a:	789b      	ldrb	r3, [r3, #2]
 800089c:	2b6f      	cmp	r3, #111	; 0x6f
 800089e:	d122      	bne.n	80008e6 <main+0x32a>
 80008a0:	4b67      	ldr	r3, [pc, #412]	; (8000a40 <main+0x484>)
 80008a2:	78db      	ldrb	r3, [r3, #3]
 80008a4:	2b6e      	cmp	r3, #110	; 0x6e
 80008a6:	d11e      	bne.n	80008e6 <main+0x32a>
				{
					HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ae:	4865      	ldr	r0, [pc, #404]	; (8000a44 <main+0x488>)
 80008b0:	f001 f900 	bl	8001ab4 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\nblue led turned ON\r\n");
 80008b4:	4a64      	ldr	r2, [pc, #400]	; (8000a48 <main+0x48c>)
 80008b6:	4b65      	ldr	r3, [pc, #404]	; (8000a4c <main+0x490>)
 80008b8:	4614      	mov	r4, r2
 80008ba:	461d      	mov	r5, r3
 80008bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008be:	6020      	str	r0, [r4, #0]
 80008c0:	6061      	str	r1, [r4, #4]
 80008c2:	60a2      	str	r2, [r4, #8]
 80008c4:	60e3      	str	r3, [r4, #12]
 80008c6:	6828      	ldr	r0, [r5, #0]
 80008c8:	6120      	str	r0, [r4, #16]
 80008ca:	88ab      	ldrh	r3, [r5, #4]
 80008cc:	79aa      	ldrb	r2, [r5, #6]
 80008ce:	82a3      	strh	r3, [r4, #20]
 80008d0:	4613      	mov	r3, r2
 80008d2:	75a3      	strb	r3, [r4, #22]
 80008d4:	2316      	movs	r3, #22
 80008d6:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	461a      	mov	r2, r3
 80008dc:	495a      	ldr	r1, [pc, #360]	; (8000a48 <main+0x48c>)
 80008de:	485c      	ldr	r0, [pc, #368]	; (8000a50 <main+0x494>)
 80008e0:	f004 fc6b 	bl	80051ba <HAL_UART_Transmit_IT>
 80008e4:	e05f      	b.n	80009a6 <main+0x3ea>

				}

				else if(data_buffer[0]=='b' && data_buffer[1]=='l' && data_buffer[2]=='o' && data_buffer[3]=='f' && data_buffer[4]=='f')
 80008e6:	4b56      	ldr	r3, [pc, #344]	; (8000a40 <main+0x484>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b62      	cmp	r3, #98	; 0x62
 80008ec:	d12a      	bne.n	8000944 <main+0x388>
 80008ee:	4b54      	ldr	r3, [pc, #336]	; (8000a40 <main+0x484>)
 80008f0:	785b      	ldrb	r3, [r3, #1]
 80008f2:	2b6c      	cmp	r3, #108	; 0x6c
 80008f4:	d126      	bne.n	8000944 <main+0x388>
 80008f6:	4b52      	ldr	r3, [pc, #328]	; (8000a40 <main+0x484>)
 80008f8:	789b      	ldrb	r3, [r3, #2]
 80008fa:	2b6f      	cmp	r3, #111	; 0x6f
 80008fc:	d122      	bne.n	8000944 <main+0x388>
 80008fe:	4b50      	ldr	r3, [pc, #320]	; (8000a40 <main+0x484>)
 8000900:	78db      	ldrb	r3, [r3, #3]
 8000902:	2b66      	cmp	r3, #102	; 0x66
 8000904:	d11e      	bne.n	8000944 <main+0x388>
 8000906:	4b4e      	ldr	r3, [pc, #312]	; (8000a40 <main+0x484>)
 8000908:	791b      	ldrb	r3, [r3, #4]
 800090a:	2b66      	cmp	r3, #102	; 0x66
 800090c:	d11a      	bne.n	8000944 <main+0x388>
				{
					HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000914:	484b      	ldr	r0, [pc, #300]	; (8000a44 <main+0x488>)
 8000916:	f001 f8cd 	bl	8001ab4 <HAL_GPIO_WritePin>
					size = sprintf(data,"\r\nblue led turned OFF\r\n");
 800091a:	4a4b      	ldr	r2, [pc, #300]	; (8000a48 <main+0x48c>)
 800091c:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <main+0x498>)
 800091e:	4615      	mov	r5, r2
 8000920:	461c      	mov	r4, r3
 8000922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000924:	6028      	str	r0, [r5, #0]
 8000926:	6069      	str	r1, [r5, #4]
 8000928:	60aa      	str	r2, [r5, #8]
 800092a:	60eb      	str	r3, [r5, #12]
 800092c:	cc03      	ldmia	r4!, {r0, r1}
 800092e:	6128      	str	r0, [r5, #16]
 8000930:	6169      	str	r1, [r5, #20]
 8000932:	2317      	movs	r3, #23
 8000934:	80fb      	strh	r3, [r7, #6]
					HAL_UART_Transmit_IT(&huart2, data, size);
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	461a      	mov	r2, r3
 800093a:	4943      	ldr	r1, [pc, #268]	; (8000a48 <main+0x48c>)
 800093c:	4844      	ldr	r0, [pc, #272]	; (8000a50 <main+0x494>)
 800093e:	f004 fc3c 	bl	80051ba <HAL_UART_Transmit_IT>
 8000942:	e030      	b.n	80009a6 <main+0x3ea>

				}
				else if(data_buffer[0]=='s' && data_buffer[1]== 0)
 8000944:	4b3e      	ldr	r3, [pc, #248]	; (8000a40 <main+0x484>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b73      	cmp	r3, #115	; 0x73
 800094a:	d107      	bne.n	800095c <main+0x3a0>
 800094c:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <main+0x484>)
 800094e:	785b      	ldrb	r3, [r3, #1]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d103      	bne.n	800095c <main+0x3a0>
				{
					monitor_flag = true;
 8000954:	4b40      	ldr	r3, [pc, #256]	; (8000a58 <main+0x49c>)
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]
 800095a:	e024      	b.n	80009a6 <main+0x3ea>

				}

				else if(data_buffer[0]=='e'&& data_buffer[1]== 0)
 800095c:	4b38      	ldr	r3, [pc, #224]	; (8000a40 <main+0x484>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b65      	cmp	r3, #101	; 0x65
 8000962:	d107      	bne.n	8000974 <main+0x3b8>
 8000964:	4b36      	ldr	r3, [pc, #216]	; (8000a40 <main+0x484>)
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d103      	bne.n	8000974 <main+0x3b8>
				{
					monitor_flag = false;
 800096c:	4b3a      	ldr	r3, [pc, #232]	; (8000a58 <main+0x49c>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
 8000972:	e018      	b.n	80009a6 <main+0x3ea>

				}
				else
				{
					if(data_buffer[0]!=0)
 8000974:	4b32      	ldr	r3, [pc, #200]	; (8000a40 <main+0x484>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d014      	beq.n	80009a6 <main+0x3ea>
					{
						size = sprintf(data,"\r\nWRONG COMMAND!!!\r\n");
 800097c:	4a32      	ldr	r2, [pc, #200]	; (8000a48 <main+0x48c>)
 800097e:	4b37      	ldr	r3, [pc, #220]	; (8000a5c <main+0x4a0>)
 8000980:	4615      	mov	r5, r2
 8000982:	461c      	mov	r4, r3
 8000984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000986:	6028      	str	r0, [r5, #0]
 8000988:	6069      	str	r1, [r5, #4]
 800098a:	60aa      	str	r2, [r5, #8]
 800098c:	60eb      	str	r3, [r5, #12]
 800098e:	6820      	ldr	r0, [r4, #0]
 8000990:	6128      	str	r0, [r5, #16]
 8000992:	7923      	ldrb	r3, [r4, #4]
 8000994:	752b      	strb	r3, [r5, #20]
 8000996:	2314      	movs	r3, #20
 8000998:	80fb      	strh	r3, [r7, #6]
						HAL_UART_Transmit_IT(&huart2, data, size);
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	461a      	mov	r2, r3
 800099e:	492a      	ldr	r1, [pc, #168]	; (8000a48 <main+0x48c>)
 80009a0:	482b      	ldr	r0, [pc, #172]	; (8000a50 <main+0x494>)
 80009a2:	f004 fc0a 	bl	80051ba <HAL_UART_Transmit_IT>

					}
				}

				data_buffer[0]=0;
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <main+0x484>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
				data_buffer[1]=0;
 80009ac:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <main+0x484>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	705a      	strb	r2, [r3, #1]
				data_buffer[2]=0;
 80009b2:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <main+0x484>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	709a      	strb	r2, [r3, #2]
				data_buffer[3]=0;
 80009b8:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <main+0x484>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	70da      	strb	r2, [r3, #3]
				data_buffer[4]=0;
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <main+0x484>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	711a      	strb	r2, [r3, #4]
 80009c4:	e02b      	b.n	8000a1e <main+0x462>



			else
			{
			size = sprintf(receive_data, "%s",Received);
 80009c6:	4a26      	ldr	r2, [pc, #152]	; (8000a60 <main+0x4a4>)
 80009c8:	4926      	ldr	r1, [pc, #152]	; (8000a64 <main+0x4a8>)
 80009ca:	4827      	ldr	r0, [pc, #156]	; (8000a68 <main+0x4ac>)
 80009cc:	f008 fc96 	bl	80092fc <siprintf>
 80009d0:	4603      	mov	r3, r0
 80009d2:	80fb      	strh	r3, [r7, #6]

			data_buffer[i]=receive_data[0];
 80009d4:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <main+0x4b0>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <main+0x4ac>)
 80009dc:	7819      	ldrb	r1, [r3, #0]
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <main+0x484>)
 80009e0:	5499      	strb	r1, [r3, r2]
			i++;
 80009e2:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <main+0x4b0>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	3301      	adds	r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <main+0x4b0>)
 80009ec:	701a      	strb	r2, [r3, #0]
			while(data_buffer[i] == 8)
			{
			i=i-1;
			}
			*/
			for(int j=0;j<i;j++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	e00e      	b.n	8000a12 <main+0x456>
				if(i==10)
				{
				i=0;
				}
				*/
				if(data_buffer[j]==0x7f)
 80009f4:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <main+0x484>)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	4413      	add	r3, r2
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b7f      	cmp	r3, #127	; 0x7f
 80009fe:	d105      	bne.n	8000a0c <main+0x450>
				{
				i=j-1;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	3b01      	subs	r3, #1
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <main+0x4b0>)
 8000a0a:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<i;j++)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <main+0x4b0>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	dbea      	blt.n	80009f4 <main+0x438>

			}

			}

			HAL_UART_Transmit_IT(&huart2, receive_data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4911      	ldr	r1, [pc, #68]	; (8000a68 <main+0x4ac>)
 8000a24:	480a      	ldr	r0, [pc, #40]	; (8000a50 <main+0x494>)
 8000a26:	f004 fbc8 	bl	80051ba <HAL_UART_Transmit_IT>
			HAL_UART_Receive_IT(&huart2, &Received, 1); // Ponowne włączenie nasłuchiwania
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <main+0x4a4>)
 8000a2e:	4808      	ldr	r0, [pc, #32]	; (8000a50 <main+0x494>)
 8000a30:	f004 fc08 	bl	8005244 <HAL_UART_Receive_IT>



			receive_flag=0;
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <main+0x4b4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]




    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a3a:	f008 f877 	bl	8008b2c <MX_USB_HOST_Process>
	  if(timer_state==1)
 8000a3e:	e5da      	b.n	80005f6 <main+0x3a>
 8000a40:	20000360 	.word	0x20000360
 8000a44:	40020c00 	.word	0x40020c00
 8000a48:	20000200 	.word	0x20000200
 8000a4c:	08009b0c 	.word	0x08009b0c
 8000a50:	20000320 	.word	0x20000320
 8000a54:	08009b24 	.word	0x08009b24
 8000a58:	200000b2 	.word	0x200000b2
 8000a5c:	08009b3c 	.word	0x08009b3c
 8000a60:	200000c8 	.word	0x200000c8
 8000a64:	08009b54 	.word	0x08009b54
 8000a68:	20000168 	.word	0x20000168
 8000a6c:	200000b3 	.word	0x200000b3
 8000a70:	200000ad 	.word	0x200000ad

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b098      	sub	sp, #96	; 0x60
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a7e:	2230      	movs	r2, #48	; 0x30
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f008 fb79 	bl	800917a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <SystemClock_Config+0xfc>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a30      	ldr	r2, [pc, #192]	; (8000b70 <SystemClock_Config+0xfc>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <SystemClock_Config+0xfc>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <SystemClock_Config+0x100>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a2a      	ldr	r2, [pc, #168]	; (8000b74 <SystemClock_Config+0x100>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6013      	str	r3, [r2, #0]
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <SystemClock_Config+0x100>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000af0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000af2:	2308      	movs	r3, #8
 8000af4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000af6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000afa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b00:	2307      	movs	r3, #7
 8000b02:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 fad1 	bl	80040b0 <HAL_RCC_OscConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000b14:	f000 fa12 	bl	8000f3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b18:	230f      	movs	r3, #15
 8000b1a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	2105      	movs	r1, #5
 8000b36:	4618      	mov	r0, r3
 8000b38:	f003 fd2a 	bl	8004590 <HAL_RCC_ClockConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b42:	f000 f9fb 	bl	8000f3c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b46:	2301      	movs	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b4a:	23c0      	movs	r3, #192	; 0xc0
 8000b4c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4618      	mov	r0, r3
 8000b58:	f003 ff0c 	bl	8004974 <HAL_RCCEx_PeriphCLKConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b62:	f000 f9eb 	bl	8000f3c <Error_Handler>
  }
}
 8000b66:	bf00      	nop
 8000b68:	3760      	adds	r7, #96	; 0x60
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40007000 	.word	0x40007000

08000b78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000b7e:	4a13      	ldr	r2, [pc, #76]	; (8000bcc <MX_I2C1_Init+0x54>)
 8000b80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000b84:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <MX_I2C1_Init+0x58>)
 8000b86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000b96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000bb6:	f002 fca3 	bl	8003500 <HAL_I2C_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bc0:	f000 f9bc 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200000d4 	.word	0x200000d4
 8000bcc:	40005400 	.word	0x40005400
 8000bd0:	000186a0 	.word	0x000186a0

08000bd4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000bda:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <MX_I2S3_Init+0x58>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <MX_I2S3_Init+0x5c>)
 8000bfe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000c14:	f002 fdac 	bl	8003770 <HAL_I2S_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000c1e:	f000 f98d 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000036c 	.word	0x2000036c
 8000c2c:	40003c00 	.word	0x40003c00
 8000c30:	00017700 	.word	0x00017700

08000c34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_SPI1_Init+0x64>)
 8000c3a:	4a18      	ldr	r2, [pc, #96]	; (8000c9c <MX_SPI1_Init+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <MX_SPI1_Init+0x64>)
 8000c40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_SPI1_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_SPI1_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_SPI1_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_SPI1_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_SPI1_Init+0x64>)
 8000c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_SPI1_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <MX_SPI1_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_SPI1_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <MX_SPI1_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_SPI1_Init+0x64>)
 8000c80:	220a      	movs	r2, #10
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <MX_SPI1_Init+0x64>)
 8000c86:	f003 ffb3 	bl	8004bf0 <HAL_SPI_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c90:	f000 f954 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200002c8 	.word	0x200002c8
 8000c9c:	40013000 	.word	0x40013000

08000ca0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_TIM10_Init+0x44>)
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <MX_TIM10_Init+0x48>)
 8000ca8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_TIM10_Init+0x44>)
 8000cac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_TIM10_Init+0x44>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <MX_TIM10_Init+0x44>)
 8000cba:	f248 323f 	movw	r2, #33599	; 0x833f
 8000cbe:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_TIM10_Init+0x44>)
 8000cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_TIM10_Init+0x44>)
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_TIM10_Init+0x44>)
 8000cd0:	f003 fff2 	bl	8004cb8 <HAL_TIM_Base_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM10_Init+0x3e>
  {
    Error_Handler();
 8000cda:	f000 f92f 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000128 	.word	0x20000128
 8000ce8:	40014400 	.word	0x40014400

08000cec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <MX_USART2_UART_Init+0x50>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d24:	f004 f9fc 	bl	8005120 <HAL_UART_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d2e:	f000 f905 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000320 	.word	0x20000320
 8000d3c:	40004400 	.word	0x40004400

08000d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	; 0x30
 8000d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]
 8000d5a:	4b71      	ldr	r3, [pc, #452]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a70      	ldr	r2, [pc, #448]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000d60:	f043 0310 	orr.w	r3, r3, #16
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b6e      	ldr	r3, [pc, #440]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0310 	and.w	r3, r3, #16
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	4b6a      	ldr	r3, [pc, #424]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a69      	ldr	r2, [pc, #420]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b67      	ldr	r3, [pc, #412]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b63      	ldr	r3, [pc, #396]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a62      	ldr	r2, [pc, #392]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b60      	ldr	r3, [pc, #384]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b5c      	ldr	r3, [pc, #368]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a5b      	ldr	r2, [pc, #364]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b59      	ldr	r3, [pc, #356]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	4b55      	ldr	r3, [pc, #340]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a54      	ldr	r2, [pc, #336]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b52      	ldr	r3, [pc, #328]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	4b4e      	ldr	r3, [pc, #312]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a4d      	ldr	r2, [pc, #308]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b4b      	ldr	r3, [pc, #300]	; (8000f20 <MX_GPIO_Init+0x1e0>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2108      	movs	r1, #8
 8000e02:	4848      	ldr	r0, [pc, #288]	; (8000f24 <MX_GPIO_Init+0x1e4>)
 8000e04:	f000 fe56 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	4846      	ldr	r0, [pc, #280]	; (8000f28 <MX_GPIO_Init+0x1e8>)
 8000e0e:	f000 fe51 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin
 8000e12:	2200      	movs	r2, #0
 8000e14:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000e18:	4844      	ldr	r0, [pc, #272]	; (8000f2c <MX_GPIO_Init+0x1ec>)
 8000e1a:	f000 fe4b 	bl	8001ab4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000e1e:	2308      	movs	r3, #8
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	483b      	ldr	r0, [pc, #236]	; (8000f24 <MX_GPIO_Init+0x1e4>)
 8000e36:	f000 fca3 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4835      	ldr	r0, [pc, #212]	; (8000f28 <MX_GPIO_Init+0x1e8>)
 8000e52:	f000 fc95 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e56:	2308      	movs	r3, #8
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e66:	2305      	movs	r3, #5
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	482d      	ldr	r0, [pc, #180]	; (8000f28 <MX_GPIO_Init+0x1e8>)
 8000e72:	f000 fc85 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e7a:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <MX_GPIO_Init+0x1f0>)
 8000e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	482a      	ldr	r0, [pc, #168]	; (8000f34 <MX_GPIO_Init+0x1f4>)
 8000e8a:	f000 fc79 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4825      	ldr	r0, [pc, #148]	; (8000f38 <MX_GPIO_Init+0x1f8>)
 8000ea2:	f000 fc6d 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eb8:	2305      	movs	r3, #5
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	481d      	ldr	r0, [pc, #116]	; (8000f38 <MX_GPIO_Init+0x1f8>)
 8000ec4:	f000 fc5c 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Green_Pin LED_Orange_Pin LED_Red_Pin LED_Blue_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin
 8000ec8:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ecc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4812      	ldr	r0, [pc, #72]	; (8000f2c <MX_GPIO_Init+0x1ec>)
 8000ee2:	f000 fc4d 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <MX_GPIO_Init+0x1ec>)
 8000efa:	f000 fc41 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_GPIO_Init+0x1f0>)
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <MX_GPIO_Init+0x1e4>)
 8000f12:	f000 fc35 	bl	8001780 <HAL_GPIO_Init>

}
 8000f16:	bf00      	nop
 8000f18:	3730      	adds	r7, #48	; 0x30
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020c00 	.word	0x40020c00
 8000f30:	10120000 	.word	0x10120000
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40020400 	.word	0x40020400

08000f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <Error_Handler+0x6>

08000f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f82:	2007      	movs	r0, #7
 8000f84:	f000 fb98 	bl	80016b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800

08000f94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a19      	ldr	r2, [pc, #100]	; (8001018 <HAL_I2C_MspInit+0x84>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d12c      	bne.n	8001010 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <HAL_I2C_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a17      	ldr	r2, [pc, #92]	; (800101c <HAL_I2C_MspInit+0x88>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <HAL_I2C_MspInit+0x88>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000fd2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd8:	2312      	movs	r3, #18
 8000fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	480c      	ldr	r0, [pc, #48]	; (8001020 <HAL_I2C_MspInit+0x8c>)
 8000ff0:	f000 fbc6 	bl	8001780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_I2C_MspInit+0x88>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <HAL_I2C_MspInit+0x88>)
 8000ffe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001002:	6413      	str	r3, [r2, #64]	; 0x40
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_I2C_MspInit+0x88>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40005400 	.word	0x40005400
 800101c:	40023800 	.word	0x40023800
 8001020:	40020400 	.word	0x40020400

08001024 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a28      	ldr	r2, [pc, #160]	; (80010e4 <HAL_I2S_MspInit+0xc0>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d14a      	bne.n	80010dc <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <HAL_I2S_MspInit+0xc4>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	4a26      	ldr	r2, [pc, #152]	; (80010e8 <HAL_I2S_MspInit+0xc4>)
 8001050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001054:	6413      	str	r3, [r2, #64]	; 0x40
 8001056:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <HAL_I2S_MspInit+0xc4>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <HAL_I2S_MspInit+0xc4>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <HAL_I2S_MspInit+0xc4>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_I2S_MspInit+0xc4>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_I2S_MspInit+0xc4>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a18      	ldr	r2, [pc, #96]	; (80010e8 <HAL_I2S_MspInit+0xc4>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <HAL_I2S_MspInit+0xc4>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800109a:	2310      	movs	r3, #16
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010aa:	2306      	movs	r3, #6
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <HAL_I2S_MspInit+0xc8>)
 80010b6:	f000 fb63 	bl	8001780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010ba:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010cc:	2306      	movs	r3, #6
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <HAL_I2S_MspInit+0xcc>)
 80010d8:	f000 fb52 	bl	8001780 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	; 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40003c00 	.word	0x40003c00
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40020800 	.word	0x40020800

080010f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a19      	ldr	r2, [pc, #100]	; (8001178 <HAL_SPI_MspInit+0x84>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d12b      	bne.n	800116e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b18      	ldr	r3, [pc, #96]	; (800117c <HAL_SPI_MspInit+0x88>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a17      	ldr	r2, [pc, #92]	; (800117c <HAL_SPI_MspInit+0x88>)
 8001120:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_SPI_MspInit+0x88>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_SPI_MspInit+0x88>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a10      	ldr	r2, [pc, #64]	; (800117c <HAL_SPI_MspInit+0x88>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_SPI_MspInit+0x88>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800114e:	23e0      	movs	r3, #224	; 0xe0
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800115e:	2305      	movs	r3, #5
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	; (8001180 <HAL_SPI_MspInit+0x8c>)
 800116a:	f000 fb09 	bl	8001780 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	; 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40013000 	.word	0x40013000
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000

08001184 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_TIM_Base_MspInit+0x48>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d115      	bne.n	80011c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_TIM_Base_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <HAL_TIM_Base_MspInit+0x4c>)
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a4:	6453      	str	r3, [r2, #68]	; 0x44
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_TIM_Base_MspInit+0x4c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	2019      	movs	r0, #25
 80011b8:	f000 fa89 	bl	80016ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011bc:	2019      	movs	r0, #25
 80011be:	f000 faa2 	bl	8001706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40014400 	.word	0x40014400
 80011d0:	40023800 	.word	0x40023800

080011d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <HAL_UART_MspInit+0x94>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d133      	bne.n	800125e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <HAL_UART_MspInit+0x98>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a1b      	ldr	r2, [pc, #108]	; (800126c <HAL_UART_MspInit+0x98>)
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <HAL_UART_MspInit+0x98>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_UART_MspInit+0x98>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a14      	ldr	r2, [pc, #80]	; (800126c <HAL_UART_MspInit+0x98>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_UART_MspInit+0x98>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800122e:	230c      	movs	r3, #12
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800123e:	2307      	movs	r3, #7
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4809      	ldr	r0, [pc, #36]	; (8001270 <HAL_UART_MspInit+0x9c>)
 800124a:	f000 fa99 	bl	8001780 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	2026      	movs	r0, #38	; 0x26
 8001254:	f000 fa3b 	bl	80016ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001258:	2026      	movs	r0, #38	; 0x26
 800125a:	f000 fa54 	bl	8001706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40004400 	.word	0x40004400
 800126c:	40023800 	.word	0x40023800
 8001270:	40020000 	.word	0x40020000

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <NMI_Handler+0x4>

0800127a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <HardFault_Handler+0x4>

08001280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <MemManage_Handler+0x4>

08001286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <BusFault_Handler+0x4>

0800128c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <UsageFault_Handler+0x4>

08001292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c0:	f000 f8e8 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80012ce:	f003 fd42 	bl	8004d56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000128 	.word	0x20000128

080012dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <USART2_IRQHandler+0x10>)
 80012e2:	f004 f805 	bl	80052f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000320 	.word	0x20000320

080012f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <OTG_FS_IRQHandler+0x10>)
 80012f6:	f000 fea1 	bl	800203c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000790 	.word	0x20000790

08001304 <_sbrk>:
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <_sbrk+0x5c>)
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <_sbrk+0x60>)
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <_sbrk+0x22>
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <_sbrk+0x64>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <_sbrk+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	429a      	cmp	r2, r3
 8001332:	d207      	bcs.n	8001344 <_sbrk+0x40>
 8001334:	f007 fedc 	bl	80090f0 <__errno>
 8001338:	4602      	mov	r2, r0
 800133a:	230c      	movs	r3, #12
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	e009      	b.n	8001358 <_sbrk+0x54>
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <_sbrk+0x64>)
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20020000 	.word	0x20020000
 8001364:	00000400 	.word	0x00000400
 8001368:	200000b4 	.word	0x200000b4
 800136c:	20000a58 	.word	0x20000a58

08001370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <SystemInit+0x28>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137a:	4a07      	ldr	r2, [pc, #28]	; (8001398 <SystemInit+0x28>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SystemInit+0x28>)
 8001386:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800138a:	609a      	str	r2, [r3, #8]
#endif
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800139c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013a2:	e003      	b.n	80013ac <LoopCopyDataInit>

080013a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013aa:	3104      	adds	r1, #4

080013ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013ac:	480b      	ldr	r0, [pc, #44]	; (80013dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013b4:	d3f6      	bcc.n	80013a4 <CopyDataInit>
  ldr  r2, =_sbss
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013b8:	e002      	b.n	80013c0 <LoopFillZerobss>

080013ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013bc:	f842 3b04 	str.w	r3, [r2], #4

080013c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013c4:	d3f9      	bcc.n	80013ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013c6:	f7ff ffd3 	bl	8001370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ca:	f007 fe97 	bl	80090fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ce:	f7ff f8f5 	bl	80005bc <main>
  bx  lr    
 80013d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013d8:	08009bb8 	.word	0x08009bb8
  ldr  r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013e0:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80013e4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80013e8:	20000a58 	.word	0x20000a58

080013ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC_IRQHandler>
	...

080013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_Init+0x40>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <HAL_Init+0x40>)
 80013fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_Init+0x40>)
 8001406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_Init+0x40>)
 8001412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f94d 	bl	80016b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141e:	2000      	movs	r0, #0
 8001420:	f000 f808 	bl	8001434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001424:	f7ff fd8e 	bl	8000f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023c00 	.word	0x40023c00

08001434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_InitTick+0x54>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x58>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	fbb3 f3f1 	udiv	r3, r3, r1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f965 	bl	8001722 <HAL_SYSTICK_Config>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e00e      	b.n	8001480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d80a      	bhi.n	800147e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f000 f92d 	bl	80016ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <HAL_InitTick+0x5c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000000 	.word	0x20000000
 800148c:	20000008 	.word	0x20000008
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x20>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x24>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <HAL_IncTick+0x24>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000008 	.word	0x20000008
 80014b8:	200003b4 	.word	0x200003b4

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	200003b4 	.word	0x200003b4

080014d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff ffee 	bl	80014bc <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d005      	beq.n	80014fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_Delay+0x40>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014fa:	bf00      	nop
 80014fc:	f7ff ffde 	bl	80014bc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d8f7      	bhi.n	80014fc <HAL_Delay+0x28>
  {
  }
}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000008 	.word	0x20000008

08001518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001534:	4013      	ands	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	60d3      	str	r3, [r2, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <__NVIC_GetPriorityGrouping+0x18>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	f003 0307 	and.w	r3, r3, #7
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	2b00      	cmp	r3, #0
 800158c:	db0b      	blt.n	80015a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	f003 021f 	and.w	r2, r3, #31
 8001594:	4907      	ldr	r1, [pc, #28]	; (80015b4 <__NVIC_EnableIRQ+0x38>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	095b      	lsrs	r3, r3, #5
 800159c:	2001      	movs	r0, #1
 800159e:	fa00 f202 	lsl.w	r2, r0, r2
 80015a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000e100 	.word	0xe000e100

080015b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	db0a      	blt.n	80015e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	490c      	ldr	r1, [pc, #48]	; (8001604 <__NVIC_SetPriority+0x4c>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	0112      	lsls	r2, r2, #4
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	440b      	add	r3, r1
 80015dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e0:	e00a      	b.n	80015f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4908      	ldr	r1, [pc, #32]	; (8001608 <__NVIC_SetPriority+0x50>)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	3b04      	subs	r3, #4
 80015f0:	0112      	lsls	r2, r2, #4
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	440b      	add	r3, r1
 80015f6:	761a      	strb	r2, [r3, #24]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000e100 	.word	0xe000e100
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	; 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f1c3 0307 	rsb	r3, r3, #7
 8001626:	2b04      	cmp	r3, #4
 8001628:	bf28      	it	cs
 800162a:	2304      	movcs	r3, #4
 800162c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3304      	adds	r3, #4
 8001632:	2b06      	cmp	r3, #6
 8001634:	d902      	bls.n	800163c <NVIC_EncodePriority+0x30>
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3b03      	subs	r3, #3
 800163a:	e000      	b.n	800163e <NVIC_EncodePriority+0x32>
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	401a      	ands	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001654:	f04f 31ff 	mov.w	r1, #4294967295
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	43d9      	mvns	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	4313      	orrs	r3, r2
         );
}
 8001666:	4618      	mov	r0, r3
 8001668:	3724      	adds	r7, #36	; 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001684:	d301      	bcc.n	800168a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001686:	2301      	movs	r3, #1
 8001688:	e00f      	b.n	80016aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <SysTick_Config+0x40>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001692:	210f      	movs	r1, #15
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f7ff ff8e 	bl	80015b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <SysTick_Config+0x40>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a2:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <SysTick_Config+0x40>)
 80016a4:	2207      	movs	r2, #7
 80016a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	e000e010 	.word	0xe000e010

080016b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ff29 	bl	8001518 <__NVIC_SetPriorityGrouping>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e0:	f7ff ff3e 	bl	8001560 <__NVIC_GetPriorityGrouping>
 80016e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	6978      	ldr	r0, [r7, #20]
 80016ec:	f7ff ff8e 	bl	800160c <NVIC_EncodePriority>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff5d 	bl	80015b8 <__NVIC_SetPriority>
}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff31 	bl	800157c <__NVIC_EnableIRQ>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ffa2 	bl	8001674 <SysTick_Config>
 8001730:	4603      	mov	r3, r0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d004      	beq.n	8001758 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e00c      	b.n	8001772 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2205      	movs	r2, #5
 800175c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	e16b      	b.n	8001a74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800179c:	2201      	movs	r2, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	f040 815a 	bne.w	8001a6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d00b      	beq.n	80017da <HAL_GPIO_Init+0x5a>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d007      	beq.n	80017da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ce:	2b11      	cmp	r3, #17
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d130      	bne.n	800183c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001810:	2201      	movs	r2, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 0201 	and.w	r2, r3, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	2203      	movs	r2, #3
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0xfc>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b12      	cmp	r3, #18
 800187a:	d123      	bne.n	80018c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	08da      	lsrs	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3208      	adds	r2, #8
 8001884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	220f      	movs	r2, #15
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	691a      	ldr	r2, [r3, #16]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	08da      	lsrs	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3208      	adds	r2, #8
 80018be:	69b9      	ldr	r1, [r7, #24]
 80018c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0203 	and.w	r2, r3, #3
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80b4 	beq.w	8001a6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b5f      	ldr	r3, [pc, #380]	; (8001a88 <HAL_GPIO_Init+0x308>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a5e      	ldr	r2, [pc, #376]	; (8001a88 <HAL_GPIO_Init+0x308>)
 8001910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b5c      	ldr	r3, [pc, #368]	; (8001a88 <HAL_GPIO_Init+0x308>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001922:	4a5a      	ldr	r2, [pc, #360]	; (8001a8c <HAL_GPIO_Init+0x30c>)
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	220f      	movs	r2, #15
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a51      	ldr	r2, [pc, #324]	; (8001a90 <HAL_GPIO_Init+0x310>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d02b      	beq.n	80019a6 <HAL_GPIO_Init+0x226>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a50      	ldr	r2, [pc, #320]	; (8001a94 <HAL_GPIO_Init+0x314>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d025      	beq.n	80019a2 <HAL_GPIO_Init+0x222>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4f      	ldr	r2, [pc, #316]	; (8001a98 <HAL_GPIO_Init+0x318>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d01f      	beq.n	800199e <HAL_GPIO_Init+0x21e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4e      	ldr	r2, [pc, #312]	; (8001a9c <HAL_GPIO_Init+0x31c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d019      	beq.n	800199a <HAL_GPIO_Init+0x21a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4d      	ldr	r2, [pc, #308]	; (8001aa0 <HAL_GPIO_Init+0x320>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0x216>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4c      	ldr	r2, [pc, #304]	; (8001aa4 <HAL_GPIO_Init+0x324>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00d      	beq.n	8001992 <HAL_GPIO_Init+0x212>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4b      	ldr	r2, [pc, #300]	; (8001aa8 <HAL_GPIO_Init+0x328>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d007      	beq.n	800198e <HAL_GPIO_Init+0x20e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4a      	ldr	r2, [pc, #296]	; (8001aac <HAL_GPIO_Init+0x32c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d101      	bne.n	800198a <HAL_GPIO_Init+0x20a>
 8001986:	2307      	movs	r3, #7
 8001988:	e00e      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800198a:	2308      	movs	r3, #8
 800198c:	e00c      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800198e:	2306      	movs	r3, #6
 8001990:	e00a      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 8001992:	2305      	movs	r3, #5
 8001994:	e008      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 8001996:	2304      	movs	r3, #4
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800199a:	2303      	movs	r3, #3
 800199c:	e004      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800199e:	2302      	movs	r3, #2
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 80019a6:	2300      	movs	r3, #0
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	f002 0203 	and.w	r2, r2, #3
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	4093      	lsls	r3, r2
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b8:	4934      	ldr	r1, [pc, #208]	; (8001a8c <HAL_GPIO_Init+0x30c>)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c6:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ea:	4a31      	ldr	r2, [pc, #196]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019f0:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a14:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1a:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3e:	4a1c      	ldr	r2, [pc, #112]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a68:	4a11      	ldr	r2, [pc, #68]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3301      	adds	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	2b0f      	cmp	r3, #15
 8001a78:	f67f ae90 	bls.w	800179c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3724      	adds	r7, #36	; 0x24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40013800 	.word	0x40013800
 8001a90:	40020000 	.word	0x40020000
 8001a94:	40020400 	.word	0x40020400
 8001a98:	40020800 	.word	0x40020800
 8001a9c:	40020c00 	.word	0x40020c00
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40021400 	.word	0x40021400
 8001aa8:	40021800 	.word	0x40021800
 8001aac:	40021c00 	.word	0x40021c00
 8001ab0:	40013c00 	.word	0x40013c00

08001ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac4:	787b      	ldrb	r3, [r7, #1]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad0:	e003      	b.n	8001ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	041a      	lsls	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	619a      	str	r2, [r3, #24]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	401a      	ands	r2, r3
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d104      	bne.n	8001b0a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b00:	887b      	ldrh	r3, [r7, #2]
 8001b02:	041a      	lsls	r2, r3, #16
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1e:	b08f      	sub	sp, #60	; 0x3c
 8001b20:	af0a      	add	r7, sp, #40	; 0x28
 8001b22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e054      	b.n	8001bd8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d106      	bne.n	8001b4e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f007 f827 	bl	8008b9c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2203      	movs	r2, #3
 8001b52:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d102      	bne.n	8001b68 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f004 f9e3 	bl	8005f38 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	687e      	ldr	r6, [r7, #4]
 8001b7a:	466d      	mov	r5, sp
 8001b7c:	f106 0410 	add.w	r4, r6, #16
 8001b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b90:	1d33      	adds	r3, r6, #4
 8001b92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f004 f95d 	bl	8005e54 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f004 f9da 	bl	8005f5a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	687e      	ldr	r6, [r7, #4]
 8001bae:	466d      	mov	r5, sp
 8001bb0:	f106 0410 	add.w	r4, r6, #16
 8001bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bc4:	1d33      	adds	r3, r6, #4
 8001bc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bc8:	6838      	ldr	r0, [r7, #0]
 8001bca:	f004 faed 	bl	80061a8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001be0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b089      	sub	sp, #36	; 0x24
 8001be4:	af04      	add	r7, sp, #16
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	4608      	mov	r0, r1
 8001bea:	4611      	mov	r1, r2
 8001bec:	461a      	mov	r2, r3
 8001bee:	4603      	mov	r3, r0
 8001bf0:	70fb      	strb	r3, [r7, #3]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	70bb      	strb	r3, [r7, #2]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_HCD_HC_Init+0x28>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e07f      	b.n	8001d08 <HAL_HCD_HC_Init+0x128>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001c10:	78fa      	ldrb	r2, [r7, #3]
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	333d      	adds	r3, #61	; 0x3d
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001c24:	78fa      	ldrb	r2, [r7, #3]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	3338      	adds	r3, #56	; 0x38
 8001c34:	787a      	ldrb	r2, [r7, #1]
 8001c36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001c38:	78fa      	ldrb	r2, [r7, #3]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	3340      	adds	r3, #64	; 0x40
 8001c48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c4a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c4c:	78fa      	ldrb	r2, [r7, #3]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	3339      	adds	r3, #57	; 0x39
 8001c5c:	78fa      	ldrb	r2, [r7, #3]
 8001c5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	333f      	adds	r3, #63	; 0x3f
 8001c70:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001c74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c76:	78fa      	ldrb	r2, [r7, #3]
 8001c78:	78bb      	ldrb	r3, [r7, #2]
 8001c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c7e:	b2d8      	uxtb	r0, r3
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	333a      	adds	r3, #58	; 0x3a
 8001c8e:	4602      	mov	r2, r0
 8001c90:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001c92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	da0a      	bge.n	8001cb0 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	333b      	adds	r3, #59	; 0x3b
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
 8001cae:	e009      	b.n	8001cc4 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001cb0:	78fa      	ldrb	r2, [r7, #3]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	440b      	add	r3, r1
 8001cbe:	333b      	adds	r3, #59	; 0x3b
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001cc4:	78fa      	ldrb	r2, [r7, #3]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	440b      	add	r3, r1
 8001cd2:	333c      	adds	r3, #60	; 0x3c
 8001cd4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001cd8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	787c      	ldrb	r4, [r7, #1]
 8001ce0:	78ba      	ldrb	r2, [r7, #2]
 8001ce2:	78f9      	ldrb	r1, [r7, #3]
 8001ce4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	4623      	mov	r3, r4
 8001cf6:	f004 fbd9 	bl	80064ac <USB_HC_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd90      	pop	{r4, r7, pc}

08001d10 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_HCD_HC_Halt+0x1e>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e00f      	b.n	8001d4e <HAL_HCD_HC_Halt+0x3e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	78fa      	ldrb	r2, [r7, #3]
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f004 fe15 	bl	800696e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	4608      	mov	r0, r1
 8001d62:	4611      	mov	r1, r2
 8001d64:	461a      	mov	r2, r3
 8001d66:	4603      	mov	r3, r0
 8001d68:	70fb      	strb	r3, [r7, #3]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	70bb      	strb	r3, [r7, #2]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001d72:	78fa      	ldrb	r2, [r7, #3]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	333b      	adds	r3, #59	; 0x3b
 8001d82:	78ba      	ldrb	r2, [r7, #2]
 8001d84:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	440b      	add	r3, r1
 8001d94:	333f      	adds	r3, #63	; 0x3f
 8001d96:	787a      	ldrb	r2, [r7, #1]
 8001d98:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d9a:	7c3b      	ldrb	r3, [r7, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d114      	bne.n	8001dca <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	440b      	add	r3, r1
 8001dae:	3342      	adds	r3, #66	; 0x42
 8001db0:	2203      	movs	r2, #3
 8001db2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	440b      	add	r3, r1
 8001dc2:	333d      	adds	r3, #61	; 0x3d
 8001dc4:	7f3a      	ldrb	r2, [r7, #28]
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	e009      	b.n	8001dde <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dca:	78fa      	ldrb	r2, [r7, #3]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	440b      	add	r3, r1
 8001dd8:	3342      	adds	r3, #66	; 0x42
 8001dda:	2202      	movs	r2, #2
 8001ddc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001dde:	787b      	ldrb	r3, [r7, #1]
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	f200 80d6 	bhi.w	8001f92 <HAL_HCD_HC_SubmitRequest+0x23a>
 8001de6:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <HAL_HCD_HC_SubmitRequest+0x94>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001dfd 	.word	0x08001dfd
 8001df0:	08001f7d 	.word	0x08001f7d
 8001df4:	08001e69 	.word	0x08001e69
 8001df8:	08001ef3 	.word	0x08001ef3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001dfc:	7c3b      	ldrb	r3, [r7, #16]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	f040 80c9 	bne.w	8001f96 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001e04:	78bb      	ldrb	r3, [r7, #2]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f040 80c5 	bne.w	8001f96 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001e0c:	8b3b      	ldrh	r3, [r7, #24]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001e12:	78fa      	ldrb	r2, [r7, #3]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	440b      	add	r3, r1
 8001e20:	3351      	adds	r3, #81	; 0x51
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e26:	78fa      	ldrb	r2, [r7, #3]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	440b      	add	r3, r1
 8001e34:	3351      	adds	r3, #81	; 0x51
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10a      	bne.n	8001e52 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e3c:	78fa      	ldrb	r2, [r7, #3]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	440b      	add	r3, r1
 8001e4a:	3342      	adds	r3, #66	; 0x42
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e50:	e0a1      	b.n	8001f96 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e52:	78fa      	ldrb	r2, [r7, #3]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	440b      	add	r3, r1
 8001e60:	3342      	adds	r3, #66	; 0x42
 8001e62:	2202      	movs	r2, #2
 8001e64:	701a      	strb	r2, [r3, #0]
      break;
 8001e66:	e096      	b.n	8001f96 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001e68:	78bb      	ldrb	r3, [r7, #2]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d120      	bne.n	8001eb0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e6e:	78fa      	ldrb	r2, [r7, #3]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	440b      	add	r3, r1
 8001e7c:	3351      	adds	r3, #81	; 0x51
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10a      	bne.n	8001e9a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e84:	78fa      	ldrb	r2, [r7, #3]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	440b      	add	r3, r1
 8001e92:	3342      	adds	r3, #66	; 0x42
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001e98:	e07e      	b.n	8001f98 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e9a:	78fa      	ldrb	r2, [r7, #3]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	440b      	add	r3, r1
 8001ea8:	3342      	adds	r3, #66	; 0x42
 8001eaa:	2202      	movs	r2, #2
 8001eac:	701a      	strb	r2, [r3, #0]
      break;
 8001eae:	e073      	b.n	8001f98 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001eb0:	78fa      	ldrb	r2, [r7, #3]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	440b      	add	r3, r1
 8001ebe:	3350      	adds	r3, #80	; 0x50
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10a      	bne.n	8001edc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ec6:	78fa      	ldrb	r2, [r7, #3]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3342      	adds	r3, #66	; 0x42
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
      break;
 8001eda:	e05d      	b.n	8001f98 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	440b      	add	r3, r1
 8001eea:	3342      	adds	r3, #66	; 0x42
 8001eec:	2202      	movs	r2, #2
 8001eee:	701a      	strb	r2, [r3, #0]
      break;
 8001ef0:	e052      	b.n	8001f98 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ef2:	78bb      	ldrb	r3, [r7, #2]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d120      	bne.n	8001f3a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ef8:	78fa      	ldrb	r2, [r7, #3]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	440b      	add	r3, r1
 8001f06:	3351      	adds	r3, #81	; 0x51
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10a      	bne.n	8001f24 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	440b      	add	r3, r1
 8001f1c:	3342      	adds	r3, #66	; 0x42
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f22:	e039      	b.n	8001f98 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	440b      	add	r3, r1
 8001f32:	3342      	adds	r3, #66	; 0x42
 8001f34:	2202      	movs	r2, #2
 8001f36:	701a      	strb	r2, [r3, #0]
      break;
 8001f38:	e02e      	b.n	8001f98 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	440b      	add	r3, r1
 8001f48:	3350      	adds	r3, #80	; 0x50
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10a      	bne.n	8001f66 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f50:	78fa      	ldrb	r2, [r7, #3]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3342      	adds	r3, #66	; 0x42
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
      break;
 8001f64:	e018      	b.n	8001f98 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	440b      	add	r3, r1
 8001f74:	3342      	adds	r3, #66	; 0x42
 8001f76:	2202      	movs	r2, #2
 8001f78:	701a      	strb	r2, [r3, #0]
      break;
 8001f7a:	e00d      	b.n	8001f98 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	440b      	add	r3, r1
 8001f8a:	3342      	adds	r3, #66	; 0x42
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
      break;
 8001f90:	e002      	b.n	8001f98 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001f92:	bf00      	nop
 8001f94:	e000      	b.n	8001f98 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001f96:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3344      	adds	r3, #68	; 0x44
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	8b39      	ldrh	r1, [r7, #24]
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4403      	add	r3, r0
 8001fbc:	3348      	adds	r3, #72	; 0x48
 8001fbe:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001fc0:	78fa      	ldrb	r2, [r7, #3]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	440b      	add	r3, r1
 8001fce:	335c      	adds	r3, #92	; 0x5c
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001fd4:	78fa      	ldrb	r2, [r7, #3]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	334c      	adds	r3, #76	; 0x4c
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001fe8:	78fa      	ldrb	r2, [r7, #3]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3339      	adds	r3, #57	; 0x39
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	335d      	adds	r3, #93	; 0x5d
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	3338      	adds	r3, #56	; 0x38
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	18d1      	adds	r1, r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	f004 fb48 	bl	80066c0 <USB_HC_StartXfer>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop

0800203c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f004 f865 	bl	8006122 <USB_GetMode>
 8002058:	4603      	mov	r3, r0
 800205a:	2b01      	cmp	r3, #1
 800205c:	f040 80ef 	bne.w	800223e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f004 f849 	bl	80060fc <USB_ReadInterrupts>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80e5 	beq.w	800223c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f004 f840 	bl	80060fc <USB_ReadInterrupts>
 800207c:	4603      	mov	r3, r0
 800207e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002086:	d104      	bne.n	8002092 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002090:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f004 f830 	bl	80060fc <USB_ReadInterrupts>
 800209c:	4603      	mov	r3, r0
 800209e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020a6:	d104      	bne.n	80020b2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 f820 	bl	80060fc <USB_ReadInterrupts>
 80020bc:	4603      	mov	r3, r0
 80020be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020c6:	d104      	bne.n	80020d2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f004 f810 	bl	80060fc <USB_ReadInterrupts>
 80020dc:	4603      	mov	r3, r0
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d103      	bne.n	80020ee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2202      	movs	r2, #2
 80020ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f004 f802 	bl	80060fc <USB_ReadInterrupts>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002102:	d115      	bne.n	8002130 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800210c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d108      	bne.n	8002130 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f006 fdba 	bl	8008c98 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2101      	movs	r1, #1
 800212a:	4618      	mov	r0, r3
 800212c:	f004 f8f8 	bl	8006320 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f003 ffe1 	bl	80060fc <USB_ReadInterrupts>
 800213a:	4603      	mov	r3, r0
 800213c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002144:	d102      	bne.n	800214c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f001 f966 	bl	8003418 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f003 ffd3 	bl	80060fc <USB_ReadInterrupts>
 8002156:	4603      	mov	r3, r0
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b08      	cmp	r3, #8
 800215e:	d106      	bne.n	800216e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f006 fd7d 	bl	8008c60 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2208      	movs	r2, #8
 800216c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f003 ffc2 	bl	80060fc <USB_ReadInterrupts>
 8002178:	4603      	mov	r3, r0
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002182:	d138      	bne.n	80021f6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f004 fbdf 	bl	800694c <USB_HC_ReadInterrupt>
 800218e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	e025      	b.n	80021e2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	fa22 f303 	lsr.w	r3, r2, r3
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d018      	beq.n	80021dc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c0:	d106      	bne.n	80021d0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	4619      	mov	r1, r3
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f8cf 	bl	800236c <HCD_HC_IN_IRQHandler>
 80021ce:	e005      	b.n	80021dc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	4619      	mov	r1, r3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fcfd 	bl	8002bd6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3301      	adds	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d3d4      	bcc.n	8002196 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f003 ff7e 	bl	80060fc <USB_ReadInterrupts>
 8002200:	4603      	mov	r3, r0
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	2b10      	cmp	r3, #16
 8002208:	d101      	bne.n	800220e <HAL_HCD_IRQHandler+0x1d2>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_HCD_IRQHandler+0x1d4>
 800220e:	2300      	movs	r3, #0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d014      	beq.n	800223e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0210 	bic.w	r2, r2, #16
 8002222:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f001 f84b 	bl	80032c0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0210 	orr.w	r2, r2, #16
 8002238:	619a      	str	r2, [r3, #24]
 800223a:	e000      	b.n	800223e <HAL_HCD_IRQHandler+0x202>
      return;
 800223c:	bf00      	nop
    }
  }
}
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_HCD_Start+0x16>
 8002256:	2302      	movs	r3, #2
 8002258:	e013      	b.n	8002282 <HAL_HCD_Start+0x3e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f003 fe55 	bl	8005f16 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2101      	movs	r1, #1
 8002272:	4618      	mov	r0, r3
 8002274:	f004 f8b8 	bl	80063e8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_HCD_Stop+0x16>
 800229c:	2302      	movs	r3, #2
 800229e:	e00d      	b.n	80022bc <HAL_HCD_Stop+0x32>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f004 fc99 	bl	8006be4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f004 f85f 	bl	8006394 <USB_ResetPort>
 80022d6:	4603      	mov	r3, r0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	440b      	add	r3, r1
 80022fa:	335c      	adds	r3, #92	; 0x5c
 80022fc:	781b      	ldrb	r3, [r3, #0]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	440b      	add	r3, r1
 8002324:	334c      	adds	r3, #76	; 0x4c
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f004 f8a1 	bl	8006488 <USB_GetCurrentFrame>
 8002346:	4603      	mov	r3, r0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f004 f87c 	bl	800645a <USB_GetHostSpeed>
 8002362:	4603      	mov	r3, r0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4413      	add	r3, r2
 800238e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b04      	cmp	r3, #4
 800239a:	d119      	bne.n	80023d0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	461a      	mov	r2, r3
 80023aa:	2304      	movs	r3, #4
 80023ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	0151      	lsls	r1, r2, #5
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	440a      	add	r2, r1
 80023c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	60d3      	str	r3, [r2, #12]
 80023ce:	e0ce      	b.n	800256e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e6:	d12c      	bne.n	8002442 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	461a      	mov	r2, r3
 80023f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	440b      	add	r3, r1
 800240a:	335d      	adds	r3, #93	; 0x5d
 800240c:	2207      	movs	r2, #7
 800240e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	015a      	lsls	r2, r3, #5
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4413      	add	r3, r2
 8002418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	0151      	lsls	r1, r2, #5
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	440a      	add	r2, r1
 8002426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800242a:	f043 0302 	orr.w	r3, r3, #2
 800242e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	4611      	mov	r1, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f004 fa97 	bl	800696e <USB_HC_Halt>
 8002440:	e095      	b.n	800256e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b20      	cmp	r3, #32
 8002456:	d109      	bne.n	800246c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	461a      	mov	r2, r3
 8002466:	2320      	movs	r3, #32
 8002468:	6093      	str	r3, [r2, #8]
 800246a:	e080      	b.n	800256e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b08      	cmp	r3, #8
 8002480:	d134      	bne.n	80024ec <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4413      	add	r3, r2
 800248a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	0151      	lsls	r1, r2, #5
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	440a      	add	r2, r1
 8002498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	440b      	add	r3, r1
 80024b0:	335d      	adds	r3, #93	; 0x5d
 80024b2:	2205      	movs	r2, #5
 80024b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	461a      	mov	r2, r3
 80024c4:	2310      	movs	r3, #16
 80024c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d4:	461a      	mov	r2, r3
 80024d6:	2308      	movs	r3, #8
 80024d8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f004 fa42 	bl	800696e <USB_HC_Halt>
 80024ea:	e040      	b.n	800256e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002502:	d134      	bne.n	800256e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4413      	add	r3, r2
 800250c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	0151      	lsls	r1, r2, #5
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	440a      	add	r2, r1
 800251a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800251e:	f043 0302 	orr.w	r3, r3, #2
 8002522:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f004 fa1d 	bl	800696e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	461a      	mov	r2, r3
 8002542:	2310      	movs	r3, #16
 8002544:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	440b      	add	r3, r1
 8002554:	335d      	adds	r3, #93	; 0x5d
 8002556:	2208      	movs	r2, #8
 8002558:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002566:	461a      	mov	r2, r3
 8002568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800256c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002584:	d122      	bne.n	80025cc <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	0151      	lsls	r1, r2, #5
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	440a      	add	r2, r1
 800259c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f004 f9dc 	bl	800696e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c2:	461a      	mov	r2, r3
 80025c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025c8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80025ca:	e300      	b.n	8002bce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	f040 80fd 	bne.w	80027de <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d01b      	beq.n	8002624 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	440b      	add	r3, r1
 80025fa:	3348      	adds	r3, #72	; 0x48
 80025fc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	0159      	lsls	r1, r3, #5
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	440b      	add	r3, r1
 8002606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002610:	1ad1      	subs	r1, r2, r3
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4403      	add	r3, r0
 8002620:	334c      	adds	r3, #76	; 0x4c
 8002622:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	440b      	add	r3, r1
 8002632:	335d      	adds	r3, #93	; 0x5d
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	3358      	adds	r3, #88	; 0x58
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	461a      	mov	r2, r3
 800265a:	2301      	movs	r3, #1
 800265c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	333f      	adds	r3, #63	; 0x3f
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	440b      	add	r3, r1
 8002682:	333f      	adds	r3, #63	; 0x3f
 8002684:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002686:	2b02      	cmp	r3, #2
 8002688:	d121      	bne.n	80026ce <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	0151      	lsls	r1, r2, #5
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	440a      	add	r2, r1
 80026a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f004 f95a 	bl	800696e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c6:	461a      	mov	r2, r3
 80026c8:	2310      	movs	r3, #16
 80026ca:	6093      	str	r3, [r2, #8]
 80026cc:	e070      	b.n	80027b0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	333f      	adds	r3, #63	; 0x3f
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d12a      	bne.n	800273a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	0151      	lsls	r1, r2, #5
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	440a      	add	r2, r1
 80026fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002702:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	440b      	add	r3, r1
 8002712:	335c      	adds	r3, #92	; 0x5c
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	b2d8      	uxtb	r0, r3
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	440b      	add	r3, r1
 800272a:	335c      	adds	r3, #92	; 0x5c
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	4601      	mov	r1, r0
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f006 fabe 	bl	8008cb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002738:	e03a      	b.n	80027b0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	440b      	add	r3, r1
 8002748:	333f      	adds	r3, #63	; 0x3f
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d12f      	bne.n	80027b0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	440b      	add	r3, r1
 800275e:	335c      	adds	r3, #92	; 0x5c
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	440b      	add	r3, r1
 8002772:	3350      	adds	r3, #80	; 0x50
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	f083 0301 	eor.w	r3, r3, #1
 800277a:	b2d8      	uxtb	r0, r3
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	440b      	add	r3, r1
 800278a:	3350      	adds	r3, #80	; 0x50
 800278c:	4602      	mov	r2, r0
 800278e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	b2d8      	uxtb	r0, r3
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	335c      	adds	r3, #92	; 0x5c
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	4601      	mov	r1, r0
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f006 fa82 	bl	8008cb4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	440b      	add	r3, r1
 80027be:	3350      	adds	r3, #80	; 0x50
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	f083 0301 	eor.w	r3, r3, #1
 80027c6:	b2d8      	uxtb	r0, r3
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	440b      	add	r3, r1
 80027d6:	3350      	adds	r3, #80	; 0x50
 80027d8:	4602      	mov	r2, r0
 80027da:	701a      	strb	r2, [r3, #0]
}
 80027dc:	e1f7      	b.n	8002bce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	f040 811a 	bne.w	8002a2a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	0151      	lsls	r1, r2, #5
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	440a      	add	r2, r1
 800280c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002810:	f023 0302 	bic.w	r3, r3, #2
 8002814:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	440b      	add	r3, r1
 8002824:	335d      	adds	r3, #93	; 0x5d
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d10a      	bne.n	8002842 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	440b      	add	r3, r1
 800283a:	335c      	adds	r3, #92	; 0x5c
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e0d9      	b.n	80029f6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	335d      	adds	r3, #93	; 0x5d
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b05      	cmp	r3, #5
 8002856:	d10a      	bne.n	800286e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	440b      	add	r3, r1
 8002866:	335c      	adds	r3, #92	; 0x5c
 8002868:	2205      	movs	r2, #5
 800286a:	701a      	strb	r2, [r3, #0]
 800286c:	e0c3      	b.n	80029f6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	440b      	add	r3, r1
 800287c:	335d      	adds	r3, #93	; 0x5d
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b06      	cmp	r3, #6
 8002882:	d00a      	beq.n	800289a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	440b      	add	r3, r1
 8002892:	335d      	adds	r3, #93	; 0x5d
 8002894:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002896:	2b08      	cmp	r3, #8
 8002898:	d156      	bne.n	8002948 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	440b      	add	r3, r1
 80028a8:	3358      	adds	r3, #88	; 0x58
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	1c59      	adds	r1, r3, #1
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4403      	add	r3, r0
 80028bc:	3358      	adds	r3, #88	; 0x58
 80028be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	440b      	add	r3, r1
 80028ce:	3358      	adds	r3, #88	; 0x58
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d914      	bls.n	8002900 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	3358      	adds	r3, #88	; 0x58
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	440b      	add	r3, r1
 80028f8:	335c      	adds	r3, #92	; 0x5c
 80028fa:	2204      	movs	r2, #4
 80028fc:	701a      	strb	r2, [r3, #0]
 80028fe:	e009      	b.n	8002914 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	440b      	add	r3, r1
 800290e:	335c      	adds	r3, #92	; 0x5c
 8002910:	2202      	movs	r2, #2
 8002912:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800292a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002932:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	461a      	mov	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e056      	b.n	80029f6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	440b      	add	r3, r1
 8002956:	335d      	adds	r3, #93	; 0x5d
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d123      	bne.n	80029a6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	440b      	add	r3, r1
 800296c:	335c      	adds	r3, #92	; 0x5c
 800296e:	2202      	movs	r2, #2
 8002970:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4413      	add	r3, r2
 800297a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002988:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002990:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	461a      	mov	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	e027      	b.n	80029f6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	440b      	add	r3, r1
 80029b4:	335d      	adds	r3, #93	; 0x5d
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b07      	cmp	r3, #7
 80029ba:	d11c      	bne.n	80029f6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	440b      	add	r3, r1
 80029ca:	3358      	adds	r3, #88	; 0x58
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	1c59      	adds	r1, r3, #1
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4403      	add	r3, r0
 80029de:	3358      	adds	r3, #88	; 0x58
 80029e0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	440b      	add	r3, r1
 80029f0:	335c      	adds	r3, #92	; 0x5c
 80029f2:	2204      	movs	r2, #4
 80029f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a02:	461a      	mov	r2, r3
 8002a04:	2302      	movs	r3, #2
 8002a06:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	b2d8      	uxtb	r0, r3
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	440b      	add	r3, r1
 8002a1a:	335c      	adds	r3, #92	; 0x5c
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4601      	mov	r1, r0
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f006 f946 	bl	8008cb4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a28:	e0d1      	b.n	8002bce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d13e      	bne.n	8002abe <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	0151      	lsls	r1, r2, #5
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	440a      	add	r2, r1
 8002a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a5a:	f043 0302 	orr.w	r3, r3, #2
 8002a5e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3358      	adds	r3, #88	; 0x58
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	1c59      	adds	r1, r3, #1
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	4403      	add	r3, r0
 8002a82:	3358      	adds	r3, #88	; 0x58
 8002a84:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	440b      	add	r3, r1
 8002a94:	335d      	adds	r3, #93	; 0x5d
 8002a96:	2206      	movs	r2, #6
 8002a98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f003 ff62 	bl	800696e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	6093      	str	r3, [r2, #8]
}
 8002abc:	e087      	b.n	8002bce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d17c      	bne.n	8002bce <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	333f      	adds	r3, #63	; 0x3f
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d122      	bne.n	8002b30 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	440b      	add	r3, r1
 8002af8:	3358      	adds	r3, #88	; 0x58
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	0151      	lsls	r1, r2, #5
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	440a      	add	r2, r1
 8002b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b18:	f043 0302 	orr.w	r3, r3, #2
 8002b1c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f003 ff20 	bl	800696e <USB_HC_Halt>
 8002b2e:	e045      	b.n	8002bbc <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	333f      	adds	r3, #63	; 0x3f
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	440b      	add	r3, r1
 8002b54:	333f      	adds	r3, #63	; 0x3f
 8002b56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d12f      	bne.n	8002bbc <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	3358      	adds	r3, #88	; 0x58
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d121      	bne.n	8002bbc <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	335d      	adds	r3, #93	; 0x5d
 8002b88:	2203      	movs	r2, #3
 8002b8a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	0151      	lsls	r1, r2, #5
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	440a      	add	r2, r1
 8002ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ba6:	f043 0302 	orr.w	r3, r3, #2
 8002baa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f003 fed9 	bl	800696e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	461a      	mov	r2, r3
 8002bca:	2310      	movs	r3, #16
 8002bcc:	6093      	str	r3, [r2, #8]
}
 8002bce:	bf00      	nop
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	460b      	mov	r3, r1
 8002be0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d119      	bne.n	8002c3a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c12:	461a      	mov	r2, r3
 8002c14:	2304      	movs	r3, #4
 8002c16:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	0151      	lsls	r1, r2, #5
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	440a      	add	r2, r1
 8002c2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c32:	f043 0302 	orr.w	r3, r3, #2
 8002c36:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002c38:	e33e      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d141      	bne.n	8002cd4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2320      	movs	r3, #32
 8002c60:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	440b      	add	r3, r1
 8002c70:	333d      	adds	r3, #61	; 0x3d
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	f040 831f 	bne.w	80032b8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	440b      	add	r3, r1
 8002c88:	333d      	adds	r3, #61	; 0x3d
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	335c      	adds	r3, #92	; 0x5c
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	0151      	lsls	r1, r2, #5
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	440a      	add	r2, r1
 8002cb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cbc:	f043 0302 	orr.w	r3, r3, #2
 8002cc0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f003 fe4e 	bl	800696e <USB_HC_Halt>
}
 8002cd2:	e2f1      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce6:	2b40      	cmp	r3, #64	; 0x40
 8002ce8:	d13f      	bne.n	8002d6a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	335d      	adds	r3, #93	; 0x5d
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	440b      	add	r3, r1
 8002d0c:	333d      	adds	r3, #61	; 0x3d
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	3358      	adds	r3, #88	; 0x58
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	0151      	lsls	r1, r2, #5
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	440a      	add	r2, r1
 8002d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f003 fe0c 	bl	800696e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d62:	461a      	mov	r2, r3
 8002d64:	2340      	movs	r3, #64	; 0x40
 8002d66:	6093      	str	r3, [r2, #8]
}
 8002d68:	e2a6      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d80:	d122      	bne.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	0151      	lsls	r1, r2, #5
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	440a      	add	r2, r1
 8002d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d9c:	f043 0302 	orr.w	r3, r3, #2
 8002da0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 fdde 	bl	800696e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc4:	6093      	str	r3, [r2, #8]
}
 8002dc6:	e277      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d135      	bne.n	8002e4a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	440b      	add	r3, r1
 8002dec:	3358      	adds	r3, #88	; 0x58
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	0151      	lsls	r1, r2, #5
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	440a      	add	r2, r1
 8002e08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 fda6 	bl	800696e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2301      	movs	r3, #1
 8002e32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	440b      	add	r3, r1
 8002e42:	335d      	adds	r3, #93	; 0x5d
 8002e44:	2201      	movs	r2, #1
 8002e46:	701a      	strb	r2, [r3, #0]
}
 8002e48:	e236      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d12b      	bne.n	8002eb8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2308      	movs	r3, #8
 8002e70:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	0151      	lsls	r1, r2, #5
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	440a      	add	r2, r1
 8002e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e8c:	f043 0302 	orr.w	r3, r3, #2
 8002e90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 fd66 	bl	800696e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	335d      	adds	r3, #93	; 0x5d
 8002eb2:	2205      	movs	r2, #5
 8002eb4:	701a      	strb	r2, [r3, #0]
}
 8002eb6:	e1ff      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b10      	cmp	r3, #16
 8002ecc:	d155      	bne.n	8002f7a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	440b      	add	r3, r1
 8002edc:	3358      	adds	r3, #88	; 0x58
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	440b      	add	r3, r1
 8002ef0:	335d      	adds	r3, #93	; 0x5d
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	440b      	add	r3, r1
 8002f04:	333d      	adds	r3, #61	; 0x3d
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d114      	bne.n	8002f36 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	333c      	adds	r3, #60	; 0x3c
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	440b      	add	r3, r1
 8002f30:	333d      	adds	r3, #61	; 0x3d
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	0151      	lsls	r1, r2, #5
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	440a      	add	r2, r1
 8002f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 fd04 	bl	800696e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f72:	461a      	mov	r2, r3
 8002f74:	2310      	movs	r3, #16
 8002f76:	6093      	str	r3, [r2, #8]
}
 8002f78:	e19e      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d12b      	bne.n	8002fe8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	0151      	lsls	r1, r2, #5
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	440a      	add	r2, r1
 8002fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002faa:	f043 0302 	orr.w	r3, r3, #2
 8002fae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f003 fcd7 	bl	800696e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	440b      	add	r3, r1
 8002fce:	335d      	adds	r3, #93	; 0x5d
 8002fd0:	2206      	movs	r2, #6
 8002fd2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	6093      	str	r3, [r2, #8]
}
 8002fe6:	e167      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffe:	d135      	bne.n	800306c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	0151      	lsls	r1, r2, #5
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	440a      	add	r2, r1
 8003016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800301a:	f043 0302 	orr.w	r3, r3, #2
 800301e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	4611      	mov	r1, r2
 800302a:	4618      	mov	r0, r3
 800302c:	f003 fc9f 	bl	800696e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4413      	add	r3, r2
 8003038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303c:	461a      	mov	r2, r3
 800303e:	2310      	movs	r3, #16
 8003040:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4413      	add	r3, r2
 800304a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304e:	461a      	mov	r2, r3
 8003050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003054:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	440b      	add	r3, r1
 8003064:	335d      	adds	r3, #93	; 0x5d
 8003066:	2208      	movs	r2, #8
 8003068:	701a      	strb	r2, [r3, #0]
}
 800306a:	e125      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4413      	add	r3, r2
 8003074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b02      	cmp	r3, #2
 8003080:	f040 811a 	bne.w	80032b8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	0151      	lsls	r1, r2, #5
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	440a      	add	r2, r1
 800309a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800309e:	f023 0302 	bic.w	r3, r3, #2
 80030a2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	440b      	add	r3, r1
 80030b2:	335d      	adds	r3, #93	; 0x5d
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d137      	bne.n	800312a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	440b      	add	r3, r1
 80030c8:	335c      	adds	r3, #92	; 0x5c
 80030ca:	2201      	movs	r2, #1
 80030cc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	440b      	add	r3, r1
 80030dc:	333f      	adds	r3, #63	; 0x3f
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d00b      	beq.n	80030fc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	440b      	add	r3, r1
 80030f2:	333f      	adds	r3, #63	; 0x3f
 80030f4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	f040 80c5 	bne.w	8003286 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	440b      	add	r3, r1
 800310a:	3351      	adds	r3, #81	; 0x51
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	f083 0301 	eor.w	r3, r3, #1
 8003112:	b2d8      	uxtb	r0, r3
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	440b      	add	r3, r1
 8003122:	3351      	adds	r3, #81	; 0x51
 8003124:	4602      	mov	r2, r0
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e0ad      	b.n	8003286 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	440b      	add	r3, r1
 8003138:	335d      	adds	r3, #93	; 0x5d
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d10a      	bne.n	8003156 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	440b      	add	r3, r1
 800314e:	335c      	adds	r3, #92	; 0x5c
 8003150:	2202      	movs	r2, #2
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	e097      	b.n	8003286 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	440b      	add	r3, r1
 8003164:	335d      	adds	r3, #93	; 0x5d
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b04      	cmp	r3, #4
 800316a:	d10a      	bne.n	8003182 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	440b      	add	r3, r1
 800317a:	335c      	adds	r3, #92	; 0x5c
 800317c:	2202      	movs	r2, #2
 800317e:	701a      	strb	r2, [r3, #0]
 8003180:	e081      	b.n	8003286 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	440b      	add	r3, r1
 8003190:	335d      	adds	r3, #93	; 0x5d
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b05      	cmp	r3, #5
 8003196:	d10a      	bne.n	80031ae <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	440b      	add	r3, r1
 80031a6:	335c      	adds	r3, #92	; 0x5c
 80031a8:	2205      	movs	r2, #5
 80031aa:	701a      	strb	r2, [r3, #0]
 80031ac:	e06b      	b.n	8003286 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	440b      	add	r3, r1
 80031bc:	335d      	adds	r3, #93	; 0x5d
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b06      	cmp	r3, #6
 80031c2:	d00a      	beq.n	80031da <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	335d      	adds	r3, #93	; 0x5d
 80031d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d155      	bne.n	8003286 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	440b      	add	r3, r1
 80031e8:	3358      	adds	r3, #88	; 0x58
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	1c59      	adds	r1, r3, #1
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4403      	add	r3, r0
 80031fc:	3358      	adds	r3, #88	; 0x58
 80031fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	440b      	add	r3, r1
 800320e:	3358      	adds	r3, #88	; 0x58
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b03      	cmp	r3, #3
 8003214:	d914      	bls.n	8003240 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	440b      	add	r3, r1
 8003224:	3358      	adds	r3, #88	; 0x58
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	335c      	adds	r3, #92	; 0x5c
 800323a:	2204      	movs	r2, #4
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e009      	b.n	8003254 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	335c      	adds	r3, #92	; 0x5c
 8003250:	2202      	movs	r2, #2
 8003252:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4413      	add	r3, r2
 800325c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800326a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003272:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003280:	461a      	mov	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4413      	add	r3, r2
 800328e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003292:	461a      	mov	r2, r3
 8003294:	2302      	movs	r3, #2
 8003296:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	b2d8      	uxtb	r0, r3
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	440b      	add	r3, r1
 80032aa:	335c      	adds	r3, #92	; 0x5c
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	4601      	mov	r1, r0
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f005 fcfe 	bl	8008cb4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80032b8:	bf00      	nop
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	0c5b      	lsrs	r3, r3, #17
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	091b      	lsrs	r3, r3, #4
 80032f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032f4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d003      	beq.n	8003304 <HCD_RXQLVL_IRQHandler+0x44>
 80032fc:	2b05      	cmp	r3, #5
 80032fe:	f000 8082 	beq.w	8003406 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003302:	e083      	b.n	800340c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d07f      	beq.n	800340a <HCD_RXQLVL_IRQHandler+0x14a>
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	440b      	add	r3, r1
 8003318:	3344      	adds	r3, #68	; 0x44
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d074      	beq.n	800340a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	440b      	add	r3, r1
 8003332:	3344      	adds	r3, #68	; 0x44
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	b292      	uxth	r2, r2
 800333a:	4619      	mov	r1, r3
 800333c:	f002 feb5 	bl	80060aa <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	440b      	add	r3, r1
 800334e:	3344      	adds	r3, #68	; 0x44
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	18d1      	adds	r1, r2, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4403      	add	r3, r0
 8003364:	3344      	adds	r3, #68	; 0x44
 8003366:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	440b      	add	r3, r1
 8003376:	334c      	adds	r3, #76	; 0x4c
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	18d1      	adds	r1, r2, r3
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4403      	add	r3, r0
 800338c:	334c      	adds	r3, #76	; 0x4c
 800338e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	4413      	add	r3, r2
 8003398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	4b1d      	ldr	r3, [pc, #116]	; (8003414 <HCD_RXQLVL_IRQHandler+0x154>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d031      	beq.n	800340a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033bc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033c4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d2:	461a      	mov	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	440b      	add	r3, r1
 80033e6:	3350      	adds	r3, #80	; 0x50
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	f083 0301 	eor.w	r3, r3, #1
 80033ee:	b2d8      	uxtb	r0, r3
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	440b      	add	r3, r1
 80033fe:	3350      	adds	r3, #80	; 0x50
 8003400:	4602      	mov	r2, r0
 8003402:	701a      	strb	r2, [r3, #0]
      break;
 8003404:	e001      	b.n	800340a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003406:	bf00      	nop
 8003408:	e000      	b.n	800340c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800340a:	bf00      	nop
  }
}
 800340c:	bf00      	nop
 800340e:	3728      	adds	r7, #40	; 0x28
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	1ff80000 	.word	0x1ff80000

08003418 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003444:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b02      	cmp	r3, #2
 800344e:	d10b      	bne.n	8003468 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b01      	cmp	r3, #1
 8003458:	d102      	bne.n	8003460 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f005 fc0e 	bl	8008c7c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f043 0302 	orr.w	r3, r3, #2
 8003466:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b08      	cmp	r3, #8
 8003470:	d132      	bne.n	80034d8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f043 0308 	orr.w	r3, r3, #8
 8003478:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b04      	cmp	r3, #4
 8003482:	d126      	bne.n	80034d2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d113      	bne.n	80034b4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003492:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003496:	d106      	bne.n	80034a6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2102      	movs	r1, #2
 800349e:	4618      	mov	r0, r3
 80034a0:	f002 ff3e 	bl	8006320 <USB_InitFSLSPClkSel>
 80034a4:	e011      	b.n	80034ca <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2101      	movs	r1, #1
 80034ac:	4618      	mov	r0, r3
 80034ae:	f002 ff37 	bl	8006320 <USB_InitFSLSPClkSel>
 80034b2:	e00a      	b.n	80034ca <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d106      	bne.n	80034ca <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034c2:	461a      	mov	r2, r3
 80034c4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80034c8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f005 fc00 	bl	8008cd0 <HAL_HCD_PortEnabled_Callback>
 80034d0:	e002      	b.n	80034d8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f005 fc0a 	bl	8008cec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d103      	bne.n	80034ea <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f043 0320 	orr.w	r3, r3, #32
 80034e8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034f0:	461a      	mov	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	6013      	str	r3, [r2, #0]
}
 80034f6:	bf00      	nop
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e11f      	b.n	8003752 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd fd34 	bl	8000f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2224      	movs	r2, #36	; 0x24
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0201 	bic.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003552:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003562:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003564:	f001 f9de 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 8003568:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4a7b      	ldr	r2, [pc, #492]	; (800375c <HAL_I2C_Init+0x25c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d807      	bhi.n	8003584 <HAL_I2C_Init+0x84>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a7a      	ldr	r2, [pc, #488]	; (8003760 <HAL_I2C_Init+0x260>)
 8003578:	4293      	cmp	r3, r2
 800357a:	bf94      	ite	ls
 800357c:	2301      	movls	r3, #1
 800357e:	2300      	movhi	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	e006      	b.n	8003592 <HAL_I2C_Init+0x92>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4a77      	ldr	r2, [pc, #476]	; (8003764 <HAL_I2C_Init+0x264>)
 8003588:	4293      	cmp	r3, r2
 800358a:	bf94      	ite	ls
 800358c:	2301      	movls	r3, #1
 800358e:	2300      	movhi	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e0db      	b.n	8003752 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4a72      	ldr	r2, [pc, #456]	; (8003768 <HAL_I2C_Init+0x268>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	0c9b      	lsrs	r3, r3, #18
 80035a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	4a64      	ldr	r2, [pc, #400]	; (800375c <HAL_I2C_Init+0x25c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d802      	bhi.n	80035d4 <HAL_I2C_Init+0xd4>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	3301      	adds	r3, #1
 80035d2:	e009      	b.n	80035e8 <HAL_I2C_Init+0xe8>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035da:	fb02 f303 	mul.w	r3, r2, r3
 80035de:	4a63      	ldr	r2, [pc, #396]	; (800376c <HAL_I2C_Init+0x26c>)
 80035e0:	fba2 2303 	umull	r2, r3, r2, r3
 80035e4:	099b      	lsrs	r3, r3, #6
 80035e6:	3301      	adds	r3, #1
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	430b      	orrs	r3, r1
 80035ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4956      	ldr	r1, [pc, #344]	; (800375c <HAL_I2C_Init+0x25c>)
 8003604:	428b      	cmp	r3, r1
 8003606:	d80d      	bhi.n	8003624 <HAL_I2C_Init+0x124>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1e59      	subs	r1, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	fbb1 f3f3 	udiv	r3, r1, r3
 8003616:	3301      	adds	r3, #1
 8003618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361c:	2b04      	cmp	r3, #4
 800361e:	bf38      	it	cc
 8003620:	2304      	movcc	r3, #4
 8003622:	e04f      	b.n	80036c4 <HAL_I2C_Init+0x1c4>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d111      	bne.n	8003650 <HAL_I2C_Init+0x150>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	1e58      	subs	r0, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6859      	ldr	r1, [r3, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	440b      	add	r3, r1
 800363a:	fbb0 f3f3 	udiv	r3, r0, r3
 800363e:	3301      	adds	r3, #1
 8003640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	e012      	b.n	8003676 <HAL_I2C_Init+0x176>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1e58      	subs	r0, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	0099      	lsls	r1, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	fbb0 f3f3 	udiv	r3, r0, r3
 8003666:	3301      	adds	r3, #1
 8003668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf0c      	ite	eq
 8003670:	2301      	moveq	r3, #1
 8003672:	2300      	movne	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_I2C_Init+0x17e>
 800367a:	2301      	movs	r3, #1
 800367c:	e022      	b.n	80036c4 <HAL_I2C_Init+0x1c4>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10e      	bne.n	80036a4 <HAL_I2C_Init+0x1a4>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1e58      	subs	r0, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6859      	ldr	r1, [r3, #4]
 800368e:	460b      	mov	r3, r1
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	440b      	add	r3, r1
 8003694:	fbb0 f3f3 	udiv	r3, r0, r3
 8003698:	3301      	adds	r3, #1
 800369a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a2:	e00f      	b.n	80036c4 <HAL_I2C_Init+0x1c4>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1e58      	subs	r0, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	0099      	lsls	r1, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	6809      	ldr	r1, [r1, #0]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6911      	ldr	r1, [r2, #16]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68d2      	ldr	r2, [r2, #12]
 80036fe:	4311      	orrs	r1, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	430b      	orrs	r3, r1
 8003706:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	000186a0 	.word	0x000186a0
 8003760:	001e847f 	.word	0x001e847f
 8003764:	003d08ff 	.word	0x003d08ff
 8003768:	431bde83 	.word	0x431bde83
 800376c:	10624dd3 	.word	0x10624dd3

08003770 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e128      	b.n	80039d4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a90      	ldr	r2, [pc, #576]	; (80039dc <HAL_I2S_Init+0x26c>)
 800379a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7fd fc41 	bl	8001024 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037b8:	f023 030f 	bic.w	r3, r3, #15
 80037bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2202      	movs	r2, #2
 80037c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d060      	beq.n	8003890 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80037d6:	2310      	movs	r3, #16
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	e001      	b.n	80037e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80037dc:	2320      	movs	r3, #32
 80037de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d802      	bhi.n	80037ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80037ee:	2001      	movs	r0, #1
 80037f0:	f001 f9a2 	bl	8004b38 <HAL_RCCEx_GetPeriphCLKFreq>
 80037f4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037fe:	d125      	bne.n	800384c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d010      	beq.n	800382a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	461a      	mov	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	fbb2 f3f3 	udiv	r3, r2, r3
 8003824:	3305      	adds	r3, #5
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	e01f      	b.n	800386a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	fbb2 f2f3 	udiv	r2, r2, r3
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	461a      	mov	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	fbb2 f3f3 	udiv	r3, r2, r3
 8003846:	3305      	adds	r3, #5
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	e00e      	b.n	800386a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	fbb2 f2f3 	udiv	r2, r2, r3
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	461a      	mov	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	fbb2 f3f3 	udiv	r3, r2, r3
 8003866:	3305      	adds	r3, #5
 8003868:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4a5c      	ldr	r2, [pc, #368]	; (80039e0 <HAL_I2S_Init+0x270>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	08db      	lsrs	r3, r3, #3
 8003874:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	e003      	b.n	8003898 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003890:	2302      	movs	r3, #2
 8003892:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d902      	bls.n	80038a4 <HAL_I2S_Init+0x134>
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2bff      	cmp	r3, #255	; 0xff
 80038a2:	d907      	bls.n	80038b4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	f043 0210 	orr.w	r2, r3, #16
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e08f      	b.n	80039d4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	ea42 0103 	orr.w	r1, r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038d2:	f023 030f 	bic.w	r3, r3, #15
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6851      	ldr	r1, [r2, #4]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6892      	ldr	r2, [r2, #8]
 80038de:	4311      	orrs	r1, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	68d2      	ldr	r2, [r2, #12]
 80038e4:	4311      	orrs	r1, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6992      	ldr	r2, [r2, #24]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d161      	bne.n	80039c4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a38      	ldr	r2, [pc, #224]	; (80039e4 <HAL_I2S_Init+0x274>)
 8003904:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a37      	ldr	r2, [pc, #220]	; (80039e8 <HAL_I2S_Init+0x278>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d101      	bne.n	8003914 <HAL_I2S_Init+0x1a4>
 8003910:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_I2S_Init+0x27c>)
 8003912:	e001      	b.n	8003918 <HAL_I2S_Init+0x1a8>
 8003914:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	4932      	ldr	r1, [pc, #200]	; (80039e8 <HAL_I2S_Init+0x278>)
 8003920:	428a      	cmp	r2, r1
 8003922:	d101      	bne.n	8003928 <HAL_I2S_Init+0x1b8>
 8003924:	4a31      	ldr	r2, [pc, #196]	; (80039ec <HAL_I2S_Init+0x27c>)
 8003926:	e001      	b.n	800392c <HAL_I2S_Init+0x1bc>
 8003928:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800392c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003930:	f023 030f 	bic.w	r3, r3, #15
 8003934:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2b      	ldr	r2, [pc, #172]	; (80039e8 <HAL_I2S_Init+0x278>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d101      	bne.n	8003944 <HAL_I2S_Init+0x1d4>
 8003940:	4b2a      	ldr	r3, [pc, #168]	; (80039ec <HAL_I2S_Init+0x27c>)
 8003942:	e001      	b.n	8003948 <HAL_I2S_Init+0x1d8>
 8003944:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003948:	2202      	movs	r2, #2
 800394a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a25      	ldr	r2, [pc, #148]	; (80039e8 <HAL_I2S_Init+0x278>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d101      	bne.n	800395a <HAL_I2S_Init+0x1ea>
 8003956:	4b25      	ldr	r3, [pc, #148]	; (80039ec <HAL_I2S_Init+0x27c>)
 8003958:	e001      	b.n	800395e <HAL_I2S_Init+0x1ee>
 800395a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800396a:	d003      	beq.n	8003974 <HAL_I2S_Init+0x204>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d103      	bne.n	800397c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	e001      	b.n	8003980 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800397c:	2300      	movs	r3, #0
 800397e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	b299      	uxth	r1, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003996:	4303      	orrs	r3, r0
 8003998:	b29b      	uxth	r3, r3
 800399a:	430b      	orrs	r3, r1
 800399c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800399e:	4313      	orrs	r3, r2
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	897b      	ldrh	r3, [r7, #10]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039ac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a0d      	ldr	r2, [pc, #52]	; (80039e8 <HAL_I2S_Init+0x278>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d101      	bne.n	80039bc <HAL_I2S_Init+0x24c>
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <HAL_I2S_Init+0x27c>)
 80039ba:	e001      	b.n	80039c0 <HAL_I2S_Init+0x250>
 80039bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c0:	897a      	ldrh	r2, [r7, #10]
 80039c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	08003ae7 	.word	0x08003ae7
 80039e0:	cccccccd 	.word	0xcccccccd
 80039e4:	08003bfd 	.word	0x08003bfd
 80039e8:	40003800 	.word	0x40003800
 80039ec:	40003400 	.word	0x40003400

080039f0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	881a      	ldrh	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	1c9a      	adds	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10e      	bne.n	8003a80 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a70:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff ffb8 	bl	80039f0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a80:	bf00      	nop
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	b292      	uxth	r2, r2
 8003a9c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	1c9a      	adds	r2, r3, #2
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10e      	bne.n	8003ade <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ace:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff ff93 	bl	8003a04 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b086      	sub	sp, #24
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d13a      	bne.n	8003b78 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d109      	bne.n	8003b20 <I2S_IRQHandler+0x3a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b16:	2b40      	cmp	r3, #64	; 0x40
 8003b18:	d102      	bne.n	8003b20 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff ffb4 	bl	8003a88 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d126      	bne.n	8003b78 <I2S_IRQHandler+0x92>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d11f      	bne.n	8003b78 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	f043 0202 	orr.w	r2, r3, #2
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff ff50 	bl	8003a18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d136      	bne.n	8003bf2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d109      	bne.n	8003ba2 <I2S_IRQHandler+0xbc>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b98:	2b80      	cmp	r3, #128	; 0x80
 8003b9a:	d102      	bne.n	8003ba2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ff45 	bl	8003a2c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d122      	bne.n	8003bf2 <I2S_IRQHandler+0x10c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d11b      	bne.n	8003bf2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bc8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be4:	f043 0204 	orr.w	r2, r3, #4
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ff13 	bl	8003a18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4aa2      	ldr	r2, [pc, #648]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d101      	bne.n	8003c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003c16:	4ba2      	ldr	r3, [pc, #648]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c18:	e001      	b.n	8003c1e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003c1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a9b      	ldr	r2, [pc, #620]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d101      	bne.n	8003c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003c34:	4b9a      	ldr	r3, [pc, #616]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c36:	e001      	b.n	8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003c38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c48:	d004      	beq.n	8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f040 8099 	bne.w	8003d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d107      	bne.n	8003c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f925 	bl	8003eb8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f9c8 	bl	8004018 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8e:	2b40      	cmp	r3, #64	; 0x40
 8003c90:	d13a      	bne.n	8003d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d035      	beq.n	8003d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7e      	ldr	r2, [pc, #504]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d101      	bne.n	8003caa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003ca6:	4b7e      	ldr	r3, [pc, #504]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ca8:	e001      	b.n	8003cae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003caa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4979      	ldr	r1, [pc, #484]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cb6:	428b      	cmp	r3, r1
 8003cb8:	d101      	bne.n	8003cbe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003cba:	4b79      	ldr	r3, [pc, #484]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cbc:	e001      	b.n	8003cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003cbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cc6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cd6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	f043 0202 	orr.w	r2, r3, #2
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff fe88 	bl	8003a18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	f040 80be 	bne.w	8003e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80b8 	beq.w	8003e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d2e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a59      	ldr	r2, [pc, #356]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d101      	bne.n	8003d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003d3a:	4b59      	ldr	r3, [pc, #356]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d3c:	e001      	b.n	8003d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003d3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4954      	ldr	r1, [pc, #336]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d4a:	428b      	cmp	r3, r1
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003d4e:	4b54      	ldr	r3, [pc, #336]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d50:	e001      	b.n	8003d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003d52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d5a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f043 0204 	orr.w	r2, r3, #4
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff fe4a 	bl	8003a18 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d84:	e084      	b.n	8003e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d107      	bne.n	8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f8be 	bl	8003f1c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d107      	bne.n	8003dba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f8fd 	bl	8003fb4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d12f      	bne.n	8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d02a      	beq.n	8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ddc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a2e      	ldr	r2, [pc, #184]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d101      	bne.n	8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003de8:	4b2d      	ldr	r3, [pc, #180]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003dea:	e001      	b.n	8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003dec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4929      	ldr	r1, [pc, #164]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003df8:	428b      	cmp	r3, r1
 8003dfa:	d101      	bne.n	8003e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003dfc:	4b28      	ldr	r3, [pc, #160]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003dfe:	e001      	b.n	8003e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003e00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e08:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	f043 0202 	orr.w	r2, r3, #2
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff fdfa 	bl	8003a18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d131      	bne.n	8003e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d02c      	beq.n	8003e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d101      	bne.n	8003e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003e42:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e44:	e001      	b.n	8003e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003e46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4912      	ldr	r1, [pc, #72]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e52:	428b      	cmp	r3, r1
 8003e54:	d101      	bne.n	8003e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003e56:	4b12      	ldr	r3, [pc, #72]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e58:	e001      	b.n	8003e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003e5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e62:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e72:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e80:	f043 0204 	orr.w	r2, r3, #4
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff fdc5 	bl	8003a18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e8e:	e000      	b.n	8003e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e90:	bf00      	nop
}
 8003e92:	bf00      	nop
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40003800 	.word	0x40003800
 8003ea0:	40003400 	.word	0x40003400

08003ea4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	1c99      	adds	r1, r3, #2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6251      	str	r1, [r2, #36]	; 0x24
 8003eca:	881a      	ldrh	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d113      	bne.n	8003f12 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ef8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff ffc9 	bl	8003ea4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	1c99      	adds	r1, r3, #2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6251      	str	r1, [r2, #36]	; 0x24
 8003f2e:	8819      	ldrh	r1, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1d      	ldr	r2, [pc, #116]	; (8003fac <I2SEx_TxISR_I2SExt+0x90>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d101      	bne.n	8003f3e <I2SEx_TxISR_I2SExt+0x22>
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <I2SEx_TxISR_I2SExt+0x94>)
 8003f3c:	e001      	b.n	8003f42 <I2SEx_TxISR_I2SExt+0x26>
 8003f3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f42:	460a      	mov	r2, r1
 8003f44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d121      	bne.n	8003fa2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a12      	ldr	r2, [pc, #72]	; (8003fac <I2SEx_TxISR_I2SExt+0x90>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d101      	bne.n	8003f6c <I2SEx_TxISR_I2SExt+0x50>
 8003f68:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <I2SEx_TxISR_I2SExt+0x94>)
 8003f6a:	e001      	b.n	8003f70 <I2SEx_TxISR_I2SExt+0x54>
 8003f6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	490d      	ldr	r1, [pc, #52]	; (8003fac <I2SEx_TxISR_I2SExt+0x90>)
 8003f78:	428b      	cmp	r3, r1
 8003f7a:	d101      	bne.n	8003f80 <I2SEx_TxISR_I2SExt+0x64>
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <I2SEx_TxISR_I2SExt+0x94>)
 8003f7e:	e001      	b.n	8003f84 <I2SEx_TxISR_I2SExt+0x68>
 8003f80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d106      	bne.n	8003fa2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff ff81 	bl	8003ea4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40003800 	.word	0x40003800
 8003fb0:	40003400 	.word	0x40003400

08003fb4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68d8      	ldr	r0, [r3, #12]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	1c99      	adds	r1, r3, #2
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003fcc:	b282      	uxth	r2, r0
 8003fce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d113      	bne.n	8004010 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ff6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff ff4a 	bl	8003ea4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a20      	ldr	r2, [pc, #128]	; (80040a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d101      	bne.n	800402e <I2SEx_RxISR_I2SExt+0x16>
 800402a:	4b20      	ldr	r3, [pc, #128]	; (80040ac <I2SEx_RxISR_I2SExt+0x94>)
 800402c:	e001      	b.n	8004032 <I2SEx_RxISR_I2SExt+0x1a>
 800402e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004032:	68d8      	ldr	r0, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	1c99      	adds	r1, r3, #2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800403e:	b282      	uxth	r2, r0
 8004040:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d121      	bne.n	800409e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a12      	ldr	r2, [pc, #72]	; (80040a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d101      	bne.n	8004068 <I2SEx_RxISR_I2SExt+0x50>
 8004064:	4b11      	ldr	r3, [pc, #68]	; (80040ac <I2SEx_RxISR_I2SExt+0x94>)
 8004066:	e001      	b.n	800406c <I2SEx_RxISR_I2SExt+0x54>
 8004068:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	490d      	ldr	r1, [pc, #52]	; (80040a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004074:	428b      	cmp	r3, r1
 8004076:	d101      	bne.n	800407c <I2SEx_RxISR_I2SExt+0x64>
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <I2SEx_RxISR_I2SExt+0x94>)
 800407a:	e001      	b.n	8004080 <I2SEx_RxISR_I2SExt+0x68>
 800407c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004080:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004084:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d106      	bne.n	800409e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff ff03 	bl	8003ea4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40003800 	.word	0x40003800
 80040ac:	40003400 	.word	0x40003400

080040b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e25b      	b.n	800457a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d075      	beq.n	80041ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ce:	4ba3      	ldr	r3, [pc, #652]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d00c      	beq.n	80040f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040da:	4ba0      	ldr	r3, [pc, #640]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d112      	bne.n	800410c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040e6:	4b9d      	ldr	r3, [pc, #628]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040f2:	d10b      	bne.n	800410c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f4:	4b99      	ldr	r3, [pc, #612]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d05b      	beq.n	80041b8 <HAL_RCC_OscConfig+0x108>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d157      	bne.n	80041b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e236      	b.n	800457a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004114:	d106      	bne.n	8004124 <HAL_RCC_OscConfig+0x74>
 8004116:	4b91      	ldr	r3, [pc, #580]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a90      	ldr	r2, [pc, #576]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e01d      	b.n	8004160 <HAL_RCC_OscConfig+0xb0>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800412c:	d10c      	bne.n	8004148 <HAL_RCC_OscConfig+0x98>
 800412e:	4b8b      	ldr	r3, [pc, #556]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a8a      	ldr	r2, [pc, #552]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 8004134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	4b88      	ldr	r3, [pc, #544]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a87      	ldr	r2, [pc, #540]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	e00b      	b.n	8004160 <HAL_RCC_OscConfig+0xb0>
 8004148:	4b84      	ldr	r3, [pc, #528]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a83      	ldr	r2, [pc, #524]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 800414e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	4b81      	ldr	r3, [pc, #516]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a80      	ldr	r2, [pc, #512]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 800415a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800415e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d013      	beq.n	8004190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fd f9a8 	bl	80014bc <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004170:	f7fd f9a4 	bl	80014bc <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	; 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e1fb      	b.n	800457a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	4b76      	ldr	r3, [pc, #472]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0xc0>
 800418e:	e014      	b.n	80041ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004190:	f7fd f994 	bl	80014bc <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004198:	f7fd f990 	bl	80014bc <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	; 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e1e7      	b.n	800457a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041aa:	4b6c      	ldr	r3, [pc, #432]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0xe8>
 80041b6:	e000      	b.n	80041ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d063      	beq.n	800428e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041c6:	4b65      	ldr	r3, [pc, #404]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00b      	beq.n	80041ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041d2:	4b62      	ldr	r3, [pc, #392]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d11c      	bne.n	8004218 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041de:	4b5f      	ldr	r3, [pc, #380]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d116      	bne.n	8004218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ea:	4b5c      	ldr	r3, [pc, #368]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_RCC_OscConfig+0x152>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d001      	beq.n	8004202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e1bb      	b.n	800457a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004202:	4b56      	ldr	r3, [pc, #344]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4952      	ldr	r1, [pc, #328]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 8004212:	4313      	orrs	r3, r2
 8004214:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004216:	e03a      	b.n	800428e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d020      	beq.n	8004262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004220:	4b4f      	ldr	r3, [pc, #316]	; (8004360 <HAL_RCC_OscConfig+0x2b0>)
 8004222:	2201      	movs	r2, #1
 8004224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004226:	f7fd f949 	bl	80014bc <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800422e:	f7fd f945 	bl	80014bc <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e19c      	b.n	800457a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004240:	4b46      	ldr	r3, [pc, #280]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0f0      	beq.n	800422e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424c:	4b43      	ldr	r3, [pc, #268]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4940      	ldr	r1, [pc, #256]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 800425c:	4313      	orrs	r3, r2
 800425e:	600b      	str	r3, [r1, #0]
 8004260:	e015      	b.n	800428e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004262:	4b3f      	ldr	r3, [pc, #252]	; (8004360 <HAL_RCC_OscConfig+0x2b0>)
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fd f928 	bl	80014bc <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004270:	f7fd f924 	bl	80014bc <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e17b      	b.n	800457a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004282:	4b36      	ldr	r3, [pc, #216]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d030      	beq.n	80042fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d016      	beq.n	80042d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042a2:	4b30      	ldr	r3, [pc, #192]	; (8004364 <HAL_RCC_OscConfig+0x2b4>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a8:	f7fd f908 	bl	80014bc <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042b0:	f7fd f904 	bl	80014bc <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e15b      	b.n	800457a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c2:	4b26      	ldr	r3, [pc, #152]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0f0      	beq.n	80042b0 <HAL_RCC_OscConfig+0x200>
 80042ce:	e015      	b.n	80042fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042d0:	4b24      	ldr	r3, [pc, #144]	; (8004364 <HAL_RCC_OscConfig+0x2b4>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d6:	f7fd f8f1 	bl	80014bc <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042de:	f7fd f8ed 	bl	80014bc <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e144      	b.n	800457a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f0:	4b1a      	ldr	r3, [pc, #104]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 80042f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1f0      	bne.n	80042de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80a0 	beq.w	800444a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430a:	2300      	movs	r3, #0
 800430c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430e:	4b13      	ldr	r3, [pc, #76]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10f      	bne.n	800433a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	4b0f      	ldr	r3, [pc, #60]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	4a0e      	ldr	r2, [pc, #56]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 8004324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004328:	6413      	str	r3, [r2, #64]	; 0x40
 800432a:	4b0c      	ldr	r3, [pc, #48]	; (800435c <HAL_RCC_OscConfig+0x2ac>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004336:	2301      	movs	r3, #1
 8004338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433a:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_RCC_OscConfig+0x2b8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d121      	bne.n	800438a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004346:	4b08      	ldr	r3, [pc, #32]	; (8004368 <HAL_RCC_OscConfig+0x2b8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a07      	ldr	r2, [pc, #28]	; (8004368 <HAL_RCC_OscConfig+0x2b8>)
 800434c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004352:	f7fd f8b3 	bl	80014bc <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004358:	e011      	b.n	800437e <HAL_RCC_OscConfig+0x2ce>
 800435a:	bf00      	nop
 800435c:	40023800 	.word	0x40023800
 8004360:	42470000 	.word	0x42470000
 8004364:	42470e80 	.word	0x42470e80
 8004368:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800436c:	f7fd f8a6 	bl	80014bc <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e0fd      	b.n	800457a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437e:	4b81      	ldr	r3, [pc, #516]	; (8004584 <HAL_RCC_OscConfig+0x4d4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d106      	bne.n	80043a0 <HAL_RCC_OscConfig+0x2f0>
 8004392:	4b7d      	ldr	r3, [pc, #500]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	4a7c      	ldr	r2, [pc, #496]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	6713      	str	r3, [r2, #112]	; 0x70
 800439e:	e01c      	b.n	80043da <HAL_RCC_OscConfig+0x32a>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2b05      	cmp	r3, #5
 80043a6:	d10c      	bne.n	80043c2 <HAL_RCC_OscConfig+0x312>
 80043a8:	4b77      	ldr	r3, [pc, #476]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ac:	4a76      	ldr	r2, [pc, #472]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 80043ae:	f043 0304 	orr.w	r3, r3, #4
 80043b2:	6713      	str	r3, [r2, #112]	; 0x70
 80043b4:	4b74      	ldr	r3, [pc, #464]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 80043b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b8:	4a73      	ldr	r2, [pc, #460]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	6713      	str	r3, [r2, #112]	; 0x70
 80043c0:	e00b      	b.n	80043da <HAL_RCC_OscConfig+0x32a>
 80043c2:	4b71      	ldr	r3, [pc, #452]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	4a70      	ldr	r2, [pc, #448]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 80043c8:	f023 0301 	bic.w	r3, r3, #1
 80043cc:	6713      	str	r3, [r2, #112]	; 0x70
 80043ce:	4b6e      	ldr	r3, [pc, #440]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d2:	4a6d      	ldr	r2, [pc, #436]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 80043d4:	f023 0304 	bic.w	r3, r3, #4
 80043d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d015      	beq.n	800440e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e2:	f7fd f86b 	bl	80014bc <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e8:	e00a      	b.n	8004400 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ea:	f7fd f867 	bl	80014bc <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e0bc      	b.n	800457a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004400:	4b61      	ldr	r3, [pc, #388]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 8004402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0ee      	beq.n	80043ea <HAL_RCC_OscConfig+0x33a>
 800440c:	e014      	b.n	8004438 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440e:	f7fd f855 	bl	80014bc <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004414:	e00a      	b.n	800442c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fd f851 	bl	80014bc <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f241 3288 	movw	r2, #5000	; 0x1388
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e0a6      	b.n	800457a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800442c:	4b56      	ldr	r3, [pc, #344]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1ee      	bne.n	8004416 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004438:	7dfb      	ldrb	r3, [r7, #23]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d105      	bne.n	800444a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800443e:	4b52      	ldr	r3, [pc, #328]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	4a51      	ldr	r2, [pc, #324]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 8004444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004448:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 8092 	beq.w	8004578 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004454:	4b4c      	ldr	r3, [pc, #304]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 030c 	and.w	r3, r3, #12
 800445c:	2b08      	cmp	r3, #8
 800445e:	d05c      	beq.n	800451a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d141      	bne.n	80044ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004468:	4b48      	ldr	r3, [pc, #288]	; (800458c <HAL_RCC_OscConfig+0x4dc>)
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446e:	f7fd f825 	bl	80014bc <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004476:	f7fd f821 	bl	80014bc <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e078      	b.n	800457a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004488:	4b3f      	ldr	r3, [pc, #252]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f0      	bne.n	8004476 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	019b      	lsls	r3, r3, #6
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044aa:	085b      	lsrs	r3, r3, #1
 80044ac:	3b01      	subs	r3, #1
 80044ae:	041b      	lsls	r3, r3, #16
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b6:	061b      	lsls	r3, r3, #24
 80044b8:	4933      	ldr	r1, [pc, #204]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044be:	4b33      	ldr	r3, [pc, #204]	; (800458c <HAL_RCC_OscConfig+0x4dc>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c4:	f7fc fffa 	bl	80014bc <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044cc:	f7fc fff6 	bl	80014bc <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e04d      	b.n	800457a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044de:	4b2a      	ldr	r3, [pc, #168]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0x41c>
 80044ea:	e045      	b.n	8004578 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ec:	4b27      	ldr	r3, [pc, #156]	; (800458c <HAL_RCC_OscConfig+0x4dc>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f2:	f7fc ffe3 	bl	80014bc <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044fa:	f7fc ffdf 	bl	80014bc <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e036      	b.n	800457a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450c:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f0      	bne.n	80044fa <HAL_RCC_OscConfig+0x44a>
 8004518:	e02e      	b.n	8004578 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e029      	b.n	800457a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004526:	4b18      	ldr	r3, [pc, #96]	; (8004588 <HAL_RCC_OscConfig+0x4d8>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	429a      	cmp	r2, r3
 8004538:	d11c      	bne.n	8004574 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d115      	bne.n	8004574 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800454e:	4013      	ands	r3, r2
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004554:	4293      	cmp	r3, r2
 8004556:	d10d      	bne.n	8004574 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004562:	429a      	cmp	r2, r3
 8004564:	d106      	bne.n	8004574 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004570:	429a      	cmp	r2, r3
 8004572:	d001      	beq.n	8004578 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40007000 	.word	0x40007000
 8004588:	40023800 	.word	0x40023800
 800458c:	42470060 	.word	0x42470060

08004590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0cc      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a4:	4b68      	ldr	r3, [pc, #416]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d90c      	bls.n	80045cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b65      	ldr	r3, [pc, #404]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ba:	4b63      	ldr	r3, [pc, #396]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0b8      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d020      	beq.n	800461a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e4:	4b59      	ldr	r3, [pc, #356]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	4a58      	ldr	r2, [pc, #352]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045fc:	4b53      	ldr	r3, [pc, #332]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	4a52      	ldr	r2, [pc, #328]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004608:	4b50      	ldr	r3, [pc, #320]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	494d      	ldr	r1, [pc, #308]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	4313      	orrs	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d044      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	4b47      	ldr	r3, [pc, #284]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d119      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e07f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d003      	beq.n	800464e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800464a:	2b03      	cmp	r3, #3
 800464c:	d107      	bne.n	800465e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464e:	4b3f      	ldr	r3, [pc, #252]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e06f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465e:	4b3b      	ldr	r3, [pc, #236]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e067      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800466e:	4b37      	ldr	r3, [pc, #220]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f023 0203 	bic.w	r2, r3, #3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	4934      	ldr	r1, [pc, #208]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	4313      	orrs	r3, r2
 800467e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004680:	f7fc ff1c 	bl	80014bc <HAL_GetTick>
 8004684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004686:	e00a      	b.n	800469e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004688:	f7fc ff18 	bl	80014bc <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	; 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e04f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469e:	4b2b      	ldr	r3, [pc, #172]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 020c 	and.w	r2, r3, #12
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d1eb      	bne.n	8004688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046b0:	4b25      	ldr	r3, [pc, #148]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d20c      	bcs.n	80046d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	4b22      	ldr	r3, [pc, #136]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c6:	4b20      	ldr	r3, [pc, #128]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e032      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e4:	4b19      	ldr	r3, [pc, #100]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4916      	ldr	r1, [pc, #88]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004702:	4b12      	ldr	r3, [pc, #72]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	490e      	ldr	r1, [pc, #56]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004716:	f000 f821 	bl	800475c <HAL_RCC_GetSysClockFreq>
 800471a:	4601      	mov	r1, r0
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	4a0a      	ldr	r2, [pc, #40]	; (8004750 <HAL_RCC_ClockConfig+0x1c0>)
 8004728:	5cd3      	ldrb	r3, [r2, r3]
 800472a:	fa21 f303 	lsr.w	r3, r1, r3
 800472e:	4a09      	ldr	r2, [pc, #36]	; (8004754 <HAL_RCC_ClockConfig+0x1c4>)
 8004730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004732:	4b09      	ldr	r3, [pc, #36]	; (8004758 <HAL_RCC_ClockConfig+0x1c8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fc fe7c 	bl	8001434 <HAL_InitTick>

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40023c00 	.word	0x40023c00
 800474c:	40023800 	.word	0x40023800
 8004750:	08009b5c 	.word	0x08009b5c
 8004754:	20000000 	.word	0x20000000
 8004758:	20000004 	.word	0x20000004

0800475c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800475c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	607b      	str	r3, [r7, #4]
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	2300      	movs	r3, #0
 800476c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004772:	4b63      	ldr	r3, [pc, #396]	; (8004900 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 030c 	and.w	r3, r3, #12
 800477a:	2b04      	cmp	r3, #4
 800477c:	d007      	beq.n	800478e <HAL_RCC_GetSysClockFreq+0x32>
 800477e:	2b08      	cmp	r3, #8
 8004780:	d008      	beq.n	8004794 <HAL_RCC_GetSysClockFreq+0x38>
 8004782:	2b00      	cmp	r3, #0
 8004784:	f040 80b4 	bne.w	80048f0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004788:	4b5e      	ldr	r3, [pc, #376]	; (8004904 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800478a:	60bb      	str	r3, [r7, #8]
       break;
 800478c:	e0b3      	b.n	80048f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800478e:	4b5e      	ldr	r3, [pc, #376]	; (8004908 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004790:	60bb      	str	r3, [r7, #8]
      break;
 8004792:	e0b0      	b.n	80048f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004794:	4b5a      	ldr	r3, [pc, #360]	; (8004900 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800479c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800479e:	4b58      	ldr	r3, [pc, #352]	; (8004900 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d04a      	beq.n	8004840 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047aa:	4b55      	ldr	r3, [pc, #340]	; (8004900 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	099b      	lsrs	r3, r3, #6
 80047b0:	f04f 0400 	mov.w	r4, #0
 80047b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	ea03 0501 	and.w	r5, r3, r1
 80047c0:	ea04 0602 	and.w	r6, r4, r2
 80047c4:	4629      	mov	r1, r5
 80047c6:	4632      	mov	r2, r6
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	f04f 0400 	mov.w	r4, #0
 80047d0:	0154      	lsls	r4, r2, #5
 80047d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047d6:	014b      	lsls	r3, r1, #5
 80047d8:	4619      	mov	r1, r3
 80047da:	4622      	mov	r2, r4
 80047dc:	1b49      	subs	r1, r1, r5
 80047de:	eb62 0206 	sbc.w	r2, r2, r6
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	f04f 0400 	mov.w	r4, #0
 80047ea:	0194      	lsls	r4, r2, #6
 80047ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047f0:	018b      	lsls	r3, r1, #6
 80047f2:	1a5b      	subs	r3, r3, r1
 80047f4:	eb64 0402 	sbc.w	r4, r4, r2
 80047f8:	f04f 0100 	mov.w	r1, #0
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	00e2      	lsls	r2, r4, #3
 8004802:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004806:	00d9      	lsls	r1, r3, #3
 8004808:	460b      	mov	r3, r1
 800480a:	4614      	mov	r4, r2
 800480c:	195b      	adds	r3, r3, r5
 800480e:	eb44 0406 	adc.w	r4, r4, r6
 8004812:	f04f 0100 	mov.w	r1, #0
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	0262      	lsls	r2, r4, #9
 800481c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004820:	0259      	lsls	r1, r3, #9
 8004822:	460b      	mov	r3, r1
 8004824:	4614      	mov	r4, r2
 8004826:	4618      	mov	r0, r3
 8004828:	4621      	mov	r1, r4
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f04f 0400 	mov.w	r4, #0
 8004830:	461a      	mov	r2, r3
 8004832:	4623      	mov	r3, r4
 8004834:	f7fb fd1c 	bl	8000270 <__aeabi_uldivmod>
 8004838:	4603      	mov	r3, r0
 800483a:	460c      	mov	r4, r1
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	e049      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004840:	4b2f      	ldr	r3, [pc, #188]	; (8004900 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	099b      	lsrs	r3, r3, #6
 8004846:	f04f 0400 	mov.w	r4, #0
 800484a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	ea03 0501 	and.w	r5, r3, r1
 8004856:	ea04 0602 	and.w	r6, r4, r2
 800485a:	4629      	mov	r1, r5
 800485c:	4632      	mov	r2, r6
 800485e:	f04f 0300 	mov.w	r3, #0
 8004862:	f04f 0400 	mov.w	r4, #0
 8004866:	0154      	lsls	r4, r2, #5
 8004868:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800486c:	014b      	lsls	r3, r1, #5
 800486e:	4619      	mov	r1, r3
 8004870:	4622      	mov	r2, r4
 8004872:	1b49      	subs	r1, r1, r5
 8004874:	eb62 0206 	sbc.w	r2, r2, r6
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	f04f 0400 	mov.w	r4, #0
 8004880:	0194      	lsls	r4, r2, #6
 8004882:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004886:	018b      	lsls	r3, r1, #6
 8004888:	1a5b      	subs	r3, r3, r1
 800488a:	eb64 0402 	sbc.w	r4, r4, r2
 800488e:	f04f 0100 	mov.w	r1, #0
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	00e2      	lsls	r2, r4, #3
 8004898:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800489c:	00d9      	lsls	r1, r3, #3
 800489e:	460b      	mov	r3, r1
 80048a0:	4614      	mov	r4, r2
 80048a2:	195b      	adds	r3, r3, r5
 80048a4:	eb44 0406 	adc.w	r4, r4, r6
 80048a8:	f04f 0100 	mov.w	r1, #0
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	02a2      	lsls	r2, r4, #10
 80048b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80048b6:	0299      	lsls	r1, r3, #10
 80048b8:	460b      	mov	r3, r1
 80048ba:	4614      	mov	r4, r2
 80048bc:	4618      	mov	r0, r3
 80048be:	4621      	mov	r1, r4
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f04f 0400 	mov.w	r4, #0
 80048c6:	461a      	mov	r2, r3
 80048c8:	4623      	mov	r3, r4
 80048ca:	f7fb fcd1 	bl	8000270 <__aeabi_uldivmod>
 80048ce:	4603      	mov	r3, r0
 80048d0:	460c      	mov	r4, r1
 80048d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048d4:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	0c1b      	lsrs	r3, r3, #16
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	3301      	adds	r3, #1
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	60bb      	str	r3, [r7, #8]
      break;
 80048ee:	e002      	b.n	80048f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048f0:	4b04      	ldr	r3, [pc, #16]	; (8004904 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048f2:	60bb      	str	r3, [r7, #8]
      break;
 80048f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048f6:	68bb      	ldr	r3, [r7, #8]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004900:	40023800 	.word	0x40023800
 8004904:	00f42400 	.word	0x00f42400
 8004908:	007a1200 	.word	0x007a1200

0800490c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <HAL_RCC_GetHCLKFreq+0x14>)
 8004912:	681b      	ldr	r3, [r3, #0]
}
 8004914:	4618      	mov	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	20000000 	.word	0x20000000

08004924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004928:	f7ff fff0 	bl	800490c <HAL_RCC_GetHCLKFreq>
 800492c:	4601      	mov	r1, r0
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	0a9b      	lsrs	r3, r3, #10
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	4a03      	ldr	r2, [pc, #12]	; (8004948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800493a:	5cd3      	ldrb	r3, [r2, r3]
 800493c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004940:	4618      	mov	r0, r3
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40023800 	.word	0x40023800
 8004948:	08009b6c 	.word	0x08009b6c

0800494c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004950:	f7ff ffdc 	bl	800490c <HAL_RCC_GetHCLKFreq>
 8004954:	4601      	mov	r1, r0
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	0b5b      	lsrs	r3, r3, #13
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	4a03      	ldr	r2, [pc, #12]	; (8004970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004962:	5cd3      	ldrb	r3, [r2, r3]
 8004964:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40023800 	.word	0x40023800
 8004970:	08009b6c 	.word	0x08009b6c

08004974 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d105      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004998:	2b00      	cmp	r3, #0
 800499a:	d035      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800499c:	4b62      	ldr	r3, [pc, #392]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049a2:	f7fc fd8b 	bl	80014bc <HAL_GetTick>
 80049a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049a8:	e008      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049aa:	f7fc fd87 	bl	80014bc <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e0b0      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049bc:	4b5b      	ldr	r3, [pc, #364]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1f0      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	019a      	lsls	r2, r3, #6
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	071b      	lsls	r3, r3, #28
 80049d4:	4955      	ldr	r1, [pc, #340]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049dc:	4b52      	ldr	r3, [pc, #328]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049de:	2201      	movs	r2, #1
 80049e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049e2:	f7fc fd6b 	bl	80014bc <HAL_GetTick>
 80049e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049e8:	e008      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049ea:	f7fc fd67 	bl	80014bc <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e090      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049fc:	4b4b      	ldr	r3, [pc, #300]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f0      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8083 	beq.w	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	4b44      	ldr	r3, [pc, #272]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	4a43      	ldr	r2, [pc, #268]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a24:	6413      	str	r3, [r2, #64]	; 0x40
 8004a26:	4b41      	ldr	r3, [pc, #260]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a32:	4b3f      	ldr	r3, [pc, #252]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a3e      	ldr	r2, [pc, #248]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a3e:	f7fc fd3d 	bl	80014bc <HAL_GetTick>
 8004a42:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a46:	f7fc fd39 	bl	80014bc <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e062      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a58:	4b35      	ldr	r3, [pc, #212]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a64:	4b31      	ldr	r3, [pc, #196]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d02f      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d028      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a82:	4b2a      	ldr	r3, [pc, #168]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a8c:	4b29      	ldr	r3, [pc, #164]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a8e:	2201      	movs	r2, #1
 8004a90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a92:	4b28      	ldr	r3, [pc, #160]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a98:	4a24      	ldr	r2, [pc, #144]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a9e:	4b23      	ldr	r3, [pc, #140]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d114      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004aaa:	f7fc fd07 	bl	80014bc <HAL_GetTick>
 8004aae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab2:	f7fc fd03 	bl	80014bc <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e02a      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac8:	4b18      	ldr	r3, [pc, #96]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0ee      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004adc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ae0:	d10d      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004ae2:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af6:	490d      	ldr	r1, [pc, #52]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	608b      	str	r3, [r1, #8]
 8004afc:	e005      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004afe:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b08:	6093      	str	r3, [r2, #8]
 8004b0a:	4b08      	ldr	r3, [pc, #32]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b16:	4905      	ldr	r1, [pc, #20]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	42470068 	.word	0x42470068
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	40007000 	.word	0x40007000
 8004b34:	42470e40 	.word	0x42470e40

08004b38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d13d      	bne.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004b56:	4b22      	ldr	r3, [pc, #136]	; (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b5e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d004      	beq.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d12f      	bne.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b6a:	4b1e      	ldr	r3, [pc, #120]	; (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b6c:	617b      	str	r3, [r7, #20]
          break;
 8004b6e:	e02f      	b.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b70:	4b1b      	ldr	r3, [pc, #108]	; (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b7c:	d108      	bne.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b7e:	4b18      	ldr	r3, [pc, #96]	; (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b86:	4a18      	ldr	r2, [pc, #96]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	e007      	b.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b90:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b98:	4a14      	ldr	r2, [pc, #80]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ba0:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba6:	099b      	lsrs	r3, r3, #6
 8004ba8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004bb4:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bba:	0f1b      	lsrs	r3, r3, #28
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc6:	617b      	str	r3, [r7, #20]
          break;
 8004bc8:	e002      	b.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]
          break;
 8004bce:	bf00      	nop
        }
      }
      break;
 8004bd0:	bf00      	nop
    }
  }
  return frequency;
 8004bd2:	697b      	ldr	r3, [r7, #20]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	371c      	adds	r7, #28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40023800 	.word	0x40023800
 8004be4:	00bb8000 	.word	0x00bb8000
 8004be8:	007a1200 	.word	0x007a1200
 8004bec:	00f42400 	.word	0x00f42400

08004bf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e056      	b.n	8004cb0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7fc fa69 	bl	80010f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2202      	movs	r2, #2
 8004c26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c38:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	ea42 0103 	orr.w	r1, r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	0c1b      	lsrs	r3, r3, #16
 8004c80:	f003 0104 	and.w	r1, r3, #4
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	69da      	ldr	r2, [r3, #28]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e01d      	b.n	8004d06 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fc fa50 	bl	8001184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f000 f95e 	bl	8004fb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0201 	orr.w	r2, r2, #1
 8004d24:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b06      	cmp	r3, #6
 8004d36:	d007      	beq.n	8004d48 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d122      	bne.n	8004db2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d11b      	bne.n	8004db2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f06f 0202 	mvn.w	r2, #2
 8004d82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f8ee 	bl	8004f7a <HAL_TIM_IC_CaptureCallback>
 8004d9e:	e005      	b.n	8004dac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f8e0 	bl	8004f66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f8f1 	bl	8004f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d122      	bne.n	8004e06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d11b      	bne.n	8004e06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f06f 0204 	mvn.w	r2, #4
 8004dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f8c4 	bl	8004f7a <HAL_TIM_IC_CaptureCallback>
 8004df2:	e005      	b.n	8004e00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f8b6 	bl	8004f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f8c7 	bl	8004f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d122      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d11b      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f06f 0208 	mvn.w	r2, #8
 8004e2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2204      	movs	r2, #4
 8004e30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f89a 	bl	8004f7a <HAL_TIM_IC_CaptureCallback>
 8004e46:	e005      	b.n	8004e54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f88c 	bl	8004f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f89d 	bl	8004f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d122      	bne.n	8004eae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f003 0310 	and.w	r3, r3, #16
 8004e72:	2b10      	cmp	r3, #16
 8004e74:	d11b      	bne.n	8004eae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f06f 0210 	mvn.w	r2, #16
 8004e7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2208      	movs	r2, #8
 8004e84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f870 	bl	8004f7a <HAL_TIM_IC_CaptureCallback>
 8004e9a:	e005      	b.n	8004ea8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f862 	bl	8004f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f873 	bl	8004f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d10e      	bne.n	8004eda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d107      	bne.n	8004eda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f06f 0201 	mvn.w	r2, #1
 8004ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7fb fb4b 	bl	8000570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee4:	2b80      	cmp	r3, #128	; 0x80
 8004ee6:	d10e      	bne.n	8004f06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef2:	2b80      	cmp	r3, #128	; 0x80
 8004ef4:	d107      	bne.n	8004f06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f903 	bl	800510c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d10e      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1e:	2b40      	cmp	r3, #64	; 0x40
 8004f20:	d107      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f838 	bl	8004fa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d10e      	bne.n	8004f5e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d107      	bne.n	8004f5e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f06f 0220 	mvn.w	r2, #32
 8004f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f8cd 	bl	80050f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f5e:	bf00      	nop
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
	...

08004fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a40      	ldr	r2, [pc, #256]	; (80050cc <TIM_Base_SetConfig+0x114>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d013      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd6:	d00f      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a3d      	ldr	r2, [pc, #244]	; (80050d0 <TIM_Base_SetConfig+0x118>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00b      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a3c      	ldr	r2, [pc, #240]	; (80050d4 <TIM_Base_SetConfig+0x11c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d007      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a3b      	ldr	r2, [pc, #236]	; (80050d8 <TIM_Base_SetConfig+0x120>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a3a      	ldr	r2, [pc, #232]	; (80050dc <TIM_Base_SetConfig+0x124>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d108      	bne.n	800500a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a2f      	ldr	r2, [pc, #188]	; (80050cc <TIM_Base_SetConfig+0x114>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d02b      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005018:	d027      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a2c      	ldr	r2, [pc, #176]	; (80050d0 <TIM_Base_SetConfig+0x118>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d023      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a2b      	ldr	r2, [pc, #172]	; (80050d4 <TIM_Base_SetConfig+0x11c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d01f      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a2a      	ldr	r2, [pc, #168]	; (80050d8 <TIM_Base_SetConfig+0x120>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d01b      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a29      	ldr	r2, [pc, #164]	; (80050dc <TIM_Base_SetConfig+0x124>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d017      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a28      	ldr	r2, [pc, #160]	; (80050e0 <TIM_Base_SetConfig+0x128>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d013      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a27      	ldr	r2, [pc, #156]	; (80050e4 <TIM_Base_SetConfig+0x12c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00f      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a26      	ldr	r2, [pc, #152]	; (80050e8 <TIM_Base_SetConfig+0x130>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00b      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a25      	ldr	r2, [pc, #148]	; (80050ec <TIM_Base_SetConfig+0x134>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d007      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a24      	ldr	r2, [pc, #144]	; (80050f0 <TIM_Base_SetConfig+0x138>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d003      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a23      	ldr	r2, [pc, #140]	; (80050f4 <TIM_Base_SetConfig+0x13c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d108      	bne.n	800507c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4313      	orrs	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <TIM_Base_SetConfig+0x114>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_Base_SetConfig+0xf8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a0c      	ldr	r2, [pc, #48]	; (80050dc <TIM_Base_SetConfig+0x124>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d103      	bne.n	80050b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	615a      	str	r2, [r3, #20]
}
 80050be:	bf00      	nop
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40010000 	.word	0x40010000
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40000800 	.word	0x40000800
 80050d8:	40000c00 	.word	0x40000c00
 80050dc:	40010400 	.word	0x40010400
 80050e0:	40014000 	.word	0x40014000
 80050e4:	40014400 	.word	0x40014400
 80050e8:	40014800 	.word	0x40014800
 80050ec:	40001800 	.word	0x40001800
 80050f0:	40001c00 	.word	0x40001c00
 80050f4:	40002000 	.word	0x40002000

080050f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e03f      	b.n	80051b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fc f844 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2224      	movs	r2, #36	; 0x24
 8005150:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005162:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 faf9 	bl	800575c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005178:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695a      	ldr	r2, [r3, #20]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005188:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005198:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	4613      	mov	r3, r2
 80051c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	d130      	bne.n	8005236 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <HAL_UART_Transmit_IT+0x26>
 80051da:	88fb      	ldrh	r3, [r7, #6]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e029      	b.n	8005238 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <HAL_UART_Transmit_IT+0x38>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e022      	b.n	8005238 <HAL_UART_Transmit_IT+0x7e>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	88fa      	ldrh	r2, [r7, #6]
 8005204:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	88fa      	ldrh	r2, [r7, #6]
 800520a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2221      	movs	r2, #33	; 0x21
 8005216:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005230:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	e000      	b.n	8005238 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005236:	2302      	movs	r3, #2
  }
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	4613      	mov	r3, r2
 8005250:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b20      	cmp	r3, #32
 800525c:	d140      	bne.n	80052e0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <HAL_UART_Receive_IT+0x26>
 8005264:	88fb      	ldrh	r3, [r7, #6]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e039      	b.n	80052e2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_UART_Receive_IT+0x38>
 8005278:	2302      	movs	r3, #2
 800527a:	e032      	b.n	80052e2 <HAL_UART_Receive_IT+0x9e>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	88fa      	ldrh	r2, [r7, #6]
 800528e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	88fa      	ldrh	r2, [r7, #6]
 8005294:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2222      	movs	r2, #34	; 0x22
 80052a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ba:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695a      	ldr	r2, [r3, #20]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0220 	orr.w	r2, r2, #32
 80052da:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	e000      	b.n	80052e2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80052e0:	2302      	movs	r3, #2
  }
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005310:	2300      	movs	r3, #0
 8005312:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10d      	bne.n	8005342 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b00      	cmp	r3, #0
 800532e:	d008      	beq.n	8005342 <HAL_UART_IRQHandler+0x52>
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f98c 	bl	8005658 <UART_Receive_IT>
      return;
 8005340:	e0d1      	b.n	80054e6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 80b0 	beq.w	80054aa <HAL_UART_IRQHandler+0x1ba>
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d105      	bne.n	8005360 <HAL_UART_IRQHandler+0x70>
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 80a5 	beq.w	80054aa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <HAL_UART_IRQHandler+0x90>
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005378:	f043 0201 	orr.w	r2, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <HAL_UART_IRQHandler+0xb0>
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005398:	f043 0202 	orr.w	r2, r3, #2
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <HAL_UART_IRQHandler+0xd0>
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b8:	f043 0204 	orr.w	r2, r3, #4
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00f      	beq.n	80053ea <HAL_UART_IRQHandler+0xfa>
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d104      	bne.n	80053de <HAL_UART_IRQHandler+0xee>
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d005      	beq.n	80053ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e2:	f043 0208 	orr.w	r2, r3, #8
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d078      	beq.n	80054e4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f003 0320 	and.w	r3, r3, #32
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d007      	beq.n	800540c <HAL_UART_IRQHandler+0x11c>
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f926 	bl	8005658 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005416:	2b40      	cmp	r3, #64	; 0x40
 8005418:	bf0c      	ite	eq
 800541a:	2301      	moveq	r3, #1
 800541c:	2300      	movne	r3, #0
 800541e:	b2db      	uxtb	r3, r3
 8005420:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d102      	bne.n	8005434 <HAL_UART_IRQHandler+0x144>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d031      	beq.n	8005498 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f86f 	bl	8005518 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d123      	bne.n	8005490 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695a      	ldr	r2, [r3, #20]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005456:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545c:	2b00      	cmp	r3, #0
 800545e:	d013      	beq.n	8005488 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005464:	4a21      	ldr	r2, [pc, #132]	; (80054ec <HAL_UART_IRQHandler+0x1fc>)
 8005466:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546c:	4618      	mov	r0, r3
 800546e:	f7fc f964 	bl	800173a <HAL_DMA_Abort_IT>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d016      	beq.n	80054a6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005482:	4610      	mov	r0, r2
 8005484:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005486:	e00e      	b.n	80054a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f83b 	bl	8005504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800548e:	e00a      	b.n	80054a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f837 	bl	8005504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005496:	e006      	b.n	80054a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f833 	bl	8005504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80054a4:	e01e      	b.n	80054e4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a6:	bf00      	nop
    return;
 80054a8:	e01c      	b.n	80054e4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d008      	beq.n	80054c6 <HAL_UART_IRQHandler+0x1d6>
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f85c 	bl	800557c <UART_Transmit_IT>
    return;
 80054c4:	e00f      	b.n	80054e6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <HAL_UART_IRQHandler+0x1f6>
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f8a4 	bl	8005628 <UART_EndTransmit_IT>
    return;
 80054e0:	bf00      	nop
 80054e2:	e000      	b.n	80054e6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80054e4:	bf00      	nop
  }
}
 80054e6:	3720      	adds	r7, #32
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	08005555 	.word	0x08005555

080054f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800552e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695a      	ldr	r2, [r3, #20]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0201 	bic.w	r2, r2, #1
 800553e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f7ff ffc8 	bl	8005504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005574:	bf00      	nop
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b21      	cmp	r3, #33	; 0x21
 800558e:	d144      	bne.n	800561a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005598:	d11a      	bne.n	80055d0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ae:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d105      	bne.n	80055c4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	1c9a      	adds	r2, r3, #2
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	621a      	str	r2, [r3, #32]
 80055c2:	e00e      	b.n	80055e2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	621a      	str	r2, [r3, #32]
 80055ce:	e008      	b.n	80055e2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	1c59      	adds	r1, r3, #1
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6211      	str	r1, [r2, #32]
 80055da:	781a      	ldrb	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	4619      	mov	r1, r3
 80055f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10f      	bne.n	8005616 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005604:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005614:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	e000      	b.n	800561c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800561a:	2302      	movs	r3, #2
  }
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800563e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff ff51 	bl	80054f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b22      	cmp	r3, #34	; 0x22
 800566a:	d171      	bne.n	8005750 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005674:	d123      	bne.n	80056be <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10e      	bne.n	80056a2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	1c9a      	adds	r2, r3, #2
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	629a      	str	r2, [r3, #40]	; 0x28
 80056a0:	e029      	b.n	80056f6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	629a      	str	r2, [r3, #40]	; 0x28
 80056bc:	e01b      	b.n	80056f6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10a      	bne.n	80056dc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6858      	ldr	r0, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d0:	1c59      	adds	r1, r3, #1
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6291      	str	r1, [r2, #40]	; 0x28
 80056d6:	b2c2      	uxtb	r2, r0
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	e00c      	b.n	80056f6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e8:	1c58      	adds	r0, r3, #1
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	6288      	str	r0, [r1, #40]	; 0x28
 80056ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29b      	uxth	r3, r3
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	4619      	mov	r1, r3
 8005704:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005706:	2b00      	cmp	r3, #0
 8005708:	d120      	bne.n	800574c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0220 	bic.w	r2, r2, #32
 8005718:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005728:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695a      	ldr	r2, [r3, #20]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0201 	bic.w	r2, r2, #1
 8005738:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fa ff2a 	bl	800059c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	e002      	b.n	8005752 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	e000      	b.n	8005752 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005750:	2302      	movs	r3, #2
  }
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
	...

0800575c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800575c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800579e:	f023 030c 	bic.w	r3, r3, #12
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	6812      	ldr	r2, [r2, #0]
 80057a6:	68f9      	ldr	r1, [r7, #12]
 80057a8:	430b      	orrs	r3, r1
 80057aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ca:	f040 818b 	bne.w	8005ae4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4ac1      	ldr	r2, [pc, #772]	; (8005ad8 <UART_SetConfig+0x37c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d005      	beq.n	80057e4 <UART_SetConfig+0x88>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4abf      	ldr	r2, [pc, #764]	; (8005adc <UART_SetConfig+0x380>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	f040 80bd 	bne.w	800595e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057e4:	f7ff f8b2 	bl	800494c <HAL_RCC_GetPCLK2Freq>
 80057e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	461d      	mov	r5, r3
 80057ee:	f04f 0600 	mov.w	r6, #0
 80057f2:	46a8      	mov	r8, r5
 80057f4:	46b1      	mov	r9, r6
 80057f6:	eb18 0308 	adds.w	r3, r8, r8
 80057fa:	eb49 0409 	adc.w	r4, r9, r9
 80057fe:	4698      	mov	r8, r3
 8005800:	46a1      	mov	r9, r4
 8005802:	eb18 0805 	adds.w	r8, r8, r5
 8005806:	eb49 0906 	adc.w	r9, r9, r6
 800580a:	f04f 0100 	mov.w	r1, #0
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005816:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800581a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800581e:	4688      	mov	r8, r1
 8005820:	4691      	mov	r9, r2
 8005822:	eb18 0005 	adds.w	r0, r8, r5
 8005826:	eb49 0106 	adc.w	r1, r9, r6
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	461d      	mov	r5, r3
 8005830:	f04f 0600 	mov.w	r6, #0
 8005834:	196b      	adds	r3, r5, r5
 8005836:	eb46 0406 	adc.w	r4, r6, r6
 800583a:	461a      	mov	r2, r3
 800583c:	4623      	mov	r3, r4
 800583e:	f7fa fd17 	bl	8000270 <__aeabi_uldivmod>
 8005842:	4603      	mov	r3, r0
 8005844:	460c      	mov	r4, r1
 8005846:	461a      	mov	r2, r3
 8005848:	4ba5      	ldr	r3, [pc, #660]	; (8005ae0 <UART_SetConfig+0x384>)
 800584a:	fba3 2302 	umull	r2, r3, r3, r2
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	461d      	mov	r5, r3
 8005858:	f04f 0600 	mov.w	r6, #0
 800585c:	46a9      	mov	r9, r5
 800585e:	46b2      	mov	sl, r6
 8005860:	eb19 0309 	adds.w	r3, r9, r9
 8005864:	eb4a 040a 	adc.w	r4, sl, sl
 8005868:	4699      	mov	r9, r3
 800586a:	46a2      	mov	sl, r4
 800586c:	eb19 0905 	adds.w	r9, r9, r5
 8005870:	eb4a 0a06 	adc.w	sl, sl, r6
 8005874:	f04f 0100 	mov.w	r1, #0
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005880:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005884:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005888:	4689      	mov	r9, r1
 800588a:	4692      	mov	sl, r2
 800588c:	eb19 0005 	adds.w	r0, r9, r5
 8005890:	eb4a 0106 	adc.w	r1, sl, r6
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	461d      	mov	r5, r3
 800589a:	f04f 0600 	mov.w	r6, #0
 800589e:	196b      	adds	r3, r5, r5
 80058a0:	eb46 0406 	adc.w	r4, r6, r6
 80058a4:	461a      	mov	r2, r3
 80058a6:	4623      	mov	r3, r4
 80058a8:	f7fa fce2 	bl	8000270 <__aeabi_uldivmod>
 80058ac:	4603      	mov	r3, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	461a      	mov	r2, r3
 80058b2:	4b8b      	ldr	r3, [pc, #556]	; (8005ae0 <UART_SetConfig+0x384>)
 80058b4:	fba3 1302 	umull	r1, r3, r3, r2
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	2164      	movs	r1, #100	; 0x64
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	3332      	adds	r3, #50	; 0x32
 80058c6:	4a86      	ldr	r2, [pc, #536]	; (8005ae0 <UART_SetConfig+0x384>)
 80058c8:	fba2 2303 	umull	r2, r3, r2, r3
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058d4:	4498      	add	r8, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	461d      	mov	r5, r3
 80058da:	f04f 0600 	mov.w	r6, #0
 80058de:	46a9      	mov	r9, r5
 80058e0:	46b2      	mov	sl, r6
 80058e2:	eb19 0309 	adds.w	r3, r9, r9
 80058e6:	eb4a 040a 	adc.w	r4, sl, sl
 80058ea:	4699      	mov	r9, r3
 80058ec:	46a2      	mov	sl, r4
 80058ee:	eb19 0905 	adds.w	r9, r9, r5
 80058f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80058f6:	f04f 0100 	mov.w	r1, #0
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005902:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005906:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800590a:	4689      	mov	r9, r1
 800590c:	4692      	mov	sl, r2
 800590e:	eb19 0005 	adds.w	r0, r9, r5
 8005912:	eb4a 0106 	adc.w	r1, sl, r6
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	461d      	mov	r5, r3
 800591c:	f04f 0600 	mov.w	r6, #0
 8005920:	196b      	adds	r3, r5, r5
 8005922:	eb46 0406 	adc.w	r4, r6, r6
 8005926:	461a      	mov	r2, r3
 8005928:	4623      	mov	r3, r4
 800592a:	f7fa fca1 	bl	8000270 <__aeabi_uldivmod>
 800592e:	4603      	mov	r3, r0
 8005930:	460c      	mov	r4, r1
 8005932:	461a      	mov	r2, r3
 8005934:	4b6a      	ldr	r3, [pc, #424]	; (8005ae0 <UART_SetConfig+0x384>)
 8005936:	fba3 1302 	umull	r1, r3, r3, r2
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	2164      	movs	r1, #100	; 0x64
 800593e:	fb01 f303 	mul.w	r3, r1, r3
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	3332      	adds	r3, #50	; 0x32
 8005948:	4a65      	ldr	r2, [pc, #404]	; (8005ae0 <UART_SetConfig+0x384>)
 800594a:	fba2 2303 	umull	r2, r3, r2, r3
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	f003 0207 	and.w	r2, r3, #7
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4442      	add	r2, r8
 800595a:	609a      	str	r2, [r3, #8]
 800595c:	e26f      	b.n	8005e3e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800595e:	f7fe ffe1 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 8005962:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	461d      	mov	r5, r3
 8005968:	f04f 0600 	mov.w	r6, #0
 800596c:	46a8      	mov	r8, r5
 800596e:	46b1      	mov	r9, r6
 8005970:	eb18 0308 	adds.w	r3, r8, r8
 8005974:	eb49 0409 	adc.w	r4, r9, r9
 8005978:	4698      	mov	r8, r3
 800597a:	46a1      	mov	r9, r4
 800597c:	eb18 0805 	adds.w	r8, r8, r5
 8005980:	eb49 0906 	adc.w	r9, r9, r6
 8005984:	f04f 0100 	mov.w	r1, #0
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005990:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005994:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005998:	4688      	mov	r8, r1
 800599a:	4691      	mov	r9, r2
 800599c:	eb18 0005 	adds.w	r0, r8, r5
 80059a0:	eb49 0106 	adc.w	r1, r9, r6
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	461d      	mov	r5, r3
 80059aa:	f04f 0600 	mov.w	r6, #0
 80059ae:	196b      	adds	r3, r5, r5
 80059b0:	eb46 0406 	adc.w	r4, r6, r6
 80059b4:	461a      	mov	r2, r3
 80059b6:	4623      	mov	r3, r4
 80059b8:	f7fa fc5a 	bl	8000270 <__aeabi_uldivmod>
 80059bc:	4603      	mov	r3, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	461a      	mov	r2, r3
 80059c2:	4b47      	ldr	r3, [pc, #284]	; (8005ae0 <UART_SetConfig+0x384>)
 80059c4:	fba3 2302 	umull	r2, r3, r3, r2
 80059c8:	095b      	lsrs	r3, r3, #5
 80059ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	461d      	mov	r5, r3
 80059d2:	f04f 0600 	mov.w	r6, #0
 80059d6:	46a9      	mov	r9, r5
 80059d8:	46b2      	mov	sl, r6
 80059da:	eb19 0309 	adds.w	r3, r9, r9
 80059de:	eb4a 040a 	adc.w	r4, sl, sl
 80059e2:	4699      	mov	r9, r3
 80059e4:	46a2      	mov	sl, r4
 80059e6:	eb19 0905 	adds.w	r9, r9, r5
 80059ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80059ee:	f04f 0100 	mov.w	r1, #0
 80059f2:	f04f 0200 	mov.w	r2, #0
 80059f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a02:	4689      	mov	r9, r1
 8005a04:	4692      	mov	sl, r2
 8005a06:	eb19 0005 	adds.w	r0, r9, r5
 8005a0a:	eb4a 0106 	adc.w	r1, sl, r6
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	461d      	mov	r5, r3
 8005a14:	f04f 0600 	mov.w	r6, #0
 8005a18:	196b      	adds	r3, r5, r5
 8005a1a:	eb46 0406 	adc.w	r4, r6, r6
 8005a1e:	461a      	mov	r2, r3
 8005a20:	4623      	mov	r3, r4
 8005a22:	f7fa fc25 	bl	8000270 <__aeabi_uldivmod>
 8005a26:	4603      	mov	r3, r0
 8005a28:	460c      	mov	r4, r1
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4b2c      	ldr	r3, [pc, #176]	; (8005ae0 <UART_SetConfig+0x384>)
 8005a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a32:	095b      	lsrs	r3, r3, #5
 8005a34:	2164      	movs	r1, #100	; 0x64
 8005a36:	fb01 f303 	mul.w	r3, r1, r3
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	3332      	adds	r3, #50	; 0x32
 8005a40:	4a27      	ldr	r2, [pc, #156]	; (8005ae0 <UART_SetConfig+0x384>)
 8005a42:	fba2 2303 	umull	r2, r3, r2, r3
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a4e:	4498      	add	r8, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	461d      	mov	r5, r3
 8005a54:	f04f 0600 	mov.w	r6, #0
 8005a58:	46a9      	mov	r9, r5
 8005a5a:	46b2      	mov	sl, r6
 8005a5c:	eb19 0309 	adds.w	r3, r9, r9
 8005a60:	eb4a 040a 	adc.w	r4, sl, sl
 8005a64:	4699      	mov	r9, r3
 8005a66:	46a2      	mov	sl, r4
 8005a68:	eb19 0905 	adds.w	r9, r9, r5
 8005a6c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a70:	f04f 0100 	mov.w	r1, #0
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a84:	4689      	mov	r9, r1
 8005a86:	4692      	mov	sl, r2
 8005a88:	eb19 0005 	adds.w	r0, r9, r5
 8005a8c:	eb4a 0106 	adc.w	r1, sl, r6
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	461d      	mov	r5, r3
 8005a96:	f04f 0600 	mov.w	r6, #0
 8005a9a:	196b      	adds	r3, r5, r5
 8005a9c:	eb46 0406 	adc.w	r4, r6, r6
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	f7fa fbe4 	bl	8000270 <__aeabi_uldivmod>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	460c      	mov	r4, r1
 8005aac:	461a      	mov	r2, r3
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <UART_SetConfig+0x384>)
 8005ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	2164      	movs	r1, #100	; 0x64
 8005ab8:	fb01 f303 	mul.w	r3, r1, r3
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	3332      	adds	r3, #50	; 0x32
 8005ac2:	4a07      	ldr	r2, [pc, #28]	; (8005ae0 <UART_SetConfig+0x384>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	f003 0207 	and.w	r2, r3, #7
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4442      	add	r2, r8
 8005ad4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005ad6:	e1b2      	b.n	8005e3e <UART_SetConfig+0x6e2>
 8005ad8:	40011000 	.word	0x40011000
 8005adc:	40011400 	.word	0x40011400
 8005ae0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4ad7      	ldr	r2, [pc, #860]	; (8005e48 <UART_SetConfig+0x6ec>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d005      	beq.n	8005afa <UART_SetConfig+0x39e>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4ad6      	ldr	r2, [pc, #856]	; (8005e4c <UART_SetConfig+0x6f0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	f040 80d1 	bne.w	8005c9c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005afa:	f7fe ff27 	bl	800494c <HAL_RCC_GetPCLK2Freq>
 8005afe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	469a      	mov	sl, r3
 8005b04:	f04f 0b00 	mov.w	fp, #0
 8005b08:	46d0      	mov	r8, sl
 8005b0a:	46d9      	mov	r9, fp
 8005b0c:	eb18 0308 	adds.w	r3, r8, r8
 8005b10:	eb49 0409 	adc.w	r4, r9, r9
 8005b14:	4698      	mov	r8, r3
 8005b16:	46a1      	mov	r9, r4
 8005b18:	eb18 080a 	adds.w	r8, r8, sl
 8005b1c:	eb49 090b 	adc.w	r9, r9, fp
 8005b20:	f04f 0100 	mov.w	r1, #0
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b2c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b30:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b34:	4688      	mov	r8, r1
 8005b36:	4691      	mov	r9, r2
 8005b38:	eb1a 0508 	adds.w	r5, sl, r8
 8005b3c:	eb4b 0609 	adc.w	r6, fp, r9
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	4619      	mov	r1, r3
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	f04f 0400 	mov.w	r4, #0
 8005b52:	0094      	lsls	r4, r2, #2
 8005b54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b58:	008b      	lsls	r3, r1, #2
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	4623      	mov	r3, r4
 8005b5e:	4628      	mov	r0, r5
 8005b60:	4631      	mov	r1, r6
 8005b62:	f7fa fb85 	bl	8000270 <__aeabi_uldivmod>
 8005b66:	4603      	mov	r3, r0
 8005b68:	460c      	mov	r4, r1
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	4bb8      	ldr	r3, [pc, #736]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b72:	095b      	lsrs	r3, r3, #5
 8005b74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	469b      	mov	fp, r3
 8005b7c:	f04f 0c00 	mov.w	ip, #0
 8005b80:	46d9      	mov	r9, fp
 8005b82:	46e2      	mov	sl, ip
 8005b84:	eb19 0309 	adds.w	r3, r9, r9
 8005b88:	eb4a 040a 	adc.w	r4, sl, sl
 8005b8c:	4699      	mov	r9, r3
 8005b8e:	46a2      	mov	sl, r4
 8005b90:	eb19 090b 	adds.w	r9, r9, fp
 8005b94:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b98:	f04f 0100 	mov.w	r1, #0
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ba4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ba8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bac:	4689      	mov	r9, r1
 8005bae:	4692      	mov	sl, r2
 8005bb0:	eb1b 0509 	adds.w	r5, fp, r9
 8005bb4:	eb4c 060a 	adc.w	r6, ip, sl
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	f04f 0400 	mov.w	r4, #0
 8005bca:	0094      	lsls	r4, r2, #2
 8005bcc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bd0:	008b      	lsls	r3, r1, #2
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	4623      	mov	r3, r4
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	4631      	mov	r1, r6
 8005bda:	f7fa fb49 	bl	8000270 <__aeabi_uldivmod>
 8005bde:	4603      	mov	r3, r0
 8005be0:	460c      	mov	r4, r1
 8005be2:	461a      	mov	r2, r3
 8005be4:	4b9a      	ldr	r3, [pc, #616]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005be6:	fba3 1302 	umull	r1, r3, r3, r2
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	2164      	movs	r1, #100	; 0x64
 8005bee:	fb01 f303 	mul.w	r3, r1, r3
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	3332      	adds	r3, #50	; 0x32
 8005bf8:	4a95      	ldr	r2, [pc, #596]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c04:	4498      	add	r8, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	469b      	mov	fp, r3
 8005c0a:	f04f 0c00 	mov.w	ip, #0
 8005c0e:	46d9      	mov	r9, fp
 8005c10:	46e2      	mov	sl, ip
 8005c12:	eb19 0309 	adds.w	r3, r9, r9
 8005c16:	eb4a 040a 	adc.w	r4, sl, sl
 8005c1a:	4699      	mov	r9, r3
 8005c1c:	46a2      	mov	sl, r4
 8005c1e:	eb19 090b 	adds.w	r9, r9, fp
 8005c22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c26:	f04f 0100 	mov.w	r1, #0
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c3a:	4689      	mov	r9, r1
 8005c3c:	4692      	mov	sl, r2
 8005c3e:	eb1b 0509 	adds.w	r5, fp, r9
 8005c42:	eb4c 060a 	adc.w	r6, ip, sl
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	f04f 0400 	mov.w	r4, #0
 8005c58:	0094      	lsls	r4, r2, #2
 8005c5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c5e:	008b      	lsls	r3, r1, #2
 8005c60:	461a      	mov	r2, r3
 8005c62:	4623      	mov	r3, r4
 8005c64:	4628      	mov	r0, r5
 8005c66:	4631      	mov	r1, r6
 8005c68:	f7fa fb02 	bl	8000270 <__aeabi_uldivmod>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	460c      	mov	r4, r1
 8005c70:	461a      	mov	r2, r3
 8005c72:	4b77      	ldr	r3, [pc, #476]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005c74:	fba3 1302 	umull	r1, r3, r3, r2
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	2164      	movs	r1, #100	; 0x64
 8005c7c:	fb01 f303 	mul.w	r3, r1, r3
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	3332      	adds	r3, #50	; 0x32
 8005c86:	4a72      	ldr	r2, [pc, #456]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005c88:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	f003 020f 	and.w	r2, r3, #15
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4442      	add	r2, r8
 8005c98:	609a      	str	r2, [r3, #8]
 8005c9a:	e0d0      	b.n	8005e3e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c9c:	f7fe fe42 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 8005ca0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	469a      	mov	sl, r3
 8005ca6:	f04f 0b00 	mov.w	fp, #0
 8005caa:	46d0      	mov	r8, sl
 8005cac:	46d9      	mov	r9, fp
 8005cae:	eb18 0308 	adds.w	r3, r8, r8
 8005cb2:	eb49 0409 	adc.w	r4, r9, r9
 8005cb6:	4698      	mov	r8, r3
 8005cb8:	46a1      	mov	r9, r4
 8005cba:	eb18 080a 	adds.w	r8, r8, sl
 8005cbe:	eb49 090b 	adc.w	r9, r9, fp
 8005cc2:	f04f 0100 	mov.w	r1, #0
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005cce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005cd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cd6:	4688      	mov	r8, r1
 8005cd8:	4691      	mov	r9, r2
 8005cda:	eb1a 0508 	adds.w	r5, sl, r8
 8005cde:	eb4b 0609 	adc.w	r6, fp, r9
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	f04f 0200 	mov.w	r2, #0
 8005cec:	f04f 0300 	mov.w	r3, #0
 8005cf0:	f04f 0400 	mov.w	r4, #0
 8005cf4:	0094      	lsls	r4, r2, #2
 8005cf6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cfa:	008b      	lsls	r3, r1, #2
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4623      	mov	r3, r4
 8005d00:	4628      	mov	r0, r5
 8005d02:	4631      	mov	r1, r6
 8005d04:	f7fa fab4 	bl	8000270 <__aeabi_uldivmod>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	4b50      	ldr	r3, [pc, #320]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005d10:	fba3 2302 	umull	r2, r3, r3, r2
 8005d14:	095b      	lsrs	r3, r3, #5
 8005d16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	469b      	mov	fp, r3
 8005d1e:	f04f 0c00 	mov.w	ip, #0
 8005d22:	46d9      	mov	r9, fp
 8005d24:	46e2      	mov	sl, ip
 8005d26:	eb19 0309 	adds.w	r3, r9, r9
 8005d2a:	eb4a 040a 	adc.w	r4, sl, sl
 8005d2e:	4699      	mov	r9, r3
 8005d30:	46a2      	mov	sl, r4
 8005d32:	eb19 090b 	adds.w	r9, r9, fp
 8005d36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d3a:	f04f 0100 	mov.w	r1, #0
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d4e:	4689      	mov	r9, r1
 8005d50:	4692      	mov	sl, r2
 8005d52:	eb1b 0509 	adds.w	r5, fp, r9
 8005d56:	eb4c 060a 	adc.w	r6, ip, sl
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	4619      	mov	r1, r3
 8005d60:	f04f 0200 	mov.w	r2, #0
 8005d64:	f04f 0300 	mov.w	r3, #0
 8005d68:	f04f 0400 	mov.w	r4, #0
 8005d6c:	0094      	lsls	r4, r2, #2
 8005d6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d72:	008b      	lsls	r3, r1, #2
 8005d74:	461a      	mov	r2, r3
 8005d76:	4623      	mov	r3, r4
 8005d78:	4628      	mov	r0, r5
 8005d7a:	4631      	mov	r1, r6
 8005d7c:	f7fa fa78 	bl	8000270 <__aeabi_uldivmod>
 8005d80:	4603      	mov	r3, r0
 8005d82:	460c      	mov	r4, r1
 8005d84:	461a      	mov	r2, r3
 8005d86:	4b32      	ldr	r3, [pc, #200]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005d88:	fba3 1302 	umull	r1, r3, r3, r2
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	2164      	movs	r1, #100	; 0x64
 8005d90:	fb01 f303 	mul.w	r3, r1, r3
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	3332      	adds	r3, #50	; 0x32
 8005d9a:	4a2d      	ldr	r2, [pc, #180]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005da0:	095b      	lsrs	r3, r3, #5
 8005da2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005da6:	4498      	add	r8, r3
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	469b      	mov	fp, r3
 8005dac:	f04f 0c00 	mov.w	ip, #0
 8005db0:	46d9      	mov	r9, fp
 8005db2:	46e2      	mov	sl, ip
 8005db4:	eb19 0309 	adds.w	r3, r9, r9
 8005db8:	eb4a 040a 	adc.w	r4, sl, sl
 8005dbc:	4699      	mov	r9, r3
 8005dbe:	46a2      	mov	sl, r4
 8005dc0:	eb19 090b 	adds.w	r9, r9, fp
 8005dc4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005dc8:	f04f 0100 	mov.w	r1, #0
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ddc:	4689      	mov	r9, r1
 8005dde:	4692      	mov	sl, r2
 8005de0:	eb1b 0509 	adds.w	r5, fp, r9
 8005de4:	eb4c 060a 	adc.w	r6, ip, sl
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	4619      	mov	r1, r3
 8005dee:	f04f 0200 	mov.w	r2, #0
 8005df2:	f04f 0300 	mov.w	r3, #0
 8005df6:	f04f 0400 	mov.w	r4, #0
 8005dfa:	0094      	lsls	r4, r2, #2
 8005dfc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e00:	008b      	lsls	r3, r1, #2
 8005e02:	461a      	mov	r2, r3
 8005e04:	4623      	mov	r3, r4
 8005e06:	4628      	mov	r0, r5
 8005e08:	4631      	mov	r1, r6
 8005e0a:	f7fa fa31 	bl	8000270 <__aeabi_uldivmod>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	460c      	mov	r4, r1
 8005e12:	461a      	mov	r2, r3
 8005e14:	4b0e      	ldr	r3, [pc, #56]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005e16:	fba3 1302 	umull	r1, r3, r3, r2
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	2164      	movs	r1, #100	; 0x64
 8005e1e:	fb01 f303 	mul.w	r3, r1, r3
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	3332      	adds	r3, #50	; 0x32
 8005e28:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2e:	095b      	lsrs	r3, r3, #5
 8005e30:	f003 020f 	and.w	r2, r3, #15
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4442      	add	r2, r8
 8005e3a:	609a      	str	r2, [r3, #8]
}
 8005e3c:	e7ff      	b.n	8005e3e <UART_SetConfig+0x6e2>
 8005e3e:	bf00      	nop
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e48:	40011000 	.word	0x40011000
 8005e4c:	40011400 	.word	0x40011400
 8005e50:	51eb851f 	.word	0x51eb851f

08005e54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e54:	b084      	sub	sp, #16
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	f107 001c 	add.w	r0, r7, #28
 8005e62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d122      	bne.n	8005eb2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d105      	bne.n	8005ea6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f94a 	bl	8006140 <USB_CoreReset>
 8005eac:	4603      	mov	r3, r0
 8005eae:	73fb      	strb	r3, [r7, #15]
 8005eb0:	e01a      	b.n	8005ee8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f93e 	bl	8006140 <USB_CoreReset>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	639a      	str	r2, [r3, #56]	; 0x38
 8005eda:	e005      	b.n	8005ee8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d10b      	bne.n	8005f06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f043 0206 	orr.w	r2, r3, #6
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f043 0220 	orr.w	r2, r3, #32
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f12:	b004      	add	sp, #16
 8005f14:	4770      	bx	lr

08005f16 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f043 0201 	orr.w	r2, r3, #1
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f023 0201 	bic.w	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	460b      	mov	r3, r1
 8005f64:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d106      	bne.n	8005f86 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	60da      	str	r2, [r3, #12]
 8005f84:	e00b      	b.n	8005f9e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f86:	78fb      	ldrb	r3, [r7, #3]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d106      	bne.n	8005f9a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60da      	str	r2, [r3, #12]
 8005f98:	e001      	b.n	8005f9e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e003      	b.n	8005fa6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005f9e:	2032      	movs	r0, #50	; 0x32
 8005fa0:	f7fb fa98 	bl	80014d4 <HAL_Delay>

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	019b      	lsls	r3, r3, #6
 8005fc2:	f043 0220 	orr.w	r2, r3, #32
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4a09      	ldr	r2, [pc, #36]	; (8005ff8 <USB_FlushTxFifo+0x48>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d901      	bls.n	8005fdc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e006      	b.n	8005fea <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d0f0      	beq.n	8005fca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	00030d40 	.word	0x00030d40

08005ffc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006004:	2300      	movs	r3, #0
 8006006:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2210      	movs	r2, #16
 800600c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3301      	adds	r3, #1
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4a09      	ldr	r2, [pc, #36]	; (800603c <USB_FlushRxFifo+0x40>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d901      	bls.n	8006020 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e006      	b.n	800602e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b10      	cmp	r3, #16
 800602a:	d0f0      	beq.n	800600e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	00030d40 	.word	0x00030d40

08006040 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006040:	b480      	push	{r7}
 8006042:	b089      	sub	sp, #36	; 0x24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	4611      	mov	r1, r2
 800604c:	461a      	mov	r2, r3
 800604e:	460b      	mov	r3, r1
 8006050:	71fb      	strb	r3, [r7, #7]
 8006052:	4613      	mov	r3, r2
 8006054:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800605e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006062:	2b00      	cmp	r3, #0
 8006064:	d11a      	bne.n	800609c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006066:	88bb      	ldrh	r3, [r7, #4]
 8006068:	3303      	adds	r3, #3
 800606a:	089b      	lsrs	r3, r3, #2
 800606c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800606e:	2300      	movs	r3, #0
 8006070:	61bb      	str	r3, [r7, #24]
 8006072:	e00f      	b.n	8006094 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006074:	79fb      	ldrb	r3, [r7, #7]
 8006076:	031a      	lsls	r2, r3, #12
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	4413      	add	r3, r2
 800607c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006080:	461a      	mov	r2, r3
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	3304      	adds	r3, #4
 800608c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	3301      	adds	r3, #1
 8006092:	61bb      	str	r3, [r7, #24]
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	429a      	cmp	r2, r3
 800609a:	d3eb      	bcc.n	8006074 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3724      	adds	r7, #36	; 0x24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b089      	sub	sp, #36	; 0x24
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	4613      	mov	r3, r2
 80060b6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80060c0:	88fb      	ldrh	r3, [r7, #6]
 80060c2:	3303      	adds	r3, #3
 80060c4:	089b      	lsrs	r3, r3, #2
 80060c6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80060c8:	2300      	movs	r3, #0
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	e00b      	b.n	80060e6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	601a      	str	r2, [r3, #0]
    pDest++;
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	3304      	adds	r3, #4
 80060de:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	3301      	adds	r3, #1
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d3ef      	bcc.n	80060ce <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80060ee:	69fb      	ldr	r3, [r7, #28]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3724      	adds	r7, #36	; 0x24
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4013      	ands	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006114:	68fb      	ldr	r3, [r7, #12]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	f003 0301 	and.w	r3, r3, #1
}
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006148:	2300      	movs	r3, #0
 800614a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	3301      	adds	r3, #1
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4a13      	ldr	r2, [pc, #76]	; (80061a4 <USB_CoreReset+0x64>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d901      	bls.n	800615e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e01b      	b.n	8006196 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	daf2      	bge.n	800614c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f043 0201 	orr.w	r2, r3, #1
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3301      	adds	r3, #1
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4a09      	ldr	r2, [pc, #36]	; (80061a4 <USB_CoreReset+0x64>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d901      	bls.n	8006188 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e006      	b.n	8006196 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b01      	cmp	r3, #1
 8006192:	d0f0      	beq.n	8006176 <USB_CoreReset+0x36>

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	00030d40 	.word	0x00030d40

080061a8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061a8:	b084      	sub	sp, #16
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	f107 001c 	add.w	r0, r7, #28
 80061b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061c4:	461a      	mov	r2, r3
 80061c6:	2300      	movs	r3, #0
 80061c8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061da:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d018      	beq.n	800622c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d10a      	bne.n	8006216 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800620e:	f043 0304 	orr.w	r3, r3, #4
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	e014      	b.n	8006240 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006224:	f023 0304 	bic.w	r3, r3, #4
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	e009      	b.n	8006240 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800623a:	f023 0304 	bic.w	r3, r3, #4
 800623e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006240:	2110      	movs	r1, #16
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7ff feb4 	bl	8005fb0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7ff fed7 	bl	8005ffc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	e015      	b.n	8006280 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4413      	add	r3, r2
 800625c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006260:	461a      	mov	r2, r3
 8006262:	f04f 33ff 	mov.w	r3, #4294967295
 8006266:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4413      	add	r3, r2
 8006270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006274:	461a      	mov	r2, r3
 8006276:	2300      	movs	r3, #0
 8006278:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3301      	adds	r3, #1
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	429a      	cmp	r2, r3
 8006286:	d3e5      	bcc.n	8006254 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006288:	2101      	movs	r1, #1
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f8ac 	bl	80063e8 <USB_DriveVbus>

  HAL_Delay(200U);
 8006290:	20c8      	movs	r0, #200	; 0xc8
 8006292:	f7fb f91f 	bl	80014d4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f04f 32ff 	mov.w	r2, #4294967295
 80062a2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00b      	beq.n	80062c8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062b6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a14      	ldr	r2, [pc, #80]	; (800630c <USB_HostInit+0x164>)
 80062bc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a13      	ldr	r2, [pc, #76]	; (8006310 <USB_HostInit+0x168>)
 80062c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80062c6:	e009      	b.n	80062dc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2280      	movs	r2, #128	; 0x80
 80062cc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a10      	ldr	r2, [pc, #64]	; (8006314 <USB_HostInit+0x16c>)
 80062d2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a10      	ldr	r2, [pc, #64]	; (8006318 <USB_HostInit+0x170>)
 80062d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d105      	bne.n	80062ee <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f043 0210 	orr.w	r2, r3, #16
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699a      	ldr	r2, [r3, #24]
 80062f2:	4b0a      	ldr	r3, [pc, #40]	; (800631c <USB_HostInit+0x174>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006306:	b004      	add	sp, #16
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	01000200 	.word	0x01000200
 8006310:	00e00300 	.word	0x00e00300
 8006314:	00600080 	.word	0x00600080
 8006318:	004000e0 	.word	0x004000e0
 800631c:	a3200008 	.word	0xa3200008

08006320 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800633e:	f023 0303 	bic.w	r3, r3, #3
 8006342:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	f003 0303 	and.w	r3, r3, #3
 8006352:	68f9      	ldr	r1, [r7, #12]
 8006354:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006358:	4313      	orrs	r3, r2
 800635a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d107      	bne.n	8006372 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006368:	461a      	mov	r2, r3
 800636a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800636e:	6053      	str	r3, [r2, #4]
 8006370:	e009      	b.n	8006386 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006372:	78fb      	ldrb	r3, [r7, #3]
 8006374:	2b02      	cmp	r3, #2
 8006376:	d106      	bne.n	8006386 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800637e:	461a      	mov	r2, r3
 8006380:	f241 7370 	movw	r3, #6000	; 0x1770
 8006384:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80063b4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80063c4:	2064      	movs	r0, #100	; 0x64
 80063c6:	f7fb f885 	bl	80014d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80063d8:	200a      	movs	r0, #10
 80063da:	f7fb f87b 	bl	80014d4 <HAL_Delay>

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800640c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d109      	bne.n	800642c <USB_DriveVbus+0x44>
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d106      	bne.n	800642c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006426:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800642a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006436:	d109      	bne.n	800644c <USB_DriveVbus+0x64>
 8006438:	78fb      	ldrb	r3, [r7, #3]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d106      	bne.n	800644c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800644a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800645a:	b480      	push	{r7}
 800645c:	b085      	sub	sp, #20
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	0c5b      	lsrs	r3, r3, #17
 8006478:	f003 0303 	and.w	r3, r3, #3
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	b29b      	uxth	r3, r3
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	4608      	mov	r0, r1
 80064b6:	4611      	mov	r1, r2
 80064b8:	461a      	mov	r2, r3
 80064ba:	4603      	mov	r3, r0
 80064bc:	70fb      	strb	r3, [r7, #3]
 80064be:	460b      	mov	r3, r1
 80064c0:	70bb      	strb	r3, [r7, #2]
 80064c2:	4613      	mov	r3, r2
 80064c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064da:	461a      	mov	r2, r3
 80064dc:	f04f 33ff 	mov.w	r3, #4294967295
 80064e0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80064e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d87e      	bhi.n	80065e8 <USB_HC_Init+0x13c>
 80064ea:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <USB_HC_Init+0x44>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	08006501 	.word	0x08006501
 80064f4:	080065ab 	.word	0x080065ab
 80064f8:	08006501 	.word	0x08006501
 80064fc:	0800656d 	.word	0x0800656d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4413      	add	r3, r2
 8006508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650c:	461a      	mov	r2, r3
 800650e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006512:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006514:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006518:	2b00      	cmp	r3, #0
 800651a:	da10      	bge.n	800653e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4413      	add	r3, r2
 8006524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	78fa      	ldrb	r2, [r7, #3]
 800652c:	0151      	lsls	r1, r2, #5
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	440a      	add	r2, r1
 8006532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800653a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800653c:	e057      	b.n	80065ee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006546:	2b00      	cmp	r3, #0
 8006548:	d051      	beq.n	80065ee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800654a:	78fb      	ldrb	r3, [r7, #3]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4413      	add	r3, r2
 8006552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	78fa      	ldrb	r2, [r7, #3]
 800655a:	0151      	lsls	r1, r2, #5
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	440a      	add	r2, r1
 8006560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006564:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006568:	60d3      	str	r3, [r2, #12]
      break;
 800656a:	e040      	b.n	80065ee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	4413      	add	r3, r2
 8006574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006578:	461a      	mov	r2, r3
 800657a:	f240 639d 	movw	r3, #1693	; 0x69d
 800657e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006580:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006584:	2b00      	cmp	r3, #0
 8006586:	da34      	bge.n	80065f2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006588:	78fb      	ldrb	r3, [r7, #3]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	4413      	add	r3, r2
 8006590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	78fa      	ldrb	r2, [r7, #3]
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	440a      	add	r2, r1
 800659e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065a6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80065a8:	e023      	b.n	80065f2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80065aa:	78fb      	ldrb	r3, [r7, #3]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b6:	461a      	mov	r2, r3
 80065b8:	f240 2325 	movw	r3, #549	; 0x225
 80065bc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80065be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	da17      	bge.n	80065f6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80065c6:	78fb      	ldrb	r3, [r7, #3]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	78fa      	ldrb	r2, [r7, #3]
 80065d6:	0151      	lsls	r1, r2, #5
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	440a      	add	r2, r1
 80065dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065e0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80065e4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80065e6:	e006      	b.n	80065f6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	75fb      	strb	r3, [r7, #23]
      break;
 80065ec:	e004      	b.n	80065f8 <USB_HC_Init+0x14c>
      break;
 80065ee:	bf00      	nop
 80065f0:	e002      	b.n	80065f8 <USB_HC_Init+0x14c>
      break;
 80065f2:	bf00      	nop
 80065f4:	e000      	b.n	80065f8 <USB_HC_Init+0x14c>
      break;
 80065f6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065fe:	699a      	ldr	r2, [r3, #24]
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	f003 030f 	and.w	r3, r3, #15
 8006606:	2101      	movs	r1, #1
 8006608:	fa01 f303 	lsl.w	r3, r1, r3
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006612:	4313      	orrs	r3, r2
 8006614:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006622:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006626:	2b00      	cmp	r3, #0
 8006628:	da03      	bge.n	8006632 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800662a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800662e:	613b      	str	r3, [r7, #16]
 8006630:	e001      	b.n	8006636 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006636:	f897 3020 	ldrb.w	r3, [r7, #32]
 800663a:	2b02      	cmp	r3, #2
 800663c:	d103      	bne.n	8006646 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800663e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	e001      	b.n	800664a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800664a:	787b      	ldrb	r3, [r7, #1]
 800664c:	059b      	lsls	r3, r3, #22
 800664e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006652:	78bb      	ldrb	r3, [r7, #2]
 8006654:	02db      	lsls	r3, r3, #11
 8006656:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800665a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800665c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006660:	049b      	lsls	r3, r3, #18
 8006662:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006666:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006668:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800666a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800666e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006674:	78fb      	ldrb	r3, [r7, #3]
 8006676:	0159      	lsls	r1, r3, #5
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	440b      	add	r3, r1
 800667c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006680:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006686:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006688:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800668c:	2b03      	cmp	r3, #3
 800668e:	d10f      	bne.n	80066b0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	4413      	add	r3, r2
 8006698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	78fa      	ldrb	r2, [r7, #3]
 80066a0:	0151      	lsls	r1, r2, #5
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	440a      	add	r2, r1
 80066a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066ae:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80066b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop

080066c0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08c      	sub	sp, #48	; 0x30
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	4613      	mov	r3, r2
 80066cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	785b      	ldrb	r3, [r3, #1]
 80066d6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80066d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066dc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d028      	beq.n	800673c <USB_HC_StartXfer+0x7c>
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	791b      	ldrb	r3, [r3, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d124      	bne.n	800673c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10b      	bne.n	8006710 <USB_HC_StartXfer+0x50>
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	795b      	ldrb	r3, [r3, #5]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d107      	bne.n	8006710 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	785b      	ldrb	r3, [r3, #1]
 8006704:	4619      	mov	r1, r3
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 fa30 	bl	8006b6c <USB_DoPing>
      return HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	e114      	b.n	800693a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d112      	bne.n	800673c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	4413      	add	r3, r2
 800671e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	69fa      	ldr	r2, [r7, #28]
 8006726:	0151      	lsls	r1, r2, #5
 8006728:	6a3a      	ldr	r2, [r7, #32]
 800672a:	440a      	add	r2, r1
 800672c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006730:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006734:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2200      	movs	r2, #0
 800673a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d018      	beq.n	8006776 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	8912      	ldrh	r2, [r2, #8]
 800674c:	4413      	add	r3, r2
 800674e:	3b01      	subs	r3, #1
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	8912      	ldrh	r2, [r2, #8]
 8006754:	fbb3 f3f2 	udiv	r3, r3, r2
 8006758:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800675a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800675c:	8b7b      	ldrh	r3, [r7, #26]
 800675e:	429a      	cmp	r2, r3
 8006760:	d90b      	bls.n	800677a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006762:	8b7b      	ldrh	r3, [r7, #26]
 8006764:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006766:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	8912      	ldrh	r2, [r2, #8]
 800676c:	fb02 f203 	mul.w	r2, r2, r3
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	611a      	str	r2, [r3, #16]
 8006774:	e001      	b.n	800677a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006776:	2301      	movs	r3, #1
 8006778:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	78db      	ldrb	r3, [r3, #3]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d006      	beq.n	8006790 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006782:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	8912      	ldrh	r2, [r2, #8]
 8006788:	fb02 f203 	mul.w	r2, r2, r3
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006798:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800679a:	04d9      	lsls	r1, r3, #19
 800679c:	4b69      	ldr	r3, [pc, #420]	; (8006944 <USB_HC_StartXfer+0x284>)
 800679e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80067a0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	7a9b      	ldrb	r3, [r3, #10]
 80067a6:	075b      	lsls	r3, r3, #29
 80067a8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80067ac:	69f9      	ldr	r1, [r7, #28]
 80067ae:	0148      	lsls	r0, r1, #5
 80067b0:	6a39      	ldr	r1, [r7, #32]
 80067b2:	4401      	add	r1, r0
 80067b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067b8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80067ba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80067bc:	79fb      	ldrb	r3, [r7, #7]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d009      	beq.n	80067d6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	68d9      	ldr	r1, [r3, #12]
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d2:	460a      	mov	r2, r1
 80067d4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	bf0c      	ite	eq
 80067e6:	2301      	moveq	r3, #1
 80067e8:	2300      	movne	r3, #0
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	69fa      	ldr	r2, [r7, #28]
 80067fe:	0151      	lsls	r1, r2, #5
 8006800:	6a3a      	ldr	r2, [r7, #32]
 8006802:	440a      	add	r2, r1
 8006804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006808:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800680c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	4413      	add	r3, r2
 8006816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	7e7b      	ldrb	r3, [r7, #25]
 800681e:	075b      	lsls	r3, r3, #29
 8006820:	69f9      	ldr	r1, [r7, #28]
 8006822:	0148      	lsls	r0, r1, #5
 8006824:	6a39      	ldr	r1, [r7, #32]
 8006826:	4401      	add	r1, r0
 8006828:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800682c:	4313      	orrs	r3, r2
 800682e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a42      	ldr	r2, [pc, #264]	; (8006948 <USB_HC_StartXfer+0x288>)
 8006840:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006842:	4b41      	ldr	r3, [pc, #260]	; (8006948 <USB_HC_StartXfer+0x288>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800684a:	4a3f      	ldr	r2, [pc, #252]	; (8006948 <USB_HC_StartXfer+0x288>)
 800684c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	78db      	ldrb	r3, [r3, #3]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d006      	beq.n	8006864 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006856:	4b3c      	ldr	r3, [pc, #240]	; (8006948 <USB_HC_StartXfer+0x288>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685e:	4a3a      	ldr	r2, [pc, #232]	; (8006948 <USB_HC_StartXfer+0x288>)
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	e005      	b.n	8006870 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006864:	4b38      	ldr	r3, [pc, #224]	; (8006948 <USB_HC_StartXfer+0x288>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800686c:	4a36      	ldr	r2, [pc, #216]	; (8006948 <USB_HC_StartXfer+0x288>)
 800686e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006870:	4b35      	ldr	r3, [pc, #212]	; (8006948 <USB_HC_StartXfer+0x288>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006878:	4a33      	ldr	r2, [pc, #204]	; (8006948 <USB_HC_StartXfer+0x288>)
 800687a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	4413      	add	r3, r2
 8006884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006888:	461a      	mov	r2, r3
 800688a:	4b2f      	ldr	r3, [pc, #188]	; (8006948 <USB_HC_StartXfer+0x288>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006890:	79fb      	ldrb	r3, [r7, #7]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	e04f      	b.n	800693a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	78db      	ldrb	r3, [r3, #3]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d14a      	bne.n	8006938 <USB_HC_StartXfer+0x278>
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d046      	beq.n	8006938 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	79db      	ldrb	r3, [r3, #7]
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d830      	bhi.n	8006914 <USB_HC_StartXfer+0x254>
 80068b2:	a201      	add	r2, pc, #4	; (adr r2, 80068b8 <USB_HC_StartXfer+0x1f8>)
 80068b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b8:	080068c9 	.word	0x080068c9
 80068bc:	080068ed 	.word	0x080068ed
 80068c0:	080068c9 	.word	0x080068c9
 80068c4:	080068ed 	.word	0x080068ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	3303      	adds	r3, #3
 80068ce:	089b      	lsrs	r3, r3, #2
 80068d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80068d2:	8afa      	ldrh	r2, [r7, #22]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d8:	b29b      	uxth	r3, r3
 80068da:	429a      	cmp	r2, r3
 80068dc:	d91c      	bls.n	8006918 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	f043 0220 	orr.w	r2, r3, #32
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80068ea:	e015      	b.n	8006918 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	3303      	adds	r3, #3
 80068f2:	089b      	lsrs	r3, r3, #2
 80068f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80068f6:	8afa      	ldrh	r2, [r7, #22]
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	b29b      	uxth	r3, r3
 8006902:	429a      	cmp	r2, r3
 8006904:	d90a      	bls.n	800691c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	619a      	str	r2, [r3, #24]
        }
        break;
 8006912:	e003      	b.n	800691c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006914:	bf00      	nop
 8006916:	e002      	b.n	800691e <USB_HC_StartXfer+0x25e>
        break;
 8006918:	bf00      	nop
 800691a:	e000      	b.n	800691e <USB_HC_StartXfer+0x25e>
        break;
 800691c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	68d9      	ldr	r1, [r3, #12]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	785a      	ldrb	r2, [r3, #1]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	b298      	uxth	r0, r3
 800692c:	2300      	movs	r3, #0
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	4603      	mov	r3, r0
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f7ff fb84 	bl	8006040 <USB_WritePacket>
  }

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3728      	adds	r7, #40	; 0x28
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	1ff80000 	.word	0x1ff80000
 8006948:	200000b8 	.word	0x200000b8

0800694c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	b29b      	uxth	r3, r3
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800696e:	b480      	push	{r7}
 8006970:	b087      	sub	sp, #28
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	460b      	mov	r3, r1
 8006978:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800697e:	78fb      	ldrb	r3, [r7, #3]
 8006980:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	4413      	add	r3, r2
 800698e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	0c9b      	lsrs	r3, r3, #18
 8006996:	f003 0303 	and.w	r3, r3, #3
 800699a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d002      	beq.n	80069a8 <USB_HC_Halt+0x3a>
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d16c      	bne.n	8006a82 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	0151      	lsls	r1, r2, #5
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	440a      	add	r2, r1
 80069be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069c6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d143      	bne.n	8006a5c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	0151      	lsls	r1, r2, #5
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	440a      	add	r2, r1
 80069ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	0151      	lsls	r1, r2, #5
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	440a      	add	r2, r1
 8006a0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a12:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a32:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	3301      	adds	r3, #1
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a40:	d81d      	bhi.n	8006a7e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a58:	d0ec      	beq.n	8006a34 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a5a:	e080      	b.n	8006b5e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	0151      	lsls	r1, r2, #5
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	440a      	add	r2, r1
 8006a72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a7a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a7c:	e06f      	b.n	8006b5e <USB_HC_Halt+0x1f0>
          break;
 8006a7e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a80:	e06d      	b.n	8006b5e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aa0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d143      	bne.n	8006b3a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	0151      	lsls	r1, r2, #5
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	440a      	add	r2, r1
 8006ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ad0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	0151      	lsls	r1, r2, #5
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	440a      	add	r2, r1
 8006ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006af0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	0151      	lsls	r1, r2, #5
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	440a      	add	r2, r1
 8006b08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b10:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	3301      	adds	r3, #1
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b1e:	d81d      	bhi.n	8006b5c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b36:	d0ec      	beq.n	8006b12 <USB_HC_Halt+0x1a4>
 8006b38:	e011      	b.n	8006b5e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	e000      	b.n	8006b5e <USB_HC_Halt+0x1f0>
          break;
 8006b5c:	bf00      	nop
    }
  }

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006b80:	2301      	movs	r3, #1
 8006b82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	04da      	lsls	r2, r3, #19
 8006b88:	4b15      	ldr	r3, [pc, #84]	; (8006be0 <USB_DoPing+0x74>)
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	0151      	lsls	r1, r2, #5
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	440a      	add	r2, r1
 8006b94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b9c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bb4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bbc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bca:	461a      	mov	r2, r3
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	1ff80000 	.word	0x1ff80000

08006be4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff f99f 	bl	8005f38 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006bfa:	2110      	movs	r1, #16
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff f9d7 	bl	8005fb0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff f9fa 	bl	8005ffc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006c08:	2300      	movs	r3, #0
 8006c0a:	613b      	str	r3, [r7, #16]
 8006c0c:	e01f      	b.n	8006c4e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c24:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c34:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c42:	461a      	mov	r2, r3
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2b0f      	cmp	r3, #15
 8006c52:	d9dc      	bls.n	8006c0e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006c54:	2300      	movs	r3, #0
 8006c56:	613b      	str	r3, [r7, #16]
 8006c58:	e034      	b.n	8006cc4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c70:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c78:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c80:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8e:	461a      	mov	r2, r3
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	3301      	adds	r3, #1
 8006c98:	617b      	str	r3, [r7, #20]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ca0:	d80c      	bhi.n	8006cbc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cb8:	d0ec      	beq.n	8006c94 <USB_StopHost+0xb0>
 8006cba:	e000      	b.n	8006cbe <USB_StopHost+0xda>
        break;
 8006cbc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	613b      	str	r3, [r7, #16]
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	2b0f      	cmp	r3, #15
 8006cc8:	d9c7      	bls.n	8006c5a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f04f 32ff 	mov.w	r2, #4294967295
 8006cde:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff f918 	bl	8005f16 <USB_EnableGlobalInt>

  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3718      	adds	r7, #24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006cf0:	b590      	push	{r4, r7, lr}
 8006cf2:	b089      	sub	sp, #36	; 0x24
 8006cf4:	af04      	add	r7, sp, #16
 8006cf6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	2102      	movs	r1, #2
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fc68 	bl	80075d4 <USBH_FindInterface>
 8006d04:	4603      	mov	r3, r0
 8006d06:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
 8006d0a:	2bff      	cmp	r3, #255	; 0xff
 8006d0c:	d002      	beq.n	8006d14 <USBH_CDC_InterfaceInit+0x24>
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d901      	bls.n	8006d18 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d14:	2302      	movs	r3, #2
 8006d16:	e13d      	b.n	8006f94 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fc3d 	bl	800759c <USBH_SelectInterface>
 8006d22:	4603      	mov	r3, r0
 8006d24:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006d26:	7bbb      	ldrb	r3, [r7, #14]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e131      	b.n	8006f94 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006d36:	2050      	movs	r0, #80	; 0x50
 8006d38:	f002 fa04 	bl	8009144 <malloc>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006d50:	2302      	movs	r3, #2
 8006d52:	e11f      	b.n	8006f94 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006d54:	2250      	movs	r2, #80	; 0x50
 8006d56:	2100      	movs	r1, #0
 8006d58:	68b8      	ldr	r0, [r7, #8]
 8006d5a:	f002 fa0e 	bl	800917a <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	211a      	movs	r1, #26
 8006d64:	fb01 f303 	mul.w	r3, r1, r3
 8006d68:	4413      	add	r3, r2
 8006d6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	b25b      	sxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da15      	bge.n	8006da2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d76:	7bfb      	ldrb	r3, [r7, #15]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	211a      	movs	r1, #26
 8006d7c:	fb01 f303 	mul.w	r3, r1, r3
 8006d80:	4413      	add	r3, r2
 8006d82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d86:	781a      	ldrb	r2, [r3, #0]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	211a      	movs	r1, #26
 8006d92:	fb01 f303 	mul.w	r3, r1, r3
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d9c:	881a      	ldrh	r2, [r3, #0]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	785b      	ldrb	r3, [r3, #1]
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 fe36 	bl	8008a1a <USBH_AllocPipe>
 8006dae:	4603      	mov	r3, r0
 8006db0:	461a      	mov	r2, r3
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	7819      	ldrb	r1, [r3, #0]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	7858      	ldrb	r0, [r3, #1]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	8952      	ldrh	r2, [r2, #10]
 8006dce:	9202      	str	r2, [sp, #8]
 8006dd0:	2203      	movs	r2, #3
 8006dd2:	9201      	str	r2, [sp, #4]
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	4623      	mov	r3, r4
 8006dd8:	4602      	mov	r2, r0
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 fdee 	bl	80089bc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2200      	movs	r2, #0
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f002 f8fb 	bl	8008fe4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006dee:	2300      	movs	r3, #0
 8006df0:	2200      	movs	r2, #0
 8006df2:	210a      	movs	r1, #10
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fbed 	bl	80075d4 <USBH_FindInterface>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
 8006e00:	2bff      	cmp	r3, #255	; 0xff
 8006e02:	d002      	beq.n	8006e0a <USBH_CDC_InterfaceInit+0x11a>
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d901      	bls.n	8006e0e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e0c2      	b.n	8006f94 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	211a      	movs	r1, #26
 8006e14:	fb01 f303 	mul.w	r3, r1, r3
 8006e18:	4413      	add	r3, r2
 8006e1a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	b25b      	sxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	da16      	bge.n	8006e54 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	211a      	movs	r1, #26
 8006e2c:	fb01 f303 	mul.w	r3, r1, r3
 8006e30:	4413      	add	r3, r2
 8006e32:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e36:	781a      	ldrb	r2, [r3, #0]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	211a      	movs	r1, #26
 8006e42:	fb01 f303 	mul.w	r3, r1, r3
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e4c:	881a      	ldrh	r2, [r3, #0]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	835a      	strh	r2, [r3, #26]
 8006e52:	e015      	b.n	8006e80 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	211a      	movs	r1, #26
 8006e5a:	fb01 f303 	mul.w	r3, r1, r3
 8006e5e:	4413      	add	r3, r2
 8006e60:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e64:	781a      	ldrb	r2, [r3, #0]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	211a      	movs	r1, #26
 8006e70:	fb01 f303 	mul.w	r3, r1, r3
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e7a:	881a      	ldrh	r2, [r3, #0]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	211a      	movs	r1, #26
 8006e86:	fb01 f303 	mul.w	r3, r1, r3
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	b25b      	sxtb	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	da16      	bge.n	8006ec6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	211a      	movs	r1, #26
 8006e9e:	fb01 f303 	mul.w	r3, r1, r3
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ea8:	781a      	ldrb	r2, [r3, #0]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	211a      	movs	r1, #26
 8006eb4:	fb01 f303 	mul.w	r3, r1, r3
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006ebe:	881a      	ldrh	r2, [r3, #0]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	835a      	strh	r2, [r3, #26]
 8006ec4:	e015      	b.n	8006ef2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	211a      	movs	r1, #26
 8006ecc:	fb01 f303 	mul.w	r3, r1, r3
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ed6:	781a      	ldrb	r2, [r3, #0]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	211a      	movs	r1, #26
 8006ee2:	fb01 f303 	mul.w	r3, r1, r3
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006eec:	881a      	ldrh	r2, [r3, #0]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	7b9b      	ldrb	r3, [r3, #14]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 fd8e 	bl	8008a1a <USBH_AllocPipe>
 8006efe:	4603      	mov	r3, r0
 8006f00:	461a      	mov	r2, r3
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	7bdb      	ldrb	r3, [r3, #15]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f001 fd84 	bl	8008a1a <USBH_AllocPipe>
 8006f12:	4603      	mov	r3, r0
 8006f14:	461a      	mov	r2, r3
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	7b59      	ldrb	r1, [r3, #13]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	7b98      	ldrb	r0, [r3, #14]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	8b12      	ldrh	r2, [r2, #24]
 8006f32:	9202      	str	r2, [sp, #8]
 8006f34:	2202      	movs	r2, #2
 8006f36:	9201      	str	r2, [sp, #4]
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	4623      	mov	r3, r4
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f001 fd3c 	bl	80089bc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	7b19      	ldrb	r1, [r3, #12]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	7bd8      	ldrb	r0, [r3, #15]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	8b52      	ldrh	r2, [r2, #26]
 8006f5c:	9202      	str	r2, [sp, #8]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	9201      	str	r2, [sp, #4]
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	4623      	mov	r3, r4
 8006f66:	4602      	mov	r2, r0
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 fd27 	bl	80089bc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	7b5b      	ldrb	r3, [r3, #13]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f002 f830 	bl	8008fe4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	7b1b      	ldrb	r3, [r3, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f002 f829 	bl	8008fe4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd90      	pop	{r4, r7, pc}

08006f9c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00e      	beq.n	8006fd4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 fd1c 	bl	80089fa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 fd47 	bl	8008a5c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	7b1b      	ldrb	r3, [r3, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00e      	beq.n	8006ffa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	7b1b      	ldrb	r3, [r3, #12]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 fd09 	bl	80089fa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	7b1b      	ldrb	r3, [r3, #12]
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 fd34 	bl	8008a5c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	7b5b      	ldrb	r3, [r3, #13]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00e      	beq.n	8007020 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	7b5b      	ldrb	r3, [r3, #13]
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f001 fcf6 	bl	80089fa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	7b5b      	ldrb	r3, [r3, #13]
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 fd21 	bl	8008a5c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007026:	69db      	ldr	r3, [r3, #28]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00b      	beq.n	8007044 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	4618      	mov	r0, r3
 8007036:	f002 f88d 	bl	8009154 <free>
    phost->pActiveClass->pData = 0U;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007040:	2200      	movs	r2, #0
 8007042:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b084      	sub	sp, #16
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3340      	adds	r3, #64	; 0x40
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f8b1 	bl	80071ce <GetLineCoding>
 800706c:	4603      	mov	r3, r0
 800706e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007070:	7afb      	ldrb	r3, [r7, #11]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d105      	bne.n	8007082 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800707c:	2102      	movs	r1, #2
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007082:	7afb      	ldrb	r3, [r7, #11]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007094:	2301      	movs	r3, #1
 8007096:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	d877      	bhi.n	80071a0 <USBH_CDC_Process+0x114>
 80070b0:	a201      	add	r2, pc, #4	; (adr r2, 80070b8 <USBH_CDC_Process+0x2c>)
 80070b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b6:	bf00      	nop
 80070b8:	080070cd 	.word	0x080070cd
 80070bc:	080070d3 	.word	0x080070d3
 80070c0:	08007103 	.word	0x08007103
 80070c4:	08007177 	.word	0x08007177
 80070c8:	08007185 	.word	0x08007185
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	73fb      	strb	r3, [r7, #15]
      break;
 80070d0:	e06d      	b.n	80071ae <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f897 	bl	800720c <SetLineCoding>
 80070de:	4603      	mov	r3, r0
 80070e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d104      	bne.n	80070f2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80070f0:	e058      	b.n	80071a4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d055      	beq.n	80071a4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2204      	movs	r2, #4
 80070fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007100:	e050      	b.n	80071a4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	3340      	adds	r3, #64	; 0x40
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f860 	bl	80071ce <GetLineCoding>
 800710e:	4603      	mov	r3, r0
 8007110:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d126      	bne.n	8007166 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712a:	791b      	ldrb	r3, [r3, #4]
 800712c:	429a      	cmp	r2, r3
 800712e:	d13b      	bne.n	80071a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800713a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800713c:	429a      	cmp	r2, r3
 800713e:	d133      	bne.n	80071a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800714a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800714c:	429a      	cmp	r2, r3
 800714e:	d12b      	bne.n	80071a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007158:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800715a:	429a      	cmp	r2, r3
 800715c:	d124      	bne.n	80071a8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f95a 	bl	8007418 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007164:	e020      	b.n	80071a8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007166:	7bbb      	ldrb	r3, [r7, #14]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d01d      	beq.n	80071a8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2204      	movs	r2, #4
 8007170:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007174:	e018      	b.n	80071a8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f867 	bl	800724a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f8dc 	bl	800733a <CDC_ProcessReception>
      break;
 8007182:	e014      	b.n	80071ae <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007184:	2100      	movs	r1, #0
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 ffe5 	bl	8008156 <USBH_ClrFeature>
 800718c:	4603      	mov	r3, r0
 800718e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800719e:	e005      	b.n	80071ac <USBH_CDC_Process+0x120>

    default:
      break;
 80071a0:	bf00      	nop
 80071a2:	e004      	b.n	80071ae <USBH_CDC_Process+0x122>
      break;
 80071a4:	bf00      	nop
 80071a6:	e002      	b.n	80071ae <USBH_CDC_Process+0x122>
      break;
 80071a8:	bf00      	nop
 80071aa:	e000      	b.n	80071ae <USBH_CDC_Process+0x122>
      break;
 80071ac:	bf00      	nop

  }

  return status;
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	22a1      	movs	r2, #161	; 0xa1
 80071dc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2221      	movs	r2, #33	; 0x21
 80071e2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2207      	movs	r2, #7
 80071f4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2207      	movs	r2, #7
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 f98a 	bl	8008516 <USBH_CtlReq>
 8007202:	4603      	mov	r3, r0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2221      	movs	r2, #33	; 0x21
 800721a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2220      	movs	r2, #32
 8007220:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2207      	movs	r2, #7
 8007232:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2207      	movs	r2, #7
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 f96b 	bl	8008516 <USBH_CtlReq>
 8007240:	4603      	mov	r3, r0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b086      	sub	sp, #24
 800724e:	af02      	add	r7, sp, #8
 8007250:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800725c:	2300      	movs	r3, #0
 800725e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007266:	2b01      	cmp	r3, #1
 8007268:	d002      	beq.n	8007270 <CDC_ProcessTransmission+0x26>
 800726a:	2b02      	cmp	r3, #2
 800726c:	d025      	beq.n	80072ba <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800726e:	e060      	b.n	8007332 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	8b12      	ldrh	r2, [r2, #24]
 8007278:	4293      	cmp	r3, r2
 800727a:	d90c      	bls.n	8007296 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	69d9      	ldr	r1, [r3, #28]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8b1a      	ldrh	r2, [r3, #24]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	7b58      	ldrb	r0, [r3, #13]
 8007288:	2301      	movs	r3, #1
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	4603      	mov	r3, r0
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 fb51 	bl	8008936 <USBH_BulkSendData>
 8007294:	e00c      	b.n	80072b0 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800729e:	b29a      	uxth	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	7b58      	ldrb	r0, [r3, #13]
 80072a4:	2301      	movs	r3, #1
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	4603      	mov	r3, r0
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f001 fb43 	bl	8008936 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80072b8:	e03b      	b.n	8007332 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	7b5b      	ldrb	r3, [r3, #13]
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f001 fe65 	bl	8008f90 <USBH_LL_GetURBState>
 80072c6:	4603      	mov	r3, r0
 80072c8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80072ca:	7afb      	ldrb	r3, [r7, #11]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d128      	bne.n	8007322 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	8b12      	ldrh	r2, [r2, #24]
 80072d8:	4293      	cmp	r3, r2
 80072da:	d90e      	bls.n	80072fa <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	8b12      	ldrh	r2, [r2, #24]
 80072e4:	1a9a      	subs	r2, r3, r2
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	8b12      	ldrh	r2, [r2, #24]
 80072f2:	441a      	add	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	61da      	str	r2, [r3, #28]
 80072f8:	e002      	b.n	8007300 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007310:	e00e      	b.n	8007330 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f868 	bl	80073f0 <USBH_CDC_TransmitCallback>
      break;
 8007320:	e006      	b.n	8007330 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8007322:	7afb      	ldrb	r3, [r7, #11]
 8007324:	2b02      	cmp	r3, #2
 8007326:	d103      	bne.n	8007330 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007330:	bf00      	nop
  }
}
 8007332:	bf00      	nop
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b086      	sub	sp, #24
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800734c:	2300      	movs	r3, #0
 800734e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007356:	2b03      	cmp	r3, #3
 8007358:	d002      	beq.n	8007360 <CDC_ProcessReception+0x26>
 800735a:	2b04      	cmp	r3, #4
 800735c:	d00e      	beq.n	800737c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800735e:	e043      	b.n	80073e8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	6a19      	ldr	r1, [r3, #32]
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	8b5a      	ldrh	r2, [r3, #26]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	7b1b      	ldrb	r3, [r3, #12]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 fb07 	bl	8008980 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2204      	movs	r2, #4
 8007376:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800737a:	e035      	b.n	80073e8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	7b1b      	ldrb	r3, [r3, #12]
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 fe04 	bl	8008f90 <USBH_LL_GetURBState>
 8007388:	4603      	mov	r3, r0
 800738a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800738c:	7cfb      	ldrb	r3, [r7, #19]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d129      	bne.n	80073e6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	7b1b      	ldrb	r3, [r3, #12]
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 fd67 	bl	8008e6c <USBH_LL_GetLastXferSize>
 800739e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d016      	beq.n	80073d8 <CDC_ProcessReception+0x9e>
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	8b5b      	ldrh	r3, [r3, #26]
 80073ae:	461a      	mov	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d910      	bls.n	80073d8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	1ad2      	subs	r2, r2, r3
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	6a1a      	ldr	r2, [r3, #32]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	441a      	add	r2, r3
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2203      	movs	r2, #3
 80073d2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80073d6:	e006      	b.n	80073e6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f80f 	bl	8007404 <USBH_CDC_ReceiveCallback>
      break;
 80073e6:	bf00      	nop
  }
}
 80073e8:	bf00      	nop
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	4613      	mov	r3, r2
 8007438:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007440:	2302      	movs	r3, #2
 8007442:	e029      	b.n	8007498 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	79fa      	ldrb	r2, [r7, #7]
 8007448:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f000 f81f 	bl	80074a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d003      	beq.n	8007490 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f001 fc39 	bl	8008d08 <USBH_LL_Init>

  return USBH_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074ac:	2300      	movs	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	e009      	b.n	80074c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	33e0      	adds	r3, #224	; 0xe0
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	2200      	movs	r2, #0
 80074be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3301      	adds	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2b0e      	cmp	r3, #14
 80074ca:	d9f2      	bls.n	80074b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074cc:	2300      	movs	r3, #0
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	e009      	b.n	80074e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074dc:	2200      	movs	r2, #0
 80074de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	3301      	adds	r3, #1
 80074e4:	60fb      	str	r3, [r7, #12]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ec:	d3f1      	bcc.n	80074d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2240      	movs	r2, #64	; 0x40
 8007512:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d016      	beq.n	800758a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10e      	bne.n	8007584 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800756c:	1c59      	adds	r1, r3, #1
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	33de      	adds	r3, #222	; 0xde
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	73fb      	strb	r3, [r7, #15]
 8007582:	e004      	b.n	800758e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007584:	2302      	movs	r3, #2
 8007586:	73fb      	strb	r3, [r7, #15]
 8007588:	e001      	b.n	800758e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800758a:	2302      	movs	r3, #2
 800758c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800758e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80075b2:	78fa      	ldrb	r2, [r7, #3]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d204      	bcs.n	80075c2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	78fa      	ldrb	r2, [r7, #3]
 80075bc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80075c0:	e001      	b.n	80075c6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80075c2:	2302      	movs	r3, #2
 80075c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	4608      	mov	r0, r1
 80075de:	4611      	mov	r1, r2
 80075e0:	461a      	mov	r2, r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	70fb      	strb	r3, [r7, #3]
 80075e6:	460b      	mov	r3, r1
 80075e8:	70bb      	strb	r3, [r7, #2]
 80075ea:	4613      	mov	r3, r2
 80075ec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80075fc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80075fe:	e025      	b.n	800764c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007600:	7dfb      	ldrb	r3, [r7, #23]
 8007602:	221a      	movs	r2, #26
 8007604:	fb02 f303 	mul.w	r3, r2, r3
 8007608:	3308      	adds	r3, #8
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4413      	add	r3, r2
 800760e:	3302      	adds	r3, #2
 8007610:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	795b      	ldrb	r3, [r3, #5]
 8007616:	78fa      	ldrb	r2, [r7, #3]
 8007618:	429a      	cmp	r2, r3
 800761a:	d002      	beq.n	8007622 <USBH_FindInterface+0x4e>
 800761c:	78fb      	ldrb	r3, [r7, #3]
 800761e:	2bff      	cmp	r3, #255	; 0xff
 8007620:	d111      	bne.n	8007646 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007626:	78ba      	ldrb	r2, [r7, #2]
 8007628:	429a      	cmp	r2, r3
 800762a:	d002      	beq.n	8007632 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800762c:	78bb      	ldrb	r3, [r7, #2]
 800762e:	2bff      	cmp	r3, #255	; 0xff
 8007630:	d109      	bne.n	8007646 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007636:	787a      	ldrb	r2, [r7, #1]
 8007638:	429a      	cmp	r2, r3
 800763a:	d002      	beq.n	8007642 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800763c:	787b      	ldrb	r3, [r7, #1]
 800763e:	2bff      	cmp	r3, #255	; 0xff
 8007640:	d101      	bne.n	8007646 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007642:	7dfb      	ldrb	r3, [r7, #23]
 8007644:	e006      	b.n	8007654 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007646:	7dfb      	ldrb	r3, [r7, #23]
 8007648:	3301      	adds	r3, #1
 800764a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d9d6      	bls.n	8007600 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007652:	23ff      	movs	r3, #255	; 0xff
}
 8007654:	4618      	mov	r0, r3
 8007656:	371c      	adds	r7, #28
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 fb89 	bl	8008d80 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800766e:	2101      	movs	r1, #1
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 fca0 	bl	8008fb6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af04      	add	r7, sp, #16
 8007686:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007688:	2302      	movs	r3, #2
 800768a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800768c:	2300      	movs	r3, #0
 800768e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b01      	cmp	r3, #1
 800769a:	d102      	bne.n	80076a2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2203      	movs	r2, #3
 80076a0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b0b      	cmp	r3, #11
 80076aa:	f200 81b3 	bhi.w	8007a14 <USBH_Process+0x394>
 80076ae:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <USBH_Process+0x34>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	080076e5 	.word	0x080076e5
 80076b8:	08007717 	.word	0x08007717
 80076bc:	0800777f 	.word	0x0800777f
 80076c0:	080079af 	.word	0x080079af
 80076c4:	08007a15 	.word	0x08007a15
 80076c8:	08007823 	.word	0x08007823
 80076cc:	08007955 	.word	0x08007955
 80076d0:	08007859 	.word	0x08007859
 80076d4:	08007879 	.word	0x08007879
 80076d8:	08007899 	.word	0x08007899
 80076dc:	080078c7 	.word	0x080078c7
 80076e0:	08007997 	.word	0x08007997
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 8193 	beq.w	8007a18 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80076f8:	20c8      	movs	r0, #200	; 0xc8
 80076fa:	f001 fca6 	bl	800904a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f001 fb99 	bl	8008e36 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007714:	e180      	b.n	8007a18 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800771c:	2b01      	cmp	r3, #1
 800771e:	d107      	bne.n	8007730 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2202      	movs	r2, #2
 800772c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800772e:	e182      	b.n	8007a36 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800773a:	d914      	bls.n	8007766 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007742:	3301      	adds	r3, #1
 8007744:	b2da      	uxtb	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007752:	2b03      	cmp	r3, #3
 8007754:	d903      	bls.n	800775e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	220d      	movs	r2, #13
 800775a:	701a      	strb	r2, [r3, #0]
      break;
 800775c:	e16b      	b.n	8007a36 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	701a      	strb	r2, [r3, #0]
      break;
 8007764:	e167      	b.n	8007a36 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800776c:	f103 020a 	add.w	r2, r3, #10
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007776:	200a      	movs	r0, #10
 8007778:	f001 fc67 	bl	800904a <USBH_Delay>
      break;
 800777c:	e15b      	b.n	8007a36 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007784:	2b00      	cmp	r3, #0
 8007786:	d005      	beq.n	8007794 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800778e:	2104      	movs	r1, #4
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007794:	2064      	movs	r0, #100	; 0x64
 8007796:	f001 fc58 	bl	800904a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 fb26 	bl	8008dec <USBH_LL_GetSpeed>
 80077a0:	4603      	mov	r3, r0
 80077a2:	461a      	mov	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2205      	movs	r2, #5
 80077ae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80077b0:	2100      	movs	r1, #0
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 f931 	bl	8008a1a <USBH_AllocPipe>
 80077b8:	4603      	mov	r3, r0
 80077ba:	461a      	mov	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80077c0:	2180      	movs	r1, #128	; 0x80
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f001 f929 	bl	8008a1a <USBH_AllocPipe>
 80077c8:	4603      	mov	r3, r0
 80077ca:	461a      	mov	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	7919      	ldrb	r1, [r3, #4]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80077e4:	b292      	uxth	r2, r2
 80077e6:	9202      	str	r2, [sp, #8]
 80077e8:	2200      	movs	r2, #0
 80077ea:	9201      	str	r2, [sp, #4]
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	4603      	mov	r3, r0
 80077f0:	2280      	movs	r2, #128	; 0x80
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f001 f8e2 	bl	80089bc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	7959      	ldrb	r1, [r3, #5]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800780c:	b292      	uxth	r2, r2
 800780e:	9202      	str	r2, [sp, #8]
 8007810:	2200      	movs	r2, #0
 8007812:	9201      	str	r2, [sp, #4]
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	4603      	mov	r3, r0
 8007818:	2200      	movs	r2, #0
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 f8ce 	bl	80089bc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007820:	e109      	b.n	8007a36 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f90c 	bl	8007a40 <USBH_HandleEnum>
 8007828:	4603      	mov	r3, r0
 800782a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800782c:	7bbb      	ldrb	r3, [r7, #14]
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	f040 80f3 	bne.w	8007a1c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007844:	2b01      	cmp	r3, #1
 8007846:	d103      	bne.n	8007850 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2208      	movs	r2, #8
 800784c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800784e:	e0e5      	b.n	8007a1c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2207      	movs	r2, #7
 8007854:	701a      	strb	r2, [r3, #0]
      break;
 8007856:	e0e1      	b.n	8007a1c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 80de 	beq.w	8007a20 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800786a:	2101      	movs	r1, #1
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2208      	movs	r2, #8
 8007874:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007876:	e0d3      	b.n	8007a20 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800787e:	b29b      	uxth	r3, r3
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fc20 	bl	80080c8 <USBH_SetCfg>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	f040 80ca 	bne.w	8007a24 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2209      	movs	r2, #9
 8007894:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007896:	e0c5      	b.n	8007a24 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00b      	beq.n	80078be <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80078a6:	2101      	movs	r1, #1
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fc30 	bl	800810e <USBH_SetFeature>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f040 80b9 	bne.w	8007a28 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	220a      	movs	r2, #10
 80078ba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078bc:	e0b4      	b.n	8007a28 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	220a      	movs	r2, #10
 80078c2:	701a      	strb	r2, [r3, #0]
      break;
 80078c4:	e0b0      	b.n	8007a28 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 80ad 	beq.w	8007a2c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80078da:	2300      	movs	r3, #0
 80078dc:	73fb      	strb	r3, [r7, #15]
 80078de:	e016      	b.n	800790e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80078e0:	7bfa      	ldrb	r2, [r7, #15]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	32de      	adds	r2, #222	; 0xde
 80078e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ea:	791a      	ldrb	r2, [r3, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d108      	bne.n	8007908 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80078f6:	7bfa      	ldrb	r2, [r7, #15]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	32de      	adds	r2, #222	; 0xde
 80078fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007906:	e005      	b.n	8007914 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	3301      	adds	r3, #1
 800790c:	73fb      	strb	r3, [r7, #15]
 800790e:	7bfb      	ldrb	r3, [r7, #15]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d0e5      	beq.n	80078e0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800791a:	2b00      	cmp	r3, #0
 800791c:	d016      	beq.n	800794c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	4798      	blx	r3
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d109      	bne.n	8007944 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2206      	movs	r2, #6
 8007934:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800793c:	2103      	movs	r1, #3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007942:	e073      	b.n	8007a2c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	220d      	movs	r2, #13
 8007948:	701a      	strb	r2, [r3, #0]
      break;
 800794a:	e06f      	b.n	8007a2c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	220d      	movs	r2, #13
 8007950:	701a      	strb	r2, [r3, #0]
      break;
 8007952:	e06b      	b.n	8007a2c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800795a:	2b00      	cmp	r3, #0
 800795c:	d017      	beq.n	800798e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	4798      	blx	r3
 800796a:	4603      	mov	r3, r0
 800796c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d103      	bne.n	800797e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	220b      	movs	r2, #11
 800797a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800797c:	e058      	b.n	8007a30 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b02      	cmp	r3, #2
 8007984:	d154      	bne.n	8007a30 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	220d      	movs	r2, #13
 800798a:	701a      	strb	r2, [r3, #0]
      break;
 800798c:	e050      	b.n	8007a30 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	220d      	movs	r2, #13
 8007992:	701a      	strb	r2, [r3, #0]
      break;
 8007994:	e04c      	b.n	8007a30 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800799c:	2b00      	cmp	r3, #0
 800799e:	d049      	beq.n	8007a34 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	4798      	blx	r3
      }
      break;
 80079ac:	e042      	b.n	8007a34 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7ff fd72 	bl	80074a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d009      	beq.n	80079da <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d005      	beq.n	80079f0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079ea:	2105      	movs	r1, #5
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d107      	bne.n	8007a0c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff fe2b 	bl	8007660 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a0a:	e014      	b.n	8007a36 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 f9b7 	bl	8008d80 <USBH_LL_Start>
      break;
 8007a12:	e010      	b.n	8007a36 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007a14:	bf00      	nop
 8007a16:	e00e      	b.n	8007a36 <USBH_Process+0x3b6>
      break;
 8007a18:	bf00      	nop
 8007a1a:	e00c      	b.n	8007a36 <USBH_Process+0x3b6>
      break;
 8007a1c:	bf00      	nop
 8007a1e:	e00a      	b.n	8007a36 <USBH_Process+0x3b6>
    break;
 8007a20:	bf00      	nop
 8007a22:	e008      	b.n	8007a36 <USBH_Process+0x3b6>
      break;
 8007a24:	bf00      	nop
 8007a26:	e006      	b.n	8007a36 <USBH_Process+0x3b6>
      break;
 8007a28:	bf00      	nop
 8007a2a:	e004      	b.n	8007a36 <USBH_Process+0x3b6>
      break;
 8007a2c:	bf00      	nop
 8007a2e:	e002      	b.n	8007a36 <USBH_Process+0x3b6>
      break;
 8007a30:	bf00      	nop
 8007a32:	e000      	b.n	8007a36 <USBH_Process+0x3b6>
      break;
 8007a34:	bf00      	nop
  }
  return USBH_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b088      	sub	sp, #32
 8007a44:	af04      	add	r7, sp, #16
 8007a46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	785b      	ldrb	r3, [r3, #1]
 8007a54:	2b07      	cmp	r3, #7
 8007a56:	f200 81c1 	bhi.w	8007ddc <USBH_HandleEnum+0x39c>
 8007a5a:	a201      	add	r2, pc, #4	; (adr r2, 8007a60 <USBH_HandleEnum+0x20>)
 8007a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a60:	08007a81 	.word	0x08007a81
 8007a64:	08007b3f 	.word	0x08007b3f
 8007a68:	08007ba9 	.word	0x08007ba9
 8007a6c:	08007c37 	.word	0x08007c37
 8007a70:	08007ca1 	.word	0x08007ca1
 8007a74:	08007d11 	.word	0x08007d11
 8007a78:	08007d57 	.word	0x08007d57
 8007a7c:	08007d9d 	.word	0x08007d9d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007a80:	2108      	movs	r1, #8
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fa50 	bl	8007f28 <USBH_Get_DevDesc>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d130      	bne.n	8007af4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	7919      	ldrb	r1, [r3, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ab6:	b292      	uxth	r2, r2
 8007ab8:	9202      	str	r2, [sp, #8]
 8007aba:	2200      	movs	r2, #0
 8007abc:	9201      	str	r2, [sp, #4]
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2280      	movs	r2, #128	; 0x80
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 ff79 	bl	80089bc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	7959      	ldrb	r1, [r3, #5]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ade:	b292      	uxth	r2, r2
 8007ae0:	9202      	str	r2, [sp, #8]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	9201      	str	r2, [sp, #4]
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2200      	movs	r2, #0
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 ff65 	bl	80089bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007af2:	e175      	b.n	8007de0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	f040 8172 	bne.w	8007de0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b02:	3301      	adds	r3, #1
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d903      	bls.n	8007b1e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	220d      	movs	r2, #13
 8007b1a:	701a      	strb	r2, [r3, #0]
      break;
 8007b1c:	e160      	b.n	8007de0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	795b      	ldrb	r3, [r3, #5]
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 ff99 	bl	8008a5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	791b      	ldrb	r3, [r3, #4]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 ff93 	bl	8008a5c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	701a      	strb	r2, [r3, #0]
      break;
 8007b3c:	e150      	b.n	8007de0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007b3e:	2112      	movs	r1, #18
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f9f1 	bl	8007f28 <USBH_Get_DevDesc>
 8007b46:	4603      	mov	r3, r0
 8007b48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d103      	bne.n	8007b58 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b56:	e145      	b.n	8007de4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	f040 8142 	bne.w	8007de4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b66:	3301      	adds	r3, #1
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d903      	bls.n	8007b82 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	220d      	movs	r2, #13
 8007b7e:	701a      	strb	r2, [r3, #0]
      break;
 8007b80:	e130      	b.n	8007de4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	795b      	ldrb	r3, [r3, #5]
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 ff67 	bl	8008a5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	791b      	ldrb	r3, [r3, #4]
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 ff61 	bl	8008a5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	701a      	strb	r2, [r3, #0]
      break;
 8007ba6:	e11d      	b.n	8007de4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007ba8:	2101      	movs	r1, #1
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fa68 	bl	8008080 <USBH_SetAddress>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d132      	bne.n	8007c20 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007bba:	2002      	movs	r0, #2
 8007bbc:	f001 fa45 	bl	800904a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2203      	movs	r2, #3
 8007bcc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	7919      	ldrb	r1, [r3, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007be2:	b292      	uxth	r2, r2
 8007be4:	9202      	str	r2, [sp, #8]
 8007be6:	2200      	movs	r2, #0
 8007be8:	9201      	str	r2, [sp, #4]
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	4603      	mov	r3, r0
 8007bee:	2280      	movs	r2, #128	; 0x80
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fee3 	bl	80089bc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	7959      	ldrb	r1, [r3, #5]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c0a:	b292      	uxth	r2, r2
 8007c0c:	9202      	str	r2, [sp, #8]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	9201      	str	r2, [sp, #4]
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	4603      	mov	r3, r0
 8007c16:	2200      	movs	r2, #0
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fecf 	bl	80089bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c1e:	e0e3      	b.n	8007de8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c20:	7bbb      	ldrb	r3, [r7, #14]
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	f040 80e0 	bne.w	8007de8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	220d      	movs	r2, #13
 8007c2c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	705a      	strb	r2, [r3, #1]
      break;
 8007c34:	e0d8      	b.n	8007de8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007c36:	2109      	movs	r1, #9
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f99d 	bl	8007f78 <USBH_Get_CfgDesc>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d103      	bne.n	8007c50 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2204      	movs	r2, #4
 8007c4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c4e:	e0cd      	b.n	8007dec <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	f040 80ca 	bne.w	8007dec <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c5e:	3301      	adds	r3, #1
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d903      	bls.n	8007c7a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	220d      	movs	r2, #13
 8007c76:	701a      	strb	r2, [r3, #0]
      break;
 8007c78:	e0b8      	b.n	8007dec <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	795b      	ldrb	r3, [r3, #5]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 feeb 	bl	8008a5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	791b      	ldrb	r3, [r3, #4]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fee5 	bl	8008a5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	701a      	strb	r2, [r3, #0]
      break;
 8007c9e:	e0a5      	b.n	8007dec <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f965 	bl	8007f78 <USBH_Get_CfgDesc>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d103      	bne.n	8007cc0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2205      	movs	r2, #5
 8007cbc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007cbe:	e097      	b.n	8007df0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	f040 8094 	bne.w	8007df0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cce:	3301      	adds	r3, #1
 8007cd0:	b2da      	uxtb	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d903      	bls.n	8007cea <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	220d      	movs	r2, #13
 8007ce6:	701a      	strb	r2, [r3, #0]
      break;
 8007ce8:	e082      	b.n	8007df0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	795b      	ldrb	r3, [r3, #5]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 feb3 	bl	8008a5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	791b      	ldrb	r3, [r3, #4]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fead 	bl	8008a5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	701a      	strb	r2, [r3, #0]
      break;
 8007d0e:	e06f      	b.n	8007df0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d019      	beq.n	8007d4e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d26:	23ff      	movs	r3, #255	; 0xff
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f949 	bl	8007fc0 <USBH_Get_StringDesc>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d32:	7bbb      	ldrb	r3, [r7, #14]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d103      	bne.n	8007d40 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2206      	movs	r2, #6
 8007d3c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d3e:	e059      	b.n	8007df4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d156      	bne.n	8007df4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2206      	movs	r2, #6
 8007d4a:	705a      	strb	r2, [r3, #1]
      break;
 8007d4c:	e052      	b.n	8007df4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2206      	movs	r2, #6
 8007d52:	705a      	strb	r2, [r3, #1]
      break;
 8007d54:	e04e      	b.n	8007df4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d019      	beq.n	8007d94 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d6c:	23ff      	movs	r3, #255	; 0xff
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f926 	bl	8007fc0 <USBH_Get_StringDesc>
 8007d74:	4603      	mov	r3, r0
 8007d76:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d103      	bne.n	8007d86 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2207      	movs	r2, #7
 8007d82:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d84:	e038      	b.n	8007df8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d86:	7bbb      	ldrb	r3, [r7, #14]
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d135      	bne.n	8007df8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2207      	movs	r2, #7
 8007d90:	705a      	strb	r2, [r3, #1]
      break;
 8007d92:	e031      	b.n	8007df8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2207      	movs	r2, #7
 8007d98:	705a      	strb	r2, [r3, #1]
      break;
 8007d9a:	e02d      	b.n	8007df8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d017      	beq.n	8007dd6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007db2:	23ff      	movs	r3, #255	; 0xff
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f903 	bl	8007fc0 <USBH_Get_StringDesc>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007dbe:	7bbb      	ldrb	r3, [r7, #14]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d102      	bne.n	8007dca <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007dc8:	e018      	b.n	8007dfc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dca:	7bbb      	ldrb	r3, [r7, #14]
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d115      	bne.n	8007dfc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd4:	e012      	b.n	8007dfc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8007dda:	e00f      	b.n	8007dfc <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007ddc:	bf00      	nop
 8007dde:	e00e      	b.n	8007dfe <USBH_HandleEnum+0x3be>
      break;
 8007de0:	bf00      	nop
 8007de2:	e00c      	b.n	8007dfe <USBH_HandleEnum+0x3be>
      break;
 8007de4:	bf00      	nop
 8007de6:	e00a      	b.n	8007dfe <USBH_HandleEnum+0x3be>
      break;
 8007de8:	bf00      	nop
 8007dea:	e008      	b.n	8007dfe <USBH_HandleEnum+0x3be>
      break;
 8007dec:	bf00      	nop
 8007dee:	e006      	b.n	8007dfe <USBH_HandleEnum+0x3be>
      break;
 8007df0:	bf00      	nop
 8007df2:	e004      	b.n	8007dfe <USBH_HandleEnum+0x3be>
      break;
 8007df4:	bf00      	nop
 8007df6:	e002      	b.n	8007dfe <USBH_HandleEnum+0x3be>
      break;
 8007df8:	bf00      	nop
 8007dfa:	e000      	b.n	8007dfe <USBH_HandleEnum+0x3be>
      break;
 8007dfc:	bf00      	nop
  }
  return Status;
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b082      	sub	sp, #8
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f804 	bl	8007e4a <USBH_HandleSof>
}
 8007e42:	bf00      	nop
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b0b      	cmp	r3, #11
 8007e5a:	d10a      	bne.n	8007e72 <USBH_HandleSof+0x28>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d005      	beq.n	8007e72 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	4798      	blx	r3
  }
}
 8007e72:	bf00      	nop
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007e8a:	bf00      	nop
}
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b083      	sub	sp, #12
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007ea6:	bf00      	nop
}
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 ff58 	bl	8008db6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	791b      	ldrb	r3, [r3, #4]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fda5 	bl	8008a5c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	795b      	ldrb	r3, [r3, #5]
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fd9f 	bl	8008a5c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af02      	add	r7, sp, #8
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	4613      	mov	r3, r2
 8007f42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f46:	2100      	movs	r1, #0
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f864 	bl	8008016 <USBH_GetDescriptor>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	73fb      	strb	r3, [r7, #15]
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f64:	78fa      	ldrb	r2, [r7, #3]
 8007f66:	b292      	uxth	r2, r2
 8007f68:	4619      	mov	r1, r3
 8007f6a:	f000 f918 	bl	800819e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af02      	add	r7, sp, #8
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	331c      	adds	r3, #28
 8007f88:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f8a:	887b      	ldrh	r3, [r7, #2]
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f94:	2100      	movs	r1, #0
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f83d 	bl	8008016 <USBH_GetDescriptor>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	72fb      	strb	r3, [r7, #11]
 8007fa0:	7afb      	ldrb	r3, [r7, #11]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d107      	bne.n	8007fb6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007fac:	887a      	ldrh	r2, [r7, #2]
 8007fae:	68f9      	ldr	r1, [r7, #12]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 f964 	bl	800827e <USBH_ParseCfgDesc>
  }

  return status;
 8007fb6:	7afb      	ldrb	r3, [r7, #11]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af02      	add	r7, sp, #8
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	607a      	str	r2, [r7, #4]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	460b      	mov	r3, r1
 8007fce:	72fb      	strb	r3, [r7, #11]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007fd4:	7afb      	ldrb	r3, [r7, #11]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007fdc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007fe4:	893b      	ldrh	r3, [r7, #8]
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	2100      	movs	r1, #0
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 f812 	bl	8008016 <USBH_GetDescriptor>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	75fb      	strb	r3, [r7, #23]
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d107      	bne.n	800800c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008002:	893a      	ldrh	r2, [r7, #8]
 8008004:	6879      	ldr	r1, [r7, #4]
 8008006:	4618      	mov	r0, r3
 8008008:	f000 fa37 	bl	800847a <USBH_ParseStringDesc>
  }

  return status;
 800800c:	7dfb      	ldrb	r3, [r7, #23]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3718      	adds	r7, #24
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	607b      	str	r3, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	72fb      	strb	r3, [r7, #11]
 8008024:	4613      	mov	r3, r2
 8008026:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	789b      	ldrb	r3, [r3, #2]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d11c      	bne.n	800806a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008030:	7afb      	ldrb	r3, [r7, #11]
 8008032:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008036:	b2da      	uxtb	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2206      	movs	r2, #6
 8008040:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	893a      	ldrh	r2, [r7, #8]
 8008046:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008048:	893b      	ldrh	r3, [r7, #8]
 800804a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800804e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008052:	d104      	bne.n	800805e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f240 4209 	movw	r2, #1033	; 0x409
 800805a:	829a      	strh	r2, [r3, #20]
 800805c:	e002      	b.n	8008064 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8b3a      	ldrh	r2, [r7, #24]
 8008068:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800806a:	8b3b      	ldrh	r3, [r7, #24]
 800806c:	461a      	mov	r2, r3
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f000 fa50 	bl	8008516 <USBH_CtlReq>
 8008076:	4603      	mov	r3, r0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	789b      	ldrb	r3, [r3, #2]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d10f      	bne.n	80080b4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2205      	movs	r2, #5
 800809e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80080a0:	78fb      	ldrb	r3, [r7, #3]
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80080b4:	2200      	movs	r2, #0
 80080b6:	2100      	movs	r1, #0
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fa2c 	bl	8008516 <USBH_CtlReq>
 80080be:	4603      	mov	r3, r0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	460b      	mov	r3, r1
 80080d2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	789b      	ldrb	r3, [r3, #2]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d10e      	bne.n	80080fa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2209      	movs	r2, #9
 80080e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	887a      	ldrh	r2, [r7, #2]
 80080ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80080fa:	2200      	movs	r2, #0
 80080fc:	2100      	movs	r1, #0
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fa09 	bl	8008516 <USBH_CtlReq>
 8008104:	4603      	mov	r3, r0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b082      	sub	sp, #8
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	460b      	mov	r3, r1
 8008118:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	789b      	ldrb	r3, [r3, #2]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d10f      	bne.n	8008142 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2203      	movs	r2, #3
 800812c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800812e:	78fb      	ldrb	r3, [r7, #3]
 8008130:	b29a      	uxth	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008142:	2200      	movs	r2, #0
 8008144:	2100      	movs	r1, #0
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f9e5 	bl	8008516 <USBH_CtlReq>
 800814c:	4603      	mov	r3, r0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b082      	sub	sp, #8
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	460b      	mov	r3, r1
 8008160:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	789b      	ldrb	r3, [r3, #2]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d10f      	bne.n	800818a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2202      	movs	r2, #2
 800816e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	b29a      	uxth	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800818a:	2200      	movs	r2, #0
 800818c:	2100      	movs	r1, #0
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f9c1 	bl	8008516 <USBH_CtlReq>
 8008194:	4603      	mov	r3, r0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800819e:	b480      	push	{r7}
 80081a0:	b085      	sub	sp, #20
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	4613      	mov	r3, r2
 80081aa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	781a      	ldrb	r2, [r3, #0]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	785a      	ldrb	r2, [r3, #1]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	3302      	adds	r3, #2
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	3303      	adds	r3, #3
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	4313      	orrs	r3, r2
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	791a      	ldrb	r2, [r3, #4]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	795a      	ldrb	r2, [r3, #5]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	799a      	ldrb	r2, [r3, #6]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	79da      	ldrb	r2, [r3, #7]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80081f8:	88fb      	ldrh	r3, [r7, #6]
 80081fa:	2b08      	cmp	r3, #8
 80081fc:	d939      	bls.n	8008272 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	3308      	adds	r3, #8
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	b29a      	uxth	r2, r3
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	3309      	adds	r3, #9
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	b29b      	uxth	r3, r3
 800820e:	021b      	lsls	r3, r3, #8
 8008210:	b29b      	uxth	r3, r3
 8008212:	4313      	orrs	r3, r2
 8008214:	b29a      	uxth	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	330a      	adds	r3, #10
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	b29a      	uxth	r2, r3
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	330b      	adds	r3, #11
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	b29b      	uxth	r3, r3
 800822a:	021b      	lsls	r3, r3, #8
 800822c:	b29b      	uxth	r3, r3
 800822e:	4313      	orrs	r3, r2
 8008230:	b29a      	uxth	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	330c      	adds	r3, #12
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	b29a      	uxth	r2, r3
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	330d      	adds	r3, #13
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	b29b      	uxth	r3, r3
 8008246:	021b      	lsls	r3, r3, #8
 8008248:	b29b      	uxth	r3, r3
 800824a:	4313      	orrs	r3, r2
 800824c:	b29a      	uxth	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	7b9a      	ldrb	r2, [r3, #14]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	7bda      	ldrb	r2, [r3, #15]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	7c1a      	ldrb	r2, [r3, #16]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	7c5a      	ldrb	r2, [r3, #17]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	745a      	strb	r2, [r3, #17]
  }
}
 8008272:	bf00      	nop
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b08a      	sub	sp, #40	; 0x28
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	4613      	mov	r3, r2
 800828a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008296:	2300      	movs	r3, #0
 8008298:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	781a      	ldrb	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	785a      	ldrb	r2, [r3, #1]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	3302      	adds	r3, #2
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	3303      	adds	r3, #3
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	b29b      	uxth	r3, r3
 80082c0:	021b      	lsls	r3, r3, #8
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	4313      	orrs	r3, r2
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	791a      	ldrb	r2, [r3, #4]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	795a      	ldrb	r2, [r3, #5]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	799a      	ldrb	r2, [r3, #6]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	79da      	ldrb	r2, [r3, #7]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	7a1a      	ldrb	r2, [r3, #8]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80082f4:	88fb      	ldrh	r3, [r7, #6]
 80082f6:	2b09      	cmp	r3, #9
 80082f8:	d95f      	bls.n	80083ba <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80082fa:	2309      	movs	r3, #9
 80082fc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80082fe:	2300      	movs	r3, #0
 8008300:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008302:	e051      	b.n	80083a8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008304:	f107 0316 	add.w	r3, r7, #22
 8008308:	4619      	mov	r1, r3
 800830a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800830c:	f000 f8e8 	bl	80084e0 <USBH_GetNextDesc>
 8008310:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	785b      	ldrb	r3, [r3, #1]
 8008316:	2b04      	cmp	r3, #4
 8008318:	d146      	bne.n	80083a8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800831a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800831e:	221a      	movs	r2, #26
 8008320:	fb02 f303 	mul.w	r3, r2, r3
 8008324:	3308      	adds	r3, #8
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	4413      	add	r3, r2
 800832a:	3302      	adds	r3, #2
 800832c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800832e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008330:	69f8      	ldr	r0, [r7, #28]
 8008332:	f000 f846 	bl	80083c2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800833c:	2300      	movs	r3, #0
 800833e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008340:	e022      	b.n	8008388 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008342:	f107 0316 	add.w	r3, r7, #22
 8008346:	4619      	mov	r1, r3
 8008348:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800834a:	f000 f8c9 	bl	80084e0 <USBH_GetNextDesc>
 800834e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	785b      	ldrb	r3, [r3, #1]
 8008354:	2b05      	cmp	r3, #5
 8008356:	d117      	bne.n	8008388 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008358:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800835c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008360:	3201      	adds	r2, #1
 8008362:	00d2      	lsls	r2, r2, #3
 8008364:	211a      	movs	r1, #26
 8008366:	fb01 f303 	mul.w	r3, r1, r3
 800836a:	4413      	add	r3, r2
 800836c:	3308      	adds	r3, #8
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	4413      	add	r3, r2
 8008372:	3304      	adds	r3, #4
 8008374:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008376:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008378:	69b8      	ldr	r0, [r7, #24]
 800837a:	f000 f851 	bl	8008420 <USBH_ParseEPDesc>
            ep_ix++;
 800837e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008382:	3301      	adds	r3, #1
 8008384:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	791b      	ldrb	r3, [r3, #4]
 800838c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008390:	429a      	cmp	r2, r3
 8008392:	d204      	bcs.n	800839e <USBH_ParseCfgDesc+0x120>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	885a      	ldrh	r2, [r3, #2]
 8008398:	8afb      	ldrh	r3, [r7, #22]
 800839a:	429a      	cmp	r2, r3
 800839c:	d8d1      	bhi.n	8008342 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800839e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083a2:	3301      	adds	r3, #1
 80083a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80083a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d804      	bhi.n	80083ba <USBH_ParseCfgDesc+0x13c>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	885a      	ldrh	r2, [r3, #2]
 80083b4:	8afb      	ldrh	r3, [r7, #22]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d8a4      	bhi.n	8008304 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80083ba:	bf00      	nop
 80083bc:	3728      	adds	r7, #40	; 0x28
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781a      	ldrb	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	785a      	ldrb	r2, [r3, #1]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	789a      	ldrb	r2, [r3, #2]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	78da      	ldrb	r2, [r3, #3]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	791a      	ldrb	r2, [r3, #4]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	795a      	ldrb	r2, [r3, #5]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	799a      	ldrb	r2, [r3, #6]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	79da      	ldrb	r2, [r3, #7]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	7a1a      	ldrb	r2, [r3, #8]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	721a      	strb	r2, [r3, #8]
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	781a      	ldrb	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	785a      	ldrb	r2, [r3, #1]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	789a      	ldrb	r2, [r3, #2]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	78da      	ldrb	r2, [r3, #3]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	3304      	adds	r3, #4
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	b29a      	uxth	r2, r3
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	3305      	adds	r3, #5
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	b29b      	uxth	r3, r3
 800845a:	021b      	lsls	r3, r3, #8
 800845c:	b29b      	uxth	r3, r3
 800845e:	4313      	orrs	r3, r2
 8008460:	b29a      	uxth	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	799a      	ldrb	r2, [r3, #6]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	719a      	strb	r2, [r3, #6]
}
 800846e:	bf00      	nop
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800847a:	b480      	push	{r7}
 800847c:	b087      	sub	sp, #28
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	60b9      	str	r1, [r7, #8]
 8008484:	4613      	mov	r3, r2
 8008486:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3301      	adds	r3, #1
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	2b03      	cmp	r3, #3
 8008490:	d120      	bne.n	80084d4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	1e9a      	subs	r2, r3, #2
 8008498:	88fb      	ldrh	r3, [r7, #6]
 800849a:	4293      	cmp	r3, r2
 800849c:	bf28      	it	cs
 800849e:	4613      	movcs	r3, r2
 80084a0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3302      	adds	r3, #2
 80084a6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80084a8:	2300      	movs	r3, #0
 80084aa:	82fb      	strh	r3, [r7, #22]
 80084ac:	e00b      	b.n	80084c6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80084ae:	8afb      	ldrh	r3, [r7, #22]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	4413      	add	r3, r2
 80084b4:	781a      	ldrb	r2, [r3, #0]
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	701a      	strb	r2, [r3, #0]
      pdest++;
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	3301      	adds	r3, #1
 80084be:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80084c0:	8afb      	ldrh	r3, [r7, #22]
 80084c2:	3302      	adds	r3, #2
 80084c4:	82fb      	strh	r3, [r7, #22]
 80084c6:	8afa      	ldrh	r2, [r7, #22]
 80084c8:	8abb      	ldrh	r3, [r7, #20]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d3ef      	bcc.n	80084ae <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2200      	movs	r2, #0
 80084d2:	701a      	strb	r2, [r3, #0]
  }
}
 80084d4:	bf00      	nop
 80084d6:	371c      	adds	r7, #28
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	881a      	ldrh	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	4413      	add	r3, r2
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4413      	add	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008508:	68fb      	ldr	r3, [r7, #12]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b086      	sub	sp, #24
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	4613      	mov	r3, r2
 8008522:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008524:	2301      	movs	r3, #1
 8008526:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	789b      	ldrb	r3, [r3, #2]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d002      	beq.n	8008536 <USBH_CtlReq+0x20>
 8008530:	2b02      	cmp	r3, #2
 8008532:	d00f      	beq.n	8008554 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008534:	e027      	b.n	8008586 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	88fa      	ldrh	r2, [r7, #6]
 8008540:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2201      	movs	r2, #1
 8008546:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2202      	movs	r2, #2
 800854c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800854e:	2301      	movs	r3, #1
 8008550:	75fb      	strb	r3, [r7, #23]
      break;
 8008552:	e018      	b.n	8008586 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 f81b 	bl	8008590 <USBH_HandleControl>
 800855a:	4603      	mov	r3, r0
 800855c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800855e:	7dfb      	ldrb	r3, [r7, #23]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <USBH_CtlReq+0x54>
 8008564:	7dfb      	ldrb	r3, [r7, #23]
 8008566:	2b03      	cmp	r3, #3
 8008568:	d106      	bne.n	8008578 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2201      	movs	r2, #1
 800856e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	761a      	strb	r2, [r3, #24]
      break;
 8008576:	e005      	b.n	8008584 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008578:	7dfb      	ldrb	r3, [r7, #23]
 800857a:	2b02      	cmp	r3, #2
 800857c:	d102      	bne.n	8008584 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2201      	movs	r2, #1
 8008582:	709a      	strb	r2, [r3, #2]
      break;
 8008584:	bf00      	nop
  }
  return status;
 8008586:	7dfb      	ldrb	r3, [r7, #23]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af02      	add	r7, sp, #8
 8008596:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008598:	2301      	movs	r3, #1
 800859a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800859c:	2300      	movs	r3, #0
 800859e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	7e1b      	ldrb	r3, [r3, #24]
 80085a4:	3b01      	subs	r3, #1
 80085a6:	2b0a      	cmp	r3, #10
 80085a8:	f200 8158 	bhi.w	800885c <USBH_HandleControl+0x2cc>
 80085ac:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <USBH_HandleControl+0x24>)
 80085ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b2:	bf00      	nop
 80085b4:	080085e1 	.word	0x080085e1
 80085b8:	080085fb 	.word	0x080085fb
 80085bc:	08008665 	.word	0x08008665
 80085c0:	0800868b 	.word	0x0800868b
 80085c4:	080086c3 	.word	0x080086c3
 80085c8:	080086ef 	.word	0x080086ef
 80085cc:	08008741 	.word	0x08008741
 80085d0:	08008763 	.word	0x08008763
 80085d4:	0800879f 	.word	0x0800879f
 80085d8:	080087c7 	.word	0x080087c7
 80085dc:	08008805 	.word	0x08008805
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f103 0110 	add.w	r1, r3, #16
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	795b      	ldrb	r3, [r3, #5]
 80085ea:	461a      	mov	r2, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f945 	bl	800887c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2202      	movs	r2, #2
 80085f6:	761a      	strb	r2, [r3, #24]
      break;
 80085f8:	e13b      	b.n	8008872 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	795b      	ldrb	r3, [r3, #5]
 80085fe:	4619      	mov	r1, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fcc5 	bl	8008f90 <USBH_LL_GetURBState>
 8008606:	4603      	mov	r3, r0
 8008608:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d11e      	bne.n	800864e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	7c1b      	ldrb	r3, [r3, #16]
 8008614:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008618:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	8adb      	ldrh	r3, [r3, #22]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008622:	7b7b      	ldrb	r3, [r7, #13]
 8008624:	2b80      	cmp	r3, #128	; 0x80
 8008626:	d103      	bne.n	8008630 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2203      	movs	r2, #3
 800862c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800862e:	e117      	b.n	8008860 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2205      	movs	r2, #5
 8008634:	761a      	strb	r2, [r3, #24]
      break;
 8008636:	e113      	b.n	8008860 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008638:	7b7b      	ldrb	r3, [r7, #13]
 800863a:	2b80      	cmp	r3, #128	; 0x80
 800863c:	d103      	bne.n	8008646 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2209      	movs	r2, #9
 8008642:	761a      	strb	r2, [r3, #24]
      break;
 8008644:	e10c      	b.n	8008860 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2207      	movs	r2, #7
 800864a:	761a      	strb	r2, [r3, #24]
      break;
 800864c:	e108      	b.n	8008860 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	2b04      	cmp	r3, #4
 8008652:	d003      	beq.n	800865c <USBH_HandleControl+0xcc>
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	2b02      	cmp	r3, #2
 8008658:	f040 8102 	bne.w	8008860 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	220b      	movs	r2, #11
 8008660:	761a      	strb	r2, [r3, #24]
      break;
 8008662:	e0fd      	b.n	8008860 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800866a:	b29a      	uxth	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6899      	ldr	r1, [r3, #8]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	899a      	ldrh	r2, [r3, #12]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	791b      	ldrb	r3, [r3, #4]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f93c 	bl	80088fa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2204      	movs	r2, #4
 8008686:	761a      	strb	r2, [r3, #24]
      break;
 8008688:	e0f3      	b.n	8008872 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	791b      	ldrb	r3, [r3, #4]
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fc7d 	bl	8008f90 <USBH_LL_GetURBState>
 8008696:	4603      	mov	r3, r0
 8008698:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800869a:	7bbb      	ldrb	r3, [r7, #14]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d102      	bne.n	80086a6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2209      	movs	r2, #9
 80086a4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	2b05      	cmp	r3, #5
 80086aa:	d102      	bne.n	80086b2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80086ac:	2303      	movs	r3, #3
 80086ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80086b0:	e0d8      	b.n	8008864 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
 80086b4:	2b04      	cmp	r3, #4
 80086b6:	f040 80d5 	bne.w	8008864 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	220b      	movs	r2, #11
 80086be:	761a      	strb	r2, [r3, #24]
      break;
 80086c0:	e0d0      	b.n	8008864 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6899      	ldr	r1, [r3, #8]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	899a      	ldrh	r2, [r3, #12]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	7958      	ldrb	r0, [r3, #5]
 80086ce:	2301      	movs	r3, #1
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	4603      	mov	r3, r0
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f8eb 	bl	80088b0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2206      	movs	r2, #6
 80086ea:	761a      	strb	r2, [r3, #24]
      break;
 80086ec:	e0c1      	b.n	8008872 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	795b      	ldrb	r3, [r3, #5]
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fc4b 	bl	8008f90 <USBH_LL_GetURBState>
 80086fa:	4603      	mov	r3, r0
 80086fc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80086fe:	7bbb      	ldrb	r3, [r7, #14]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d103      	bne.n	800870c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2207      	movs	r2, #7
 8008708:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800870a:	e0ad      	b.n	8008868 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	2b05      	cmp	r3, #5
 8008710:	d105      	bne.n	800871e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	220c      	movs	r2, #12
 8008716:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008718:	2303      	movs	r3, #3
 800871a:	73fb      	strb	r3, [r7, #15]
      break;
 800871c:	e0a4      	b.n	8008868 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	2b02      	cmp	r3, #2
 8008722:	d103      	bne.n	800872c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2205      	movs	r2, #5
 8008728:	761a      	strb	r2, [r3, #24]
      break;
 800872a:	e09d      	b.n	8008868 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800872c:	7bbb      	ldrb	r3, [r7, #14]
 800872e:	2b04      	cmp	r3, #4
 8008730:	f040 809a 	bne.w	8008868 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	220b      	movs	r2, #11
 8008738:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800873a:	2302      	movs	r3, #2
 800873c:	73fb      	strb	r3, [r7, #15]
      break;
 800873e:	e093      	b.n	8008868 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	791b      	ldrb	r3, [r3, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	2100      	movs	r1, #0
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f8d6 	bl	80088fa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008754:	b29a      	uxth	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2208      	movs	r2, #8
 800875e:	761a      	strb	r2, [r3, #24]

      break;
 8008760:	e087      	b.n	8008872 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	791b      	ldrb	r3, [r3, #4]
 8008766:	4619      	mov	r1, r3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fc11 	bl	8008f90 <USBH_LL_GetURBState>
 800876e:	4603      	mov	r3, r0
 8008770:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008772:	7bbb      	ldrb	r3, [r7, #14]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d105      	bne.n	8008784 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	220d      	movs	r2, #13
 800877c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008782:	e073      	b.n	800886c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	2b04      	cmp	r3, #4
 8008788:	d103      	bne.n	8008792 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	220b      	movs	r2, #11
 800878e:	761a      	strb	r2, [r3, #24]
      break;
 8008790:	e06c      	b.n	800886c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	2b05      	cmp	r3, #5
 8008796:	d169      	bne.n	800886c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008798:	2303      	movs	r3, #3
 800879a:	73fb      	strb	r3, [r7, #15]
      break;
 800879c:	e066      	b.n	800886c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	795a      	ldrb	r2, [r3, #5]
 80087a2:	2301      	movs	r3, #1
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	4613      	mov	r3, r2
 80087a8:	2200      	movs	r2, #0
 80087aa:	2100      	movs	r1, #0
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f87f 	bl	80088b0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	220a      	movs	r2, #10
 80087c2:	761a      	strb	r2, [r3, #24]
      break;
 80087c4:	e055      	b.n	8008872 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	795b      	ldrb	r3, [r3, #5]
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fbdf 	bl	8008f90 <USBH_LL_GetURBState>
 80087d2:	4603      	mov	r3, r0
 80087d4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d105      	bne.n	80087e8 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	220d      	movs	r2, #13
 80087e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80087e6:	e043      	b.n	8008870 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80087e8:	7bbb      	ldrb	r3, [r7, #14]
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d103      	bne.n	80087f6 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2209      	movs	r2, #9
 80087f2:	761a      	strb	r2, [r3, #24]
      break;
 80087f4:	e03c      	b.n	8008870 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	d139      	bne.n	8008870 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	220b      	movs	r2, #11
 8008800:	761a      	strb	r2, [r3, #24]
      break;
 8008802:	e035      	b.n	8008870 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	7e5b      	ldrb	r3, [r3, #25]
 8008808:	3301      	adds	r3, #1
 800880a:	b2da      	uxtb	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	765a      	strb	r2, [r3, #25]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	7e5b      	ldrb	r3, [r3, #25]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d806      	bhi.n	8008826 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008824:	e025      	b.n	8008872 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800882c:	2106      	movs	r1, #6
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	795b      	ldrb	r3, [r3, #5]
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f90c 	bl	8008a5c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	791b      	ldrb	r3, [r3, #4]
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f906 	bl	8008a5c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008856:	2302      	movs	r3, #2
 8008858:	73fb      	strb	r3, [r7, #15]
      break;
 800885a:	e00a      	b.n	8008872 <USBH_HandleControl+0x2e2>

    default:
      break;
 800885c:	bf00      	nop
 800885e:	e008      	b.n	8008872 <USBH_HandleControl+0x2e2>
      break;
 8008860:	bf00      	nop
 8008862:	e006      	b.n	8008872 <USBH_HandleControl+0x2e2>
      break;
 8008864:	bf00      	nop
 8008866:	e004      	b.n	8008872 <USBH_HandleControl+0x2e2>
      break;
 8008868:	bf00      	nop
 800886a:	e002      	b.n	8008872 <USBH_HandleControl+0x2e2>
      break;
 800886c:	bf00      	nop
 800886e:	e000      	b.n	8008872 <USBH_HandleControl+0x2e2>
      break;
 8008870:	bf00      	nop
  }

  return status;
 8008872:	7bfb      	ldrb	r3, [r7, #15]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af04      	add	r7, sp, #16
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	4613      	mov	r3, r2
 8008888:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800888a:	79f9      	ldrb	r1, [r7, #7]
 800888c:	2300      	movs	r3, #0
 800888e:	9303      	str	r3, [sp, #12]
 8008890:	2308      	movs	r3, #8
 8008892:	9302      	str	r3, [sp, #8]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	9301      	str	r3, [sp, #4]
 8008898:	2300      	movs	r3, #0
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	2300      	movs	r3, #0
 800889e:	2200      	movs	r2, #0
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 fb44 	bl	8008f2e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b088      	sub	sp, #32
 80088b4:	af04      	add	r7, sp, #16
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	4611      	mov	r1, r2
 80088bc:	461a      	mov	r2, r3
 80088be:	460b      	mov	r3, r1
 80088c0:	80fb      	strh	r3, [r7, #6]
 80088c2:	4613      	mov	r3, r2
 80088c4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d001      	beq.n	80088d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80088d4:	7979      	ldrb	r1, [r7, #5]
 80088d6:	7e3b      	ldrb	r3, [r7, #24]
 80088d8:	9303      	str	r3, [sp, #12]
 80088da:	88fb      	ldrh	r3, [r7, #6]
 80088dc:	9302      	str	r3, [sp, #8]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	9301      	str	r3, [sp, #4]
 80088e2:	2301      	movs	r3, #1
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	2300      	movs	r3, #0
 80088e8:	2200      	movs	r2, #0
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 fb1f 	bl	8008f2e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b088      	sub	sp, #32
 80088fe:	af04      	add	r7, sp, #16
 8008900:	60f8      	str	r0, [r7, #12]
 8008902:	60b9      	str	r1, [r7, #8]
 8008904:	4611      	mov	r1, r2
 8008906:	461a      	mov	r2, r3
 8008908:	460b      	mov	r3, r1
 800890a:	80fb      	strh	r3, [r7, #6]
 800890c:	4613      	mov	r3, r2
 800890e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008910:	7979      	ldrb	r1, [r7, #5]
 8008912:	2300      	movs	r3, #0
 8008914:	9303      	str	r3, [sp, #12]
 8008916:	88fb      	ldrh	r3, [r7, #6]
 8008918:	9302      	str	r3, [sp, #8]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	2301      	movs	r3, #1
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	2300      	movs	r3, #0
 8008924:	2201      	movs	r2, #1
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 fb01 	bl	8008f2e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800892c:	2300      	movs	r3, #0

}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b088      	sub	sp, #32
 800893a:	af04      	add	r7, sp, #16
 800893c:	60f8      	str	r0, [r7, #12]
 800893e:	60b9      	str	r1, [r7, #8]
 8008940:	4611      	mov	r1, r2
 8008942:	461a      	mov	r2, r3
 8008944:	460b      	mov	r3, r1
 8008946:	80fb      	strh	r3, [r7, #6]
 8008948:	4613      	mov	r3, r2
 800894a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008956:	2300      	movs	r3, #0
 8008958:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800895a:	7979      	ldrb	r1, [r7, #5]
 800895c:	7e3b      	ldrb	r3, [r7, #24]
 800895e:	9303      	str	r3, [sp, #12]
 8008960:	88fb      	ldrh	r3, [r7, #6]
 8008962:	9302      	str	r3, [sp, #8]
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	9301      	str	r3, [sp, #4]
 8008968:	2301      	movs	r3, #1
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	2302      	movs	r3, #2
 800896e:	2200      	movs	r2, #0
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 fadc 	bl	8008f2e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b088      	sub	sp, #32
 8008984:	af04      	add	r7, sp, #16
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	4611      	mov	r1, r2
 800898c:	461a      	mov	r2, r3
 800898e:	460b      	mov	r3, r1
 8008990:	80fb      	strh	r3, [r7, #6]
 8008992:	4613      	mov	r3, r2
 8008994:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008996:	7979      	ldrb	r1, [r7, #5]
 8008998:	2300      	movs	r3, #0
 800899a:	9303      	str	r3, [sp, #12]
 800899c:	88fb      	ldrh	r3, [r7, #6]
 800899e:	9302      	str	r3, [sp, #8]
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	9301      	str	r3, [sp, #4]
 80089a4:	2301      	movs	r3, #1
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	2302      	movs	r3, #2
 80089aa:	2201      	movs	r2, #1
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 fabe 	bl	8008f2e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b086      	sub	sp, #24
 80089c0:	af04      	add	r7, sp, #16
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	4608      	mov	r0, r1
 80089c6:	4611      	mov	r1, r2
 80089c8:	461a      	mov	r2, r3
 80089ca:	4603      	mov	r3, r0
 80089cc:	70fb      	strb	r3, [r7, #3]
 80089ce:	460b      	mov	r3, r1
 80089d0:	70bb      	strb	r3, [r7, #2]
 80089d2:	4613      	mov	r3, r2
 80089d4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80089d6:	7878      	ldrb	r0, [r7, #1]
 80089d8:	78ba      	ldrb	r2, [r7, #2]
 80089da:	78f9      	ldrb	r1, [r7, #3]
 80089dc:	8b3b      	ldrh	r3, [r7, #24]
 80089de:	9302      	str	r3, [sp, #8]
 80089e0:	7d3b      	ldrb	r3, [r7, #20]
 80089e2:	9301      	str	r3, [sp, #4]
 80089e4:	7c3b      	ldrb	r3, [r7, #16]
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	4603      	mov	r3, r0
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fa51 	bl	8008e92 <USBH_LL_OpenPipe>

  return USBH_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	460b      	mov	r3, r1
 8008a04:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008a06:	78fb      	ldrb	r3, [r7, #3]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fa70 	bl	8008ef0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	460b      	mov	r3, r1
 8008a24:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f836 	bl	8008a98 <USBH_GetFreePipe>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008a30:	89fb      	ldrh	r3, [r7, #14]
 8008a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d00a      	beq.n	8008a50 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008a3a:	78fa      	ldrb	r2, [r7, #3]
 8008a3c:	89fb      	ldrh	r3, [r7, #14]
 8008a3e:	f003 030f 	and.w	r3, r3, #15
 8008a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	33e0      	adds	r3, #224	; 0xe0
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	440b      	add	r3, r1
 8008a4e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008a50:	89fb      	ldrh	r3, [r7, #14]
 8008a52:	b2db      	uxtb	r3, r3
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	2b0a      	cmp	r3, #10
 8008a6c:	d80d      	bhi.n	8008a8a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008a6e:	78fb      	ldrb	r3, [r7, #3]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	33e0      	adds	r3, #224	; 0xe0
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	685a      	ldr	r2, [r3, #4]
 8008a7a:	78fb      	ldrb	r3, [r7, #3]
 8008a7c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	33e0      	adds	r3, #224	; 0xe0
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	440b      	add	r3, r1
 8008a88:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73fb      	strb	r3, [r7, #15]
 8008aa8:	e00f      	b.n	8008aca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	33e0      	adds	r3, #224	; 0xe0
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d102      	bne.n	8008ac4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	e007      	b.n	8008ad4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	73fb      	strb	r3, [r7, #15]
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
 8008acc:	2b0a      	cmp	r3, #10
 8008ace:	d9ec      	bls.n	8008aaa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	490e      	ldr	r1, [pc, #56]	; (8008b20 <MX_USB_HOST_Init+0x40>)
 8008ae8:	480e      	ldr	r0, [pc, #56]	; (8008b24 <MX_USB_HOST_Init+0x44>)
 8008aea:	f7fe fc9f 	bl	800742c <USBH_Init>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008af4:	f7f8 fa22 	bl	8000f3c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008af8:	490b      	ldr	r1, [pc, #44]	; (8008b28 <MX_USB_HOST_Init+0x48>)
 8008afa:	480a      	ldr	r0, [pc, #40]	; (8008b24 <MX_USB_HOST_Init+0x44>)
 8008afc:	f7fe fd24 	bl	8007548 <USBH_RegisterClass>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008b06:	f7f8 fa19 	bl	8000f3c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008b0a:	4806      	ldr	r0, [pc, #24]	; (8008b24 <MX_USB_HOST_Init+0x44>)
 8008b0c:	f7fe fda8 	bl	8007660 <USBH_Start>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008b16:	f7f8 fa11 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008b1a:	bf00      	nop
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	08008b41 	.word	0x08008b41
 8008b24:	200003b8 	.word	0x200003b8
 8008b28:	2000000c 	.word	0x2000000c

08008b2c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008b30:	4802      	ldr	r0, [pc, #8]	; (8008b3c <MX_USB_HOST_Process+0x10>)
 8008b32:	f7fe fda5 	bl	8007680 <USBH_Process>
}
 8008b36:	bf00      	nop
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	200003b8 	.word	0x200003b8

08008b40 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008b4c:	78fb      	ldrb	r3, [r7, #3]
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	d819      	bhi.n	8008b88 <USBH_UserProcess+0x48>
 8008b54:	a201      	add	r2, pc, #4	; (adr r2, 8008b5c <USBH_UserProcess+0x1c>)
 8008b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5a:	bf00      	nop
 8008b5c:	08008b89 	.word	0x08008b89
 8008b60:	08008b79 	.word	0x08008b79
 8008b64:	08008b89 	.word	0x08008b89
 8008b68:	08008b81 	.word	0x08008b81
 8008b6c:	08008b71 	.word	0x08008b71
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008b70:	4b09      	ldr	r3, [pc, #36]	; (8008b98 <USBH_UserProcess+0x58>)
 8008b72:	2203      	movs	r2, #3
 8008b74:	701a      	strb	r2, [r3, #0]
  break;
 8008b76:	e008      	b.n	8008b8a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008b78:	4b07      	ldr	r3, [pc, #28]	; (8008b98 <USBH_UserProcess+0x58>)
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	701a      	strb	r2, [r3, #0]
  break;
 8008b7e:	e004      	b.n	8008b8a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008b80:	4b05      	ldr	r3, [pc, #20]	; (8008b98 <USBH_UserProcess+0x58>)
 8008b82:	2201      	movs	r2, #1
 8008b84:	701a      	strb	r2, [r3, #0]
  break;
 8008b86:	e000      	b.n	8008b8a <USBH_UserProcess+0x4a>

  default:
  break;
 8008b88:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	200000bc 	.word	0x200000bc

08008b9c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b08a      	sub	sp, #40	; 0x28
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ba4:	f107 0314 	add.w	r3, r7, #20
 8008ba8:	2200      	movs	r2, #0
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	605a      	str	r2, [r3, #4]
 8008bae:	609a      	str	r2, [r3, #8]
 8008bb0:	60da      	str	r2, [r3, #12]
 8008bb2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bbc:	d147      	bne.n	8008c4e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	613b      	str	r3, [r7, #16]
 8008bc2:	4b25      	ldr	r3, [pc, #148]	; (8008c58 <HAL_HCD_MspInit+0xbc>)
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc6:	4a24      	ldr	r2, [pc, #144]	; (8008c58 <HAL_HCD_MspInit+0xbc>)
 8008bc8:	f043 0301 	orr.w	r3, r3, #1
 8008bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8008bce:	4b22      	ldr	r3, [pc, #136]	; (8008c58 <HAL_HCD_MspInit+0xbc>)
 8008bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	613b      	str	r3, [r7, #16]
 8008bd8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008be0:	2300      	movs	r3, #0
 8008be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008be4:	2300      	movs	r3, #0
 8008be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008be8:	f107 0314 	add.w	r3, r7, #20
 8008bec:	4619      	mov	r1, r3
 8008bee:	481b      	ldr	r0, [pc, #108]	; (8008c5c <HAL_HCD_MspInit+0xc0>)
 8008bf0:	f7f8 fdc6 	bl	8001780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008bf4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c02:	2300      	movs	r3, #0
 8008c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c06:	230a      	movs	r3, #10
 8008c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c0a:	f107 0314 	add.w	r3, r7, #20
 8008c0e:	4619      	mov	r1, r3
 8008c10:	4812      	ldr	r0, [pc, #72]	; (8008c5c <HAL_HCD_MspInit+0xc0>)
 8008c12:	f7f8 fdb5 	bl	8001780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c16:	4b10      	ldr	r3, [pc, #64]	; (8008c58 <HAL_HCD_MspInit+0xbc>)
 8008c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1a:	4a0f      	ldr	r2, [pc, #60]	; (8008c58 <HAL_HCD_MspInit+0xbc>)
 8008c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c20:	6353      	str	r3, [r2, #52]	; 0x34
 8008c22:	2300      	movs	r3, #0
 8008c24:	60fb      	str	r3, [r7, #12]
 8008c26:	4b0c      	ldr	r3, [pc, #48]	; (8008c58 <HAL_HCD_MspInit+0xbc>)
 8008c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2a:	4a0b      	ldr	r2, [pc, #44]	; (8008c58 <HAL_HCD_MspInit+0xbc>)
 8008c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c30:	6453      	str	r3, [r2, #68]	; 0x44
 8008c32:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <HAL_HCD_MspInit+0xbc>)
 8008c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c3e:	2200      	movs	r2, #0
 8008c40:	2100      	movs	r1, #0
 8008c42:	2043      	movs	r0, #67	; 0x43
 8008c44:	f7f8 fd43 	bl	80016ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c48:	2043      	movs	r0, #67	; 0x43
 8008c4a:	f7f8 fd5c 	bl	8001706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c4e:	bf00      	nop
 8008c50:	3728      	adds	r7, #40	; 0x28
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	40023800 	.word	0x40023800
 8008c5c:	40020000 	.word	0x40020000

08008c60 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7ff f8d9 	bl	8007e26 <USBH_LL_IncTimer>
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7ff f911 	bl	8007eb2 <USBH_LL_Connect>
}
 8008c90:	bf00      	nop
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7ff f91a 	bl	8007ee0 <USBH_LL_Disconnect>
}
 8008cac:	bf00      	nop
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7ff f8cb 	bl	8007e7a <USBH_LL_PortEnabled>
}
 8008ce4:	bf00      	nop
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7ff f8cb 	bl	8007e96 <USBH_LL_PortDisabled>
}
 8008d00:	bf00      	nop
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d12a      	bne.n	8008d70 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008d1a:	4a18      	ldr	r2, [pc, #96]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a15      	ldr	r2, [pc, #84]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d26:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d2a:	4b14      	ldr	r3, [pc, #80]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008d30:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008d32:	4b12      	ldr	r3, [pc, #72]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d34:	2208      	movs	r2, #8
 8008d36:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008d38:	4b10      	ldr	r3, [pc, #64]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d3e:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d40:	2200      	movs	r2, #0
 8008d42:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008d44:	4b0d      	ldr	r3, [pc, #52]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d46:	2202      	movs	r2, #2
 8008d48:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d4a:	4b0c      	ldr	r3, [pc, #48]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008d50:	480a      	ldr	r0, [pc, #40]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d52:	f7f8 fee3 	bl	8001b1c <HAL_HCD_Init>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008d5c:	f7f8 f8ee 	bl	8000f3c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008d60:	4806      	ldr	r0, [pc, #24]	; (8008d7c <USBH_LL_Init+0x74>)
 8008d62:	f7f9 fae7 	bl	8002334 <HAL_HCD_GetCurrentFrame>
 8008d66:	4603      	mov	r3, r0
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7ff f84c 	bl	8007e08 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	20000790 	.word	0x20000790

08008d80 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7f9 fa54 	bl	8002244 <HAL_HCD_Start>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 f95c 	bl	8009060 <USBH_Get_USB_Status>
 8008da8:	4603      	mov	r3, r0
 8008daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7f9 fa5c 	bl	800228a <HAL_HCD_Stop>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 f941 	bl	8009060 <USBH_Get_USB_Status>
 8008dde:	4603      	mov	r3, r0
 8008de0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008df4:	2301      	movs	r3, #1
 8008df6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7f9 faa6 	bl	8002350 <HAL_HCD_GetCurrentSpeed>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d007      	beq.n	8008e1a <USBH_LL_GetSpeed+0x2e>
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d302      	bcc.n	8008e14 <USBH_LL_GetSpeed+0x28>
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d006      	beq.n	8008e20 <USBH_LL_GetSpeed+0x34>
 8008e12:	e008      	b.n	8008e26 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008e14:	2300      	movs	r3, #0
 8008e16:	73fb      	strb	r3, [r7, #15]
    break;
 8008e18:	e008      	b.n	8008e2c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e1e:	e005      	b.n	8008e2c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008e20:	2302      	movs	r3, #2
 8008e22:	73fb      	strb	r3, [r7, #15]
    break;
 8008e24:	e002      	b.n	8008e2c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008e26:	2301      	movs	r3, #1
 8008e28:	73fb      	strb	r3, [r7, #15]
    break;
 8008e2a:	bf00      	nop
  }
  return  speed;
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b084      	sub	sp, #16
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7f9 fa39 	bl	80022c4 <HAL_HCD_ResetPort>
 8008e52:	4603      	mov	r3, r0
 8008e54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 f901 	bl	8009060 <USBH_Get_USB_Status>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e7e:	78fa      	ldrb	r2, [r7, #3]
 8008e80:	4611      	mov	r1, r2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7f9 fa41 	bl	800230a <HAL_HCD_HC_GetXferCount>
 8008e88:	4603      	mov	r3, r0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e92:	b590      	push	{r4, r7, lr}
 8008e94:	b089      	sub	sp, #36	; 0x24
 8008e96:	af04      	add	r7, sp, #16
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	4608      	mov	r0, r1
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	70fb      	strb	r3, [r7, #3]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70bb      	strb	r3, [r7, #2]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008eba:	787c      	ldrb	r4, [r7, #1]
 8008ebc:	78ba      	ldrb	r2, [r7, #2]
 8008ebe:	78f9      	ldrb	r1, [r7, #3]
 8008ec0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ec2:	9302      	str	r3, [sp, #8]
 8008ec4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ec8:	9301      	str	r3, [sp, #4]
 8008eca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	4623      	mov	r3, r4
 8008ed2:	f7f8 fe85 	bl	8001be0 <HAL_HCD_HC_Init>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 f8bf 	bl	8009060 <USBH_Get_USB_Status>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd90      	pop	{r4, r7, pc}

08008ef0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f0a:	78fa      	ldrb	r2, [r7, #3]
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7f8 fefe 	bl	8001d10 <HAL_HCD_HC_Halt>
 8008f14:	4603      	mov	r3, r0
 8008f16:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 f8a0 	bl	8009060 <USBH_Get_USB_Status>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f24:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008f2e:	b590      	push	{r4, r7, lr}
 8008f30:	b089      	sub	sp, #36	; 0x24
 8008f32:	af04      	add	r7, sp, #16
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	4608      	mov	r0, r1
 8008f38:	4611      	mov	r1, r2
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	70fb      	strb	r3, [r7, #3]
 8008f40:	460b      	mov	r3, r1
 8008f42:	70bb      	strb	r3, [r7, #2]
 8008f44:	4613      	mov	r3, r2
 8008f46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008f56:	787c      	ldrb	r4, [r7, #1]
 8008f58:	78ba      	ldrb	r2, [r7, #2]
 8008f5a:	78f9      	ldrb	r1, [r7, #3]
 8008f5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f60:	9303      	str	r3, [sp, #12]
 8008f62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f64:	9302      	str	r3, [sp, #8]
 8008f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f68:	9301      	str	r3, [sp, #4]
 8008f6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	4623      	mov	r3, r4
 8008f72:	f7f8 fef1 	bl	8001d58 <HAL_HCD_HC_SubmitRequest>
 8008f76:	4603      	mov	r3, r0
 8008f78:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 f86f 	bl	8009060 <USBH_Get_USB_Status>
 8008f82:	4603      	mov	r3, r0
 8008f84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd90      	pop	{r4, r7, pc}

08008f90 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	460b      	mov	r3, r1
 8008f9a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fa2:	78fa      	ldrb	r2, [r7, #3]
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7f9 f99a 	bl	80022e0 <HAL_HCD_HC_GetURBState>
 8008fac:	4603      	mov	r3, r0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b082      	sub	sp, #8
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d103      	bne.n	8008fd4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008fcc:	78fb      	ldrb	r3, [r7, #3]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 f872 	bl	80090b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008fd4:	20c8      	movs	r0, #200	; 0xc8
 8008fd6:	f7f8 fa7d 	bl	80014d4 <HAL_Delay>
  return USBH_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	70fb      	strb	r3, [r7, #3]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ffa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008ffc:	78fa      	ldrb	r2, [r7, #3]
 8008ffe:	68f9      	ldr	r1, [r7, #12]
 8009000:	4613      	mov	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	00db      	lsls	r3, r3, #3
 8009008:	440b      	add	r3, r1
 800900a:	333b      	adds	r3, #59	; 0x3b
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00a      	beq.n	8009028 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009012:	78fa      	ldrb	r2, [r7, #3]
 8009014:	68f9      	ldr	r1, [r7, #12]
 8009016:	4613      	mov	r3, r2
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	4413      	add	r3, r2
 800901c:	00db      	lsls	r3, r3, #3
 800901e:	440b      	add	r3, r1
 8009020:	3350      	adds	r3, #80	; 0x50
 8009022:	78ba      	ldrb	r2, [r7, #2]
 8009024:	701a      	strb	r2, [r3, #0]
 8009026:	e009      	b.n	800903c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009028:	78fa      	ldrb	r2, [r7, #3]
 800902a:	68f9      	ldr	r1, [r7, #12]
 800902c:	4613      	mov	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	00db      	lsls	r3, r3, #3
 8009034:	440b      	add	r3, r1
 8009036:	3351      	adds	r3, #81	; 0x51
 8009038:	78ba      	ldrb	r2, [r7, #2]
 800903a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b082      	sub	sp, #8
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7f8 fa3e 	bl	80014d4 <HAL_Delay>
}
 8009058:	bf00      	nop
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	4603      	mov	r3, r0
 8009068:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800906e:	79fb      	ldrb	r3, [r7, #7]
 8009070:	2b03      	cmp	r3, #3
 8009072:	d817      	bhi.n	80090a4 <USBH_Get_USB_Status+0x44>
 8009074:	a201      	add	r2, pc, #4	; (adr r2, 800907c <USBH_Get_USB_Status+0x1c>)
 8009076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907a:	bf00      	nop
 800907c:	0800908d 	.word	0x0800908d
 8009080:	08009093 	.word	0x08009093
 8009084:	08009099 	.word	0x08009099
 8009088:	0800909f 	.word	0x0800909f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	73fb      	strb	r3, [r7, #15]
    break;
 8009090:	e00b      	b.n	80090aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009092:	2302      	movs	r3, #2
 8009094:	73fb      	strb	r3, [r7, #15]
    break;
 8009096:	e008      	b.n	80090aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009098:	2301      	movs	r3, #1
 800909a:	73fb      	strb	r3, [r7, #15]
    break;
 800909c:	e005      	b.n	80090aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800909e:	2302      	movs	r3, #2
 80090a0:	73fb      	strb	r3, [r7, #15]
    break;
 80090a2:	e002      	b.n	80090aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80090a4:	2302      	movs	r3, #2
 80090a6:	73fb      	strb	r3, [r7, #15]
    break;
 80090a8:	bf00      	nop
  }
  return usb_status;
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80090c2:	79fb      	ldrb	r3, [r7, #7]
 80090c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d102      	bne.n	80090d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80090cc:	2301      	movs	r3, #1
 80090ce:	73fb      	strb	r3, [r7, #15]
 80090d0:	e001      	b.n	80090d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80090d2:	2300      	movs	r3, #0
 80090d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	461a      	mov	r2, r3
 80090da:	2101      	movs	r1, #1
 80090dc:	4803      	ldr	r0, [pc, #12]	; (80090ec <MX_DriverVbusFS+0x34>)
 80090de:	f7f8 fce9 	bl	8001ab4 <HAL_GPIO_WritePin>
}
 80090e2:	bf00      	nop
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	40020800 	.word	0x40020800

080090f0 <__errno>:
 80090f0:	4b01      	ldr	r3, [pc, #4]	; (80090f8 <__errno+0x8>)
 80090f2:	6818      	ldr	r0, [r3, #0]
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	2000002c 	.word	0x2000002c

080090fc <__libc_init_array>:
 80090fc:	b570      	push	{r4, r5, r6, lr}
 80090fe:	4e0d      	ldr	r6, [pc, #52]	; (8009134 <__libc_init_array+0x38>)
 8009100:	4c0d      	ldr	r4, [pc, #52]	; (8009138 <__libc_init_array+0x3c>)
 8009102:	1ba4      	subs	r4, r4, r6
 8009104:	10a4      	asrs	r4, r4, #2
 8009106:	2500      	movs	r5, #0
 8009108:	42a5      	cmp	r5, r4
 800910a:	d109      	bne.n	8009120 <__libc_init_array+0x24>
 800910c:	4e0b      	ldr	r6, [pc, #44]	; (800913c <__libc_init_array+0x40>)
 800910e:	4c0c      	ldr	r4, [pc, #48]	; (8009140 <__libc_init_array+0x44>)
 8009110:	f000 fc38 	bl	8009984 <_init>
 8009114:	1ba4      	subs	r4, r4, r6
 8009116:	10a4      	asrs	r4, r4, #2
 8009118:	2500      	movs	r5, #0
 800911a:	42a5      	cmp	r5, r4
 800911c:	d105      	bne.n	800912a <__libc_init_array+0x2e>
 800911e:	bd70      	pop	{r4, r5, r6, pc}
 8009120:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009124:	4798      	blx	r3
 8009126:	3501      	adds	r5, #1
 8009128:	e7ee      	b.n	8009108 <__libc_init_array+0xc>
 800912a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800912e:	4798      	blx	r3
 8009130:	3501      	adds	r5, #1
 8009132:	e7f2      	b.n	800911a <__libc_init_array+0x1e>
 8009134:	08009bb0 	.word	0x08009bb0
 8009138:	08009bb0 	.word	0x08009bb0
 800913c:	08009bb0 	.word	0x08009bb0
 8009140:	08009bb4 	.word	0x08009bb4

08009144 <malloc>:
 8009144:	4b02      	ldr	r3, [pc, #8]	; (8009150 <malloc+0xc>)
 8009146:	4601      	mov	r1, r0
 8009148:	6818      	ldr	r0, [r3, #0]
 800914a:	f000 b86d 	b.w	8009228 <_malloc_r>
 800914e:	bf00      	nop
 8009150:	2000002c 	.word	0x2000002c

08009154 <free>:
 8009154:	4b02      	ldr	r3, [pc, #8]	; (8009160 <free+0xc>)
 8009156:	4601      	mov	r1, r0
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	f000 b817 	b.w	800918c <_free_r>
 800915e:	bf00      	nop
 8009160:	2000002c 	.word	0x2000002c

08009164 <memcpy>:
 8009164:	b510      	push	{r4, lr}
 8009166:	1e43      	subs	r3, r0, #1
 8009168:	440a      	add	r2, r1
 800916a:	4291      	cmp	r1, r2
 800916c:	d100      	bne.n	8009170 <memcpy+0xc>
 800916e:	bd10      	pop	{r4, pc}
 8009170:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009174:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009178:	e7f7      	b.n	800916a <memcpy+0x6>

0800917a <memset>:
 800917a:	4402      	add	r2, r0
 800917c:	4603      	mov	r3, r0
 800917e:	4293      	cmp	r3, r2
 8009180:	d100      	bne.n	8009184 <memset+0xa>
 8009182:	4770      	bx	lr
 8009184:	f803 1b01 	strb.w	r1, [r3], #1
 8009188:	e7f9      	b.n	800917e <memset+0x4>
	...

0800918c <_free_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4605      	mov	r5, r0
 8009190:	2900      	cmp	r1, #0
 8009192:	d045      	beq.n	8009220 <_free_r+0x94>
 8009194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009198:	1f0c      	subs	r4, r1, #4
 800919a:	2b00      	cmp	r3, #0
 800919c:	bfb8      	it	lt
 800919e:	18e4      	addlt	r4, r4, r3
 80091a0:	f000 f8cc 	bl	800933c <__malloc_lock>
 80091a4:	4a1f      	ldr	r2, [pc, #124]	; (8009224 <_free_r+0x98>)
 80091a6:	6813      	ldr	r3, [r2, #0]
 80091a8:	4610      	mov	r0, r2
 80091aa:	b933      	cbnz	r3, 80091ba <_free_r+0x2e>
 80091ac:	6063      	str	r3, [r4, #4]
 80091ae:	6014      	str	r4, [r2, #0]
 80091b0:	4628      	mov	r0, r5
 80091b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091b6:	f000 b8c2 	b.w	800933e <__malloc_unlock>
 80091ba:	42a3      	cmp	r3, r4
 80091bc:	d90c      	bls.n	80091d8 <_free_r+0x4c>
 80091be:	6821      	ldr	r1, [r4, #0]
 80091c0:	1862      	adds	r2, r4, r1
 80091c2:	4293      	cmp	r3, r2
 80091c4:	bf04      	itt	eq
 80091c6:	681a      	ldreq	r2, [r3, #0]
 80091c8:	685b      	ldreq	r3, [r3, #4]
 80091ca:	6063      	str	r3, [r4, #4]
 80091cc:	bf04      	itt	eq
 80091ce:	1852      	addeq	r2, r2, r1
 80091d0:	6022      	streq	r2, [r4, #0]
 80091d2:	6004      	str	r4, [r0, #0]
 80091d4:	e7ec      	b.n	80091b0 <_free_r+0x24>
 80091d6:	4613      	mov	r3, r2
 80091d8:	685a      	ldr	r2, [r3, #4]
 80091da:	b10a      	cbz	r2, 80091e0 <_free_r+0x54>
 80091dc:	42a2      	cmp	r2, r4
 80091de:	d9fa      	bls.n	80091d6 <_free_r+0x4a>
 80091e0:	6819      	ldr	r1, [r3, #0]
 80091e2:	1858      	adds	r0, r3, r1
 80091e4:	42a0      	cmp	r0, r4
 80091e6:	d10b      	bne.n	8009200 <_free_r+0x74>
 80091e8:	6820      	ldr	r0, [r4, #0]
 80091ea:	4401      	add	r1, r0
 80091ec:	1858      	adds	r0, r3, r1
 80091ee:	4282      	cmp	r2, r0
 80091f0:	6019      	str	r1, [r3, #0]
 80091f2:	d1dd      	bne.n	80091b0 <_free_r+0x24>
 80091f4:	6810      	ldr	r0, [r2, #0]
 80091f6:	6852      	ldr	r2, [r2, #4]
 80091f8:	605a      	str	r2, [r3, #4]
 80091fa:	4401      	add	r1, r0
 80091fc:	6019      	str	r1, [r3, #0]
 80091fe:	e7d7      	b.n	80091b0 <_free_r+0x24>
 8009200:	d902      	bls.n	8009208 <_free_r+0x7c>
 8009202:	230c      	movs	r3, #12
 8009204:	602b      	str	r3, [r5, #0]
 8009206:	e7d3      	b.n	80091b0 <_free_r+0x24>
 8009208:	6820      	ldr	r0, [r4, #0]
 800920a:	1821      	adds	r1, r4, r0
 800920c:	428a      	cmp	r2, r1
 800920e:	bf04      	itt	eq
 8009210:	6811      	ldreq	r1, [r2, #0]
 8009212:	6852      	ldreq	r2, [r2, #4]
 8009214:	6062      	str	r2, [r4, #4]
 8009216:	bf04      	itt	eq
 8009218:	1809      	addeq	r1, r1, r0
 800921a:	6021      	streq	r1, [r4, #0]
 800921c:	605c      	str	r4, [r3, #4]
 800921e:	e7c7      	b.n	80091b0 <_free_r+0x24>
 8009220:	bd38      	pop	{r3, r4, r5, pc}
 8009222:	bf00      	nop
 8009224:	200000c0 	.word	0x200000c0

08009228 <_malloc_r>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	1ccd      	adds	r5, r1, #3
 800922c:	f025 0503 	bic.w	r5, r5, #3
 8009230:	3508      	adds	r5, #8
 8009232:	2d0c      	cmp	r5, #12
 8009234:	bf38      	it	cc
 8009236:	250c      	movcc	r5, #12
 8009238:	2d00      	cmp	r5, #0
 800923a:	4606      	mov	r6, r0
 800923c:	db01      	blt.n	8009242 <_malloc_r+0x1a>
 800923e:	42a9      	cmp	r1, r5
 8009240:	d903      	bls.n	800924a <_malloc_r+0x22>
 8009242:	230c      	movs	r3, #12
 8009244:	6033      	str	r3, [r6, #0]
 8009246:	2000      	movs	r0, #0
 8009248:	bd70      	pop	{r4, r5, r6, pc}
 800924a:	f000 f877 	bl	800933c <__malloc_lock>
 800924e:	4a21      	ldr	r2, [pc, #132]	; (80092d4 <_malloc_r+0xac>)
 8009250:	6814      	ldr	r4, [r2, #0]
 8009252:	4621      	mov	r1, r4
 8009254:	b991      	cbnz	r1, 800927c <_malloc_r+0x54>
 8009256:	4c20      	ldr	r4, [pc, #128]	; (80092d8 <_malloc_r+0xb0>)
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	b91b      	cbnz	r3, 8009264 <_malloc_r+0x3c>
 800925c:	4630      	mov	r0, r6
 800925e:	f000 f83d 	bl	80092dc <_sbrk_r>
 8009262:	6020      	str	r0, [r4, #0]
 8009264:	4629      	mov	r1, r5
 8009266:	4630      	mov	r0, r6
 8009268:	f000 f838 	bl	80092dc <_sbrk_r>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	d124      	bne.n	80092ba <_malloc_r+0x92>
 8009270:	230c      	movs	r3, #12
 8009272:	6033      	str	r3, [r6, #0]
 8009274:	4630      	mov	r0, r6
 8009276:	f000 f862 	bl	800933e <__malloc_unlock>
 800927a:	e7e4      	b.n	8009246 <_malloc_r+0x1e>
 800927c:	680b      	ldr	r3, [r1, #0]
 800927e:	1b5b      	subs	r3, r3, r5
 8009280:	d418      	bmi.n	80092b4 <_malloc_r+0x8c>
 8009282:	2b0b      	cmp	r3, #11
 8009284:	d90f      	bls.n	80092a6 <_malloc_r+0x7e>
 8009286:	600b      	str	r3, [r1, #0]
 8009288:	50cd      	str	r5, [r1, r3]
 800928a:	18cc      	adds	r4, r1, r3
 800928c:	4630      	mov	r0, r6
 800928e:	f000 f856 	bl	800933e <__malloc_unlock>
 8009292:	f104 000b 	add.w	r0, r4, #11
 8009296:	1d23      	adds	r3, r4, #4
 8009298:	f020 0007 	bic.w	r0, r0, #7
 800929c:	1ac3      	subs	r3, r0, r3
 800929e:	d0d3      	beq.n	8009248 <_malloc_r+0x20>
 80092a0:	425a      	negs	r2, r3
 80092a2:	50e2      	str	r2, [r4, r3]
 80092a4:	e7d0      	b.n	8009248 <_malloc_r+0x20>
 80092a6:	428c      	cmp	r4, r1
 80092a8:	684b      	ldr	r3, [r1, #4]
 80092aa:	bf16      	itet	ne
 80092ac:	6063      	strne	r3, [r4, #4]
 80092ae:	6013      	streq	r3, [r2, #0]
 80092b0:	460c      	movne	r4, r1
 80092b2:	e7eb      	b.n	800928c <_malloc_r+0x64>
 80092b4:	460c      	mov	r4, r1
 80092b6:	6849      	ldr	r1, [r1, #4]
 80092b8:	e7cc      	b.n	8009254 <_malloc_r+0x2c>
 80092ba:	1cc4      	adds	r4, r0, #3
 80092bc:	f024 0403 	bic.w	r4, r4, #3
 80092c0:	42a0      	cmp	r0, r4
 80092c2:	d005      	beq.n	80092d0 <_malloc_r+0xa8>
 80092c4:	1a21      	subs	r1, r4, r0
 80092c6:	4630      	mov	r0, r6
 80092c8:	f000 f808 	bl	80092dc <_sbrk_r>
 80092cc:	3001      	adds	r0, #1
 80092ce:	d0cf      	beq.n	8009270 <_malloc_r+0x48>
 80092d0:	6025      	str	r5, [r4, #0]
 80092d2:	e7db      	b.n	800928c <_malloc_r+0x64>
 80092d4:	200000c0 	.word	0x200000c0
 80092d8:	200000c4 	.word	0x200000c4

080092dc <_sbrk_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	4c06      	ldr	r4, [pc, #24]	; (80092f8 <_sbrk_r+0x1c>)
 80092e0:	2300      	movs	r3, #0
 80092e2:	4605      	mov	r5, r0
 80092e4:	4608      	mov	r0, r1
 80092e6:	6023      	str	r3, [r4, #0]
 80092e8:	f7f8 f80c 	bl	8001304 <_sbrk>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d102      	bne.n	80092f6 <_sbrk_r+0x1a>
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	b103      	cbz	r3, 80092f6 <_sbrk_r+0x1a>
 80092f4:	602b      	str	r3, [r5, #0]
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	20000a54 	.word	0x20000a54

080092fc <siprintf>:
 80092fc:	b40e      	push	{r1, r2, r3}
 80092fe:	b500      	push	{lr}
 8009300:	b09c      	sub	sp, #112	; 0x70
 8009302:	ab1d      	add	r3, sp, #116	; 0x74
 8009304:	9002      	str	r0, [sp, #8]
 8009306:	9006      	str	r0, [sp, #24]
 8009308:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800930c:	4809      	ldr	r0, [pc, #36]	; (8009334 <siprintf+0x38>)
 800930e:	9107      	str	r1, [sp, #28]
 8009310:	9104      	str	r1, [sp, #16]
 8009312:	4909      	ldr	r1, [pc, #36]	; (8009338 <siprintf+0x3c>)
 8009314:	f853 2b04 	ldr.w	r2, [r3], #4
 8009318:	9105      	str	r1, [sp, #20]
 800931a:	6800      	ldr	r0, [r0, #0]
 800931c:	9301      	str	r3, [sp, #4]
 800931e:	a902      	add	r1, sp, #8
 8009320:	f000 f868 	bl	80093f4 <_svfiprintf_r>
 8009324:	9b02      	ldr	r3, [sp, #8]
 8009326:	2200      	movs	r2, #0
 8009328:	701a      	strb	r2, [r3, #0]
 800932a:	b01c      	add	sp, #112	; 0x70
 800932c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009330:	b003      	add	sp, #12
 8009332:	4770      	bx	lr
 8009334:	2000002c 	.word	0x2000002c
 8009338:	ffff0208 	.word	0xffff0208

0800933c <__malloc_lock>:
 800933c:	4770      	bx	lr

0800933e <__malloc_unlock>:
 800933e:	4770      	bx	lr

08009340 <__ssputs_r>:
 8009340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009344:	688e      	ldr	r6, [r1, #8]
 8009346:	429e      	cmp	r6, r3
 8009348:	4682      	mov	sl, r0
 800934a:	460c      	mov	r4, r1
 800934c:	4690      	mov	r8, r2
 800934e:	4699      	mov	r9, r3
 8009350:	d837      	bhi.n	80093c2 <__ssputs_r+0x82>
 8009352:	898a      	ldrh	r2, [r1, #12]
 8009354:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009358:	d031      	beq.n	80093be <__ssputs_r+0x7e>
 800935a:	6825      	ldr	r5, [r4, #0]
 800935c:	6909      	ldr	r1, [r1, #16]
 800935e:	1a6f      	subs	r7, r5, r1
 8009360:	6965      	ldr	r5, [r4, #20]
 8009362:	2302      	movs	r3, #2
 8009364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009368:	fb95 f5f3 	sdiv	r5, r5, r3
 800936c:	f109 0301 	add.w	r3, r9, #1
 8009370:	443b      	add	r3, r7
 8009372:	429d      	cmp	r5, r3
 8009374:	bf38      	it	cc
 8009376:	461d      	movcc	r5, r3
 8009378:	0553      	lsls	r3, r2, #21
 800937a:	d530      	bpl.n	80093de <__ssputs_r+0x9e>
 800937c:	4629      	mov	r1, r5
 800937e:	f7ff ff53 	bl	8009228 <_malloc_r>
 8009382:	4606      	mov	r6, r0
 8009384:	b950      	cbnz	r0, 800939c <__ssputs_r+0x5c>
 8009386:	230c      	movs	r3, #12
 8009388:	f8ca 3000 	str.w	r3, [sl]
 800938c:	89a3      	ldrh	r3, [r4, #12]
 800938e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009392:	81a3      	strh	r3, [r4, #12]
 8009394:	f04f 30ff 	mov.w	r0, #4294967295
 8009398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800939c:	463a      	mov	r2, r7
 800939e:	6921      	ldr	r1, [r4, #16]
 80093a0:	f7ff fee0 	bl	8009164 <memcpy>
 80093a4:	89a3      	ldrh	r3, [r4, #12]
 80093a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ae:	81a3      	strh	r3, [r4, #12]
 80093b0:	6126      	str	r6, [r4, #16]
 80093b2:	6165      	str	r5, [r4, #20]
 80093b4:	443e      	add	r6, r7
 80093b6:	1bed      	subs	r5, r5, r7
 80093b8:	6026      	str	r6, [r4, #0]
 80093ba:	60a5      	str	r5, [r4, #8]
 80093bc:	464e      	mov	r6, r9
 80093be:	454e      	cmp	r6, r9
 80093c0:	d900      	bls.n	80093c4 <__ssputs_r+0x84>
 80093c2:	464e      	mov	r6, r9
 80093c4:	4632      	mov	r2, r6
 80093c6:	4641      	mov	r1, r8
 80093c8:	6820      	ldr	r0, [r4, #0]
 80093ca:	f000 fa93 	bl	80098f4 <memmove>
 80093ce:	68a3      	ldr	r3, [r4, #8]
 80093d0:	1b9b      	subs	r3, r3, r6
 80093d2:	60a3      	str	r3, [r4, #8]
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	441e      	add	r6, r3
 80093d8:	6026      	str	r6, [r4, #0]
 80093da:	2000      	movs	r0, #0
 80093dc:	e7dc      	b.n	8009398 <__ssputs_r+0x58>
 80093de:	462a      	mov	r2, r5
 80093e0:	f000 faa1 	bl	8009926 <_realloc_r>
 80093e4:	4606      	mov	r6, r0
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d1e2      	bne.n	80093b0 <__ssputs_r+0x70>
 80093ea:	6921      	ldr	r1, [r4, #16]
 80093ec:	4650      	mov	r0, sl
 80093ee:	f7ff fecd 	bl	800918c <_free_r>
 80093f2:	e7c8      	b.n	8009386 <__ssputs_r+0x46>

080093f4 <_svfiprintf_r>:
 80093f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f8:	461d      	mov	r5, r3
 80093fa:	898b      	ldrh	r3, [r1, #12]
 80093fc:	061f      	lsls	r7, r3, #24
 80093fe:	b09d      	sub	sp, #116	; 0x74
 8009400:	4680      	mov	r8, r0
 8009402:	460c      	mov	r4, r1
 8009404:	4616      	mov	r6, r2
 8009406:	d50f      	bpl.n	8009428 <_svfiprintf_r+0x34>
 8009408:	690b      	ldr	r3, [r1, #16]
 800940a:	b96b      	cbnz	r3, 8009428 <_svfiprintf_r+0x34>
 800940c:	2140      	movs	r1, #64	; 0x40
 800940e:	f7ff ff0b 	bl	8009228 <_malloc_r>
 8009412:	6020      	str	r0, [r4, #0]
 8009414:	6120      	str	r0, [r4, #16]
 8009416:	b928      	cbnz	r0, 8009424 <_svfiprintf_r+0x30>
 8009418:	230c      	movs	r3, #12
 800941a:	f8c8 3000 	str.w	r3, [r8]
 800941e:	f04f 30ff 	mov.w	r0, #4294967295
 8009422:	e0c8      	b.n	80095b6 <_svfiprintf_r+0x1c2>
 8009424:	2340      	movs	r3, #64	; 0x40
 8009426:	6163      	str	r3, [r4, #20]
 8009428:	2300      	movs	r3, #0
 800942a:	9309      	str	r3, [sp, #36]	; 0x24
 800942c:	2320      	movs	r3, #32
 800942e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009432:	2330      	movs	r3, #48	; 0x30
 8009434:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009438:	9503      	str	r5, [sp, #12]
 800943a:	f04f 0b01 	mov.w	fp, #1
 800943e:	4637      	mov	r7, r6
 8009440:	463d      	mov	r5, r7
 8009442:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009446:	b10b      	cbz	r3, 800944c <_svfiprintf_r+0x58>
 8009448:	2b25      	cmp	r3, #37	; 0x25
 800944a:	d13e      	bne.n	80094ca <_svfiprintf_r+0xd6>
 800944c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009450:	d00b      	beq.n	800946a <_svfiprintf_r+0x76>
 8009452:	4653      	mov	r3, sl
 8009454:	4632      	mov	r2, r6
 8009456:	4621      	mov	r1, r4
 8009458:	4640      	mov	r0, r8
 800945a:	f7ff ff71 	bl	8009340 <__ssputs_r>
 800945e:	3001      	adds	r0, #1
 8009460:	f000 80a4 	beq.w	80095ac <_svfiprintf_r+0x1b8>
 8009464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009466:	4453      	add	r3, sl
 8009468:	9309      	str	r3, [sp, #36]	; 0x24
 800946a:	783b      	ldrb	r3, [r7, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 809d 	beq.w	80095ac <_svfiprintf_r+0x1b8>
 8009472:	2300      	movs	r3, #0
 8009474:	f04f 32ff 	mov.w	r2, #4294967295
 8009478:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800947c:	9304      	str	r3, [sp, #16]
 800947e:	9307      	str	r3, [sp, #28]
 8009480:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009484:	931a      	str	r3, [sp, #104]	; 0x68
 8009486:	462f      	mov	r7, r5
 8009488:	2205      	movs	r2, #5
 800948a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800948e:	4850      	ldr	r0, [pc, #320]	; (80095d0 <_svfiprintf_r+0x1dc>)
 8009490:	f7f6 fe9e 	bl	80001d0 <memchr>
 8009494:	9b04      	ldr	r3, [sp, #16]
 8009496:	b9d0      	cbnz	r0, 80094ce <_svfiprintf_r+0xda>
 8009498:	06d9      	lsls	r1, r3, #27
 800949a:	bf44      	itt	mi
 800949c:	2220      	movmi	r2, #32
 800949e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094a2:	071a      	lsls	r2, r3, #28
 80094a4:	bf44      	itt	mi
 80094a6:	222b      	movmi	r2, #43	; 0x2b
 80094a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094ac:	782a      	ldrb	r2, [r5, #0]
 80094ae:	2a2a      	cmp	r2, #42	; 0x2a
 80094b0:	d015      	beq.n	80094de <_svfiprintf_r+0xea>
 80094b2:	9a07      	ldr	r2, [sp, #28]
 80094b4:	462f      	mov	r7, r5
 80094b6:	2000      	movs	r0, #0
 80094b8:	250a      	movs	r5, #10
 80094ba:	4639      	mov	r1, r7
 80094bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094c0:	3b30      	subs	r3, #48	; 0x30
 80094c2:	2b09      	cmp	r3, #9
 80094c4:	d94d      	bls.n	8009562 <_svfiprintf_r+0x16e>
 80094c6:	b1b8      	cbz	r0, 80094f8 <_svfiprintf_r+0x104>
 80094c8:	e00f      	b.n	80094ea <_svfiprintf_r+0xf6>
 80094ca:	462f      	mov	r7, r5
 80094cc:	e7b8      	b.n	8009440 <_svfiprintf_r+0x4c>
 80094ce:	4a40      	ldr	r2, [pc, #256]	; (80095d0 <_svfiprintf_r+0x1dc>)
 80094d0:	1a80      	subs	r0, r0, r2
 80094d2:	fa0b f000 	lsl.w	r0, fp, r0
 80094d6:	4318      	orrs	r0, r3
 80094d8:	9004      	str	r0, [sp, #16]
 80094da:	463d      	mov	r5, r7
 80094dc:	e7d3      	b.n	8009486 <_svfiprintf_r+0x92>
 80094de:	9a03      	ldr	r2, [sp, #12]
 80094e0:	1d11      	adds	r1, r2, #4
 80094e2:	6812      	ldr	r2, [r2, #0]
 80094e4:	9103      	str	r1, [sp, #12]
 80094e6:	2a00      	cmp	r2, #0
 80094e8:	db01      	blt.n	80094ee <_svfiprintf_r+0xfa>
 80094ea:	9207      	str	r2, [sp, #28]
 80094ec:	e004      	b.n	80094f8 <_svfiprintf_r+0x104>
 80094ee:	4252      	negs	r2, r2
 80094f0:	f043 0302 	orr.w	r3, r3, #2
 80094f4:	9207      	str	r2, [sp, #28]
 80094f6:	9304      	str	r3, [sp, #16]
 80094f8:	783b      	ldrb	r3, [r7, #0]
 80094fa:	2b2e      	cmp	r3, #46	; 0x2e
 80094fc:	d10c      	bne.n	8009518 <_svfiprintf_r+0x124>
 80094fe:	787b      	ldrb	r3, [r7, #1]
 8009500:	2b2a      	cmp	r3, #42	; 0x2a
 8009502:	d133      	bne.n	800956c <_svfiprintf_r+0x178>
 8009504:	9b03      	ldr	r3, [sp, #12]
 8009506:	1d1a      	adds	r2, r3, #4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	9203      	str	r2, [sp, #12]
 800950c:	2b00      	cmp	r3, #0
 800950e:	bfb8      	it	lt
 8009510:	f04f 33ff 	movlt.w	r3, #4294967295
 8009514:	3702      	adds	r7, #2
 8009516:	9305      	str	r3, [sp, #20]
 8009518:	4d2e      	ldr	r5, [pc, #184]	; (80095d4 <_svfiprintf_r+0x1e0>)
 800951a:	7839      	ldrb	r1, [r7, #0]
 800951c:	2203      	movs	r2, #3
 800951e:	4628      	mov	r0, r5
 8009520:	f7f6 fe56 	bl	80001d0 <memchr>
 8009524:	b138      	cbz	r0, 8009536 <_svfiprintf_r+0x142>
 8009526:	2340      	movs	r3, #64	; 0x40
 8009528:	1b40      	subs	r0, r0, r5
 800952a:	fa03 f000 	lsl.w	r0, r3, r0
 800952e:	9b04      	ldr	r3, [sp, #16]
 8009530:	4303      	orrs	r3, r0
 8009532:	3701      	adds	r7, #1
 8009534:	9304      	str	r3, [sp, #16]
 8009536:	7839      	ldrb	r1, [r7, #0]
 8009538:	4827      	ldr	r0, [pc, #156]	; (80095d8 <_svfiprintf_r+0x1e4>)
 800953a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800953e:	2206      	movs	r2, #6
 8009540:	1c7e      	adds	r6, r7, #1
 8009542:	f7f6 fe45 	bl	80001d0 <memchr>
 8009546:	2800      	cmp	r0, #0
 8009548:	d038      	beq.n	80095bc <_svfiprintf_r+0x1c8>
 800954a:	4b24      	ldr	r3, [pc, #144]	; (80095dc <_svfiprintf_r+0x1e8>)
 800954c:	bb13      	cbnz	r3, 8009594 <_svfiprintf_r+0x1a0>
 800954e:	9b03      	ldr	r3, [sp, #12]
 8009550:	3307      	adds	r3, #7
 8009552:	f023 0307 	bic.w	r3, r3, #7
 8009556:	3308      	adds	r3, #8
 8009558:	9303      	str	r3, [sp, #12]
 800955a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800955c:	444b      	add	r3, r9
 800955e:	9309      	str	r3, [sp, #36]	; 0x24
 8009560:	e76d      	b.n	800943e <_svfiprintf_r+0x4a>
 8009562:	fb05 3202 	mla	r2, r5, r2, r3
 8009566:	2001      	movs	r0, #1
 8009568:	460f      	mov	r7, r1
 800956a:	e7a6      	b.n	80094ba <_svfiprintf_r+0xc6>
 800956c:	2300      	movs	r3, #0
 800956e:	3701      	adds	r7, #1
 8009570:	9305      	str	r3, [sp, #20]
 8009572:	4619      	mov	r1, r3
 8009574:	250a      	movs	r5, #10
 8009576:	4638      	mov	r0, r7
 8009578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800957c:	3a30      	subs	r2, #48	; 0x30
 800957e:	2a09      	cmp	r2, #9
 8009580:	d903      	bls.n	800958a <_svfiprintf_r+0x196>
 8009582:	2b00      	cmp	r3, #0
 8009584:	d0c8      	beq.n	8009518 <_svfiprintf_r+0x124>
 8009586:	9105      	str	r1, [sp, #20]
 8009588:	e7c6      	b.n	8009518 <_svfiprintf_r+0x124>
 800958a:	fb05 2101 	mla	r1, r5, r1, r2
 800958e:	2301      	movs	r3, #1
 8009590:	4607      	mov	r7, r0
 8009592:	e7f0      	b.n	8009576 <_svfiprintf_r+0x182>
 8009594:	ab03      	add	r3, sp, #12
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	4622      	mov	r2, r4
 800959a:	4b11      	ldr	r3, [pc, #68]	; (80095e0 <_svfiprintf_r+0x1ec>)
 800959c:	a904      	add	r1, sp, #16
 800959e:	4640      	mov	r0, r8
 80095a0:	f3af 8000 	nop.w
 80095a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80095a8:	4681      	mov	r9, r0
 80095aa:	d1d6      	bne.n	800955a <_svfiprintf_r+0x166>
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	065b      	lsls	r3, r3, #25
 80095b0:	f53f af35 	bmi.w	800941e <_svfiprintf_r+0x2a>
 80095b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095b6:	b01d      	add	sp, #116	; 0x74
 80095b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095bc:	ab03      	add	r3, sp, #12
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	4622      	mov	r2, r4
 80095c2:	4b07      	ldr	r3, [pc, #28]	; (80095e0 <_svfiprintf_r+0x1ec>)
 80095c4:	a904      	add	r1, sp, #16
 80095c6:	4640      	mov	r0, r8
 80095c8:	f000 f882 	bl	80096d0 <_printf_i>
 80095cc:	e7ea      	b.n	80095a4 <_svfiprintf_r+0x1b0>
 80095ce:	bf00      	nop
 80095d0:	08009b74 	.word	0x08009b74
 80095d4:	08009b7a 	.word	0x08009b7a
 80095d8:	08009b7e 	.word	0x08009b7e
 80095dc:	00000000 	.word	0x00000000
 80095e0:	08009341 	.word	0x08009341

080095e4 <_printf_common>:
 80095e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e8:	4691      	mov	r9, r2
 80095ea:	461f      	mov	r7, r3
 80095ec:	688a      	ldr	r2, [r1, #8]
 80095ee:	690b      	ldr	r3, [r1, #16]
 80095f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095f4:	4293      	cmp	r3, r2
 80095f6:	bfb8      	it	lt
 80095f8:	4613      	movlt	r3, r2
 80095fa:	f8c9 3000 	str.w	r3, [r9]
 80095fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009602:	4606      	mov	r6, r0
 8009604:	460c      	mov	r4, r1
 8009606:	b112      	cbz	r2, 800960e <_printf_common+0x2a>
 8009608:	3301      	adds	r3, #1
 800960a:	f8c9 3000 	str.w	r3, [r9]
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	0699      	lsls	r1, r3, #26
 8009612:	bf42      	ittt	mi
 8009614:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009618:	3302      	addmi	r3, #2
 800961a:	f8c9 3000 	strmi.w	r3, [r9]
 800961e:	6825      	ldr	r5, [r4, #0]
 8009620:	f015 0506 	ands.w	r5, r5, #6
 8009624:	d107      	bne.n	8009636 <_printf_common+0x52>
 8009626:	f104 0a19 	add.w	sl, r4, #25
 800962a:	68e3      	ldr	r3, [r4, #12]
 800962c:	f8d9 2000 	ldr.w	r2, [r9]
 8009630:	1a9b      	subs	r3, r3, r2
 8009632:	42ab      	cmp	r3, r5
 8009634:	dc28      	bgt.n	8009688 <_printf_common+0xa4>
 8009636:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800963a:	6822      	ldr	r2, [r4, #0]
 800963c:	3300      	adds	r3, #0
 800963e:	bf18      	it	ne
 8009640:	2301      	movne	r3, #1
 8009642:	0692      	lsls	r2, r2, #26
 8009644:	d42d      	bmi.n	80096a2 <_printf_common+0xbe>
 8009646:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800964a:	4639      	mov	r1, r7
 800964c:	4630      	mov	r0, r6
 800964e:	47c0      	blx	r8
 8009650:	3001      	adds	r0, #1
 8009652:	d020      	beq.n	8009696 <_printf_common+0xb2>
 8009654:	6823      	ldr	r3, [r4, #0]
 8009656:	68e5      	ldr	r5, [r4, #12]
 8009658:	f8d9 2000 	ldr.w	r2, [r9]
 800965c:	f003 0306 	and.w	r3, r3, #6
 8009660:	2b04      	cmp	r3, #4
 8009662:	bf08      	it	eq
 8009664:	1aad      	subeq	r5, r5, r2
 8009666:	68a3      	ldr	r3, [r4, #8]
 8009668:	6922      	ldr	r2, [r4, #16]
 800966a:	bf0c      	ite	eq
 800966c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009670:	2500      	movne	r5, #0
 8009672:	4293      	cmp	r3, r2
 8009674:	bfc4      	itt	gt
 8009676:	1a9b      	subgt	r3, r3, r2
 8009678:	18ed      	addgt	r5, r5, r3
 800967a:	f04f 0900 	mov.w	r9, #0
 800967e:	341a      	adds	r4, #26
 8009680:	454d      	cmp	r5, r9
 8009682:	d11a      	bne.n	80096ba <_printf_common+0xd6>
 8009684:	2000      	movs	r0, #0
 8009686:	e008      	b.n	800969a <_printf_common+0xb6>
 8009688:	2301      	movs	r3, #1
 800968a:	4652      	mov	r2, sl
 800968c:	4639      	mov	r1, r7
 800968e:	4630      	mov	r0, r6
 8009690:	47c0      	blx	r8
 8009692:	3001      	adds	r0, #1
 8009694:	d103      	bne.n	800969e <_printf_common+0xba>
 8009696:	f04f 30ff 	mov.w	r0, #4294967295
 800969a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800969e:	3501      	adds	r5, #1
 80096a0:	e7c3      	b.n	800962a <_printf_common+0x46>
 80096a2:	18e1      	adds	r1, r4, r3
 80096a4:	1c5a      	adds	r2, r3, #1
 80096a6:	2030      	movs	r0, #48	; 0x30
 80096a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096ac:	4422      	add	r2, r4
 80096ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096b6:	3302      	adds	r3, #2
 80096b8:	e7c5      	b.n	8009646 <_printf_common+0x62>
 80096ba:	2301      	movs	r3, #1
 80096bc:	4622      	mov	r2, r4
 80096be:	4639      	mov	r1, r7
 80096c0:	4630      	mov	r0, r6
 80096c2:	47c0      	blx	r8
 80096c4:	3001      	adds	r0, #1
 80096c6:	d0e6      	beq.n	8009696 <_printf_common+0xb2>
 80096c8:	f109 0901 	add.w	r9, r9, #1
 80096cc:	e7d8      	b.n	8009680 <_printf_common+0x9c>
	...

080096d0 <_printf_i>:
 80096d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80096d8:	460c      	mov	r4, r1
 80096da:	7e09      	ldrb	r1, [r1, #24]
 80096dc:	b085      	sub	sp, #20
 80096de:	296e      	cmp	r1, #110	; 0x6e
 80096e0:	4617      	mov	r7, r2
 80096e2:	4606      	mov	r6, r0
 80096e4:	4698      	mov	r8, r3
 80096e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096e8:	f000 80b3 	beq.w	8009852 <_printf_i+0x182>
 80096ec:	d822      	bhi.n	8009734 <_printf_i+0x64>
 80096ee:	2963      	cmp	r1, #99	; 0x63
 80096f0:	d036      	beq.n	8009760 <_printf_i+0x90>
 80096f2:	d80a      	bhi.n	800970a <_printf_i+0x3a>
 80096f4:	2900      	cmp	r1, #0
 80096f6:	f000 80b9 	beq.w	800986c <_printf_i+0x19c>
 80096fa:	2958      	cmp	r1, #88	; 0x58
 80096fc:	f000 8083 	beq.w	8009806 <_printf_i+0x136>
 8009700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009704:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009708:	e032      	b.n	8009770 <_printf_i+0xa0>
 800970a:	2964      	cmp	r1, #100	; 0x64
 800970c:	d001      	beq.n	8009712 <_printf_i+0x42>
 800970e:	2969      	cmp	r1, #105	; 0x69
 8009710:	d1f6      	bne.n	8009700 <_printf_i+0x30>
 8009712:	6820      	ldr	r0, [r4, #0]
 8009714:	6813      	ldr	r3, [r2, #0]
 8009716:	0605      	lsls	r5, r0, #24
 8009718:	f103 0104 	add.w	r1, r3, #4
 800971c:	d52a      	bpl.n	8009774 <_printf_i+0xa4>
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6011      	str	r1, [r2, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	da03      	bge.n	800972e <_printf_i+0x5e>
 8009726:	222d      	movs	r2, #45	; 0x2d
 8009728:	425b      	negs	r3, r3
 800972a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800972e:	486f      	ldr	r0, [pc, #444]	; (80098ec <_printf_i+0x21c>)
 8009730:	220a      	movs	r2, #10
 8009732:	e039      	b.n	80097a8 <_printf_i+0xd8>
 8009734:	2973      	cmp	r1, #115	; 0x73
 8009736:	f000 809d 	beq.w	8009874 <_printf_i+0x1a4>
 800973a:	d808      	bhi.n	800974e <_printf_i+0x7e>
 800973c:	296f      	cmp	r1, #111	; 0x6f
 800973e:	d020      	beq.n	8009782 <_printf_i+0xb2>
 8009740:	2970      	cmp	r1, #112	; 0x70
 8009742:	d1dd      	bne.n	8009700 <_printf_i+0x30>
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	f043 0320 	orr.w	r3, r3, #32
 800974a:	6023      	str	r3, [r4, #0]
 800974c:	e003      	b.n	8009756 <_printf_i+0x86>
 800974e:	2975      	cmp	r1, #117	; 0x75
 8009750:	d017      	beq.n	8009782 <_printf_i+0xb2>
 8009752:	2978      	cmp	r1, #120	; 0x78
 8009754:	d1d4      	bne.n	8009700 <_printf_i+0x30>
 8009756:	2378      	movs	r3, #120	; 0x78
 8009758:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800975c:	4864      	ldr	r0, [pc, #400]	; (80098f0 <_printf_i+0x220>)
 800975e:	e055      	b.n	800980c <_printf_i+0x13c>
 8009760:	6813      	ldr	r3, [r2, #0]
 8009762:	1d19      	adds	r1, r3, #4
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	6011      	str	r1, [r2, #0]
 8009768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800976c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009770:	2301      	movs	r3, #1
 8009772:	e08c      	b.n	800988e <_printf_i+0x1be>
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6011      	str	r1, [r2, #0]
 8009778:	f010 0f40 	tst.w	r0, #64	; 0x40
 800977c:	bf18      	it	ne
 800977e:	b21b      	sxthne	r3, r3
 8009780:	e7cf      	b.n	8009722 <_printf_i+0x52>
 8009782:	6813      	ldr	r3, [r2, #0]
 8009784:	6825      	ldr	r5, [r4, #0]
 8009786:	1d18      	adds	r0, r3, #4
 8009788:	6010      	str	r0, [r2, #0]
 800978a:	0628      	lsls	r0, r5, #24
 800978c:	d501      	bpl.n	8009792 <_printf_i+0xc2>
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	e002      	b.n	8009798 <_printf_i+0xc8>
 8009792:	0668      	lsls	r0, r5, #25
 8009794:	d5fb      	bpl.n	800978e <_printf_i+0xbe>
 8009796:	881b      	ldrh	r3, [r3, #0]
 8009798:	4854      	ldr	r0, [pc, #336]	; (80098ec <_printf_i+0x21c>)
 800979a:	296f      	cmp	r1, #111	; 0x6f
 800979c:	bf14      	ite	ne
 800979e:	220a      	movne	r2, #10
 80097a0:	2208      	moveq	r2, #8
 80097a2:	2100      	movs	r1, #0
 80097a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097a8:	6865      	ldr	r5, [r4, #4]
 80097aa:	60a5      	str	r5, [r4, #8]
 80097ac:	2d00      	cmp	r5, #0
 80097ae:	f2c0 8095 	blt.w	80098dc <_printf_i+0x20c>
 80097b2:	6821      	ldr	r1, [r4, #0]
 80097b4:	f021 0104 	bic.w	r1, r1, #4
 80097b8:	6021      	str	r1, [r4, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d13d      	bne.n	800983a <_printf_i+0x16a>
 80097be:	2d00      	cmp	r5, #0
 80097c0:	f040 808e 	bne.w	80098e0 <_printf_i+0x210>
 80097c4:	4665      	mov	r5, ip
 80097c6:	2a08      	cmp	r2, #8
 80097c8:	d10b      	bne.n	80097e2 <_printf_i+0x112>
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	07db      	lsls	r3, r3, #31
 80097ce:	d508      	bpl.n	80097e2 <_printf_i+0x112>
 80097d0:	6923      	ldr	r3, [r4, #16]
 80097d2:	6862      	ldr	r2, [r4, #4]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	bfde      	ittt	le
 80097d8:	2330      	movle	r3, #48	; 0x30
 80097da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097e2:	ebac 0305 	sub.w	r3, ip, r5
 80097e6:	6123      	str	r3, [r4, #16]
 80097e8:	f8cd 8000 	str.w	r8, [sp]
 80097ec:	463b      	mov	r3, r7
 80097ee:	aa03      	add	r2, sp, #12
 80097f0:	4621      	mov	r1, r4
 80097f2:	4630      	mov	r0, r6
 80097f4:	f7ff fef6 	bl	80095e4 <_printf_common>
 80097f8:	3001      	adds	r0, #1
 80097fa:	d14d      	bne.n	8009898 <_printf_i+0x1c8>
 80097fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009800:	b005      	add	sp, #20
 8009802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009806:	4839      	ldr	r0, [pc, #228]	; (80098ec <_printf_i+0x21c>)
 8009808:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800980c:	6813      	ldr	r3, [r2, #0]
 800980e:	6821      	ldr	r1, [r4, #0]
 8009810:	1d1d      	adds	r5, r3, #4
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	6015      	str	r5, [r2, #0]
 8009816:	060a      	lsls	r2, r1, #24
 8009818:	d50b      	bpl.n	8009832 <_printf_i+0x162>
 800981a:	07ca      	lsls	r2, r1, #31
 800981c:	bf44      	itt	mi
 800981e:	f041 0120 	orrmi.w	r1, r1, #32
 8009822:	6021      	strmi	r1, [r4, #0]
 8009824:	b91b      	cbnz	r3, 800982e <_printf_i+0x15e>
 8009826:	6822      	ldr	r2, [r4, #0]
 8009828:	f022 0220 	bic.w	r2, r2, #32
 800982c:	6022      	str	r2, [r4, #0]
 800982e:	2210      	movs	r2, #16
 8009830:	e7b7      	b.n	80097a2 <_printf_i+0xd2>
 8009832:	064d      	lsls	r5, r1, #25
 8009834:	bf48      	it	mi
 8009836:	b29b      	uxthmi	r3, r3
 8009838:	e7ef      	b.n	800981a <_printf_i+0x14a>
 800983a:	4665      	mov	r5, ip
 800983c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009840:	fb02 3311 	mls	r3, r2, r1, r3
 8009844:	5cc3      	ldrb	r3, [r0, r3]
 8009846:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800984a:	460b      	mov	r3, r1
 800984c:	2900      	cmp	r1, #0
 800984e:	d1f5      	bne.n	800983c <_printf_i+0x16c>
 8009850:	e7b9      	b.n	80097c6 <_printf_i+0xf6>
 8009852:	6813      	ldr	r3, [r2, #0]
 8009854:	6825      	ldr	r5, [r4, #0]
 8009856:	6961      	ldr	r1, [r4, #20]
 8009858:	1d18      	adds	r0, r3, #4
 800985a:	6010      	str	r0, [r2, #0]
 800985c:	0628      	lsls	r0, r5, #24
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	d501      	bpl.n	8009866 <_printf_i+0x196>
 8009862:	6019      	str	r1, [r3, #0]
 8009864:	e002      	b.n	800986c <_printf_i+0x19c>
 8009866:	066a      	lsls	r2, r5, #25
 8009868:	d5fb      	bpl.n	8009862 <_printf_i+0x192>
 800986a:	8019      	strh	r1, [r3, #0]
 800986c:	2300      	movs	r3, #0
 800986e:	6123      	str	r3, [r4, #16]
 8009870:	4665      	mov	r5, ip
 8009872:	e7b9      	b.n	80097e8 <_printf_i+0x118>
 8009874:	6813      	ldr	r3, [r2, #0]
 8009876:	1d19      	adds	r1, r3, #4
 8009878:	6011      	str	r1, [r2, #0]
 800987a:	681d      	ldr	r5, [r3, #0]
 800987c:	6862      	ldr	r2, [r4, #4]
 800987e:	2100      	movs	r1, #0
 8009880:	4628      	mov	r0, r5
 8009882:	f7f6 fca5 	bl	80001d0 <memchr>
 8009886:	b108      	cbz	r0, 800988c <_printf_i+0x1bc>
 8009888:	1b40      	subs	r0, r0, r5
 800988a:	6060      	str	r0, [r4, #4]
 800988c:	6863      	ldr	r3, [r4, #4]
 800988e:	6123      	str	r3, [r4, #16]
 8009890:	2300      	movs	r3, #0
 8009892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009896:	e7a7      	b.n	80097e8 <_printf_i+0x118>
 8009898:	6923      	ldr	r3, [r4, #16]
 800989a:	462a      	mov	r2, r5
 800989c:	4639      	mov	r1, r7
 800989e:	4630      	mov	r0, r6
 80098a0:	47c0      	blx	r8
 80098a2:	3001      	adds	r0, #1
 80098a4:	d0aa      	beq.n	80097fc <_printf_i+0x12c>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	079b      	lsls	r3, r3, #30
 80098aa:	d413      	bmi.n	80098d4 <_printf_i+0x204>
 80098ac:	68e0      	ldr	r0, [r4, #12]
 80098ae:	9b03      	ldr	r3, [sp, #12]
 80098b0:	4298      	cmp	r0, r3
 80098b2:	bfb8      	it	lt
 80098b4:	4618      	movlt	r0, r3
 80098b6:	e7a3      	b.n	8009800 <_printf_i+0x130>
 80098b8:	2301      	movs	r3, #1
 80098ba:	464a      	mov	r2, r9
 80098bc:	4639      	mov	r1, r7
 80098be:	4630      	mov	r0, r6
 80098c0:	47c0      	blx	r8
 80098c2:	3001      	adds	r0, #1
 80098c4:	d09a      	beq.n	80097fc <_printf_i+0x12c>
 80098c6:	3501      	adds	r5, #1
 80098c8:	68e3      	ldr	r3, [r4, #12]
 80098ca:	9a03      	ldr	r2, [sp, #12]
 80098cc:	1a9b      	subs	r3, r3, r2
 80098ce:	42ab      	cmp	r3, r5
 80098d0:	dcf2      	bgt.n	80098b8 <_printf_i+0x1e8>
 80098d2:	e7eb      	b.n	80098ac <_printf_i+0x1dc>
 80098d4:	2500      	movs	r5, #0
 80098d6:	f104 0919 	add.w	r9, r4, #25
 80098da:	e7f5      	b.n	80098c8 <_printf_i+0x1f8>
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1ac      	bne.n	800983a <_printf_i+0x16a>
 80098e0:	7803      	ldrb	r3, [r0, #0]
 80098e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098ea:	e76c      	b.n	80097c6 <_printf_i+0xf6>
 80098ec:	08009b85 	.word	0x08009b85
 80098f0:	08009b96 	.word	0x08009b96

080098f4 <memmove>:
 80098f4:	4288      	cmp	r0, r1
 80098f6:	b510      	push	{r4, lr}
 80098f8:	eb01 0302 	add.w	r3, r1, r2
 80098fc:	d807      	bhi.n	800990e <memmove+0x1a>
 80098fe:	1e42      	subs	r2, r0, #1
 8009900:	4299      	cmp	r1, r3
 8009902:	d00a      	beq.n	800991a <memmove+0x26>
 8009904:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009908:	f802 4f01 	strb.w	r4, [r2, #1]!
 800990c:	e7f8      	b.n	8009900 <memmove+0xc>
 800990e:	4283      	cmp	r3, r0
 8009910:	d9f5      	bls.n	80098fe <memmove+0xa>
 8009912:	1881      	adds	r1, r0, r2
 8009914:	1ad2      	subs	r2, r2, r3
 8009916:	42d3      	cmn	r3, r2
 8009918:	d100      	bne.n	800991c <memmove+0x28>
 800991a:	bd10      	pop	{r4, pc}
 800991c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009920:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009924:	e7f7      	b.n	8009916 <memmove+0x22>

08009926 <_realloc_r>:
 8009926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009928:	4607      	mov	r7, r0
 800992a:	4614      	mov	r4, r2
 800992c:	460e      	mov	r6, r1
 800992e:	b921      	cbnz	r1, 800993a <_realloc_r+0x14>
 8009930:	4611      	mov	r1, r2
 8009932:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009936:	f7ff bc77 	b.w	8009228 <_malloc_r>
 800993a:	b922      	cbnz	r2, 8009946 <_realloc_r+0x20>
 800993c:	f7ff fc26 	bl	800918c <_free_r>
 8009940:	4625      	mov	r5, r4
 8009942:	4628      	mov	r0, r5
 8009944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009946:	f000 f814 	bl	8009972 <_malloc_usable_size_r>
 800994a:	42a0      	cmp	r0, r4
 800994c:	d20f      	bcs.n	800996e <_realloc_r+0x48>
 800994e:	4621      	mov	r1, r4
 8009950:	4638      	mov	r0, r7
 8009952:	f7ff fc69 	bl	8009228 <_malloc_r>
 8009956:	4605      	mov	r5, r0
 8009958:	2800      	cmp	r0, #0
 800995a:	d0f2      	beq.n	8009942 <_realloc_r+0x1c>
 800995c:	4631      	mov	r1, r6
 800995e:	4622      	mov	r2, r4
 8009960:	f7ff fc00 	bl	8009164 <memcpy>
 8009964:	4631      	mov	r1, r6
 8009966:	4638      	mov	r0, r7
 8009968:	f7ff fc10 	bl	800918c <_free_r>
 800996c:	e7e9      	b.n	8009942 <_realloc_r+0x1c>
 800996e:	4635      	mov	r5, r6
 8009970:	e7e7      	b.n	8009942 <_realloc_r+0x1c>

08009972 <_malloc_usable_size_r>:
 8009972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009976:	1f18      	subs	r0, r3, #4
 8009978:	2b00      	cmp	r3, #0
 800997a:	bfbc      	itt	lt
 800997c:	580b      	ldrlt	r3, [r1, r0]
 800997e:	18c0      	addlt	r0, r0, r3
 8009980:	4770      	bx	lr
	...

08009984 <_init>:
 8009984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009986:	bf00      	nop
 8009988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998a:	bc08      	pop	{r3}
 800998c:	469e      	mov	lr, r3
 800998e:	4770      	bx	lr

08009990 <_fini>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	bf00      	nop
 8009994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009996:	bc08      	pop	{r3}
 8009998:	469e      	mov	lr, r3
 800999a:	4770      	bx	lr
